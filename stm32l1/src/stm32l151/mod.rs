#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 4;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG();
    fn PVD();
    fn TAMPER_STAMP();
    fn RTC_WKUP();
    fn FLASH();
    fn RCC();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn DMA1_CHANNEL1();
    fn DMA1_CHANNEL2();
    fn DMA1_CHANNEL3();
    fn DMA1_CHANNEL4();
    fn DMA1_CHANNEL5();
    fn DMA1_CHANNEL6();
    fn DMA1_CHANNEL7();
    fn ADC1();
    fn USB_HP();
    fn USB_LP();
    fn DAC();
    fn COMP_CA();
    fn EXTI9_5();
    fn LCD();
    fn TIM9();
    fn TIM10();
    fn TIM11();
    fn TIM2();
    fn TIM3();
    fn TIM4();
    fn I2C1_EV();
    fn I2C1_ER();
    fn I2C2_EV();
    fn I2C2_ER();
    fn SPI1();
    fn SPI2();
    fn USART1();
    fn USART2();
    fn USART3();
    fn EXTI15_10();
    fn RTC_ALARM();
    fn USB_FS_WKUP();
    fn TIM6();
    fn TIM7();
    fn SDIO();
    fn TIM5();
    fn SPI3();
    fn UART4();
    fn UART5();
    fn DMA2_CH1();
    fn DMA2_CH2();
    fn DMA2_CH3();
    fn DMA2_CH4();
    fn DMA2_CH5();
    fn AES();
    fn COMP_ACQ();
}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 57] = [
    Vector { _handler: WWDG },
    Vector { _handler: PVD },
    Vector {
        _handler: TAMPER_STAMP,
    },
    Vector { _handler: RTC_WKUP },
    Vector { _handler: FLASH },
    Vector { _handler: RCC },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector {
        _handler: DMA1_CHANNEL1,
    },
    Vector {
        _handler: DMA1_CHANNEL2,
    },
    Vector {
        _handler: DMA1_CHANNEL3,
    },
    Vector {
        _handler: DMA1_CHANNEL4,
    },
    Vector {
        _handler: DMA1_CHANNEL5,
    },
    Vector {
        _handler: DMA1_CHANNEL6,
    },
    Vector {
        _handler: DMA1_CHANNEL7,
    },
    Vector { _handler: ADC1 },
    Vector { _handler: USB_HP },
    Vector { _handler: USB_LP },
    Vector { _handler: DAC },
    Vector { _handler: COMP_CA },
    Vector { _handler: EXTI9_5 },
    Vector { _handler: LCD },
    Vector { _handler: TIM9 },
    Vector { _handler: TIM10 },
    Vector { _handler: TIM11 },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _handler: TIM4 },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: I2C2_EV },
    Vector { _handler: I2C2_ER },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART3 },
    Vector {
        _handler: EXTI15_10,
    },
    Vector {
        _handler: RTC_ALARM,
    },
    Vector {
        _handler: USB_FS_WKUP,
    },
    Vector { _handler: TIM6 },
    Vector { _handler: TIM7 },
    Vector { _handler: SDIO },
    Vector { _handler: TIM5 },
    Vector { _handler: SPI3 },
    Vector { _handler: UART4 },
    Vector { _handler: UART5 },
    Vector { _handler: DMA2_CH1 },
    Vector { _handler: DMA2_CH2 },
    Vector { _handler: DMA2_CH3 },
    Vector { _handler: DMA2_CH4 },
    Vector { _handler: DMA2_CH5 },
    Vector { _handler: AES },
    Vector { _handler: COMP_ACQ },
];
#[doc = r"Enumeration of all the interrupts"]
#[derive(Copy, Clone, Debug)]
#[repr(u8)]
pub enum Interrupt {
    #[doc = "0 - Window Watchdog interrupt"]
    WWDG = 0,
    #[doc = "1 - PVD through EXTI Line detection interrupt"]
    PVD = 1,
    #[doc = "2 - Tamper and TimeStamp through EXTI line interrupts"]
    TAMPER_STAMP = 2,
    #[doc = "3 - RTC Wakeup through EXTI line interrupt"]
    RTC_WKUP = 3,
    #[doc = "4 - Flash global interrupt"]
    FLASH = 4,
    #[doc = "5 - RCC global interrupt"]
    RCC = 5,
    #[doc = "6 - EXTI Line0 interrupt"]
    EXTI0 = 6,
    #[doc = "7 - EXTI Line1 interrupt"]
    EXTI1 = 7,
    #[doc = "8 - EXTI Line2 interrupt"]
    EXTI2 = 8,
    #[doc = "9 - EXTI Line3 interrupt"]
    EXTI3 = 9,
    #[doc = "10 - EXTI Line4 interrupt"]
    EXTI4 = 10,
    #[doc = "11 - DMA1 Channel1 global interrupt"]
    DMA1_CHANNEL1 = 11,
    #[doc = "12 - DMA1 Channel2 global interrupt"]
    DMA1_CHANNEL2 = 12,
    #[doc = "13 - DMA1 Channel3 global interrupt"]
    DMA1_CHANNEL3 = 13,
    #[doc = "14 - DMA1 Channel4 global interrupt"]
    DMA1_CHANNEL4 = 14,
    #[doc = "15 - DMA1 Channel5 global interrupt"]
    DMA1_CHANNEL5 = 15,
    #[doc = "16 - DMA1 Channel6 global interrupt"]
    DMA1_CHANNEL6 = 16,
    #[doc = "17 - DMA1 Channel7 global interrupt"]
    DMA1_CHANNEL7 = 17,
    #[doc = "18 - ADC1 global interrupt"]
    ADC1 = 18,
    #[doc = "19 - USB High priority interrupt"]
    USB_HP = 19,
    #[doc = "20 - USB Low priority interrupt"]
    USB_LP = 20,
    #[doc = "21 - DAC interrupt"]
    DAC = 21,
    #[doc = "22 - Comparator wakeup through EXTI line (21 and 22) interrupt/Channel acquisition interrupt"]
    COMP_CA = 22,
    #[doc = "23 - EXTI Line\\[9:5\\]
interrupts"]
    EXTI9_5 = 23,
    #[doc = "24 - LCD global interrupt"]
    LCD = 24,
    #[doc = "25 - TIM9 global interrupt"]
    TIM9 = 25,
    #[doc = "26 - TIM10 global interrupt"]
    TIM10 = 26,
    #[doc = "27 - TIM11 global interrupt"]
    TIM11 = 27,
    #[doc = "28 - TIM2 global interrupt"]
    TIM2 = 28,
    #[doc = "29 - TIM3 global interrupt"]
    TIM3 = 29,
    #[doc = "30 - TIM4 global interrupt"]
    TIM4 = 30,
    #[doc = "31 - I2C1 event interrupt"]
    I2C1_EV = 31,
    #[doc = "32 - I2C1 error interrupt"]
    I2C1_ER = 32,
    #[doc = "33 - I2C2 event interrupt"]
    I2C2_EV = 33,
    #[doc = "34 - I2C2 error interrupt"]
    I2C2_ER = 34,
    #[doc = "35 - SPI1 global interrupt"]
    SPI1 = 35,
    #[doc = "36 - SPI2 global interrupt"]
    SPI2 = 36,
    #[doc = "37 - USART1 global interrupt"]
    USART1 = 37,
    #[doc = "38 - USART2 global interrupt"]
    USART2 = 38,
    #[doc = "39 - USART3 global interrupt"]
    USART3 = 39,
    #[doc = "40 - EXTI Line\\[15:10\\]
interrupts"]
    EXTI15_10 = 40,
    #[doc = "41 - RTC Alarms (A and B) through EXTI line interrupt"]
    RTC_ALARM = 41,
    #[doc = "42 - USB Device FS Wakeup through EXTI line interrupt"]
    USB_FS_WKUP = 42,
    #[doc = "43 - TIM6 global interrupt"]
    TIM6 = 43,
    #[doc = "44 - TIM7 global interrupt"]
    TIM7 = 44,
    #[doc = "45 - SDIO global interrupt"]
    SDIO = 45,
    #[doc = "46 - TIM5 global interrupt"]
    TIM5 = 46,
    #[doc = "47 - SPI3 global interrupt"]
    SPI3 = 47,
    #[doc = "48 - UART4 Global interrupt"]
    UART4 = 48,
    #[doc = "49 - UART5 Global interrupt"]
    UART5 = 49,
    #[doc = "50 - DMA2 Channel 1 interrupt"]
    DMA2_CH1 = 50,
    #[doc = "51 - DMA2 Channel 2 interrupt"]
    DMA2_CH2 = 51,
    #[doc = "52 - DMA2 Channel 3 interrupt"]
    DMA2_CH3 = 52,
    #[doc = "53 - DMA2 Channel 4 interrupt"]
    DMA2_CH4 = 53,
    #[doc = "54 - DMA2 Channel 5 interrupt"]
    DMA2_CH5 = 54,
    #[doc = "55 - AES global interrupt"]
    AES = 55,
    #[doc = "56 - Comparator Channel Acquisition interrupt"]
    COMP_ACQ = 56,
}
unsafe impl bare_metal::Nr for Interrupt {
    #[inline(always)]
    fn nr(&self) -> u8 {
        *self as u8
    }
}
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[doc = "Advanced encrytion standard hardware accelerator"]
pub struct AES {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AES {}
impl AES {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aes::RegisterBlock {
        0x5006_0000 as *const _
    }
}
impl Deref for AES {
    type Target = aes::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AES::ptr() }
    }
}
#[doc = "Advanced encrytion standard hardware accelerator"]
pub mod aes {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register"]
        pub cr: CR,
        #[doc = "0x04 - Status register"]
        pub sr: SR,
        #[doc = "0x08 - Data input register"]
        pub dinr: DINR,
        #[doc = "0x0c - Data output register"]
        pub doutr: DOUTR,
        #[doc = "0x10 - AES Key register 0"]
        pub keyr0: KEYR0,
        #[doc = "0x14 - AES Key register 1"]
        pub keyr1: KEYR1,
        #[doc = "0x18 - AES Key register 2"]
        pub keyr2: KEYR2,
        #[doc = "0x1c - AES Key register 3"]
        pub keyr3: KEYR3,
        #[doc = "0x20 - Initialization Vector Register 0"]
        pub ivr0: IVR0,
        #[doc = "0x24 - Initialization Vector Register 1"]
        pub ivr1: IVR1,
        #[doc = "0x28 - Initialization Vector Register 2"]
        pub ivr2: IVR2,
        #[doc = "0x2c - Initialization Vector Register 3"]
        pub ivr3: IVR3,
    }
    #[doc = "control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAOUTEN`"]
        pub type DMAOUTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAOUTEN`"]
        pub struct DMAOUTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAOUTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DMAINEN`"]
        pub type DMAINEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAINEN`"]
        pub struct DMAINEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAINEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `ERRIE`"]
        pub type ERRIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ERRIE`"]
        pub struct ERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CCFIE`"]
        pub type CCFIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCFIE`"]
        pub struct CCFIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCFIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `ERRC`"]
        pub type ERRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ERRC`"]
        pub struct ERRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CCFC`"]
        pub type CCFC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCFC`"]
        pub struct CCFC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCFC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CHMOD`"]
        pub type CHMOD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CHMOD`"]
        pub struct CHMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHMOD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `MODE`"]
        pub type MODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODE`"]
        pub struct MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | (((value as u32) & 0x03) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `DATATYPE`"]
        pub type DATATYPE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATATYPE`"]
        pub struct DATATYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATATYPE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 1)) | (((value as u32) & 0x03) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 12 - Enable DMA management of data output phase"]
            #[inline(always)]
            pub fn dmaouten(&self) -> DMAOUTEN_R {
                DMAOUTEN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Enable DMA management of data input phase"]
            #[inline(always)]
            pub fn dmainen(&self) -> DMAINEN_R {
                DMAINEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&self) -> ERRIE_R {
                ERRIE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CCF flag interrupt enable"]
            #[inline(always)]
            pub fn ccfie(&self) -> CCFIE_R {
                CCFIE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Error clear"]
            #[inline(always)]
            pub fn errc(&self) -> ERRC_R {
                ERRC_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Computation Complete Flag Clear"]
            #[inline(always)]
            pub fn ccfc(&self) -> CCFC_R {
                CCFC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - AES chaining mode"]
            #[inline(always)]
            pub fn chmod(&self) -> CHMOD_R {
                CHMOD_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bits 3:4 - AES operating mode"]
            #[inline(always)]
            pub fn mode(&self) -> MODE_R {
                MODE_R::new(((self.bits >> 3) & 0x03) as u8)
            }
            #[doc = "Bits 1:2 - Data type selection"]
            #[inline(always)]
            pub fn datatype(&self) -> DATATYPE_R {
                DATATYPE_R::new(((self.bits >> 1) & 0x03) as u8)
            }
            #[doc = "Bit 0 - AES enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 12 - Enable DMA management of data output phase"]
            #[inline(always)]
            pub fn dmaouten(&mut self) -> DMAOUTEN_W {
                DMAOUTEN_W { w: self }
            }
            #[doc = "Bit 11 - Enable DMA management of data input phase"]
            #[inline(always)]
            pub fn dmainen(&mut self) -> DMAINEN_W {
                DMAINEN_W { w: self }
            }
            #[doc = "Bit 10 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&mut self) -> ERRIE_W {
                ERRIE_W { w: self }
            }
            #[doc = "Bit 9 - CCF flag interrupt enable"]
            #[inline(always)]
            pub fn ccfie(&mut self) -> CCFIE_W {
                CCFIE_W { w: self }
            }
            #[doc = "Bit 8 - Error clear"]
            #[inline(always)]
            pub fn errc(&mut self) -> ERRC_W {
                ERRC_W { w: self }
            }
            #[doc = "Bit 7 - Computation Complete Flag Clear"]
            #[inline(always)]
            pub fn ccfc(&mut self) -> CCFC_W {
                CCFC_W { w: self }
            }
            #[doc = "Bits 5:6 - AES chaining mode"]
            #[inline(always)]
            pub fn chmod(&mut self) -> CHMOD_W {
                CHMOD_W { w: self }
            }
            #[doc = "Bits 3:4 - AES operating mode"]
            #[inline(always)]
            pub fn mode(&mut self) -> MODE_W {
                MODE_W { w: self }
            }
            #[doc = "Bits 1:2 - Data type selection"]
            #[inline(always)]
            pub fn datatype(&mut self) -> DATATYPE_W {
                DATATYPE_W { w: self }
            }
            #[doc = "Bit 0 - AES enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "Status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "Status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Reader of field `WRERR`"]
        pub type WRERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RDERR`"]
        pub type RDERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CCF`"]
        pub type CCF_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 2 - Write error flag"]
            #[inline(always)]
            pub fn wrerr(&self) -> WRERR_R {
                WRERR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Read error flag"]
            #[inline(always)]
            pub fn rderr(&self) -> RDERR_R {
                RDERR_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Computation complete flag"]
            #[inline(always)]
            pub fn ccf(&self) -> CCF_R {
                CCF_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Data input register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dinr](dinr) module"]
    pub type DINR = crate::Reg<u32, _DINR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DINR;
    #[doc = "`read()` method returns [dinr::R](dinr::R) reader structure"]
    impl crate::Readable for DINR {}
    #[doc = "`write(|w| ..)` method takes [dinr::W](dinr::W) writer structure"]
    impl crate::Writable for DINR {}
    #[doc = "Data input register"]
    pub mod dinr {
        #[doc = "Reader of register DINR"]
        pub type R = crate::R<u32, super::DINR>;
        #[doc = "Writer for register DINR"]
        pub type W = crate::W<u32, super::DINR>;
        #[doc = "Register DINR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DINR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DINR`"]
        pub type DINR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `DINR`"]
        pub struct DINR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DINR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Data input"]
            #[inline(always)]
            pub fn dinr(&self) -> DINR_R {
                DINR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Data input"]
            #[inline(always)]
            pub fn dinr(&mut self) -> DINR_W {
                DINR_W { w: self }
            }
        }
    }
    #[doc = "Data output register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [doutr](doutr) module"]
    pub type DOUTR = crate::Reg<u32, _DOUTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOUTR;
    #[doc = "`read()` method returns [doutr::R](doutr::R) reader structure"]
    impl crate::Readable for DOUTR {}
    #[doc = "Data output register"]
    pub mod doutr {
        #[doc = "Reader of register DOUTR"]
        pub type R = crate::R<u32, super::DOUTR>;
        #[doc = "Reader of field `DOUTR`"]
        pub type DOUTR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Data output"]
            #[inline(always)]
            pub fn doutr(&self) -> DOUTR_R {
                DOUTR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "AES Key register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [keyr0](keyr0) module"]
    pub type KEYR0 = crate::Reg<u32, _KEYR0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _KEYR0;
    #[doc = "`read()` method returns [keyr0::R](keyr0::R) reader structure"]
    impl crate::Readable for KEYR0 {}
    #[doc = "`write(|w| ..)` method takes [keyr0::W](keyr0::W) writer structure"]
    impl crate::Writable for KEYR0 {}
    #[doc = "AES Key register 0"]
    pub mod keyr0 {
        #[doc = "Reader of register KEYR0"]
        pub type R = crate::R<u32, super::KEYR0>;
        #[doc = "Writer for register KEYR0"]
        pub type W = crate::W<u32, super::KEYR0>;
        #[doc = "Register KEYR0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::KEYR0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `KEYR0`"]
        pub type KEYR0_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `KEYR0`"]
        pub struct KEYR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEYR0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - AES key"]
            #[inline(always)]
            pub fn keyr0(&self) -> KEYR0_R {
                KEYR0_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - AES key"]
            #[inline(always)]
            pub fn keyr0(&mut self) -> KEYR0_W {
                KEYR0_W { w: self }
            }
        }
    }
    #[doc = "AES Key register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [keyr1](keyr1) module"]
    pub type KEYR1 = crate::Reg<u32, _KEYR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _KEYR1;
    #[doc = "`read()` method returns [keyr1::R](keyr1::R) reader structure"]
    impl crate::Readable for KEYR1 {}
    #[doc = "`write(|w| ..)` method takes [keyr1::W](keyr1::W) writer structure"]
    impl crate::Writable for KEYR1 {}
    #[doc = "AES Key register 1"]
    pub mod keyr1 {
        #[doc = "Reader of register KEYR1"]
        pub type R = crate::R<u32, super::KEYR1>;
        #[doc = "Writer for register KEYR1"]
        pub type W = crate::W<u32, super::KEYR1>;
        #[doc = "Register KEYR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::KEYR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `KEYR1`"]
        pub type KEYR1_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `KEYR1`"]
        pub struct KEYR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEYR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - AES key"]
            #[inline(always)]
            pub fn keyr1(&self) -> KEYR1_R {
                KEYR1_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - AES key"]
            #[inline(always)]
            pub fn keyr1(&mut self) -> KEYR1_W {
                KEYR1_W { w: self }
            }
        }
    }
    #[doc = "AES Key register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [keyr2](keyr2) module"]
    pub type KEYR2 = crate::Reg<u32, _KEYR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _KEYR2;
    #[doc = "`read()` method returns [keyr2::R](keyr2::R) reader structure"]
    impl crate::Readable for KEYR2 {}
    #[doc = "`write(|w| ..)` method takes [keyr2::W](keyr2::W) writer structure"]
    impl crate::Writable for KEYR2 {}
    #[doc = "AES Key register 2"]
    pub mod keyr2 {
        #[doc = "Reader of register KEYR2"]
        pub type R = crate::R<u32, super::KEYR2>;
        #[doc = "Writer for register KEYR2"]
        pub type W = crate::W<u32, super::KEYR2>;
        #[doc = "Register KEYR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::KEYR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `KEYR2`"]
        pub type KEYR2_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `KEYR2`"]
        pub struct KEYR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEYR2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - AES key"]
            #[inline(always)]
            pub fn keyr2(&self) -> KEYR2_R {
                KEYR2_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - AES key"]
            #[inline(always)]
            pub fn keyr2(&mut self) -> KEYR2_W {
                KEYR2_W { w: self }
            }
        }
    }
    #[doc = "AES Key register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [keyr3](keyr3) module"]
    pub type KEYR3 = crate::Reg<u32, _KEYR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _KEYR3;
    #[doc = "`read()` method returns [keyr3::R](keyr3::R) reader structure"]
    impl crate::Readable for KEYR3 {}
    #[doc = "`write(|w| ..)` method takes [keyr3::W](keyr3::W) writer structure"]
    impl crate::Writable for KEYR3 {}
    #[doc = "AES Key register 3"]
    pub mod keyr3 {
        #[doc = "Reader of register KEYR3"]
        pub type R = crate::R<u32, super::KEYR3>;
        #[doc = "Writer for register KEYR3"]
        pub type W = crate::W<u32, super::KEYR3>;
        #[doc = "Register KEYR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::KEYR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `KEYR3`"]
        pub type KEYR3_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `KEYR3`"]
        pub struct KEYR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEYR3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - AES key"]
            #[inline(always)]
            pub fn keyr3(&self) -> KEYR3_R {
                KEYR3_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - AES key"]
            #[inline(always)]
            pub fn keyr3(&mut self) -> KEYR3_W {
                KEYR3_W { w: self }
            }
        }
    }
    #[doc = "Initialization Vector Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ivr0](ivr0) module"]
    pub type IVR0 = crate::Reg<u32, _IVR0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IVR0;
    #[doc = "`read()` method returns [ivr0::R](ivr0::R) reader structure"]
    impl crate::Readable for IVR0 {}
    #[doc = "`write(|w| ..)` method takes [ivr0::W](ivr0::W) writer structure"]
    impl crate::Writable for IVR0 {}
    #[doc = "Initialization Vector Register 0"]
    pub mod ivr0 {
        #[doc = "Reader of register IVR0"]
        pub type R = crate::R<u32, super::IVR0>;
        #[doc = "Writer for register IVR0"]
        pub type W = crate::W<u32, super::IVR0>;
        #[doc = "Register IVR0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::IVR0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IVR0`"]
        pub type IVR0_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `IVR0`"]
        pub struct IVR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IVR0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Initialization Vector Register"]
            #[inline(always)]
            pub fn ivr0(&self) -> IVR0_R {
                IVR0_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Initialization Vector Register"]
            #[inline(always)]
            pub fn ivr0(&mut self) -> IVR0_W {
                IVR0_W { w: self }
            }
        }
    }
    #[doc = "Initialization Vector Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ivr1](ivr1) module"]
    pub type IVR1 = crate::Reg<u32, _IVR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IVR1;
    #[doc = "`read()` method returns [ivr1::R](ivr1::R) reader structure"]
    impl crate::Readable for IVR1 {}
    #[doc = "`write(|w| ..)` method takes [ivr1::W](ivr1::W) writer structure"]
    impl crate::Writable for IVR1 {}
    #[doc = "Initialization Vector Register 1"]
    pub mod ivr1 {
        #[doc = "Reader of register IVR1"]
        pub type R = crate::R<u32, super::IVR1>;
        #[doc = "Writer for register IVR1"]
        pub type W = crate::W<u32, super::IVR1>;
        #[doc = "Register IVR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::IVR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IVR1`"]
        pub type IVR1_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `IVR1`"]
        pub struct IVR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IVR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Initialization Vector Register"]
            #[inline(always)]
            pub fn ivr1(&self) -> IVR1_R {
                IVR1_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Initialization Vector Register"]
            #[inline(always)]
            pub fn ivr1(&mut self) -> IVR1_W {
                IVR1_W { w: self }
            }
        }
    }
    #[doc = "Initialization Vector Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ivr2](ivr2) module"]
    pub type IVR2 = crate::Reg<u32, _IVR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IVR2;
    #[doc = "`read()` method returns [ivr2::R](ivr2::R) reader structure"]
    impl crate::Readable for IVR2 {}
    #[doc = "`write(|w| ..)` method takes [ivr2::W](ivr2::W) writer structure"]
    impl crate::Writable for IVR2 {}
    #[doc = "Initialization Vector Register 2"]
    pub mod ivr2 {
        #[doc = "Reader of register IVR2"]
        pub type R = crate::R<u32, super::IVR2>;
        #[doc = "Writer for register IVR2"]
        pub type W = crate::W<u32, super::IVR2>;
        #[doc = "Register IVR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::IVR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IVR2`"]
        pub type IVR2_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `IVR2`"]
        pub struct IVR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IVR2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Initialization Vector Register"]
            #[inline(always)]
            pub fn ivr2(&self) -> IVR2_R {
                IVR2_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Initialization Vector Register"]
            #[inline(always)]
            pub fn ivr2(&mut self) -> IVR2_W {
                IVR2_W { w: self }
            }
        }
    }
    #[doc = "Initialization Vector Register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ivr3](ivr3) module"]
    pub type IVR3 = crate::Reg<u32, _IVR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IVR3;
    #[doc = "`read()` method returns [ivr3::R](ivr3::R) reader structure"]
    impl crate::Readable for IVR3 {}
    #[doc = "`write(|w| ..)` method takes [ivr3::W](ivr3::W) writer structure"]
    impl crate::Writable for IVR3 {}
    #[doc = "Initialization Vector Register 3"]
    pub mod ivr3 {
        #[doc = "Reader of register IVR3"]
        pub type R = crate::R<u32, super::IVR3>;
        #[doc = "Writer for register IVR3"]
        pub type W = crate::W<u32, super::IVR3>;
        #[doc = "Register IVR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::IVR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IVR3`"]
        pub type IVR3_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `IVR3`"]
        pub struct IVR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IVR3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Initialization Vector Register"]
            #[inline(always)]
            pub fn ivr3(&self) -> IVR3_R {
                IVR3_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Initialization Vector Register"]
            #[inline(always)]
            pub fn ivr3(&mut self) -> IVR3_W {
                IVR3_W { w: self }
            }
        }
    }
}
#[doc = "Comparators"]
pub struct COMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for COMP {}
impl COMP {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const comp::RegisterBlock {
        0x4000_7c00 as *const _
    }
}
impl Deref for COMP {
    type Target = comp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*COMP::ptr() }
    }
}
#[doc = "Comparators"]
pub mod comp {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - comparator control and status register"]
        pub csr: CSR,
    }
    #[doc = "comparator control and status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr](csr) module"]
    pub type CSR = crate::Reg<u32, _CSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CSR;
    #[doc = "`read()` method returns [csr::R](csr::R) reader structure"]
    impl crate::Readable for CSR {}
    #[doc = "`write(|w| ..)` method takes [csr::W](csr::W) writer structure"]
    impl crate::Writable for CSR {}
    #[doc = "comparator control and status register"]
    pub mod csr {
        #[doc = "Reader of register CSR"]
        pub type R = crate::R<u32, super::CSR>;
        #[doc = "Writer for register CSR"]
        pub type W = crate::W<u32, super::CSR>;
        #[doc = "Register CSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TSUSP`"]
        pub type TSUSP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSUSP`"]
        pub struct TSUSP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSUSP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `CAIF`"]
        pub type CAIF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAIE`"]
        pub type CAIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAIE`"]
        pub struct CAIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `RCH13`"]
        pub type RCH13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RCH13`"]
        pub struct RCH13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RCH13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `FCH8`"]
        pub type FCH8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FCH8`"]
        pub struct FCH8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FCH8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `FCH3`"]
        pub type FCH3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FCH3`"]
        pub struct FCH3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FCH3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `OUTSEL`"]
        pub type OUTSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OUTSEL`"]
        pub struct OUTSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OUTSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 21)) | (((value as u32) & 0x07) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `INSEL`"]
        pub type INSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `INSEL`"]
        pub struct INSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 18)) | (((value as u32) & 0x07) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `WNDWE`"]
        pub type WNDWE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WNDWE`"]
        pub struct WNDWE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WNDWE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `VREFOUTEN`"]
        pub type VREFOUTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VREFOUTEN`"]
        pub struct VREFOUTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VREFOUTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CMP2OUT`"]
        pub type CMP2OUT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SPEED`"]
        pub type SPEED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPEED`"]
        pub struct SPEED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPEED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `CMP1OUT`"]
        pub type CMP1OUT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SW1`"]
        pub type SW1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SW1`"]
        pub struct SW1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SW1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `CMP1EN`"]
        pub type CMP1EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CMP1EN`"]
        pub struct CMP1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMP1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `PD400K`"]
        pub type PD400K_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD400K`"]
        pub struct PD400K_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD400K_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `PD10K`"]
        pub type PD10K_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD10K`"]
        pub struct PD10K_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD10K_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PU400K`"]
        pub type PU400K_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU400K`"]
        pub struct PU400K_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU400K_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `PU10K`"]
        pub type PU10K_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU10K`"]
        pub struct PU10K_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU10K_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - Suspend Timer Mode"]
            #[inline(always)]
            pub fn tsusp(&self) -> TSUSP_R {
                TSUSP_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Channel acquisition interrupt flag"]
            #[inline(always)]
            pub fn caif(&self) -> CAIF_R {
                CAIF_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Channel Acquisition Interrupt Enable / Clear"]
            #[inline(always)]
            pub fn caie(&self) -> CAIE_R {
                CAIE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Select GPIO port PC3 as re-routed ADC input channel CH13."]
            #[inline(always)]
            pub fn rch13(&self) -> RCH13_R {
                RCH13_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Select GPIO port PB0 as fast ADC input channel CH8."]
            #[inline(always)]
            pub fn fch8(&self) -> FCH8_R {
                FCH8_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Select GPIO port PA3 as fast ADC input channel CH3."]
            #[inline(always)]
            pub fn fch3(&self) -> FCH3_R {
                FCH3_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bits 21:23 - Comparator 2 output selection"]
            #[inline(always)]
            pub fn outsel(&self) -> OUTSEL_R {
                OUTSEL_R::new(((self.bits >> 21) & 0x07) as u8)
            }
            #[doc = "Bits 18:20 - Inverted input selection"]
            #[inline(always)]
            pub fn insel(&self) -> INSEL_R {
                INSEL_R::new(((self.bits >> 18) & 0x07) as u8)
            }
            #[doc = "Bit 17 - Window mode enable"]
            #[inline(always)]
            pub fn wndwe(&self) -> WNDWE_R {
                WNDWE_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - VREFINT output enable"]
            #[inline(always)]
            pub fn vrefouten(&self) -> VREFOUTEN_R {
                VREFOUTEN_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Comparator 2 output"]
            #[inline(always)]
            pub fn cmp2out(&self) -> CMP2OUT_R {
                CMP2OUT_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Comparator 2 speed mode"]
            #[inline(always)]
            pub fn speed(&self) -> SPEED_R {
                SPEED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Comparator 1 output"]
            #[inline(always)]
            pub fn cmp1out(&self) -> CMP1OUT_R {
                CMP1OUT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 5 - SW1 analog switch enable"]
            #[inline(always)]
            pub fn sw1(&self) -> SW1_R {
                SW1_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Comparator 1 enable"]
            #[inline(always)]
            pub fn cmp1en(&self) -> CMP1EN_R {
                CMP1EN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - 400 kO pull-down resistor"]
            #[inline(always)]
            pub fn pd400k(&self) -> PD400K_R {
                PD400K_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - 10 kO pull-down resistor"]
            #[inline(always)]
            pub fn pd10k(&self) -> PD10K_R {
                PD10K_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - 400 kO pull-up resistor"]
            #[inline(always)]
            pub fn pu400k(&self) -> PU400K_R {
                PU400K_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - 10 kO pull-up resistor"]
            #[inline(always)]
            pub fn pu10k(&self) -> PU10K_R {
                PU10K_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - Suspend Timer Mode"]
            #[inline(always)]
            pub fn tsusp(&mut self) -> TSUSP_W {
                TSUSP_W { w: self }
            }
            #[doc = "Bit 29 - Channel Acquisition Interrupt Enable / Clear"]
            #[inline(always)]
            pub fn caie(&mut self) -> CAIE_W {
                CAIE_W { w: self }
            }
            #[doc = "Bit 28 - Select GPIO port PC3 as re-routed ADC input channel CH13."]
            #[inline(always)]
            pub fn rch13(&mut self) -> RCH13_W {
                RCH13_W { w: self }
            }
            #[doc = "Bit 27 - Select GPIO port PB0 as fast ADC input channel CH8."]
            #[inline(always)]
            pub fn fch8(&mut self) -> FCH8_W {
                FCH8_W { w: self }
            }
            #[doc = "Bit 26 - Select GPIO port PA3 as fast ADC input channel CH3."]
            #[inline(always)]
            pub fn fch3(&mut self) -> FCH3_W {
                FCH3_W { w: self }
            }
            #[doc = "Bits 21:23 - Comparator 2 output selection"]
            #[inline(always)]
            pub fn outsel(&mut self) -> OUTSEL_W {
                OUTSEL_W { w: self }
            }
            #[doc = "Bits 18:20 - Inverted input selection"]
            #[inline(always)]
            pub fn insel(&mut self) -> INSEL_W {
                INSEL_W { w: self }
            }
            #[doc = "Bit 17 - Window mode enable"]
            #[inline(always)]
            pub fn wndwe(&mut self) -> WNDWE_W {
                WNDWE_W { w: self }
            }
            #[doc = "Bit 16 - VREFINT output enable"]
            #[inline(always)]
            pub fn vrefouten(&mut self) -> VREFOUTEN_W {
                VREFOUTEN_W { w: self }
            }
            #[doc = "Bit 12 - Comparator 2 speed mode"]
            #[inline(always)]
            pub fn speed(&mut self) -> SPEED_W {
                SPEED_W { w: self }
            }
            #[doc = "Bit 5 - SW1 analog switch enable"]
            #[inline(always)]
            pub fn sw1(&mut self) -> SW1_W {
                SW1_W { w: self }
            }
            #[doc = "Bit 4 - Comparator 1 enable"]
            #[inline(always)]
            pub fn cmp1en(&mut self) -> CMP1EN_W {
                CMP1EN_W { w: self }
            }
            #[doc = "Bit 3 - 400 kO pull-down resistor"]
            #[inline(always)]
            pub fn pd400k(&mut self) -> PD400K_W {
                PD400K_W { w: self }
            }
            #[doc = "Bit 2 - 10 kO pull-down resistor"]
            #[inline(always)]
            pub fn pd10k(&mut self) -> PD10K_W {
                PD10K_W { w: self }
            }
            #[doc = "Bit 1 - 400 kO pull-up resistor"]
            #[inline(always)]
            pub fn pu400k(&mut self) -> PU400K_W {
                PU400K_W { w: self }
            }
            #[doc = "Bit 0 - 10 kO pull-up resistor"]
            #[inline(always)]
            pub fn pu10k(&mut self) -> PU10K_W {
                PU10K_W { w: self }
            }
        }
    }
}
#[doc = "CRC calculation unit"]
pub struct CRC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRC {}
impl CRC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const crc::RegisterBlock {
        0x4002_3000 as *const _
    }
}
impl Deref for CRC {
    type Target = crc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*CRC::ptr() }
    }
}
#[doc = "CRC calculation unit"]
pub mod crc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Data register"]
        pub dr: DR,
        #[doc = "0x04 - Independent data register"]
        pub idr: IDR,
        #[doc = "0x08 - Control register"]
        pub cr: CR,
    }
    #[doc = "Data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "`write(|w| ..)` method takes [dr::W](dr::W) writer structure"]
    impl crate::Writable for DR {}
    #[doc = "Data register"]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Writer for register DR"]
        pub type W = crate::W<u32, super::DR>;
        #[doc = "Register DR `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::DR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `DR`"]
        pub type DR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `DR`"]
        pub struct DR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Data Register"]
            #[inline(always)]
            pub fn dr(&self) -> DR_R {
                DR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Data Register"]
            #[inline(always)]
            pub fn dr(&mut self) -> DR_W {
                DR_W { w: self }
            }
        }
    }
    #[doc = "Independent data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idr](idr) module"]
    pub type IDR = crate::Reg<u32, _IDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IDR;
    #[doc = "`read()` method returns [idr::R](idr::R) reader structure"]
    impl crate::Readable for IDR {}
    #[doc = "`write(|w| ..)` method takes [idr::W](idr::W) writer structure"]
    impl crate::Writable for IDR {}
    #[doc = "Independent data register"]
    pub mod idr {
        #[doc = "Reader of register IDR"]
        pub type R = crate::R<u32, super::IDR>;
        #[doc = "Writer for register IDR"]
        pub type W = crate::W<u32, super::IDR>;
        #[doc = "Register IDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IDR`"]
        pub type IDR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IDR`"]
        pub struct IDR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Independent data register"]
            #[inline(always)]
            pub fn idr(&self) -> IDR_R {
                IDR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Independent data register"]
            #[inline(always)]
            pub fn idr(&mut self) -> IDR_W {
                IDR_W { w: self }
            }
        }
    }
    #[doc = "Control register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Control register"]
    pub mod cr {
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "RESET\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RESET_AW {
            #[doc = "1: Resets the CRC calculation unit and sets the data register to 0xFFFF FFFF"]
            RESET = 1,
        }
        impl From<RESET_AW> for bool {
            #[inline(always)]
            fn from(variant: RESET_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `RESET`"]
        pub struct RESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RESET_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the CRC calculation unit and sets the data register to 0xFFFF FFFF"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(RESET_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - RESET"]
            #[inline(always)]
            pub fn reset(&mut self) -> RESET_W {
                RESET_W { w: self }
            }
        }
    }
}
#[doc = "Digital-to-analog converter"]
pub struct DAC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DAC {}
impl DAC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dac::RegisterBlock {
        0x4000_7400 as *const _
    }
}
impl Deref for DAC {
    type Target = dac::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*DAC::ptr() }
    }
}
#[doc = "Digital-to-analog converter"]
pub mod dac {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register"]
        pub cr: CR,
        #[doc = "0x04 - software trigger register"]
        pub swtrigr: SWTRIGR,
        #[doc = "0x08 - channel1 12-bit right-aligned data holding register"]
        pub dhr12r1: DHR12R1,
        #[doc = "0x0c - channel1 12-bit left aligned data holding register"]
        pub dhr12l1: DHR12L1,
        #[doc = "0x10 - channel1 8-bit right aligned data holding register"]
        pub dhr8r1: DHR8R1,
        #[doc = "0x14 - channel2 12-bit right aligned data holding register"]
        pub dhr12r2: DHR12R2,
        #[doc = "0x18 - channel2 12-bit left aligned data holding register"]
        pub dhr12l2: DHR12L2,
        #[doc = "0x1c - channel2 8-bit right-aligned data holding register"]
        pub dhr8r2: DHR8R2,
        #[doc = "0x20 - Dual DAC 12-bit right-aligned data holding register"]
        pub dhr12rd: DHR12RD,
        #[doc = "0x24 - DUAL DAC 12-bit left aligned data holding register"]
        pub dhr12ld: DHR12LD,
        #[doc = "0x28 - DUAL DAC 8-bit right aligned data holding register"]
        pub dhr8rd: DHR8RD,
        #[doc = "0x2c - channel1 data output register"]
        pub dor1: DOR1,
        #[doc = "0x30 - channel2 data output register"]
        pub dor2: DOR2,
        #[doc = "0x34 - status register"]
        pub sr: SR,
    }
    #[doc = "control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "DAC channel2 DMA underrun interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DMAUDRIE2_A {
            #[doc = "0: DAC channel X DMA Underrun Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: DAC channel X DMA Underrun Interrupt enabled"]
            ENABLED = 1,
        }
        impl From<DMAUDRIE2_A> for bool {
            #[inline(always)]
            fn from(variant: DMAUDRIE2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DMAUDRIE2`"]
        pub type DMAUDRIE2_R = crate::R<bool, DMAUDRIE2_A>;
        impl DMAUDRIE2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DMAUDRIE2_A {
                match self.bits {
                    false => DMAUDRIE2_A::DISABLED,
                    true => DMAUDRIE2_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == DMAUDRIE2_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == DMAUDRIE2_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `DMAUDRIE2`"]
        pub struct DMAUDRIE2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAUDRIE2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DMAUDRIE2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DAC channel X DMA Underrun Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMAUDRIE2_A::DISABLED)
            }
            #[doc = "DAC channel X DMA Underrun Interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMAUDRIE2_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "DAC channel2 DMA enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DMAEN2_A {
            #[doc = "0: DAC channel X DMA mode disabled"]
            DISABLED = 0,
            #[doc = "1: DAC channel X DMA mode enabled"]
            ENABLED = 1,
        }
        impl From<DMAEN2_A> for bool {
            #[inline(always)]
            fn from(variant: DMAEN2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DMAEN2`"]
        pub type DMAEN2_R = crate::R<bool, DMAEN2_A>;
        impl DMAEN2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DMAEN2_A {
                match self.bits {
                    false => DMAEN2_A::DISABLED,
                    true => DMAEN2_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == DMAEN2_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == DMAEN2_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `DMAEN2`"]
        pub struct DMAEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAEN2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DMAEN2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DAC channel X DMA mode disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMAEN2_A::DISABLED)
            }
            #[doc = "DAC channel X DMA mode enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMAEN2_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `MAMP2`"]
        pub type MAMP2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MAMP2`"]
        pub struct MAMP2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MAMP2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "DAC channel2 noise/triangle wave generation enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum WAVE2_A {
            #[doc = "0: Wave generation disabled"]
            DISABLED = 0,
            #[doc = "1: Noise wave generation enabled"]
            NOISE = 1,
            #[doc = "2: Triangle wave generation enabled"]
            TRIANGLE = 2,
        }
        impl From<WAVE2_A> for u8 {
            #[inline(always)]
            fn from(variant: WAVE2_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `WAVE2`"]
        pub type WAVE2_R = crate::R<u8, WAVE2_A>;
        impl WAVE2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, WAVE2_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(WAVE2_A::DISABLED),
                    1 => Val(WAVE2_A::NOISE),
                    2 => Val(WAVE2_A::TRIANGLE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == WAVE2_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `NOISE`"]
            #[inline(always)]
            pub fn is_noise(&self) -> bool {
                *self == WAVE2_A::NOISE
            }
            #[doc = "Checks if the value of the field is `TRIANGLE`"]
            #[inline(always)]
            pub fn is_triangle(&self) -> bool {
                *self == WAVE2_A::TRIANGLE
            }
        }
        #[doc = "Write proxy for field `WAVE2`"]
        pub struct WAVE2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAVE2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WAVE2_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Wave generation disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(WAVE2_A::DISABLED)
            }
            #[doc = "Noise wave generation enabled"]
            #[inline(always)]
            pub fn noise(self) -> &'a mut W {
                self.variant(WAVE2_A::NOISE)
            }
            #[doc = "Triangle wave generation enabled"]
            #[inline(always)]
            pub fn triangle(self) -> &'a mut W {
                self.variant(WAVE2_A::TRIANGLE)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "DAC channel2 trigger selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum TSEL2_A {
            #[doc = "0: Timer 6 TRGO event"]
            TIM6_TRGO = 0,
            #[doc = "1: Timer 8 TRGO event"]
            TIM8_TRGO = 1,
            #[doc = "2: Timer 7 TRGO event"]
            TIM7_TRGO = 2,
            #[doc = "3: Timer 5 TRGO event"]
            TIM5_TRGO = 3,
            #[doc = "4: Timer 2 TRGO event"]
            TIM2_TRGO = 4,
            #[doc = "5: Timer 4 TRGO event"]
            TIM4_TRGO = 5,
            #[doc = "6: EXTI line9"]
            EXTI9 = 6,
            #[doc = "7: Software trigger"]
            SOFTWARE = 7,
        }
        impl From<TSEL2_A> for u8 {
            #[inline(always)]
            fn from(variant: TSEL2_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `TSEL2`"]
        pub type TSEL2_R = crate::R<u8, TSEL2_A>;
        impl TSEL2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TSEL2_A {
                match self.bits {
                    0 => TSEL2_A::TIM6_TRGO,
                    1 => TSEL2_A::TIM8_TRGO,
                    2 => TSEL2_A::TIM7_TRGO,
                    3 => TSEL2_A::TIM5_TRGO,
                    4 => TSEL2_A::TIM2_TRGO,
                    5 => TSEL2_A::TIM4_TRGO,
                    6 => TSEL2_A::EXTI9,
                    7 => TSEL2_A::SOFTWARE,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `TIM6_TRGO`"]
            #[inline(always)]
            pub fn is_tim6_trgo(&self) -> bool {
                *self == TSEL2_A::TIM6_TRGO
            }
            #[doc = "Checks if the value of the field is `TIM8_TRGO`"]
            #[inline(always)]
            pub fn is_tim8_trgo(&self) -> bool {
                *self == TSEL2_A::TIM8_TRGO
            }
            #[doc = "Checks if the value of the field is `TIM7_TRGO`"]
            #[inline(always)]
            pub fn is_tim7_trgo(&self) -> bool {
                *self == TSEL2_A::TIM7_TRGO
            }
            #[doc = "Checks if the value of the field is `TIM5_TRGO`"]
            #[inline(always)]
            pub fn is_tim5_trgo(&self) -> bool {
                *self == TSEL2_A::TIM5_TRGO
            }
            #[doc = "Checks if the value of the field is `TIM2_TRGO`"]
            #[inline(always)]
            pub fn is_tim2_trgo(&self) -> bool {
                *self == TSEL2_A::TIM2_TRGO
            }
            #[doc = "Checks if the value of the field is `TIM4_TRGO`"]
            #[inline(always)]
            pub fn is_tim4_trgo(&self) -> bool {
                *self == TSEL2_A::TIM4_TRGO
            }
            #[doc = "Checks if the value of the field is `EXTI9`"]
            #[inline(always)]
            pub fn is_exti9(&self) -> bool {
                *self == TSEL2_A::EXTI9
            }
            #[doc = "Checks if the value of the field is `SOFTWARE`"]
            #[inline(always)]
            pub fn is_software(&self) -> bool {
                *self == TSEL2_A::SOFTWARE
            }
        }
        #[doc = "Write proxy for field `TSEL2`"]
        pub struct TSEL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSEL2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TSEL2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Timer 6 TRGO event"]
            #[inline(always)]
            pub fn tim6_trgo(self) -> &'a mut W {
                self.variant(TSEL2_A::TIM6_TRGO)
            }
            #[doc = "Timer 8 TRGO event"]
            #[inline(always)]
            pub fn tim8_trgo(self) -> &'a mut W {
                self.variant(TSEL2_A::TIM8_TRGO)
            }
            #[doc = "Timer 7 TRGO event"]
            #[inline(always)]
            pub fn tim7_trgo(self) -> &'a mut W {
                self.variant(TSEL2_A::TIM7_TRGO)
            }
            #[doc = "Timer 5 TRGO event"]
            #[inline(always)]
            pub fn tim5_trgo(self) -> &'a mut W {
                self.variant(TSEL2_A::TIM5_TRGO)
            }
            #[doc = "Timer 2 TRGO event"]
            #[inline(always)]
            pub fn tim2_trgo(self) -> &'a mut W {
                self.variant(TSEL2_A::TIM2_TRGO)
            }
            #[doc = "Timer 4 TRGO event"]
            #[inline(always)]
            pub fn tim4_trgo(self) -> &'a mut W {
                self.variant(TSEL2_A::TIM4_TRGO)
            }
            #[doc = "EXTI line9"]
            #[inline(always)]
            pub fn exti9(self) -> &'a mut W {
                self.variant(TSEL2_A::EXTI9)
            }
            #[doc = "Software trigger"]
            #[inline(always)]
            pub fn software(self) -> &'a mut W {
                self.variant(TSEL2_A::SOFTWARE)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 19)) | (((value as u32) & 0x07) << 19);
                self.w
            }
        }
        #[doc = "DAC channel2 trigger enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TEN2_A {
            #[doc = "0: DAC channel X trigger disabled"]
            DISABLED = 0,
            #[doc = "1: DAC channel X trigger enabled"]
            ENABLED = 1,
        }
        impl From<TEN2_A> for bool {
            #[inline(always)]
            fn from(variant: TEN2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TEN2`"]
        pub type TEN2_R = crate::R<bool, TEN2_A>;
        impl TEN2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TEN2_A {
                match self.bits {
                    false => TEN2_A::DISABLED,
                    true => TEN2_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TEN2_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TEN2_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TEN2`"]
        pub struct TEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEN2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TEN2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DAC channel X trigger disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TEN2_A::DISABLED)
            }
            #[doc = "DAC channel X trigger enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TEN2_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "DAC channel2 output buffer disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BOFF2_A {
            #[doc = "0: DAC channel X output buffer enabled"]
            ENABLED = 0,
            #[doc = "1: DAC channel X output buffer disabled"]
            DISABLED = 1,
        }
        impl From<BOFF2_A> for bool {
            #[inline(always)]
            fn from(variant: BOFF2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BOFF2`"]
        pub type BOFF2_R = crate::R<bool, BOFF2_A>;
        impl BOFF2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BOFF2_A {
                match self.bits {
                    false => BOFF2_A::ENABLED,
                    true => BOFF2_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == BOFF2_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == BOFF2_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `BOFF2`"]
        pub struct BOFF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOFF2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BOFF2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DAC channel X output buffer enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(BOFF2_A::ENABLED)
            }
            #[doc = "DAC channel X output buffer disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(BOFF2_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "DAC channel2 enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EN2_A {
            #[doc = "0: DAC channel X disabled"]
            DISABLED = 0,
            #[doc = "1: DAC channel X enabled"]
            ENABLED = 1,
        }
        impl From<EN2_A> for bool {
            #[inline(always)]
            fn from(variant: EN2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EN2`"]
        pub type EN2_R = crate::R<bool, EN2_A>;
        impl EN2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EN2_A {
                match self.bits {
                    false => EN2_A::DISABLED,
                    true => EN2_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == EN2_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == EN2_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `EN2`"]
        pub struct EN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EN2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DAC channel X disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(EN2_A::DISABLED)
            }
            #[doc = "DAC channel X enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(EN2_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "DAC channel1 DMA Underrun Interrupt enable"]
        pub type DMAUDRIE1_A = DMAUDRIE2_A;
        #[doc = "Reader of field `DMAUDRIE1`"]
        pub type DMAUDRIE1_R = crate::R<bool, DMAUDRIE2_A>;
        #[doc = "Write proxy for field `DMAUDRIE1`"]
        pub struct DMAUDRIE1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAUDRIE1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DMAUDRIE1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DAC channel X DMA Underrun Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMAUDRIE2_A::DISABLED)
            }
            #[doc = "DAC channel X DMA Underrun Interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMAUDRIE2_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "DAC channel1 DMA enable"]
        pub type DMAEN1_A = DMAEN2_A;
        #[doc = "Reader of field `DMAEN1`"]
        pub type DMAEN1_R = crate::R<bool, DMAEN2_A>;
        #[doc = "Write proxy for field `DMAEN1`"]
        pub struct DMAEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAEN1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DMAEN1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DAC channel X DMA mode disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMAEN2_A::DISABLED)
            }
            #[doc = "DAC channel X DMA mode enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMAEN2_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MAMP1`"]
        pub type MAMP1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MAMP1`"]
        pub struct MAMP1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MAMP1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "DAC channel1 noise/triangle wave generation enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum WAVE1_A {
            #[doc = "0: Wave generation disabled"]
            DISABLED = 0,
            #[doc = "1: Noise wave generation enabled"]
            NOISE = 1,
            #[doc = "2: Triangle wave generation enabled"]
            TRIANGLE = 2,
        }
        impl From<WAVE1_A> for u8 {
            #[inline(always)]
            fn from(variant: WAVE1_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `WAVE1`"]
        pub type WAVE1_R = crate::R<u8, WAVE1_A>;
        impl WAVE1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, WAVE1_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(WAVE1_A::DISABLED),
                    1 => Val(WAVE1_A::NOISE),
                    2 => Val(WAVE1_A::TRIANGLE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == WAVE1_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `NOISE`"]
            #[inline(always)]
            pub fn is_noise(&self) -> bool {
                *self == WAVE1_A::NOISE
            }
            #[doc = "Checks if the value of the field is `TRIANGLE`"]
            #[inline(always)]
            pub fn is_triangle(&self) -> bool {
                *self == WAVE1_A::TRIANGLE
            }
        }
        #[doc = "Write proxy for field `WAVE1`"]
        pub struct WAVE1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAVE1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WAVE1_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Wave generation disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(WAVE1_A::DISABLED)
            }
            #[doc = "Noise wave generation enabled"]
            #[inline(always)]
            pub fn noise(self) -> &'a mut W {
                self.variant(WAVE1_A::NOISE)
            }
            #[doc = "Triangle wave generation enabled"]
            #[inline(always)]
            pub fn triangle(self) -> &'a mut W {
                self.variant(WAVE1_A::TRIANGLE)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "DAC channel1 trigger selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum TSEL1_A {
            #[doc = "0: Timer 6 TRGO event"]
            TIM6_TRGO = 0,
            #[doc = "1: Timer 3 TRGO event"]
            TIM3_TRGO = 1,
            #[doc = "2: Timer 7 TRGO event"]
            TIM7_TRGO = 2,
            #[doc = "3: Timer 15 TRGO event"]
            TIM15_TRGO = 3,
            #[doc = "4: Timer 2 TRGO event"]
            TIM2_TRGO = 4,
            #[doc = "6: EXTI line9"]
            EXTI9 = 6,
            #[doc = "7: Software trigger"]
            SOFTWARE = 7,
        }
        impl From<TSEL1_A> for u8 {
            #[inline(always)]
            fn from(variant: TSEL1_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `TSEL1`"]
        pub type TSEL1_R = crate::R<u8, TSEL1_A>;
        impl TSEL1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, TSEL1_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(TSEL1_A::TIM6_TRGO),
                    1 => Val(TSEL1_A::TIM3_TRGO),
                    2 => Val(TSEL1_A::TIM7_TRGO),
                    3 => Val(TSEL1_A::TIM15_TRGO),
                    4 => Val(TSEL1_A::TIM2_TRGO),
                    6 => Val(TSEL1_A::EXTI9),
                    7 => Val(TSEL1_A::SOFTWARE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TIM6_TRGO`"]
            #[inline(always)]
            pub fn is_tim6_trgo(&self) -> bool {
                *self == TSEL1_A::TIM6_TRGO
            }
            #[doc = "Checks if the value of the field is `TIM3_TRGO`"]
            #[inline(always)]
            pub fn is_tim3_trgo(&self) -> bool {
                *self == TSEL1_A::TIM3_TRGO
            }
            #[doc = "Checks if the value of the field is `TIM7_TRGO`"]
            #[inline(always)]
            pub fn is_tim7_trgo(&self) -> bool {
                *self == TSEL1_A::TIM7_TRGO
            }
            #[doc = "Checks if the value of the field is `TIM15_TRGO`"]
            #[inline(always)]
            pub fn is_tim15_trgo(&self) -> bool {
                *self == TSEL1_A::TIM15_TRGO
            }
            #[doc = "Checks if the value of the field is `TIM2_TRGO`"]
            #[inline(always)]
            pub fn is_tim2_trgo(&self) -> bool {
                *self == TSEL1_A::TIM2_TRGO
            }
            #[doc = "Checks if the value of the field is `EXTI9`"]
            #[inline(always)]
            pub fn is_exti9(&self) -> bool {
                *self == TSEL1_A::EXTI9
            }
            #[doc = "Checks if the value of the field is `SOFTWARE`"]
            #[inline(always)]
            pub fn is_software(&self) -> bool {
                *self == TSEL1_A::SOFTWARE
            }
        }
        #[doc = "Write proxy for field `TSEL1`"]
        pub struct TSEL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSEL1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TSEL1_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Timer 6 TRGO event"]
            #[inline(always)]
            pub fn tim6_trgo(self) -> &'a mut W {
                self.variant(TSEL1_A::TIM6_TRGO)
            }
            #[doc = "Timer 3 TRGO event"]
            #[inline(always)]
            pub fn tim3_trgo(self) -> &'a mut W {
                self.variant(TSEL1_A::TIM3_TRGO)
            }
            #[doc = "Timer 7 TRGO event"]
            #[inline(always)]
            pub fn tim7_trgo(self) -> &'a mut W {
                self.variant(TSEL1_A::TIM7_TRGO)
            }
            #[doc = "Timer 15 TRGO event"]
            #[inline(always)]
            pub fn tim15_trgo(self) -> &'a mut W {
                self.variant(TSEL1_A::TIM15_TRGO)
            }
            #[doc = "Timer 2 TRGO event"]
            #[inline(always)]
            pub fn tim2_trgo(self) -> &'a mut W {
                self.variant(TSEL1_A::TIM2_TRGO)
            }
            #[doc = "EXTI line9"]
            #[inline(always)]
            pub fn exti9(self) -> &'a mut W {
                self.variant(TSEL1_A::EXTI9)
            }
            #[doc = "Software trigger"]
            #[inline(always)]
            pub fn software(self) -> &'a mut W {
                self.variant(TSEL1_A::SOFTWARE)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 3)) | (((value as u32) & 0x07) << 3);
                self.w
            }
        }
        #[doc = "DAC channel1 trigger enable"]
        pub type TEN1_A = TEN2_A;
        #[doc = "Reader of field `TEN1`"]
        pub type TEN1_R = crate::R<bool, TEN2_A>;
        #[doc = "Write proxy for field `TEN1`"]
        pub struct TEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEN1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TEN1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DAC channel X trigger disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TEN2_A::DISABLED)
            }
            #[doc = "DAC channel X trigger enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TEN2_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "DAC channel1 output buffer disable"]
        pub type BOFF1_A = BOFF2_A;
        #[doc = "Reader of field `BOFF1`"]
        pub type BOFF1_R = crate::R<bool, BOFF2_A>;
        #[doc = "Write proxy for field `BOFF1`"]
        pub struct BOFF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOFF1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BOFF1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DAC channel X output buffer enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(BOFF2_A::ENABLED)
            }
            #[doc = "DAC channel X output buffer disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(BOFF2_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "DAC channel1 enable"]
        pub type EN1_A = EN2_A;
        #[doc = "Reader of field `EN1`"]
        pub type EN1_R = crate::R<bool, EN2_A>;
        #[doc = "Write proxy for field `EN1`"]
        pub struct EN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EN1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DAC channel X disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(EN2_A::DISABLED)
            }
            #[doc = "DAC channel X enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(EN2_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 29 - DAC channel2 DMA underrun interrupt enable"]
            #[inline(always)]
            pub fn dmaudrie2(&self) -> DMAUDRIE2_R {
                DMAUDRIE2_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - DAC channel2 DMA enable"]
            #[inline(always)]
            pub fn dmaen2(&self) -> DMAEN2_R {
                DMAEN2_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bits 24:27 - DAC channel2 mask/amplitude selector"]
            #[inline(always)]
            pub fn mamp2(&self) -> MAMP2_R {
                MAMP2_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 22:23 - DAC channel2 noise/triangle wave generation enable"]
            #[inline(always)]
            pub fn wave2(&self) -> WAVE2_R {
                WAVE2_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 19:21 - DAC channel2 trigger selection"]
            #[inline(always)]
            pub fn tsel2(&self) -> TSEL2_R {
                TSEL2_R::new(((self.bits >> 19) & 0x07) as u8)
            }
            #[doc = "Bit 18 - DAC channel2 trigger enable"]
            #[inline(always)]
            pub fn ten2(&self) -> TEN2_R {
                TEN2_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - DAC channel2 output buffer disable"]
            #[inline(always)]
            pub fn boff2(&self) -> BOFF2_R {
                BOFF2_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DAC channel2 enable"]
            #[inline(always)]
            pub fn en2(&self) -> EN2_R {
                EN2_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DAC channel1 DMA Underrun Interrupt enable"]
            #[inline(always)]
            pub fn dmaudrie1(&self) -> DMAUDRIE1_R {
                DMAUDRIE1_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - DAC channel1 DMA enable"]
            #[inline(always)]
            pub fn dmaen1(&self) -> DMAEN1_R {
                DMAEN1_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 8:11 - DAC channel1 mask/amplitude selector"]
            #[inline(always)]
            pub fn mamp1(&self) -> MAMP1_R {
                MAMP1_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 6:7 - DAC channel1 noise/triangle wave generation enable"]
            #[inline(always)]
            pub fn wave1(&self) -> WAVE1_R {
                WAVE1_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 3:5 - DAC channel1 trigger selection"]
            #[inline(always)]
            pub fn tsel1(&self) -> TSEL1_R {
                TSEL1_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bit 2 - DAC channel1 trigger enable"]
            #[inline(always)]
            pub fn ten1(&self) -> TEN1_R {
                TEN1_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - DAC channel1 output buffer disable"]
            #[inline(always)]
            pub fn boff1(&self) -> BOFF1_R {
                BOFF1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DAC channel1 enable"]
            #[inline(always)]
            pub fn en1(&self) -> EN1_R {
                EN1_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 29 - DAC channel2 DMA underrun interrupt enable"]
            #[inline(always)]
            pub fn dmaudrie2(&mut self) -> DMAUDRIE2_W {
                DMAUDRIE2_W { w: self }
            }
            #[doc = "Bit 28 - DAC channel2 DMA enable"]
            #[inline(always)]
            pub fn dmaen2(&mut self) -> DMAEN2_W {
                DMAEN2_W { w: self }
            }
            #[doc = "Bits 24:27 - DAC channel2 mask/amplitude selector"]
            #[inline(always)]
            pub fn mamp2(&mut self) -> MAMP2_W {
                MAMP2_W { w: self }
            }
            #[doc = "Bits 22:23 - DAC channel2 noise/triangle wave generation enable"]
            #[inline(always)]
            pub fn wave2(&mut self) -> WAVE2_W {
                WAVE2_W { w: self }
            }
            #[doc = "Bits 19:21 - DAC channel2 trigger selection"]
            #[inline(always)]
            pub fn tsel2(&mut self) -> TSEL2_W {
                TSEL2_W { w: self }
            }
            #[doc = "Bit 18 - DAC channel2 trigger enable"]
            #[inline(always)]
            pub fn ten2(&mut self) -> TEN2_W {
                TEN2_W { w: self }
            }
            #[doc = "Bit 17 - DAC channel2 output buffer disable"]
            #[inline(always)]
            pub fn boff2(&mut self) -> BOFF2_W {
                BOFF2_W { w: self }
            }
            #[doc = "Bit 16 - DAC channel2 enable"]
            #[inline(always)]
            pub fn en2(&mut self) -> EN2_W {
                EN2_W { w: self }
            }
            #[doc = "Bit 13 - DAC channel1 DMA Underrun Interrupt enable"]
            #[inline(always)]
            pub fn dmaudrie1(&mut self) -> DMAUDRIE1_W {
                DMAUDRIE1_W { w: self }
            }
            #[doc = "Bit 12 - DAC channel1 DMA enable"]
            #[inline(always)]
            pub fn dmaen1(&mut self) -> DMAEN1_W {
                DMAEN1_W { w: self }
            }
            #[doc = "Bits 8:11 - DAC channel1 mask/amplitude selector"]
            #[inline(always)]
            pub fn mamp1(&mut self) -> MAMP1_W {
                MAMP1_W { w: self }
            }
            #[doc = "Bits 6:7 - DAC channel1 noise/triangle wave generation enable"]
            #[inline(always)]
            pub fn wave1(&mut self) -> WAVE1_W {
                WAVE1_W { w: self }
            }
            #[doc = "Bits 3:5 - DAC channel1 trigger selection"]
            #[inline(always)]
            pub fn tsel1(&mut self) -> TSEL1_W {
                TSEL1_W { w: self }
            }
            #[doc = "Bit 2 - DAC channel1 trigger enable"]
            #[inline(always)]
            pub fn ten1(&mut self) -> TEN1_W {
                TEN1_W { w: self }
            }
            #[doc = "Bit 1 - DAC channel1 output buffer disable"]
            #[inline(always)]
            pub fn boff1(&mut self) -> BOFF1_W {
                BOFF1_W { w: self }
            }
            #[doc = "Bit 0 - DAC channel1 enable"]
            #[inline(always)]
            pub fn en1(&mut self) -> EN1_W {
                EN1_W { w: self }
            }
        }
    }
    #[doc = "software trigger register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swtrigr](swtrigr) module"]
    pub type SWTRIGR = crate::Reg<u32, _SWTRIGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SWTRIGR;
    #[doc = "`write(|w| ..)` method takes [swtrigr::W](swtrigr::W) writer structure"]
    impl crate::Writable for SWTRIGR {}
    #[doc = "software trigger register"]
    pub mod swtrigr {
        #[doc = "Writer for register SWTRIGR"]
        pub type W = crate::W<u32, super::SWTRIGR>;
        #[doc = "Register SWTRIGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SWTRIGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "DAC channel2 software trigger\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWTRIG2_AW {
            #[doc = "0: DAC channel X software trigger disabled"]
            DISABLED = 0,
            #[doc = "1: DAC channel X software trigger enabled"]
            ENABLED = 1,
        }
        impl From<SWTRIG2_AW> for bool {
            #[inline(always)]
            fn from(variant: SWTRIG2_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `SWTRIG2`"]
        pub struct SWTRIG2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWTRIG2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWTRIG2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DAC channel X software trigger disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SWTRIG2_AW::DISABLED)
            }
            #[doc = "DAC channel X software trigger enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SWTRIG2_AW::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "DAC channel1 software trigger"]
        pub type SWTRIG1_AW = SWTRIG2_AW;
        #[doc = "Write proxy for field `SWTRIG1`"]
        pub struct SWTRIG1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWTRIG1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWTRIG1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DAC channel X software trigger disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SWTRIG2_AW::DISABLED)
            }
            #[doc = "DAC channel X software trigger enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SWTRIG2_AW::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 1 - DAC channel2 software trigger"]
            #[inline(always)]
            pub fn swtrig2(&mut self) -> SWTRIG2_W {
                SWTRIG2_W { w: self }
            }
            #[doc = "Bit 0 - DAC channel1 software trigger"]
            #[inline(always)]
            pub fn swtrig1(&mut self) -> SWTRIG1_W {
                SWTRIG1_W { w: self }
            }
        }
    }
    #[doc = "channel1 12-bit right-aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr12r1](dhr12r1) module"]
    pub type DHR12R1 = crate::Reg<u32, _DHR12R1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DHR12R1;
    #[doc = "`read()` method returns [dhr12r1::R](dhr12r1::R) reader structure"]
    impl crate::Readable for DHR12R1 {}
    #[doc = "`write(|w| ..)` method takes [dhr12r1::W](dhr12r1::W) writer structure"]
    impl crate::Writable for DHR12R1 {}
    #[doc = "channel1 12-bit right-aligned data holding register"]
    pub mod dhr12r1 {
        #[doc = "Reader of register DHR12R1"]
        pub type R = crate::R<u32, super::DHR12R1>;
        #[doc = "Writer for register DHR12R1"]
        pub type W = crate::W<u32, super::DHR12R1>;
        #[doc = "Register DHR12R1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DHR12R1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DACC1DHR`"]
        pub type DACC1DHR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DACC1DHR`"]
        pub struct DACC1DHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACC1DHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - DAC channel1 12-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc1dhr(&self) -> DACC1DHR_R {
                DACC1DHR_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - DAC channel1 12-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc1dhr(&mut self) -> DACC1DHR_W {
                DACC1DHR_W { w: self }
            }
        }
    }
    #[doc = "channel1 12-bit left aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr12l1](dhr12l1) module"]
    pub type DHR12L1 = crate::Reg<u32, _DHR12L1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DHR12L1;
    #[doc = "`read()` method returns [dhr12l1::R](dhr12l1::R) reader structure"]
    impl crate::Readable for DHR12L1 {}
    #[doc = "`write(|w| ..)` method takes [dhr12l1::W](dhr12l1::W) writer structure"]
    impl crate::Writable for DHR12L1 {}
    #[doc = "channel1 12-bit left aligned data holding register"]
    pub mod dhr12l1 {
        #[doc = "Reader of register DHR12L1"]
        pub type R = crate::R<u32, super::DHR12L1>;
        #[doc = "Writer for register DHR12L1"]
        pub type W = crate::W<u32, super::DHR12L1>;
        #[doc = "Register DHR12L1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DHR12L1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DACC1DHR`"]
        pub type DACC1DHR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DACC1DHR`"]
        pub struct DACC1DHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACC1DHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 4)) | (((value as u32) & 0x0fff) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:15 - DAC channel1 12-bit left-aligned data"]
            #[inline(always)]
            pub fn dacc1dhr(&self) -> DACC1DHR_R {
                DACC1DHR_R::new(((self.bits >> 4) & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 4:15 - DAC channel1 12-bit left-aligned data"]
            #[inline(always)]
            pub fn dacc1dhr(&mut self) -> DACC1DHR_W {
                DACC1DHR_W { w: self }
            }
        }
    }
    #[doc = "channel1 8-bit right aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr8r1](dhr8r1) module"]
    pub type DHR8R1 = crate::Reg<u32, _DHR8R1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DHR8R1;
    #[doc = "`read()` method returns [dhr8r1::R](dhr8r1::R) reader structure"]
    impl crate::Readable for DHR8R1 {}
    #[doc = "`write(|w| ..)` method takes [dhr8r1::W](dhr8r1::W) writer structure"]
    impl crate::Writable for DHR8R1 {}
    #[doc = "channel1 8-bit right aligned data holding register"]
    pub mod dhr8r1 {
        #[doc = "Reader of register DHR8R1"]
        pub type R = crate::R<u32, super::DHR8R1>;
        #[doc = "Writer for register DHR8R1"]
        pub type W = crate::W<u32, super::DHR8R1>;
        #[doc = "Register DHR8R1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DHR8R1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DACC1DHR`"]
        pub type DACC1DHR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DACC1DHR`"]
        pub struct DACC1DHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACC1DHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - DAC channel1 8-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc1dhr(&self) -> DACC1DHR_R {
                DACC1DHR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - DAC channel1 8-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc1dhr(&mut self) -> DACC1DHR_W {
                DACC1DHR_W { w: self }
            }
        }
    }
    #[doc = "channel2 12-bit right aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr12r2](dhr12r2) module"]
    pub type DHR12R2 = crate::Reg<u32, _DHR12R2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DHR12R2;
    #[doc = "`read()` method returns [dhr12r2::R](dhr12r2::R) reader structure"]
    impl crate::Readable for DHR12R2 {}
    #[doc = "`write(|w| ..)` method takes [dhr12r2::W](dhr12r2::W) writer structure"]
    impl crate::Writable for DHR12R2 {}
    #[doc = "channel2 12-bit right aligned data holding register"]
    pub mod dhr12r2 {
        #[doc = "Reader of register DHR12R2"]
        pub type R = crate::R<u32, super::DHR12R2>;
        #[doc = "Writer for register DHR12R2"]
        pub type W = crate::W<u32, super::DHR12R2>;
        #[doc = "Register DHR12R2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DHR12R2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DACC2DHR`"]
        pub type DACC2DHR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DACC2DHR`"]
        pub struct DACC2DHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACC2DHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - DAC channel2 12-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc2dhr(&self) -> DACC2DHR_R {
                DACC2DHR_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - DAC channel2 12-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc2dhr(&mut self) -> DACC2DHR_W {
                DACC2DHR_W { w: self }
            }
        }
    }
    #[doc = "channel2 12-bit left aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr12l2](dhr12l2) module"]
    pub type DHR12L2 = crate::Reg<u32, _DHR12L2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DHR12L2;
    #[doc = "`read()` method returns [dhr12l2::R](dhr12l2::R) reader structure"]
    impl crate::Readable for DHR12L2 {}
    #[doc = "`write(|w| ..)` method takes [dhr12l2::W](dhr12l2::W) writer structure"]
    impl crate::Writable for DHR12L2 {}
    #[doc = "channel2 12-bit left aligned data holding register"]
    pub mod dhr12l2 {
        #[doc = "Reader of register DHR12L2"]
        pub type R = crate::R<u32, super::DHR12L2>;
        #[doc = "Writer for register DHR12L2"]
        pub type W = crate::W<u32, super::DHR12L2>;
        #[doc = "Register DHR12L2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DHR12L2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DACC2DHR`"]
        pub type DACC2DHR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DACC2DHR`"]
        pub struct DACC2DHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACC2DHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 4)) | (((value as u32) & 0x0fff) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:15 - DAC channel2 12-bit left-aligned data"]
            #[inline(always)]
            pub fn dacc2dhr(&self) -> DACC2DHR_R {
                DACC2DHR_R::new(((self.bits >> 4) & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 4:15 - DAC channel2 12-bit left-aligned data"]
            #[inline(always)]
            pub fn dacc2dhr(&mut self) -> DACC2DHR_W {
                DACC2DHR_W { w: self }
            }
        }
    }
    #[doc = "channel2 8-bit right-aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr8r2](dhr8r2) module"]
    pub type DHR8R2 = crate::Reg<u32, _DHR8R2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DHR8R2;
    #[doc = "`read()` method returns [dhr8r2::R](dhr8r2::R) reader structure"]
    impl crate::Readable for DHR8R2 {}
    #[doc = "`write(|w| ..)` method takes [dhr8r2::W](dhr8r2::W) writer structure"]
    impl crate::Writable for DHR8R2 {}
    #[doc = "channel2 8-bit right-aligned data holding register"]
    pub mod dhr8r2 {
        #[doc = "Reader of register DHR8R2"]
        pub type R = crate::R<u32, super::DHR8R2>;
        #[doc = "Writer for register DHR8R2"]
        pub type W = crate::W<u32, super::DHR8R2>;
        #[doc = "Register DHR8R2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DHR8R2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DACC2DHR`"]
        pub type DACC2DHR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DACC2DHR`"]
        pub struct DACC2DHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACC2DHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - DAC channel2 8-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc2dhr(&self) -> DACC2DHR_R {
                DACC2DHR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - DAC channel2 8-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc2dhr(&mut self) -> DACC2DHR_W {
                DACC2DHR_W { w: self }
            }
        }
    }
    #[doc = "Dual DAC 12-bit right-aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr12rd](dhr12rd) module"]
    pub type DHR12RD = crate::Reg<u32, _DHR12RD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DHR12RD;
    #[doc = "`read()` method returns [dhr12rd::R](dhr12rd::R) reader structure"]
    impl crate::Readable for DHR12RD {}
    #[doc = "`write(|w| ..)` method takes [dhr12rd::W](dhr12rd::W) writer structure"]
    impl crate::Writable for DHR12RD {}
    #[doc = "Dual DAC 12-bit right-aligned data holding register"]
    pub mod dhr12rd {
        #[doc = "Reader of register DHR12RD"]
        pub type R = crate::R<u32, super::DHR12RD>;
        #[doc = "Writer for register DHR12RD"]
        pub type W = crate::W<u32, super::DHR12RD>;
        #[doc = "Register DHR12RD `reset()`'s with value 0"]
        impl crate::ResetValue for super::DHR12RD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DACC2DHR`"]
        pub type DACC2DHR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DACC2DHR`"]
        pub struct DACC2DHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACC2DHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 16)) | (((value as u32) & 0x0fff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DACC1DHR`"]
        pub type DACC1DHR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DACC1DHR`"]
        pub struct DACC1DHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACC1DHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:27 - DAC channel2 12-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc2dhr(&self) -> DACC2DHR_R {
                DACC2DHR_R::new(((self.bits >> 16) & 0x0fff) as u16)
            }
            #[doc = "Bits 0:11 - DAC channel1 12-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc1dhr(&self) -> DACC1DHR_R {
                DACC1DHR_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:27 - DAC channel2 12-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc2dhr(&mut self) -> DACC2DHR_W {
                DACC2DHR_W { w: self }
            }
            #[doc = "Bits 0:11 - DAC channel1 12-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc1dhr(&mut self) -> DACC1DHR_W {
                DACC1DHR_W { w: self }
            }
        }
    }
    #[doc = "DUAL DAC 12-bit left aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr12ld](dhr12ld) module"]
    pub type DHR12LD = crate::Reg<u32, _DHR12LD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DHR12LD;
    #[doc = "`read()` method returns [dhr12ld::R](dhr12ld::R) reader structure"]
    impl crate::Readable for DHR12LD {}
    #[doc = "`write(|w| ..)` method takes [dhr12ld::W](dhr12ld::W) writer structure"]
    impl crate::Writable for DHR12LD {}
    #[doc = "DUAL DAC 12-bit left aligned data holding register"]
    pub mod dhr12ld {
        #[doc = "Reader of register DHR12LD"]
        pub type R = crate::R<u32, super::DHR12LD>;
        #[doc = "Writer for register DHR12LD"]
        pub type W = crate::W<u32, super::DHR12LD>;
        #[doc = "Register DHR12LD `reset()`'s with value 0"]
        impl crate::ResetValue for super::DHR12LD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DACC2DHR`"]
        pub type DACC2DHR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DACC2DHR`"]
        pub struct DACC2DHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACC2DHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 20)) | (((value as u32) & 0x0fff) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `DACC1DHR`"]
        pub type DACC1DHR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DACC1DHR`"]
        pub struct DACC1DHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACC1DHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 4)) | (((value as u32) & 0x0fff) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:31 - DAC channel2 12-bit left-aligned data"]
            #[inline(always)]
            pub fn dacc2dhr(&self) -> DACC2DHR_R {
                DACC2DHR_R::new(((self.bits >> 20) & 0x0fff) as u16)
            }
            #[doc = "Bits 4:15 - DAC channel1 12-bit left-aligned data"]
            #[inline(always)]
            pub fn dacc1dhr(&self) -> DACC1DHR_R {
                DACC1DHR_R::new(((self.bits >> 4) & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 20:31 - DAC channel2 12-bit left-aligned data"]
            #[inline(always)]
            pub fn dacc2dhr(&mut self) -> DACC2DHR_W {
                DACC2DHR_W { w: self }
            }
            #[doc = "Bits 4:15 - DAC channel1 12-bit left-aligned data"]
            #[inline(always)]
            pub fn dacc1dhr(&mut self) -> DACC1DHR_W {
                DACC1DHR_W { w: self }
            }
        }
    }
    #[doc = "DUAL DAC 8-bit right aligned data holding register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dhr8rd](dhr8rd) module"]
    pub type DHR8RD = crate::Reg<u32, _DHR8RD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DHR8RD;
    #[doc = "`read()` method returns [dhr8rd::R](dhr8rd::R) reader structure"]
    impl crate::Readable for DHR8RD {}
    #[doc = "`write(|w| ..)` method takes [dhr8rd::W](dhr8rd::W) writer structure"]
    impl crate::Writable for DHR8RD {}
    #[doc = "DUAL DAC 8-bit right aligned data holding register"]
    pub mod dhr8rd {
        #[doc = "Reader of register DHR8RD"]
        pub type R = crate::R<u32, super::DHR8RD>;
        #[doc = "Writer for register DHR8RD"]
        pub type W = crate::W<u32, super::DHR8RD>;
        #[doc = "Register DHR8RD `reset()`'s with value 0"]
        impl crate::ResetValue for super::DHR8RD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DACC2DHR`"]
        pub type DACC2DHR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DACC2DHR`"]
        pub struct DACC2DHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACC2DHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DACC1DHR`"]
        pub type DACC1DHR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DACC1DHR`"]
        pub struct DACC1DHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACC1DHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - DAC channel2 8-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc2dhr(&self) -> DACC2DHR_R {
                DACC2DHR_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - DAC channel1 8-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc1dhr(&self) -> DACC1DHR_R {
                DACC1DHR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - DAC channel2 8-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc2dhr(&mut self) -> DACC2DHR_W {
                DACC2DHR_W { w: self }
            }
            #[doc = "Bits 0:7 - DAC channel1 8-bit right-aligned data"]
            #[inline(always)]
            pub fn dacc1dhr(&mut self) -> DACC1DHR_W {
                DACC1DHR_W { w: self }
            }
        }
    }
    #[doc = "channel1 data output register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dor1](dor1) module"]
    pub type DOR1 = crate::Reg<u32, _DOR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOR1;
    #[doc = "`read()` method returns [dor1::R](dor1::R) reader structure"]
    impl crate::Readable for DOR1 {}
    #[doc = "channel1 data output register"]
    pub mod dor1 {
        #[doc = "Reader of register DOR1"]
        pub type R = crate::R<u32, super::DOR1>;
        #[doc = "Reader of field `DACC1DOR`"]
        pub type DACC1DOR_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:11 - DAC channel1 data output"]
            #[inline(always)]
            pub fn dacc1dor(&self) -> DACC1DOR_R {
                DACC1DOR_R::new((self.bits & 0x0fff) as u16)
            }
        }
    }
    #[doc = "channel2 data output register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dor2](dor2) module"]
    pub type DOR2 = crate::Reg<u32, _DOR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOR2;
    #[doc = "`read()` method returns [dor2::R](dor2::R) reader structure"]
    impl crate::Readable for DOR2 {}
    #[doc = "channel2 data output register"]
    pub mod dor2 {
        #[doc = "Reader of register DOR2"]
        pub type R = crate::R<u32, super::DOR2>;
        #[doc = "Reader of field `DACC2DOR`"]
        pub type DACC2DOR_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:11 - DAC channel2 data output"]
            #[inline(always)]
            pub fn dacc2dor(&self) -> DACC2DOR_R {
                DACC2DOR_R::new((self.bits & 0x0fff) as u16)
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "DAC channel2 DMA underrun flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DMAUDR2_A {
            #[doc = "0: No DMA underrun error condition occurred for DAC channel X"]
            NOUNDERRUN = 0,
            #[doc = "1: DMA underrun error condition occurred for DAC channel X"]
            UNDERRUN = 1,
        }
        impl From<DMAUDR2_A> for bool {
            #[inline(always)]
            fn from(variant: DMAUDR2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DMAUDR2`"]
        pub type DMAUDR2_R = crate::R<bool, DMAUDR2_A>;
        impl DMAUDR2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DMAUDR2_A {
                match self.bits {
                    false => DMAUDR2_A::NOUNDERRUN,
                    true => DMAUDR2_A::UNDERRUN,
                }
            }
            #[doc = "Checks if the value of the field is `NOUNDERRUN`"]
            #[inline(always)]
            pub fn is_no_underrun(&self) -> bool {
                *self == DMAUDR2_A::NOUNDERRUN
            }
            #[doc = "Checks if the value of the field is `UNDERRUN`"]
            #[inline(always)]
            pub fn is_underrun(&self) -> bool {
                *self == DMAUDR2_A::UNDERRUN
            }
        }
        #[doc = "Write proxy for field `DMAUDR2`"]
        pub struct DMAUDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAUDR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DMAUDR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No DMA underrun error condition occurred for DAC channel X"]
            #[inline(always)]
            pub fn no_underrun(self) -> &'a mut W {
                self.variant(DMAUDR2_A::NOUNDERRUN)
            }
            #[doc = "DMA underrun error condition occurred for DAC channel X"]
            #[inline(always)]
            pub fn underrun(self) -> &'a mut W {
                self.variant(DMAUDR2_A::UNDERRUN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "DAC channel1 DMA underrun flag"]
        pub type DMAUDR1_A = DMAUDR2_A;
        #[doc = "Reader of field `DMAUDR1`"]
        pub type DMAUDR1_R = crate::R<bool, DMAUDR2_A>;
        #[doc = "Write proxy for field `DMAUDR1`"]
        pub struct DMAUDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAUDR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DMAUDR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No DMA underrun error condition occurred for DAC channel X"]
            #[inline(always)]
            pub fn no_underrun(self) -> &'a mut W {
                self.variant(DMAUDR2_A::NOUNDERRUN)
            }
            #[doc = "DMA underrun error condition occurred for DAC channel X"]
            #[inline(always)]
            pub fn underrun(self) -> &'a mut W {
                self.variant(DMAUDR2_A::UNDERRUN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 29 - DAC channel2 DMA underrun flag"]
            #[inline(always)]
            pub fn dmaudr2(&self) -> DMAUDR2_R {
                DMAUDR2_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DAC channel1 DMA underrun flag"]
            #[inline(always)]
            pub fn dmaudr1(&self) -> DMAUDR1_R {
                DMAUDR1_R::new(((self.bits >> 13) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 29 - DAC channel2 DMA underrun flag"]
            #[inline(always)]
            pub fn dmaudr2(&mut self) -> DMAUDR2_W {
                DMAUDR2_W { w: self }
            }
            #[doc = "Bit 13 - DAC channel1 DMA underrun flag"]
            #[inline(always)]
            pub fn dmaudr1(&mut self) -> DMAUDR1_W {
                DMAUDR1_W { w: self }
            }
        }
    }
}
#[doc = "Direct memory access controller"]
pub struct DMA1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DMA1 {}
impl DMA1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dma1::RegisterBlock {
        0x4002_6000 as *const _
    }
}
impl Deref for DMA1 {
    type Target = dma1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*DMA1::ptr() }
    }
}
#[doc = "Direct memory access controller"]
pub mod dma1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - interrupt status register"]
        pub isr: ISR,
        #[doc = "0x04 - interrupt flag clear register"]
        pub ifcr: IFCR,
        #[doc = "0x08 - channel x configuration register"]
        pub ccr1: CCR1,
        #[doc = "0x0c - channel x number of data register"]
        pub cndtr1: CNDTR1,
        #[doc = "0x10 - channel x peripheral address register"]
        pub cpar1: CPAR1,
        #[doc = "0x14 - channel x memory address register"]
        pub cmar1: CMAR1,
        _reserved6: [u8; 4usize],
        #[doc = "0x1c - channel x configuration register"]
        pub ccr2: CCR2,
        #[doc = "0x20 - channel x number of data register"]
        pub cndtr2: CNDTR2,
        #[doc = "0x24 - channel x peripheral address register"]
        pub cpar2: CPAR2,
        #[doc = "0x28 - channel x memory address register"]
        pub cmar2: CMAR2,
        _reserved10: [u8; 4usize],
        #[doc = "0x30 - channel x configuration register"]
        pub ccr3: CCR3,
        #[doc = "0x34 - channel x number of data register"]
        pub cndtr3: CNDTR3,
        #[doc = "0x38 - channel x peripheral address register"]
        pub cpar3: CPAR3,
        #[doc = "0x3c - channel x memory address register"]
        pub cmar3: CMAR3,
        _reserved14: [u8; 4usize],
        #[doc = "0x44 - channel x configuration register"]
        pub ccr4: CCR4,
        #[doc = "0x48 - channel x number of data register"]
        pub cndtr4: CNDTR4,
        #[doc = "0x4c - channel x peripheral address register"]
        pub cpar4: CPAR4,
        #[doc = "0x50 - channel x memory address register"]
        pub cmar4: CMAR4,
        _reserved18: [u8; 4usize],
        #[doc = "0x58 - channel x configuration register"]
        pub ccr5: CCR5,
        #[doc = "0x5c - channel x number of data register"]
        pub cndtr5: CNDTR5,
        #[doc = "0x60 - channel x peripheral address register"]
        pub cpar5: CPAR5,
        #[doc = "0x64 - channel x memory address register"]
        pub cmar5: CMAR5,
        _reserved22: [u8; 4usize],
        #[doc = "0x6c - channel x configuration register"]
        pub ccr6: CCR6,
        #[doc = "0x70 - channel x number of data register"]
        pub cndtr6: CNDTR6,
        #[doc = "0x74 - channel x peripheral address register"]
        pub cpar6: CPAR6,
        #[doc = "0x78 - channel x memory address register"]
        pub cmar6: CMAR6,
        _reserved26: [u8; 4usize],
        #[doc = "0x80 - channel x configuration register"]
        pub ccr7: CCR7,
        #[doc = "0x84 - channel x number of data register"]
        pub cndtr7: CNDTR7,
        #[doc = "0x88 - channel x peripheral address register"]
        pub cpar7: CPAR7,
        #[doc = "0x8c - channel x memory address register"]
        pub cmar7: CMAR7,
    }
    #[doc = "interrupt status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr](isr) module"]
    pub type ISR = crate::Reg<u32, _ISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISR;
    #[doc = "`read()` method returns [isr::R](isr::R) reader structure"]
    impl crate::Readable for ISR {}
    #[doc = "interrupt status register"]
    pub mod isr {
        #[doc = "Reader of register ISR"]
        pub type R = crate::R<u32, super::ISR>;
        #[doc = "Reader of field `TEIF7`"]
        pub type TEIF7_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HTIF7`"]
        pub type HTIF7_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TCIF7`"]
        pub type TCIF7_R = crate::R<bool, bool>;
        #[doc = "Reader of field `GIF7`"]
        pub type GIF7_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TEIF6`"]
        pub type TEIF6_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HTIF6`"]
        pub type HTIF6_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TCIF6`"]
        pub type TCIF6_R = crate::R<bool, bool>;
        #[doc = "Reader of field `GIF6`"]
        pub type GIF6_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TEIF5`"]
        pub type TEIF5_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HTIF5`"]
        pub type HTIF5_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TCIF5`"]
        pub type TCIF5_R = crate::R<bool, bool>;
        #[doc = "Reader of field `GIF5`"]
        pub type GIF5_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TEIF4`"]
        pub type TEIF4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HTIF4`"]
        pub type HTIF4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TCIF4`"]
        pub type TCIF4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `GIF4`"]
        pub type GIF4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TEIF3`"]
        pub type TEIF3_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HTIF3`"]
        pub type HTIF3_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TCIF3`"]
        pub type TCIF3_R = crate::R<bool, bool>;
        #[doc = "Reader of field `GIF3`"]
        pub type GIF3_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TEIF2`"]
        pub type TEIF2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HTIF2`"]
        pub type HTIF2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TCIF2`"]
        pub type TCIF2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `GIF2`"]
        pub type GIF2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TEIF1`"]
        pub type TEIF1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HTIF1`"]
        pub type HTIF1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TCIF1`"]
        pub type TCIF1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `GIF1`"]
        pub type GIF1_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 27 - Channel x transfer error flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn teif7(&self) -> TEIF7_R {
                TEIF7_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Channel x half transfer flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn htif7(&self) -> HTIF7_R {
                HTIF7_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Channel x transfer complete flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn tcif7(&self) -> TCIF7_R {
                TCIF7_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Channel x global interrupt flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn gif7(&self) -> GIF7_R {
                GIF7_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Channel x transfer error flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn teif6(&self) -> TEIF6_R {
                TEIF6_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Channel x half transfer flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn htif6(&self) -> HTIF6_R {
                HTIF6_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Channel x transfer complete flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn tcif6(&self) -> TCIF6_R {
                TCIF6_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Channel x global interrupt flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn gif6(&self) -> GIF6_R {
                GIF6_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Channel x transfer error flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn teif5(&self) -> TEIF5_R {
                TEIF5_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Channel x half transfer flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn htif5(&self) -> HTIF5_R {
                HTIF5_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Channel x transfer complete flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn tcif5(&self) -> TCIF5_R {
                TCIF5_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Channel x global interrupt flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn gif5(&self) -> GIF5_R {
                GIF5_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Channel x transfer error flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn teif4(&self) -> TEIF4_R {
                TEIF4_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Channel x half transfer flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn htif4(&self) -> HTIF4_R {
                HTIF4_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Channel x transfer complete flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn tcif4(&self) -> TCIF4_R {
                TCIF4_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Channel x global interrupt flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn gif4(&self) -> GIF4_R {
                GIF4_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Channel x transfer error flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn teif3(&self) -> TEIF3_R {
                TEIF3_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Channel x half transfer flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn htif3(&self) -> HTIF3_R {
                HTIF3_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Channel x transfer complete flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn tcif3(&self) -> TCIF3_R {
                TCIF3_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Channel x global interrupt flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn gif3(&self) -> GIF3_R {
                GIF3_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel x transfer error flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn teif2(&self) -> TEIF2_R {
                TEIF2_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel x half transfer flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn htif2(&self) -> HTIF2_R {
                HTIF2_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel x transfer complete flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn tcif2(&self) -> TCIF2_R {
                TCIF2_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel x global interrupt flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn gif2(&self) -> GIF2_R {
                GIF2_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel x transfer error flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn teif1(&self) -> TEIF1_R {
                TEIF1_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel x half transfer flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn htif1(&self) -> HTIF1_R {
                HTIF1_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel x transfer complete flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn tcif1(&self) -> TCIF1_R {
                TCIF1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Channel x global interrupt flag (x = 1 ..7)"]
            #[inline(always)]
            pub fn gif1(&self) -> GIF1_R {
                GIF1_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt flag clear register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ifcr](ifcr) module"]
    pub type IFCR = crate::Reg<u32, _IFCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IFCR;
    #[doc = "`write(|w| ..)` method takes [ifcr::W](ifcr::W) writer structure"]
    impl crate::Writable for IFCR {}
    #[doc = "interrupt flag clear register"]
    pub mod ifcr {
        #[doc = "Writer for register IFCR"]
        pub type W = crate::W<u32, super::IFCR>;
        #[doc = "Register IFCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IFCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CTEIF7`"]
        pub struct CTEIF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Write proxy for field `CHTIF7`"]
        pub struct CHTIF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTCIF7`"]
        pub struct CTCIF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Write proxy for field `CGIF7`"]
        pub struct CGIF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTEIF6`"]
        pub struct CTEIF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Write proxy for field `CHTIF6`"]
        pub struct CHTIF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTCIF6`"]
        pub struct CTCIF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Write proxy for field `CGIF6`"]
        pub struct CGIF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTEIF5`"]
        pub struct CTEIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Write proxy for field `CHTIF5`"]
        pub struct CHTIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTCIF5`"]
        pub struct CTCIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Write proxy for field `CGIF5`"]
        pub struct CGIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTEIF4`"]
        pub struct CTEIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Write proxy for field `CHTIF4`"]
        pub struct CHTIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTCIF4`"]
        pub struct CTCIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Write proxy for field `CGIF4`"]
        pub struct CGIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTEIF3`"]
        pub struct CTEIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Write proxy for field `CHTIF3`"]
        pub struct CHTIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTCIF3`"]
        pub struct CTCIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `CGIF3`"]
        pub struct CGIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTEIF2`"]
        pub struct CTEIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `CHTIF2`"]
        pub struct CHTIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTCIF2`"]
        pub struct CTCIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `CGIF2`"]
        pub struct CGIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTEIF1`"]
        pub struct CTEIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `CHTIF1`"]
        pub struct CHTIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTCIF1`"]
        pub struct CTCIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `CGIF1`"]
        pub struct CGIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 27 - Channel x transfer error clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn cteif7(&mut self) -> CTEIF7_W {
                CTEIF7_W { w: self }
            }
            #[doc = "Bit 26 - Channel x half transfer clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn chtif7(&mut self) -> CHTIF7_W {
                CHTIF7_W { w: self }
            }
            #[doc = "Bit 25 - Channel x transfer complete clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn ctcif7(&mut self) -> CTCIF7_W {
                CTCIF7_W { w: self }
            }
            #[doc = "Bit 24 - Channel x global interrupt clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn cgif7(&mut self) -> CGIF7_W {
                CGIF7_W { w: self }
            }
            #[doc = "Bit 23 - Channel x transfer error clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn cteif6(&mut self) -> CTEIF6_W {
                CTEIF6_W { w: self }
            }
            #[doc = "Bit 22 - Channel x half transfer clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn chtif6(&mut self) -> CHTIF6_W {
                CHTIF6_W { w: self }
            }
            #[doc = "Bit 21 - Channel x transfer complete clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn ctcif6(&mut self) -> CTCIF6_W {
                CTCIF6_W { w: self }
            }
            #[doc = "Bit 20 - Channel x global interrupt clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn cgif6(&mut self) -> CGIF6_W {
                CGIF6_W { w: self }
            }
            #[doc = "Bit 19 - Channel x transfer error clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn cteif5(&mut self) -> CTEIF5_W {
                CTEIF5_W { w: self }
            }
            #[doc = "Bit 18 - Channel x half transfer clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn chtif5(&mut self) -> CHTIF5_W {
                CHTIF5_W { w: self }
            }
            #[doc = "Bit 17 - Channel x transfer complete clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn ctcif5(&mut self) -> CTCIF5_W {
                CTCIF5_W { w: self }
            }
            #[doc = "Bit 16 - Channel x global interrupt clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn cgif5(&mut self) -> CGIF5_W {
                CGIF5_W { w: self }
            }
            #[doc = "Bit 15 - Channel x transfer error clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn cteif4(&mut self) -> CTEIF4_W {
                CTEIF4_W { w: self }
            }
            #[doc = "Bit 14 - Channel x half transfer clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn chtif4(&mut self) -> CHTIF4_W {
                CHTIF4_W { w: self }
            }
            #[doc = "Bit 13 - Channel x transfer complete clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn ctcif4(&mut self) -> CTCIF4_W {
                CTCIF4_W { w: self }
            }
            #[doc = "Bit 12 - Channel x global interrupt clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn cgif4(&mut self) -> CGIF4_W {
                CGIF4_W { w: self }
            }
            #[doc = "Bit 11 - Channel x transfer error clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn cteif3(&mut self) -> CTEIF3_W {
                CTEIF3_W { w: self }
            }
            #[doc = "Bit 10 - Channel x half transfer clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn chtif3(&mut self) -> CHTIF3_W {
                CHTIF3_W { w: self }
            }
            #[doc = "Bit 9 - Channel x transfer complete clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn ctcif3(&mut self) -> CTCIF3_W {
                CTCIF3_W { w: self }
            }
            #[doc = "Bit 8 - Channel x global interrupt clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn cgif3(&mut self) -> CGIF3_W {
                CGIF3_W { w: self }
            }
            #[doc = "Bit 7 - Channel x transfer error clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn cteif2(&mut self) -> CTEIF2_W {
                CTEIF2_W { w: self }
            }
            #[doc = "Bit 6 - Channel x half transfer clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn chtif2(&mut self) -> CHTIF2_W {
                CHTIF2_W { w: self }
            }
            #[doc = "Bit 5 - Channel x transfer complete clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn ctcif2(&mut self) -> CTCIF2_W {
                CTCIF2_W { w: self }
            }
            #[doc = "Bit 4 - Channel x global interrupt clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn cgif2(&mut self) -> CGIF2_W {
                CGIF2_W { w: self }
            }
            #[doc = "Bit 3 - Channel x transfer error clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn cteif1(&mut self) -> CTEIF1_W {
                CTEIF1_W { w: self }
            }
            #[doc = "Bit 2 - Channel x half transfer clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn chtif1(&mut self) -> CHTIF1_W {
                CHTIF1_W { w: self }
            }
            #[doc = "Bit 1 - Channel x transfer complete clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn ctcif1(&mut self) -> CTCIF1_W {
                CTCIF1_W { w: self }
            }
            #[doc = "Bit 0 - Channel x global interrupt clear (x = 1 ..7)"]
            #[inline(always)]
            pub fn cgif1(&mut self) -> CGIF1_W {
                CGIF1_W { w: self }
            }
        }
    }
    #[doc = "channel x configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr1](ccr1) module"]
    pub type CCR1 = crate::Reg<u32, _CCR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR1;
    #[doc = "`read()` method returns [ccr1::R](ccr1::R) reader structure"]
    impl crate::Readable for CCR1 {}
    #[doc = "`write(|w| ..)` method takes [ccr1::W](ccr1::W) writer structure"]
    impl crate::Writable for CCR1 {}
    #[doc = "channel x configuration register"]
    pub mod ccr1 {
        #[doc = "Reader of register CCR1"]
        pub type R = crate::R<u32, super::CCR1>;
        #[doc = "Writer for register CCR1"]
        pub type W = crate::W<u32, super::CCR1>;
        #[doc = "Register CCR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MEM2MEM`"]
        pub type MEM2MEM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MEM2MEM`"]
        pub struct MEM2MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM2MEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PL`"]
        pub type PL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PL`"]
        pub struct PL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MSIZE`"]
        pub type MSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MSIZE`"]
        pub struct MSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PSIZE`"]
        pub type PSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PSIZE`"]
        pub struct PSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MINC`"]
        pub type MINC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MINC`"]
        pub struct MINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PINC`"]
        pub type PINC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PINC`"]
        pub struct PINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CIRC`"]
        pub type CIRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CIRC`"]
        pub struct CIRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIR`"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TEIE`"]
        pub type TEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TEIE`"]
        pub struct TEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `HTIE`"]
        pub type HTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HTIE`"]
        pub struct HTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TCIE`"]
        pub type TCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TCIE`"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&self) -> MEM2MEM_R {
                MEM2MEM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Channel priority level"]
            #[inline(always)]
            pub fn pl(&self) -> PL_R {
                PL_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&self) -> MSIZE_R {
                MSIZE_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&self) -> PSIZE_R {
                PSIZE_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&self) -> MINC_R {
                MINC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&self) -> PINC_R {
                PINC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&self) -> CIRC_R {
                CIRC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&self) -> TEIE_R {
                TEIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Half transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&self) -> HTIE_R {
                HTIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&mut self) -> MEM2MEM_W {
                MEM2MEM_W { w: self }
            }
            #[doc = "Bits 12:13 - Channel priority level"]
            #[inline(always)]
            pub fn pl(&mut self) -> PL_W {
                PL_W { w: self }
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&mut self) -> MSIZE_W {
                MSIZE_W { w: self }
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&mut self) -> PSIZE_W {
                PSIZE_W { w: self }
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&mut self) -> MINC_W {
                MINC_W { w: self }
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&mut self) -> PINC_W {
                PINC_W { w: self }
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&mut self) -> CIRC_W {
                CIRC_W { w: self }
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&mut self) -> TEIE_W {
                TEIE_W { w: self }
            }
            #[doc = "Bit 2 - Half transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&mut self) -> HTIE_W {
                HTIE_W { w: self }
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "channel x number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cndtr1](cndtr1) module"]
    pub type CNDTR1 = crate::Reg<u32, _CNDTR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNDTR1;
    #[doc = "`read()` method returns [cndtr1::R](cndtr1::R) reader structure"]
    impl crate::Readable for CNDTR1 {}
    #[doc = "`write(|w| ..)` method takes [cndtr1::W](cndtr1::W) writer structure"]
    impl crate::Writable for CNDTR1 {}
    #[doc = "channel x number of data register"]
    pub mod cndtr1 {
        #[doc = "Reader of register CNDTR1"]
        pub type R = crate::R<u32, super::CNDTR1>;
        #[doc = "Writer for register CNDTR1"]
        pub type W = crate::W<u32, super::CNDTR1>;
        #[doc = "Register CNDTR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNDTR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `NDT`"]
        pub type NDT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `NDT`"]
        pub struct NDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&self) -> NDT_R {
                NDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&mut self) -> NDT_W {
                NDT_W { w: self }
            }
        }
    }
    #[doc = "channel x peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpar1](cpar1) module"]
    pub type CPAR1 = crate::Reg<u32, _CPAR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPAR1;
    #[doc = "`read()` method returns [cpar1::R](cpar1::R) reader structure"]
    impl crate::Readable for CPAR1 {}
    #[doc = "`write(|w| ..)` method takes [cpar1::W](cpar1::W) writer structure"]
    impl crate::Writable for CPAR1 {}
    #[doc = "channel x peripheral address register"]
    pub mod cpar1 {
        #[doc = "Reader of register CPAR1"]
        pub type R = crate::R<u32, super::CPAR1>;
        #[doc = "Writer for register CPAR1"]
        pub type W = crate::W<u32, super::CPAR1>;
        #[doc = "Register CPAR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CPAR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PA`"]
        pub type PA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `PA`"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
        }
    }
    #[doc = "channel x memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cmar1](cmar1) module"]
    pub type CMAR1 = crate::Reg<u32, _CMAR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CMAR1;
    #[doc = "`read()` method returns [cmar1::R](cmar1::R) reader structure"]
    impl crate::Readable for CMAR1 {}
    #[doc = "`write(|w| ..)` method takes [cmar1::W](cmar1::W) writer structure"]
    impl crate::Writable for CMAR1 {}
    #[doc = "channel x memory address register"]
    pub mod cmar1 {
        #[doc = "Reader of register CMAR1"]
        pub type R = crate::R<u32, super::CMAR1>;
        #[doc = "Writer for register CMAR1"]
        pub type W = crate::W<u32, super::CMAR1>;
        #[doc = "Register CMAR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CMAR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MA`"]
        pub type MA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `MA`"]
        pub struct MA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&self) -> MA_R {
                MA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&mut self) -> MA_W {
                MA_W { w: self }
            }
        }
    }
    #[doc = "channel x configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr2](ccr2) module"]
    pub type CCR2 = crate::Reg<u32, _CCR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR2;
    #[doc = "`read()` method returns [ccr2::R](ccr2::R) reader structure"]
    impl crate::Readable for CCR2 {}
    #[doc = "`write(|w| ..)` method takes [ccr2::W](ccr2::W) writer structure"]
    impl crate::Writable for CCR2 {}
    #[doc = "channel x configuration register"]
    pub mod ccr2 {
        #[doc = "Reader of register CCR2"]
        pub type R = crate::R<u32, super::CCR2>;
        #[doc = "Writer for register CCR2"]
        pub type W = crate::W<u32, super::CCR2>;
        #[doc = "Register CCR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MEM2MEM`"]
        pub type MEM2MEM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MEM2MEM`"]
        pub struct MEM2MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM2MEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PL`"]
        pub type PL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PL`"]
        pub struct PL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MSIZE`"]
        pub type MSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MSIZE`"]
        pub struct MSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PSIZE`"]
        pub type PSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PSIZE`"]
        pub struct PSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MINC`"]
        pub type MINC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MINC`"]
        pub struct MINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PINC`"]
        pub type PINC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PINC`"]
        pub struct PINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CIRC`"]
        pub type CIRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CIRC`"]
        pub struct CIRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIR`"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TEIE`"]
        pub type TEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TEIE`"]
        pub struct TEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `HTIE`"]
        pub type HTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HTIE`"]
        pub struct HTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TCIE`"]
        pub type TCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TCIE`"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&self) -> MEM2MEM_R {
                MEM2MEM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Channel priority level"]
            #[inline(always)]
            pub fn pl(&self) -> PL_R {
                PL_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&self) -> MSIZE_R {
                MSIZE_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&self) -> PSIZE_R {
                PSIZE_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&self) -> MINC_R {
                MINC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&self) -> PINC_R {
                PINC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&self) -> CIRC_R {
                CIRC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&self) -> TEIE_R {
                TEIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Half transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&self) -> HTIE_R {
                HTIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&mut self) -> MEM2MEM_W {
                MEM2MEM_W { w: self }
            }
            #[doc = "Bits 12:13 - Channel priority level"]
            #[inline(always)]
            pub fn pl(&mut self) -> PL_W {
                PL_W { w: self }
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&mut self) -> MSIZE_W {
                MSIZE_W { w: self }
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&mut self) -> PSIZE_W {
                PSIZE_W { w: self }
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&mut self) -> MINC_W {
                MINC_W { w: self }
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&mut self) -> PINC_W {
                PINC_W { w: self }
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&mut self) -> CIRC_W {
                CIRC_W { w: self }
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&mut self) -> TEIE_W {
                TEIE_W { w: self }
            }
            #[doc = "Bit 2 - Half transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&mut self) -> HTIE_W {
                HTIE_W { w: self }
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "channel x number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cndtr2](cndtr2) module"]
    pub type CNDTR2 = crate::Reg<u32, _CNDTR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNDTR2;
    #[doc = "`read()` method returns [cndtr2::R](cndtr2::R) reader structure"]
    impl crate::Readable for CNDTR2 {}
    #[doc = "`write(|w| ..)` method takes [cndtr2::W](cndtr2::W) writer structure"]
    impl crate::Writable for CNDTR2 {}
    #[doc = "channel x number of data register"]
    pub mod cndtr2 {
        #[doc = "Reader of register CNDTR2"]
        pub type R = crate::R<u32, super::CNDTR2>;
        #[doc = "Writer for register CNDTR2"]
        pub type W = crate::W<u32, super::CNDTR2>;
        #[doc = "Register CNDTR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNDTR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `NDT`"]
        pub type NDT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `NDT`"]
        pub struct NDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&self) -> NDT_R {
                NDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&mut self) -> NDT_W {
                NDT_W { w: self }
            }
        }
    }
    #[doc = "channel x peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpar2](cpar2) module"]
    pub type CPAR2 = crate::Reg<u32, _CPAR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPAR2;
    #[doc = "`read()` method returns [cpar2::R](cpar2::R) reader structure"]
    impl crate::Readable for CPAR2 {}
    #[doc = "`write(|w| ..)` method takes [cpar2::W](cpar2::W) writer structure"]
    impl crate::Writable for CPAR2 {}
    #[doc = "channel x peripheral address register"]
    pub mod cpar2 {
        #[doc = "Reader of register CPAR2"]
        pub type R = crate::R<u32, super::CPAR2>;
        #[doc = "Writer for register CPAR2"]
        pub type W = crate::W<u32, super::CPAR2>;
        #[doc = "Register CPAR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CPAR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PA`"]
        pub type PA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `PA`"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
        }
    }
    #[doc = "channel x memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cmar2](cmar2) module"]
    pub type CMAR2 = crate::Reg<u32, _CMAR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CMAR2;
    #[doc = "`read()` method returns [cmar2::R](cmar2::R) reader structure"]
    impl crate::Readable for CMAR2 {}
    #[doc = "`write(|w| ..)` method takes [cmar2::W](cmar2::W) writer structure"]
    impl crate::Writable for CMAR2 {}
    #[doc = "channel x memory address register"]
    pub mod cmar2 {
        #[doc = "Reader of register CMAR2"]
        pub type R = crate::R<u32, super::CMAR2>;
        #[doc = "Writer for register CMAR2"]
        pub type W = crate::W<u32, super::CMAR2>;
        #[doc = "Register CMAR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CMAR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MA`"]
        pub type MA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `MA`"]
        pub struct MA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&self) -> MA_R {
                MA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&mut self) -> MA_W {
                MA_W { w: self }
            }
        }
    }
    #[doc = "channel x configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr3](ccr3) module"]
    pub type CCR3 = crate::Reg<u32, _CCR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR3;
    #[doc = "`read()` method returns [ccr3::R](ccr3::R) reader structure"]
    impl crate::Readable for CCR3 {}
    #[doc = "`write(|w| ..)` method takes [ccr3::W](ccr3::W) writer structure"]
    impl crate::Writable for CCR3 {}
    #[doc = "channel x configuration register"]
    pub mod ccr3 {
        #[doc = "Reader of register CCR3"]
        pub type R = crate::R<u32, super::CCR3>;
        #[doc = "Writer for register CCR3"]
        pub type W = crate::W<u32, super::CCR3>;
        #[doc = "Register CCR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MEM2MEM`"]
        pub type MEM2MEM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MEM2MEM`"]
        pub struct MEM2MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM2MEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PL`"]
        pub type PL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PL`"]
        pub struct PL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MSIZE`"]
        pub type MSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MSIZE`"]
        pub struct MSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PSIZE`"]
        pub type PSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PSIZE`"]
        pub struct PSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MINC`"]
        pub type MINC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MINC`"]
        pub struct MINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PINC`"]
        pub type PINC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PINC`"]
        pub struct PINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CIRC`"]
        pub type CIRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CIRC`"]
        pub struct CIRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIR`"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TEIE`"]
        pub type TEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TEIE`"]
        pub struct TEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `HTIE`"]
        pub type HTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HTIE`"]
        pub struct HTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TCIE`"]
        pub type TCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TCIE`"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&self) -> MEM2MEM_R {
                MEM2MEM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Channel priority level"]
            #[inline(always)]
            pub fn pl(&self) -> PL_R {
                PL_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&self) -> MSIZE_R {
                MSIZE_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&self) -> PSIZE_R {
                PSIZE_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&self) -> MINC_R {
                MINC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&self) -> PINC_R {
                PINC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&self) -> CIRC_R {
                CIRC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&self) -> TEIE_R {
                TEIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Half transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&self) -> HTIE_R {
                HTIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&mut self) -> MEM2MEM_W {
                MEM2MEM_W { w: self }
            }
            #[doc = "Bits 12:13 - Channel priority level"]
            #[inline(always)]
            pub fn pl(&mut self) -> PL_W {
                PL_W { w: self }
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&mut self) -> MSIZE_W {
                MSIZE_W { w: self }
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&mut self) -> PSIZE_W {
                PSIZE_W { w: self }
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&mut self) -> MINC_W {
                MINC_W { w: self }
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&mut self) -> PINC_W {
                PINC_W { w: self }
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&mut self) -> CIRC_W {
                CIRC_W { w: self }
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&mut self) -> TEIE_W {
                TEIE_W { w: self }
            }
            #[doc = "Bit 2 - Half transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&mut self) -> HTIE_W {
                HTIE_W { w: self }
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "channel x number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cndtr3](cndtr3) module"]
    pub type CNDTR3 = crate::Reg<u32, _CNDTR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNDTR3;
    #[doc = "`read()` method returns [cndtr3::R](cndtr3::R) reader structure"]
    impl crate::Readable for CNDTR3 {}
    #[doc = "`write(|w| ..)` method takes [cndtr3::W](cndtr3::W) writer structure"]
    impl crate::Writable for CNDTR3 {}
    #[doc = "channel x number of data register"]
    pub mod cndtr3 {
        #[doc = "Reader of register CNDTR3"]
        pub type R = crate::R<u32, super::CNDTR3>;
        #[doc = "Writer for register CNDTR3"]
        pub type W = crate::W<u32, super::CNDTR3>;
        #[doc = "Register CNDTR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNDTR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `NDT`"]
        pub type NDT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `NDT`"]
        pub struct NDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&self) -> NDT_R {
                NDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&mut self) -> NDT_W {
                NDT_W { w: self }
            }
        }
    }
    #[doc = "channel x peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpar3](cpar3) module"]
    pub type CPAR3 = crate::Reg<u32, _CPAR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPAR3;
    #[doc = "`read()` method returns [cpar3::R](cpar3::R) reader structure"]
    impl crate::Readable for CPAR3 {}
    #[doc = "`write(|w| ..)` method takes [cpar3::W](cpar3::W) writer structure"]
    impl crate::Writable for CPAR3 {}
    #[doc = "channel x peripheral address register"]
    pub mod cpar3 {
        #[doc = "Reader of register CPAR3"]
        pub type R = crate::R<u32, super::CPAR3>;
        #[doc = "Writer for register CPAR3"]
        pub type W = crate::W<u32, super::CPAR3>;
        #[doc = "Register CPAR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CPAR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PA`"]
        pub type PA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `PA`"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
        }
    }
    #[doc = "channel x memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cmar3](cmar3) module"]
    pub type CMAR3 = crate::Reg<u32, _CMAR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CMAR3;
    #[doc = "`read()` method returns [cmar3::R](cmar3::R) reader structure"]
    impl crate::Readable for CMAR3 {}
    #[doc = "`write(|w| ..)` method takes [cmar3::W](cmar3::W) writer structure"]
    impl crate::Writable for CMAR3 {}
    #[doc = "channel x memory address register"]
    pub mod cmar3 {
        #[doc = "Reader of register CMAR3"]
        pub type R = crate::R<u32, super::CMAR3>;
        #[doc = "Writer for register CMAR3"]
        pub type W = crate::W<u32, super::CMAR3>;
        #[doc = "Register CMAR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CMAR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MA`"]
        pub type MA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `MA`"]
        pub struct MA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&self) -> MA_R {
                MA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&mut self) -> MA_W {
                MA_W { w: self }
            }
        }
    }
    #[doc = "channel x configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr4](ccr4) module"]
    pub type CCR4 = crate::Reg<u32, _CCR4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR4;
    #[doc = "`read()` method returns [ccr4::R](ccr4::R) reader structure"]
    impl crate::Readable for CCR4 {}
    #[doc = "`write(|w| ..)` method takes [ccr4::W](ccr4::W) writer structure"]
    impl crate::Writable for CCR4 {}
    #[doc = "channel x configuration register"]
    pub mod ccr4 {
        #[doc = "Reader of register CCR4"]
        pub type R = crate::R<u32, super::CCR4>;
        #[doc = "Writer for register CCR4"]
        pub type W = crate::W<u32, super::CCR4>;
        #[doc = "Register CCR4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MEM2MEM`"]
        pub type MEM2MEM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MEM2MEM`"]
        pub struct MEM2MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM2MEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PL`"]
        pub type PL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PL`"]
        pub struct PL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MSIZE`"]
        pub type MSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MSIZE`"]
        pub struct MSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PSIZE`"]
        pub type PSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PSIZE`"]
        pub struct PSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MINC`"]
        pub type MINC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MINC`"]
        pub struct MINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PINC`"]
        pub type PINC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PINC`"]
        pub struct PINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CIRC`"]
        pub type CIRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CIRC`"]
        pub struct CIRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIR`"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TEIE`"]
        pub type TEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TEIE`"]
        pub struct TEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `HTIE`"]
        pub type HTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HTIE`"]
        pub struct HTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TCIE`"]
        pub type TCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TCIE`"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&self) -> MEM2MEM_R {
                MEM2MEM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Channel priority level"]
            #[inline(always)]
            pub fn pl(&self) -> PL_R {
                PL_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&self) -> MSIZE_R {
                MSIZE_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&self) -> PSIZE_R {
                PSIZE_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&self) -> MINC_R {
                MINC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&self) -> PINC_R {
                PINC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&self) -> CIRC_R {
                CIRC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&self) -> TEIE_R {
                TEIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Half transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&self) -> HTIE_R {
                HTIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&mut self) -> MEM2MEM_W {
                MEM2MEM_W { w: self }
            }
            #[doc = "Bits 12:13 - Channel priority level"]
            #[inline(always)]
            pub fn pl(&mut self) -> PL_W {
                PL_W { w: self }
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&mut self) -> MSIZE_W {
                MSIZE_W { w: self }
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&mut self) -> PSIZE_W {
                PSIZE_W { w: self }
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&mut self) -> MINC_W {
                MINC_W { w: self }
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&mut self) -> PINC_W {
                PINC_W { w: self }
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&mut self) -> CIRC_W {
                CIRC_W { w: self }
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&mut self) -> TEIE_W {
                TEIE_W { w: self }
            }
            #[doc = "Bit 2 - Half transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&mut self) -> HTIE_W {
                HTIE_W { w: self }
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "channel x number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cndtr4](cndtr4) module"]
    pub type CNDTR4 = crate::Reg<u32, _CNDTR4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNDTR4;
    #[doc = "`read()` method returns [cndtr4::R](cndtr4::R) reader structure"]
    impl crate::Readable for CNDTR4 {}
    #[doc = "`write(|w| ..)` method takes [cndtr4::W](cndtr4::W) writer structure"]
    impl crate::Writable for CNDTR4 {}
    #[doc = "channel x number of data register"]
    pub mod cndtr4 {
        #[doc = "Reader of register CNDTR4"]
        pub type R = crate::R<u32, super::CNDTR4>;
        #[doc = "Writer for register CNDTR4"]
        pub type W = crate::W<u32, super::CNDTR4>;
        #[doc = "Register CNDTR4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNDTR4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `NDT`"]
        pub type NDT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `NDT`"]
        pub struct NDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&self) -> NDT_R {
                NDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&mut self) -> NDT_W {
                NDT_W { w: self }
            }
        }
    }
    #[doc = "channel x peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpar4](cpar4) module"]
    pub type CPAR4 = crate::Reg<u32, _CPAR4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPAR4;
    #[doc = "`read()` method returns [cpar4::R](cpar4::R) reader structure"]
    impl crate::Readable for CPAR4 {}
    #[doc = "`write(|w| ..)` method takes [cpar4::W](cpar4::W) writer structure"]
    impl crate::Writable for CPAR4 {}
    #[doc = "channel x peripheral address register"]
    pub mod cpar4 {
        #[doc = "Reader of register CPAR4"]
        pub type R = crate::R<u32, super::CPAR4>;
        #[doc = "Writer for register CPAR4"]
        pub type W = crate::W<u32, super::CPAR4>;
        #[doc = "Register CPAR4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CPAR4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PA`"]
        pub type PA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `PA`"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
        }
    }
    #[doc = "channel x memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cmar4](cmar4) module"]
    pub type CMAR4 = crate::Reg<u32, _CMAR4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CMAR4;
    #[doc = "`read()` method returns [cmar4::R](cmar4::R) reader structure"]
    impl crate::Readable for CMAR4 {}
    #[doc = "`write(|w| ..)` method takes [cmar4::W](cmar4::W) writer structure"]
    impl crate::Writable for CMAR4 {}
    #[doc = "channel x memory address register"]
    pub mod cmar4 {
        #[doc = "Reader of register CMAR4"]
        pub type R = crate::R<u32, super::CMAR4>;
        #[doc = "Writer for register CMAR4"]
        pub type W = crate::W<u32, super::CMAR4>;
        #[doc = "Register CMAR4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CMAR4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MA`"]
        pub type MA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `MA`"]
        pub struct MA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&self) -> MA_R {
                MA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&mut self) -> MA_W {
                MA_W { w: self }
            }
        }
    }
    #[doc = "channel x configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr5](ccr5) module"]
    pub type CCR5 = crate::Reg<u32, _CCR5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR5;
    #[doc = "`read()` method returns [ccr5::R](ccr5::R) reader structure"]
    impl crate::Readable for CCR5 {}
    #[doc = "`write(|w| ..)` method takes [ccr5::W](ccr5::W) writer structure"]
    impl crate::Writable for CCR5 {}
    #[doc = "channel x configuration register"]
    pub mod ccr5 {
        #[doc = "Reader of register CCR5"]
        pub type R = crate::R<u32, super::CCR5>;
        #[doc = "Writer for register CCR5"]
        pub type W = crate::W<u32, super::CCR5>;
        #[doc = "Register CCR5 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR5 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MEM2MEM`"]
        pub type MEM2MEM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MEM2MEM`"]
        pub struct MEM2MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM2MEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PL`"]
        pub type PL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PL`"]
        pub struct PL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MSIZE`"]
        pub type MSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MSIZE`"]
        pub struct MSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PSIZE`"]
        pub type PSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PSIZE`"]
        pub struct PSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MINC`"]
        pub type MINC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MINC`"]
        pub struct MINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PINC`"]
        pub type PINC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PINC`"]
        pub struct PINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CIRC`"]
        pub type CIRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CIRC`"]
        pub struct CIRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIR`"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TEIE`"]
        pub type TEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TEIE`"]
        pub struct TEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `HTIE`"]
        pub type HTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HTIE`"]
        pub struct HTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TCIE`"]
        pub type TCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TCIE`"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&self) -> MEM2MEM_R {
                MEM2MEM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Channel priority level"]
            #[inline(always)]
            pub fn pl(&self) -> PL_R {
                PL_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&self) -> MSIZE_R {
                MSIZE_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&self) -> PSIZE_R {
                PSIZE_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&self) -> MINC_R {
                MINC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&self) -> PINC_R {
                PINC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&self) -> CIRC_R {
                CIRC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&self) -> TEIE_R {
                TEIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Half transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&self) -> HTIE_R {
                HTIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&mut self) -> MEM2MEM_W {
                MEM2MEM_W { w: self }
            }
            #[doc = "Bits 12:13 - Channel priority level"]
            #[inline(always)]
            pub fn pl(&mut self) -> PL_W {
                PL_W { w: self }
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&mut self) -> MSIZE_W {
                MSIZE_W { w: self }
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&mut self) -> PSIZE_W {
                PSIZE_W { w: self }
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&mut self) -> MINC_W {
                MINC_W { w: self }
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&mut self) -> PINC_W {
                PINC_W { w: self }
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&mut self) -> CIRC_W {
                CIRC_W { w: self }
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&mut self) -> TEIE_W {
                TEIE_W { w: self }
            }
            #[doc = "Bit 2 - Half transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&mut self) -> HTIE_W {
                HTIE_W { w: self }
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "channel x number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cndtr5](cndtr5) module"]
    pub type CNDTR5 = crate::Reg<u32, _CNDTR5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNDTR5;
    #[doc = "`read()` method returns [cndtr5::R](cndtr5::R) reader structure"]
    impl crate::Readable for CNDTR5 {}
    #[doc = "`write(|w| ..)` method takes [cndtr5::W](cndtr5::W) writer structure"]
    impl crate::Writable for CNDTR5 {}
    #[doc = "channel x number of data register"]
    pub mod cndtr5 {
        #[doc = "Reader of register CNDTR5"]
        pub type R = crate::R<u32, super::CNDTR5>;
        #[doc = "Writer for register CNDTR5"]
        pub type W = crate::W<u32, super::CNDTR5>;
        #[doc = "Register CNDTR5 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNDTR5 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `NDT`"]
        pub type NDT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `NDT`"]
        pub struct NDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&self) -> NDT_R {
                NDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&mut self) -> NDT_W {
                NDT_W { w: self }
            }
        }
    }
    #[doc = "channel x peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpar5](cpar5) module"]
    pub type CPAR5 = crate::Reg<u32, _CPAR5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPAR5;
    #[doc = "`read()` method returns [cpar5::R](cpar5::R) reader structure"]
    impl crate::Readable for CPAR5 {}
    #[doc = "`write(|w| ..)` method takes [cpar5::W](cpar5::W) writer structure"]
    impl crate::Writable for CPAR5 {}
    #[doc = "channel x peripheral address register"]
    pub mod cpar5 {
        #[doc = "Reader of register CPAR5"]
        pub type R = crate::R<u32, super::CPAR5>;
        #[doc = "Writer for register CPAR5"]
        pub type W = crate::W<u32, super::CPAR5>;
        #[doc = "Register CPAR5 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CPAR5 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PA`"]
        pub type PA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `PA`"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
        }
    }
    #[doc = "channel x memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cmar5](cmar5) module"]
    pub type CMAR5 = crate::Reg<u32, _CMAR5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CMAR5;
    #[doc = "`read()` method returns [cmar5::R](cmar5::R) reader structure"]
    impl crate::Readable for CMAR5 {}
    #[doc = "`write(|w| ..)` method takes [cmar5::W](cmar5::W) writer structure"]
    impl crate::Writable for CMAR5 {}
    #[doc = "channel x memory address register"]
    pub mod cmar5 {
        #[doc = "Reader of register CMAR5"]
        pub type R = crate::R<u32, super::CMAR5>;
        #[doc = "Writer for register CMAR5"]
        pub type W = crate::W<u32, super::CMAR5>;
        #[doc = "Register CMAR5 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CMAR5 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MA`"]
        pub type MA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `MA`"]
        pub struct MA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&self) -> MA_R {
                MA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&mut self) -> MA_W {
                MA_W { w: self }
            }
        }
    }
    #[doc = "channel x configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr6](ccr6) module"]
    pub type CCR6 = crate::Reg<u32, _CCR6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR6;
    #[doc = "`read()` method returns [ccr6::R](ccr6::R) reader structure"]
    impl crate::Readable for CCR6 {}
    #[doc = "`write(|w| ..)` method takes [ccr6::W](ccr6::W) writer structure"]
    impl crate::Writable for CCR6 {}
    #[doc = "channel x configuration register"]
    pub mod ccr6 {
        #[doc = "Reader of register CCR6"]
        pub type R = crate::R<u32, super::CCR6>;
        #[doc = "Writer for register CCR6"]
        pub type W = crate::W<u32, super::CCR6>;
        #[doc = "Register CCR6 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR6 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MEM2MEM`"]
        pub type MEM2MEM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MEM2MEM`"]
        pub struct MEM2MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM2MEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PL`"]
        pub type PL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PL`"]
        pub struct PL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MSIZE`"]
        pub type MSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MSIZE`"]
        pub struct MSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PSIZE`"]
        pub type PSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PSIZE`"]
        pub struct PSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MINC`"]
        pub type MINC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MINC`"]
        pub struct MINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PINC`"]
        pub type PINC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PINC`"]
        pub struct PINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CIRC`"]
        pub type CIRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CIRC`"]
        pub struct CIRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIR`"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TEIE`"]
        pub type TEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TEIE`"]
        pub struct TEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `HTIE`"]
        pub type HTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HTIE`"]
        pub struct HTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TCIE`"]
        pub type TCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TCIE`"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&self) -> MEM2MEM_R {
                MEM2MEM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Channel priority level"]
            #[inline(always)]
            pub fn pl(&self) -> PL_R {
                PL_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&self) -> MSIZE_R {
                MSIZE_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&self) -> PSIZE_R {
                PSIZE_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&self) -> MINC_R {
                MINC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&self) -> PINC_R {
                PINC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&self) -> CIRC_R {
                CIRC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&self) -> TEIE_R {
                TEIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Half transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&self) -> HTIE_R {
                HTIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&mut self) -> MEM2MEM_W {
                MEM2MEM_W { w: self }
            }
            #[doc = "Bits 12:13 - Channel priority level"]
            #[inline(always)]
            pub fn pl(&mut self) -> PL_W {
                PL_W { w: self }
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&mut self) -> MSIZE_W {
                MSIZE_W { w: self }
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&mut self) -> PSIZE_W {
                PSIZE_W { w: self }
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&mut self) -> MINC_W {
                MINC_W { w: self }
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&mut self) -> PINC_W {
                PINC_W { w: self }
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&mut self) -> CIRC_W {
                CIRC_W { w: self }
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&mut self) -> TEIE_W {
                TEIE_W { w: self }
            }
            #[doc = "Bit 2 - Half transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&mut self) -> HTIE_W {
                HTIE_W { w: self }
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "channel x number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cndtr6](cndtr6) module"]
    pub type CNDTR6 = crate::Reg<u32, _CNDTR6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNDTR6;
    #[doc = "`read()` method returns [cndtr6::R](cndtr6::R) reader structure"]
    impl crate::Readable for CNDTR6 {}
    #[doc = "`write(|w| ..)` method takes [cndtr6::W](cndtr6::W) writer structure"]
    impl crate::Writable for CNDTR6 {}
    #[doc = "channel x number of data register"]
    pub mod cndtr6 {
        #[doc = "Reader of register CNDTR6"]
        pub type R = crate::R<u32, super::CNDTR6>;
        #[doc = "Writer for register CNDTR6"]
        pub type W = crate::W<u32, super::CNDTR6>;
        #[doc = "Register CNDTR6 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNDTR6 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `NDT`"]
        pub type NDT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `NDT`"]
        pub struct NDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&self) -> NDT_R {
                NDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&mut self) -> NDT_W {
                NDT_W { w: self }
            }
        }
    }
    #[doc = "channel x peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpar6](cpar6) module"]
    pub type CPAR6 = crate::Reg<u32, _CPAR6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPAR6;
    #[doc = "`read()` method returns [cpar6::R](cpar6::R) reader structure"]
    impl crate::Readable for CPAR6 {}
    #[doc = "`write(|w| ..)` method takes [cpar6::W](cpar6::W) writer structure"]
    impl crate::Writable for CPAR6 {}
    #[doc = "channel x peripheral address register"]
    pub mod cpar6 {
        #[doc = "Reader of register CPAR6"]
        pub type R = crate::R<u32, super::CPAR6>;
        #[doc = "Writer for register CPAR6"]
        pub type W = crate::W<u32, super::CPAR6>;
        #[doc = "Register CPAR6 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CPAR6 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PA`"]
        pub type PA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `PA`"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
        }
    }
    #[doc = "channel x memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cmar6](cmar6) module"]
    pub type CMAR6 = crate::Reg<u32, _CMAR6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CMAR6;
    #[doc = "`read()` method returns [cmar6::R](cmar6::R) reader structure"]
    impl crate::Readable for CMAR6 {}
    #[doc = "`write(|w| ..)` method takes [cmar6::W](cmar6::W) writer structure"]
    impl crate::Writable for CMAR6 {}
    #[doc = "channel x memory address register"]
    pub mod cmar6 {
        #[doc = "Reader of register CMAR6"]
        pub type R = crate::R<u32, super::CMAR6>;
        #[doc = "Writer for register CMAR6"]
        pub type W = crate::W<u32, super::CMAR6>;
        #[doc = "Register CMAR6 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CMAR6 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MA`"]
        pub type MA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `MA`"]
        pub struct MA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&self) -> MA_R {
                MA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&mut self) -> MA_W {
                MA_W { w: self }
            }
        }
    }
    #[doc = "channel x configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr7](ccr7) module"]
    pub type CCR7 = crate::Reg<u32, _CCR7>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR7;
    #[doc = "`read()` method returns [ccr7::R](ccr7::R) reader structure"]
    impl crate::Readable for CCR7 {}
    #[doc = "`write(|w| ..)` method takes [ccr7::W](ccr7::W) writer structure"]
    impl crate::Writable for CCR7 {}
    #[doc = "channel x configuration register"]
    pub mod ccr7 {
        #[doc = "Reader of register CCR7"]
        pub type R = crate::R<u32, super::CCR7>;
        #[doc = "Writer for register CCR7"]
        pub type W = crate::W<u32, super::CCR7>;
        #[doc = "Register CCR7 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR7 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MEM2MEM`"]
        pub type MEM2MEM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MEM2MEM`"]
        pub struct MEM2MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM2MEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PL`"]
        pub type PL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PL`"]
        pub struct PL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MSIZE`"]
        pub type MSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MSIZE`"]
        pub struct MSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PSIZE`"]
        pub type PSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PSIZE`"]
        pub struct PSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MINC`"]
        pub type MINC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MINC`"]
        pub struct MINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PINC`"]
        pub type PINC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PINC`"]
        pub struct PINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CIRC`"]
        pub type CIRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CIRC`"]
        pub struct CIRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIR`"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TEIE`"]
        pub type TEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TEIE`"]
        pub struct TEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `HTIE`"]
        pub type HTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HTIE`"]
        pub struct HTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TCIE`"]
        pub type TCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TCIE`"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&self) -> MEM2MEM_R {
                MEM2MEM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Channel priority level"]
            #[inline(always)]
            pub fn pl(&self) -> PL_R {
                PL_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&self) -> MSIZE_R {
                MSIZE_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&self) -> PSIZE_R {
                PSIZE_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&self) -> MINC_R {
                MINC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&self) -> PINC_R {
                PINC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&self) -> CIRC_R {
                CIRC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&self) -> TEIE_R {
                TEIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Half transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&self) -> HTIE_R {
                HTIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Memory to memory mode"]
            #[inline(always)]
            pub fn mem2mem(&mut self) -> MEM2MEM_W {
                MEM2MEM_W { w: self }
            }
            #[doc = "Bits 12:13 - Channel priority level"]
            #[inline(always)]
            pub fn pl(&mut self) -> PL_W {
                PL_W { w: self }
            }
            #[doc = "Bits 10:11 - Memory size"]
            #[inline(always)]
            pub fn msize(&mut self) -> MSIZE_W {
                MSIZE_W { w: self }
            }
            #[doc = "Bits 8:9 - Peripheral size"]
            #[inline(always)]
            pub fn psize(&mut self) -> PSIZE_W {
                PSIZE_W { w: self }
            }
            #[doc = "Bit 7 - Memory increment mode"]
            #[inline(always)]
            pub fn minc(&mut self) -> MINC_W {
                MINC_W { w: self }
            }
            #[doc = "Bit 6 - Peripheral increment mode"]
            #[inline(always)]
            pub fn pinc(&mut self) -> PINC_W {
                PINC_W { w: self }
            }
            #[doc = "Bit 5 - Circular mode"]
            #[inline(always)]
            pub fn circ(&mut self) -> CIRC_W {
                CIRC_W { w: self }
            }
            #[doc = "Bit 4 - Data transfer direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 3 - Transfer error interrupt enable"]
            #[inline(always)]
            pub fn teie(&mut self) -> TEIE_W {
                TEIE_W { w: self }
            }
            #[doc = "Bit 2 - Half transfer interrupt enable"]
            #[inline(always)]
            pub fn htie(&mut self) -> HTIE_W {
                HTIE_W { w: self }
            }
            #[doc = "Bit 1 - Transfer complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "channel x number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cndtr7](cndtr7) module"]
    pub type CNDTR7 = crate::Reg<u32, _CNDTR7>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNDTR7;
    #[doc = "`read()` method returns [cndtr7::R](cndtr7::R) reader structure"]
    impl crate::Readable for CNDTR7 {}
    #[doc = "`write(|w| ..)` method takes [cndtr7::W](cndtr7::W) writer structure"]
    impl crate::Writable for CNDTR7 {}
    #[doc = "channel x number of data register"]
    pub mod cndtr7 {
        #[doc = "Reader of register CNDTR7"]
        pub type R = crate::R<u32, super::CNDTR7>;
        #[doc = "Writer for register CNDTR7"]
        pub type W = crate::W<u32, super::CNDTR7>;
        #[doc = "Register CNDTR7 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNDTR7 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `NDT`"]
        pub type NDT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `NDT`"]
        pub struct NDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&self) -> NDT_R {
                NDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of data to transfer"]
            #[inline(always)]
            pub fn ndt(&mut self) -> NDT_W {
                NDT_W { w: self }
            }
        }
    }
    #[doc = "channel x peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpar7](cpar7) module"]
    pub type CPAR7 = crate::Reg<u32, _CPAR7>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPAR7;
    #[doc = "`read()` method returns [cpar7::R](cpar7::R) reader structure"]
    impl crate::Readable for CPAR7 {}
    #[doc = "`write(|w| ..)` method takes [cpar7::W](cpar7::W) writer structure"]
    impl crate::Writable for CPAR7 {}
    #[doc = "channel x peripheral address register"]
    pub mod cpar7 {
        #[doc = "Reader of register CPAR7"]
        pub type R = crate::R<u32, super::CPAR7>;
        #[doc = "Writer for register CPAR7"]
        pub type W = crate::W<u32, super::CPAR7>;
        #[doc = "Register CPAR7 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CPAR7 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PA`"]
        pub type PA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `PA`"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral address"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
        }
    }
    #[doc = "channel x memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cmar7](cmar7) module"]
    pub type CMAR7 = crate::Reg<u32, _CMAR7>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CMAR7;
    #[doc = "`read()` method returns [cmar7::R](cmar7::R) reader structure"]
    impl crate::Readable for CMAR7 {}
    #[doc = "`write(|w| ..)` method takes [cmar7::W](cmar7::W) writer structure"]
    impl crate::Writable for CMAR7 {}
    #[doc = "channel x memory address register"]
    pub mod cmar7 {
        #[doc = "Reader of register CMAR7"]
        pub type R = crate::R<u32, super::CMAR7>;
        #[doc = "Writer for register CMAR7"]
        pub type W = crate::W<u32, super::CMAR7>;
        #[doc = "Register CMAR7 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CMAR7 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MA`"]
        pub type MA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `MA`"]
        pub struct MA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&self) -> MA_R {
                MA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory address"]
            #[inline(always)]
            pub fn ma(&mut self) -> MA_W {
                MA_W { w: self }
            }
        }
    }
}
#[doc = "Direct memory access controller"]
pub struct DMA2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DMA2 {}
impl DMA2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dma1::RegisterBlock {
        0x4002_6400 as *const _
    }
}
impl Deref for DMA2 {
    type Target = dma1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*DMA2::ptr() }
    }
}
#[doc = "External interrupt/event controller"]
pub struct EXTI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EXTI {}
impl EXTI {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const exti::RegisterBlock {
        0x4001_0400 as *const _
    }
}
impl Deref for EXTI {
    type Target = exti::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*EXTI::ptr() }
    }
}
#[doc = "External interrupt/event controller"]
pub mod exti {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - IMR"]
        pub imr: IMR,
        #[doc = "0x04 - EMR"]
        pub emr: EMR,
        #[doc = "0x08 - RTSR"]
        pub rtsr: RTSR,
        #[doc = "0x0c - FTSR"]
        pub ftsr: FTSR,
        #[doc = "0x10 - SWIER"]
        pub swier: SWIER,
        #[doc = "0x14 - PR"]
        pub pr: PR,
    }
    #[doc = "IMR\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [imr](imr) module"]
    pub type IMR = crate::Reg<u32, _IMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IMR;
    #[doc = "`read()` method returns [imr::R](imr::R) reader structure"]
    impl crate::Readable for IMR {}
    #[doc = "`write(|w| ..)` method takes [imr::W](imr::W) writer structure"]
    impl crate::Writable for IMR {}
    #[doc = "IMR"]
    pub mod imr {
        #[doc = "Reader of register IMR"]
        pub type R = crate::R<u32, super::IMR>;
        #[doc = "Writer for register IMR"]
        pub type W = crate::W<u32, super::IMR>;
        #[doc = "Register IMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Interrupt mask on line x\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MR0_A {
            #[doc = "0: Interrupt request line is masked"]
            MASKED = 0,
            #[doc = "1: Interrupt request line is unmasked"]
            UNMASKED = 1,
        }
        impl From<MR0_A> for bool {
            #[inline(always)]
            fn from(variant: MR0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MR0`"]
        pub type MR0_R = crate::R<bool, MR0_A>;
        impl MR0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MR0_A {
                match self.bits {
                    false => MR0_A::MASKED,
                    true => MR0_A::UNMASKED,
                }
            }
            #[doc = "Checks if the value of the field is `MASKED`"]
            #[inline(always)]
            pub fn is_masked(&self) -> bool {
                *self == MR0_A::MASKED
            }
            #[doc = "Checks if the value of the field is `UNMASKED`"]
            #[inline(always)]
            pub fn is_unmasked(&self) -> bool {
                *self == MR0_A::UNMASKED
            }
        }
        #[doc = "Write proxy for field `MR0`"]
        pub struct MR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR1_A = MR0_A;
        #[doc = "Reader of field `MR1`"]
        pub type MR1_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR1`"]
        pub struct MR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR2_A = MR0_A;
        #[doc = "Reader of field `MR2`"]
        pub type MR2_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR2`"]
        pub struct MR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR3_A = MR0_A;
        #[doc = "Reader of field `MR3`"]
        pub type MR3_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR3`"]
        pub struct MR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR4_A = MR0_A;
        #[doc = "Reader of field `MR4`"]
        pub type MR4_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR4`"]
        pub struct MR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR5_A = MR0_A;
        #[doc = "Reader of field `MR5`"]
        pub type MR5_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR5`"]
        pub struct MR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR6_A = MR0_A;
        #[doc = "Reader of field `MR6`"]
        pub type MR6_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR6`"]
        pub struct MR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR7_A = MR0_A;
        #[doc = "Reader of field `MR7`"]
        pub type MR7_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR7`"]
        pub struct MR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR8_A = MR0_A;
        #[doc = "Reader of field `MR8`"]
        pub type MR8_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR8`"]
        pub struct MR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR9_A = MR0_A;
        #[doc = "Reader of field `MR9`"]
        pub type MR9_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR9`"]
        pub struct MR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR10_A = MR0_A;
        #[doc = "Reader of field `MR10`"]
        pub type MR10_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR10`"]
        pub struct MR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR11_A = MR0_A;
        #[doc = "Reader of field `MR11`"]
        pub type MR11_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR11`"]
        pub struct MR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR12_A = MR0_A;
        #[doc = "Reader of field `MR12`"]
        pub type MR12_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR12`"]
        pub struct MR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR13_A = MR0_A;
        #[doc = "Reader of field `MR13`"]
        pub type MR13_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR13`"]
        pub struct MR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR14_A = MR0_A;
        #[doc = "Reader of field `MR14`"]
        pub type MR14_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR14`"]
        pub struct MR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR15_A = MR0_A;
        #[doc = "Reader of field `MR15`"]
        pub type MR15_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR15`"]
        pub struct MR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR16_A = MR0_A;
        #[doc = "Reader of field `MR16`"]
        pub type MR16_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR16`"]
        pub struct MR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR17_A = MR0_A;
        #[doc = "Reader of field `MR17`"]
        pub type MR17_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR17`"]
        pub struct MR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR17_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR18_A = MR0_A;
        #[doc = "Reader of field `MR18`"]
        pub type MR18_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR18`"]
        pub struct MR18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR18_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR19_A = MR0_A;
        #[doc = "Reader of field `MR19`"]
        pub type MR19_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR19`"]
        pub struct MR19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR20_A = MR0_A;
        #[doc = "Reader of field `MR20`"]
        pub type MR20_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR20`"]
        pub struct MR20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR20_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR21_A = MR0_A;
        #[doc = "Reader of field `MR21`"]
        pub type MR21_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR21`"]
        pub struct MR21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR21_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Interrupt mask on line x"]
        pub type MR22_A = MR0_A;
        #[doc = "Reader of field `MR22`"]
        pub type MR22_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR22`"]
        pub struct MR22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR22_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr0(&self) -> MR0_R {
                MR0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr1(&self) -> MR1_R {
                MR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr2(&self) -> MR2_R {
                MR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr3(&self) -> MR3_R {
                MR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr4(&self) -> MR4_R {
                MR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr5(&self) -> MR5_R {
                MR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr6(&self) -> MR6_R {
                MR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr7(&self) -> MR7_R {
                MR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr8(&self) -> MR8_R {
                MR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr9(&self) -> MR9_R {
                MR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr10(&self) -> MR10_R {
                MR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr11(&self) -> MR11_R {
                MR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr12(&self) -> MR12_R {
                MR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr13(&self) -> MR13_R {
                MR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr14(&self) -> MR14_R {
                MR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr15(&self) -> MR15_R {
                MR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr16(&self) -> MR16_R {
                MR16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr17(&self) -> MR17_R {
                MR17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr18(&self) -> MR18_R {
                MR18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr19(&self) -> MR19_R {
                MR19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr20(&self) -> MR20_R {
                MR20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr21(&self) -> MR21_R {
                MR21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr22(&self) -> MR22_R {
                MR22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr0(&mut self) -> MR0_W {
                MR0_W { w: self }
            }
            #[doc = "Bit 1 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr1(&mut self) -> MR1_W {
                MR1_W { w: self }
            }
            #[doc = "Bit 2 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr2(&mut self) -> MR2_W {
                MR2_W { w: self }
            }
            #[doc = "Bit 3 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr3(&mut self) -> MR3_W {
                MR3_W { w: self }
            }
            #[doc = "Bit 4 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr4(&mut self) -> MR4_W {
                MR4_W { w: self }
            }
            #[doc = "Bit 5 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr5(&mut self) -> MR5_W {
                MR5_W { w: self }
            }
            #[doc = "Bit 6 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr6(&mut self) -> MR6_W {
                MR6_W { w: self }
            }
            #[doc = "Bit 7 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr7(&mut self) -> MR7_W {
                MR7_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr8(&mut self) -> MR8_W {
                MR8_W { w: self }
            }
            #[doc = "Bit 9 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr9(&mut self) -> MR9_W {
                MR9_W { w: self }
            }
            #[doc = "Bit 10 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr10(&mut self) -> MR10_W {
                MR10_W { w: self }
            }
            #[doc = "Bit 11 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr11(&mut self) -> MR11_W {
                MR11_W { w: self }
            }
            #[doc = "Bit 12 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr12(&mut self) -> MR12_W {
                MR12_W { w: self }
            }
            #[doc = "Bit 13 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr13(&mut self) -> MR13_W {
                MR13_W { w: self }
            }
            #[doc = "Bit 14 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr14(&mut self) -> MR14_W {
                MR14_W { w: self }
            }
            #[doc = "Bit 15 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr15(&mut self) -> MR15_W {
                MR15_W { w: self }
            }
            #[doc = "Bit 16 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr16(&mut self) -> MR16_W {
                MR16_W { w: self }
            }
            #[doc = "Bit 17 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr17(&mut self) -> MR17_W {
                MR17_W { w: self }
            }
            #[doc = "Bit 18 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr18(&mut self) -> MR18_W {
                MR18_W { w: self }
            }
            #[doc = "Bit 19 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr19(&mut self) -> MR19_W {
                MR19_W { w: self }
            }
            #[doc = "Bit 20 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr20(&mut self) -> MR20_W {
                MR20_W { w: self }
            }
            #[doc = "Bit 21 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr21(&mut self) -> MR21_W {
                MR21_W { w: self }
            }
            #[doc = "Bit 22 - Interrupt mask on line x"]
            #[inline(always)]
            pub fn mr22(&mut self) -> MR22_W {
                MR22_W { w: self }
            }
        }
    }
    #[doc = "EMR\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [emr](emr) module"]
    pub type EMR = crate::Reg<u32, _EMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EMR;
    #[doc = "`read()` method returns [emr::R](emr::R) reader structure"]
    impl crate::Readable for EMR {}
    #[doc = "`write(|w| ..)` method takes [emr::W](emr::W) writer structure"]
    impl crate::Writable for EMR {}
    #[doc = "EMR"]
    pub mod emr {
        #[doc = "Reader of register EMR"]
        pub type R = crate::R<u32, super::EMR>;
        #[doc = "Writer for register EMR"]
        pub type W = crate::W<u32, super::EMR>;
        #[doc = "Register EMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Event mask on line x\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MR0_A {
            #[doc = "0: Interrupt request line is masked"]
            MASKED = 0,
            #[doc = "1: Interrupt request line is unmasked"]
            UNMASKED = 1,
        }
        impl From<MR0_A> for bool {
            #[inline(always)]
            fn from(variant: MR0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MR0`"]
        pub type MR0_R = crate::R<bool, MR0_A>;
        impl MR0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MR0_A {
                match self.bits {
                    false => MR0_A::MASKED,
                    true => MR0_A::UNMASKED,
                }
            }
            #[doc = "Checks if the value of the field is `MASKED`"]
            #[inline(always)]
            pub fn is_masked(&self) -> bool {
                *self == MR0_A::MASKED
            }
            #[doc = "Checks if the value of the field is `UNMASKED`"]
            #[inline(always)]
            pub fn is_unmasked(&self) -> bool {
                *self == MR0_A::UNMASKED
            }
        }
        #[doc = "Write proxy for field `MR0`"]
        pub struct MR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR1_A = MR0_A;
        #[doc = "Reader of field `MR1`"]
        pub type MR1_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR1`"]
        pub struct MR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR2_A = MR0_A;
        #[doc = "Reader of field `MR2`"]
        pub type MR2_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR2`"]
        pub struct MR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR3_A = MR0_A;
        #[doc = "Reader of field `MR3`"]
        pub type MR3_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR3`"]
        pub struct MR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR4_A = MR0_A;
        #[doc = "Reader of field `MR4`"]
        pub type MR4_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR4`"]
        pub struct MR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR5_A = MR0_A;
        #[doc = "Reader of field `MR5`"]
        pub type MR5_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR5`"]
        pub struct MR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR6_A = MR0_A;
        #[doc = "Reader of field `MR6`"]
        pub type MR6_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR6`"]
        pub struct MR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR7_A = MR0_A;
        #[doc = "Reader of field `MR7`"]
        pub type MR7_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR7`"]
        pub struct MR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR8_A = MR0_A;
        #[doc = "Reader of field `MR8`"]
        pub type MR8_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR8`"]
        pub struct MR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR9_A = MR0_A;
        #[doc = "Reader of field `MR9`"]
        pub type MR9_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR9`"]
        pub struct MR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR10_A = MR0_A;
        #[doc = "Reader of field `MR10`"]
        pub type MR10_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR10`"]
        pub struct MR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR11_A = MR0_A;
        #[doc = "Reader of field `MR11`"]
        pub type MR11_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR11`"]
        pub struct MR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR12_A = MR0_A;
        #[doc = "Reader of field `MR12`"]
        pub type MR12_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR12`"]
        pub struct MR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR13_A = MR0_A;
        #[doc = "Reader of field `MR13`"]
        pub type MR13_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR13`"]
        pub struct MR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR14_A = MR0_A;
        #[doc = "Reader of field `MR14`"]
        pub type MR14_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR14`"]
        pub struct MR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR15_A = MR0_A;
        #[doc = "Reader of field `MR15`"]
        pub type MR15_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR15`"]
        pub struct MR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR16_A = MR0_A;
        #[doc = "Reader of field `MR16`"]
        pub type MR16_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR16`"]
        pub struct MR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR17_A = MR0_A;
        #[doc = "Reader of field `MR17`"]
        pub type MR17_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR17`"]
        pub struct MR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR17_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR18_A = MR0_A;
        #[doc = "Reader of field `MR18`"]
        pub type MR18_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR18`"]
        pub struct MR18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR18_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR19_A = MR0_A;
        #[doc = "Reader of field `MR19`"]
        pub type MR19_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR19`"]
        pub struct MR19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR20_A = MR0_A;
        #[doc = "Reader of field `MR20`"]
        pub type MR20_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR20`"]
        pub struct MR20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR20_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR21_A = MR0_A;
        #[doc = "Reader of field `MR21`"]
        pub type MR21_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR21`"]
        pub struct MR21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR21_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Event mask on line x"]
        pub type MR22_A = MR0_A;
        #[doc = "Reader of field `MR22`"]
        pub type MR22_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR22`"]
        pub struct MR22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR22_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Event mask on line x"]
            #[inline(always)]
            pub fn mr0(&self) -> MR0_R {
                MR0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Event mask on line x"]
            #[inline(always)]
            pub fn mr1(&self) -> MR1_R {
                MR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Event mask on line x"]
            #[inline(always)]
            pub fn mr2(&self) -> MR2_R {
                MR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Event mask on line x"]
            #[inline(always)]
            pub fn mr3(&self) -> MR3_R {
                MR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Event mask on line x"]
            #[inline(always)]
            pub fn mr4(&self) -> MR4_R {
                MR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Event mask on line x"]
            #[inline(always)]
            pub fn mr5(&self) -> MR5_R {
                MR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Event mask on line x"]
            #[inline(always)]
            pub fn mr6(&self) -> MR6_R {
                MR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Event mask on line x"]
            #[inline(always)]
            pub fn mr7(&self) -> MR7_R {
                MR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Event mask on line x"]
            #[inline(always)]
            pub fn mr8(&self) -> MR8_R {
                MR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Event mask on line x"]
            #[inline(always)]
            pub fn mr9(&self) -> MR9_R {
                MR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Event mask on line x"]
            #[inline(always)]
            pub fn mr10(&self) -> MR10_R {
                MR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Event mask on line x"]
            #[inline(always)]
            pub fn mr11(&self) -> MR11_R {
                MR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Event mask on line x"]
            #[inline(always)]
            pub fn mr12(&self) -> MR12_R {
                MR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Event mask on line x"]
            #[inline(always)]
            pub fn mr13(&self) -> MR13_R {
                MR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Event mask on line x"]
            #[inline(always)]
            pub fn mr14(&self) -> MR14_R {
                MR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Event mask on line x"]
            #[inline(always)]
            pub fn mr15(&self) -> MR15_R {
                MR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Event mask on line x"]
            #[inline(always)]
            pub fn mr16(&self) -> MR16_R {
                MR16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Event mask on line x"]
            #[inline(always)]
            pub fn mr17(&self) -> MR17_R {
                MR17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Event mask on line x"]
            #[inline(always)]
            pub fn mr18(&self) -> MR18_R {
                MR18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Event mask on line x"]
            #[inline(always)]
            pub fn mr19(&self) -> MR19_R {
                MR19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Event mask on line x"]
            #[inline(always)]
            pub fn mr20(&self) -> MR20_R {
                MR20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Event mask on line x"]
            #[inline(always)]
            pub fn mr21(&self) -> MR21_R {
                MR21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Event mask on line x"]
            #[inline(always)]
            pub fn mr22(&self) -> MR22_R {
                MR22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Event mask on line x"]
            #[inline(always)]
            pub fn mr0(&mut self) -> MR0_W {
                MR0_W { w: self }
            }
            #[doc = "Bit 1 - Event mask on line x"]
            #[inline(always)]
            pub fn mr1(&mut self) -> MR1_W {
                MR1_W { w: self }
            }
            #[doc = "Bit 2 - Event mask on line x"]
            #[inline(always)]
            pub fn mr2(&mut self) -> MR2_W {
                MR2_W { w: self }
            }
            #[doc = "Bit 3 - Event mask on line x"]
            #[inline(always)]
            pub fn mr3(&mut self) -> MR3_W {
                MR3_W { w: self }
            }
            #[doc = "Bit 4 - Event mask on line x"]
            #[inline(always)]
            pub fn mr4(&mut self) -> MR4_W {
                MR4_W { w: self }
            }
            #[doc = "Bit 5 - Event mask on line x"]
            #[inline(always)]
            pub fn mr5(&mut self) -> MR5_W {
                MR5_W { w: self }
            }
            #[doc = "Bit 6 - Event mask on line x"]
            #[inline(always)]
            pub fn mr6(&mut self) -> MR6_W {
                MR6_W { w: self }
            }
            #[doc = "Bit 7 - Event mask on line x"]
            #[inline(always)]
            pub fn mr7(&mut self) -> MR7_W {
                MR7_W { w: self }
            }
            #[doc = "Bit 8 - Event mask on line x"]
            #[inline(always)]
            pub fn mr8(&mut self) -> MR8_W {
                MR8_W { w: self }
            }
            #[doc = "Bit 9 - Event mask on line x"]
            #[inline(always)]
            pub fn mr9(&mut self) -> MR9_W {
                MR9_W { w: self }
            }
            #[doc = "Bit 10 - Event mask on line x"]
            #[inline(always)]
            pub fn mr10(&mut self) -> MR10_W {
                MR10_W { w: self }
            }
            #[doc = "Bit 11 - Event mask on line x"]
            #[inline(always)]
            pub fn mr11(&mut self) -> MR11_W {
                MR11_W { w: self }
            }
            #[doc = "Bit 12 - Event mask on line x"]
            #[inline(always)]
            pub fn mr12(&mut self) -> MR12_W {
                MR12_W { w: self }
            }
            #[doc = "Bit 13 - Event mask on line x"]
            #[inline(always)]
            pub fn mr13(&mut self) -> MR13_W {
                MR13_W { w: self }
            }
            #[doc = "Bit 14 - Event mask on line x"]
            #[inline(always)]
            pub fn mr14(&mut self) -> MR14_W {
                MR14_W { w: self }
            }
            #[doc = "Bit 15 - Event mask on line x"]
            #[inline(always)]
            pub fn mr15(&mut self) -> MR15_W {
                MR15_W { w: self }
            }
            #[doc = "Bit 16 - Event mask on line x"]
            #[inline(always)]
            pub fn mr16(&mut self) -> MR16_W {
                MR16_W { w: self }
            }
            #[doc = "Bit 17 - Event mask on line x"]
            #[inline(always)]
            pub fn mr17(&mut self) -> MR17_W {
                MR17_W { w: self }
            }
            #[doc = "Bit 18 - Event mask on line x"]
            #[inline(always)]
            pub fn mr18(&mut self) -> MR18_W {
                MR18_W { w: self }
            }
            #[doc = "Bit 19 - Event mask on line x"]
            #[inline(always)]
            pub fn mr19(&mut self) -> MR19_W {
                MR19_W { w: self }
            }
            #[doc = "Bit 20 - Event mask on line x"]
            #[inline(always)]
            pub fn mr20(&mut self) -> MR20_W {
                MR20_W { w: self }
            }
            #[doc = "Bit 21 - Event mask on line x"]
            #[inline(always)]
            pub fn mr21(&mut self) -> MR21_W {
                MR21_W { w: self }
            }
            #[doc = "Bit 22 - Event mask on line x"]
            #[inline(always)]
            pub fn mr22(&mut self) -> MR22_W {
                MR22_W { w: self }
            }
        }
    }
    #[doc = "RTSR\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtsr](rtsr) module"]
    pub type RTSR = crate::Reg<u32, _RTSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RTSR;
    #[doc = "`read()` method returns [rtsr::R](rtsr::R) reader structure"]
    impl crate::Readable for RTSR {}
    #[doc = "`write(|w| ..)` method takes [rtsr::W](rtsr::W) writer structure"]
    impl crate::Writable for RTSR {}
    #[doc = "RTSR"]
    pub mod rtsr {
        #[doc = "Reader of register RTSR"]
        pub type R = crate::R<u32, super::RTSR>;
        #[doc = "Writer for register RTSR"]
        pub type W = crate::W<u32, super::RTSR>;
        #[doc = "Register RTSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RTSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TR0_A {
            #[doc = "0: Rising edge trigger is disabled"]
            DISABLED = 0,
            #[doc = "1: Rising edge trigger is enabled"]
            ENABLED = 1,
        }
        impl From<TR0_A> for bool {
            #[inline(always)]
            fn from(variant: TR0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TR0`"]
        pub type TR0_R = crate::R<bool, TR0_A>;
        impl TR0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TR0_A {
                match self.bits {
                    false => TR0_A::DISABLED,
                    true => TR0_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TR0_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TR0_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TR0`"]
        pub struct TR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR1_A = TR0_A;
        #[doc = "Reader of field `TR1`"]
        pub type TR1_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR1`"]
        pub struct TR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR2_A = TR0_A;
        #[doc = "Reader of field `TR2`"]
        pub type TR2_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR2`"]
        pub struct TR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR3_A = TR0_A;
        #[doc = "Reader of field `TR3`"]
        pub type TR3_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR3`"]
        pub struct TR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR4_A = TR0_A;
        #[doc = "Reader of field `TR4`"]
        pub type TR4_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR4`"]
        pub struct TR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR5_A = TR0_A;
        #[doc = "Reader of field `TR5`"]
        pub type TR5_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR5`"]
        pub struct TR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR6_A = TR0_A;
        #[doc = "Reader of field `TR6`"]
        pub type TR6_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR6`"]
        pub struct TR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR7_A = TR0_A;
        #[doc = "Reader of field `TR7`"]
        pub type TR7_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR7`"]
        pub struct TR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR8_A = TR0_A;
        #[doc = "Reader of field `TR8`"]
        pub type TR8_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR8`"]
        pub struct TR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR9_A = TR0_A;
        #[doc = "Reader of field `TR9`"]
        pub type TR9_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR9`"]
        pub struct TR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR10_A = TR0_A;
        #[doc = "Reader of field `TR10`"]
        pub type TR10_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR10`"]
        pub struct TR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR11_A = TR0_A;
        #[doc = "Reader of field `TR11`"]
        pub type TR11_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR11`"]
        pub struct TR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR12_A = TR0_A;
        #[doc = "Reader of field `TR12`"]
        pub type TR12_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR12`"]
        pub struct TR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR13_A = TR0_A;
        #[doc = "Reader of field `TR13`"]
        pub type TR13_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR13`"]
        pub struct TR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR14_A = TR0_A;
        #[doc = "Reader of field `TR14`"]
        pub type TR14_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR14`"]
        pub struct TR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR15_A = TR0_A;
        #[doc = "Reader of field `TR15`"]
        pub type TR15_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR15`"]
        pub struct TR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR16_A = TR0_A;
        #[doc = "Reader of field `TR16`"]
        pub type TR16_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR16`"]
        pub struct TR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR17_A = TR0_A;
        #[doc = "Reader of field `TR17`"]
        pub type TR17_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR17`"]
        pub struct TR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR17_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR18_A = TR0_A;
        #[doc = "Reader of field `TR18`"]
        pub type TR18_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR18`"]
        pub struct TR18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR18_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR19_A = TR0_A;
        #[doc = "Reader of field `TR19`"]
        pub type TR19_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR19`"]
        pub struct TR19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR20_A = TR0_A;
        #[doc = "Reader of field `TR20`"]
        pub type TR20_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR20`"]
        pub struct TR20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR20_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR21_A = TR0_A;
        #[doc = "Reader of field `TR21`"]
        pub type TR21_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR21`"]
        pub struct TR21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR21_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Rising edge trigger event configuration bit of line x"]
        pub type TR22_A = TR0_A;
        #[doc = "Reader of field `TR22`"]
        pub type TR22_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR22`"]
        pub struct TR22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR22_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr0(&self) -> TR0_R {
                TR0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr1(&self) -> TR1_R {
                TR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr2(&self) -> TR2_R {
                TR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr3(&self) -> TR3_R {
                TR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr4(&self) -> TR4_R {
                TR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr5(&self) -> TR5_R {
                TR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr6(&self) -> TR6_R {
                TR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr7(&self) -> TR7_R {
                TR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr8(&self) -> TR8_R {
                TR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr9(&self) -> TR9_R {
                TR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr10(&self) -> TR10_R {
                TR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr11(&self) -> TR11_R {
                TR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr12(&self) -> TR12_R {
                TR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr13(&self) -> TR13_R {
                TR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr14(&self) -> TR14_R {
                TR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr15(&self) -> TR15_R {
                TR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr16(&self) -> TR16_R {
                TR16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr17(&self) -> TR17_R {
                TR17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr18(&self) -> TR18_R {
                TR18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr19(&self) -> TR19_R {
                TR19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr20(&self) -> TR20_R {
                TR20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr21(&self) -> TR21_R {
                TR21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr22(&self) -> TR22_R {
                TR22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr0(&mut self) -> TR0_W {
                TR0_W { w: self }
            }
            #[doc = "Bit 1 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr1(&mut self) -> TR1_W {
                TR1_W { w: self }
            }
            #[doc = "Bit 2 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr2(&mut self) -> TR2_W {
                TR2_W { w: self }
            }
            #[doc = "Bit 3 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr3(&mut self) -> TR3_W {
                TR3_W { w: self }
            }
            #[doc = "Bit 4 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr4(&mut self) -> TR4_W {
                TR4_W { w: self }
            }
            #[doc = "Bit 5 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr5(&mut self) -> TR5_W {
                TR5_W { w: self }
            }
            #[doc = "Bit 6 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr6(&mut self) -> TR6_W {
                TR6_W { w: self }
            }
            #[doc = "Bit 7 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr7(&mut self) -> TR7_W {
                TR7_W { w: self }
            }
            #[doc = "Bit 8 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr8(&mut self) -> TR8_W {
                TR8_W { w: self }
            }
            #[doc = "Bit 9 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr9(&mut self) -> TR9_W {
                TR9_W { w: self }
            }
            #[doc = "Bit 10 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr10(&mut self) -> TR10_W {
                TR10_W { w: self }
            }
            #[doc = "Bit 11 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr11(&mut self) -> TR11_W {
                TR11_W { w: self }
            }
            #[doc = "Bit 12 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr12(&mut self) -> TR12_W {
                TR12_W { w: self }
            }
            #[doc = "Bit 13 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr13(&mut self) -> TR13_W {
                TR13_W { w: self }
            }
            #[doc = "Bit 14 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr14(&mut self) -> TR14_W {
                TR14_W { w: self }
            }
            #[doc = "Bit 15 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr15(&mut self) -> TR15_W {
                TR15_W { w: self }
            }
            #[doc = "Bit 16 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr16(&mut self) -> TR16_W {
                TR16_W { w: self }
            }
            #[doc = "Bit 17 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr17(&mut self) -> TR17_W {
                TR17_W { w: self }
            }
            #[doc = "Bit 18 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr18(&mut self) -> TR18_W {
                TR18_W { w: self }
            }
            #[doc = "Bit 19 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr19(&mut self) -> TR19_W {
                TR19_W { w: self }
            }
            #[doc = "Bit 20 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr20(&mut self) -> TR20_W {
                TR20_W { w: self }
            }
            #[doc = "Bit 21 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr21(&mut self) -> TR21_W {
                TR21_W { w: self }
            }
            #[doc = "Bit 22 - Rising edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr22(&mut self) -> TR22_W {
                TR22_W { w: self }
            }
        }
    }
    #[doc = "FTSR\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ftsr](ftsr) module"]
    pub type FTSR = crate::Reg<u32, _FTSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FTSR;
    #[doc = "`read()` method returns [ftsr::R](ftsr::R) reader structure"]
    impl crate::Readable for FTSR {}
    #[doc = "`write(|w| ..)` method takes [ftsr::W](ftsr::W) writer structure"]
    impl crate::Writable for FTSR {}
    #[doc = "FTSR"]
    pub mod ftsr {
        #[doc = "Reader of register FTSR"]
        pub type R = crate::R<u32, super::FTSR>;
        #[doc = "Writer for register FTSR"]
        pub type W = crate::W<u32, super::FTSR>;
        #[doc = "Register FTSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::FTSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TR0_A {
            #[doc = "0: Falling edge trigger is disabled"]
            DISABLED = 0,
            #[doc = "1: Falling edge trigger is enabled"]
            ENABLED = 1,
        }
        impl From<TR0_A> for bool {
            #[inline(always)]
            fn from(variant: TR0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TR0`"]
        pub type TR0_R = crate::R<bool, TR0_A>;
        impl TR0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TR0_A {
                match self.bits {
                    false => TR0_A::DISABLED,
                    true => TR0_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TR0_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TR0_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TR0`"]
        pub struct TR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR1_A = TR0_A;
        #[doc = "Reader of field `TR1`"]
        pub type TR1_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR1`"]
        pub struct TR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR2_A = TR0_A;
        #[doc = "Reader of field `TR2`"]
        pub type TR2_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR2`"]
        pub struct TR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR3_A = TR0_A;
        #[doc = "Reader of field `TR3`"]
        pub type TR3_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR3`"]
        pub struct TR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR4_A = TR0_A;
        #[doc = "Reader of field `TR4`"]
        pub type TR4_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR4`"]
        pub struct TR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR5_A = TR0_A;
        #[doc = "Reader of field `TR5`"]
        pub type TR5_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR5`"]
        pub struct TR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR6_A = TR0_A;
        #[doc = "Reader of field `TR6`"]
        pub type TR6_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR6`"]
        pub struct TR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR7_A = TR0_A;
        #[doc = "Reader of field `TR7`"]
        pub type TR7_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR7`"]
        pub struct TR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR8_A = TR0_A;
        #[doc = "Reader of field `TR8`"]
        pub type TR8_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR8`"]
        pub struct TR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR9_A = TR0_A;
        #[doc = "Reader of field `TR9`"]
        pub type TR9_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR9`"]
        pub struct TR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR10_A = TR0_A;
        #[doc = "Reader of field `TR10`"]
        pub type TR10_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR10`"]
        pub struct TR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR11_A = TR0_A;
        #[doc = "Reader of field `TR11`"]
        pub type TR11_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR11`"]
        pub struct TR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR12_A = TR0_A;
        #[doc = "Reader of field `TR12`"]
        pub type TR12_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR12`"]
        pub struct TR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR13_A = TR0_A;
        #[doc = "Reader of field `TR13`"]
        pub type TR13_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR13`"]
        pub struct TR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR14_A = TR0_A;
        #[doc = "Reader of field `TR14`"]
        pub type TR14_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR14`"]
        pub struct TR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR15_A = TR0_A;
        #[doc = "Reader of field `TR15`"]
        pub type TR15_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR15`"]
        pub struct TR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR16_A = TR0_A;
        #[doc = "Reader of field `TR16`"]
        pub type TR16_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR16`"]
        pub struct TR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR17_A = TR0_A;
        #[doc = "Reader of field `TR17`"]
        pub type TR17_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR17`"]
        pub struct TR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR17_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR18_A = TR0_A;
        #[doc = "Reader of field `TR18`"]
        pub type TR18_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR18`"]
        pub struct TR18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR18_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR19_A = TR0_A;
        #[doc = "Reader of field `TR19`"]
        pub type TR19_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR19`"]
        pub struct TR19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR20_A = TR0_A;
        #[doc = "Reader of field `TR20`"]
        pub type TR20_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR20`"]
        pub struct TR20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR20_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR21_A = TR0_A;
        #[doc = "Reader of field `TR21`"]
        pub type TR21_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR21`"]
        pub struct TR21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR21_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Falling edge trigger event configuration bit of line x"]
        pub type TR22_A = TR0_A;
        #[doc = "Reader of field `TR22`"]
        pub type TR22_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR22`"]
        pub struct TR22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR22_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr0(&self) -> TR0_R {
                TR0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr1(&self) -> TR1_R {
                TR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr2(&self) -> TR2_R {
                TR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr3(&self) -> TR3_R {
                TR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr4(&self) -> TR4_R {
                TR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr5(&self) -> TR5_R {
                TR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr6(&self) -> TR6_R {
                TR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr7(&self) -> TR7_R {
                TR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr8(&self) -> TR8_R {
                TR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr9(&self) -> TR9_R {
                TR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr10(&self) -> TR10_R {
                TR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr11(&self) -> TR11_R {
                TR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr12(&self) -> TR12_R {
                TR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr13(&self) -> TR13_R {
                TR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr14(&self) -> TR14_R {
                TR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr15(&self) -> TR15_R {
                TR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr16(&self) -> TR16_R {
                TR16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr17(&self) -> TR17_R {
                TR17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr18(&self) -> TR18_R {
                TR18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr19(&self) -> TR19_R {
                TR19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr20(&self) -> TR20_R {
                TR20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr21(&self) -> TR21_R {
                TR21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr22(&self) -> TR22_R {
                TR22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr0(&mut self) -> TR0_W {
                TR0_W { w: self }
            }
            #[doc = "Bit 1 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr1(&mut self) -> TR1_W {
                TR1_W { w: self }
            }
            #[doc = "Bit 2 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr2(&mut self) -> TR2_W {
                TR2_W { w: self }
            }
            #[doc = "Bit 3 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr3(&mut self) -> TR3_W {
                TR3_W { w: self }
            }
            #[doc = "Bit 4 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr4(&mut self) -> TR4_W {
                TR4_W { w: self }
            }
            #[doc = "Bit 5 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr5(&mut self) -> TR5_W {
                TR5_W { w: self }
            }
            #[doc = "Bit 6 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr6(&mut self) -> TR6_W {
                TR6_W { w: self }
            }
            #[doc = "Bit 7 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr7(&mut self) -> TR7_W {
                TR7_W { w: self }
            }
            #[doc = "Bit 8 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr8(&mut self) -> TR8_W {
                TR8_W { w: self }
            }
            #[doc = "Bit 9 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr9(&mut self) -> TR9_W {
                TR9_W { w: self }
            }
            #[doc = "Bit 10 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr10(&mut self) -> TR10_W {
                TR10_W { w: self }
            }
            #[doc = "Bit 11 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr11(&mut self) -> TR11_W {
                TR11_W { w: self }
            }
            #[doc = "Bit 12 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr12(&mut self) -> TR12_W {
                TR12_W { w: self }
            }
            #[doc = "Bit 13 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr13(&mut self) -> TR13_W {
                TR13_W { w: self }
            }
            #[doc = "Bit 14 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr14(&mut self) -> TR14_W {
                TR14_W { w: self }
            }
            #[doc = "Bit 15 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr15(&mut self) -> TR15_W {
                TR15_W { w: self }
            }
            #[doc = "Bit 16 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr16(&mut self) -> TR16_W {
                TR16_W { w: self }
            }
            #[doc = "Bit 17 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr17(&mut self) -> TR17_W {
                TR17_W { w: self }
            }
            #[doc = "Bit 18 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr18(&mut self) -> TR18_W {
                TR18_W { w: self }
            }
            #[doc = "Bit 19 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr19(&mut self) -> TR19_W {
                TR19_W { w: self }
            }
            #[doc = "Bit 20 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr20(&mut self) -> TR20_W {
                TR20_W { w: self }
            }
            #[doc = "Bit 21 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr21(&mut self) -> TR21_W {
                TR21_W { w: self }
            }
            #[doc = "Bit 22 - Falling edge trigger event configuration bit of line x"]
            #[inline(always)]
            pub fn tr22(&mut self) -> TR22_W {
                TR22_W { w: self }
            }
        }
    }
    #[doc = "SWIER\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swier](swier) module"]
    pub type SWIER = crate::Reg<u32, _SWIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SWIER;
    #[doc = "`read()` method returns [swier::R](swier::R) reader structure"]
    impl crate::Readable for SWIER {}
    #[doc = "`write(|w| ..)` method takes [swier::W](swier::W) writer structure"]
    impl crate::Writable for SWIER {}
    #[doc = "SWIER"]
    pub mod swier {
        #[doc = "Reader of register SWIER"]
        pub type R = crate::R<u32, super::SWIER>;
        #[doc = "Writer for register SWIER"]
        pub type W = crate::W<u32, super::SWIER>;
        #[doc = "Register SWIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::SWIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Software interrupt on line x\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWIER0_A {
            #[doc = "1: Generates an interrupt request"]
            PEND = 1,
        }
        impl From<SWIER0_A> for bool {
            #[inline(always)]
            fn from(variant: SWIER0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWIER0`"]
        pub type SWIER0_R = crate::R<bool, SWIER0_A>;
        impl SWIER0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, SWIER0_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(SWIER0_A::PEND),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PEND`"]
            #[inline(always)]
            pub fn is_pend(&self) -> bool {
                *self == SWIER0_A::PEND
            }
        }
        #[doc = "Write proxy for field `SWIER0`"]
        pub struct SWIER0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER1_A = SWIER0_A;
        #[doc = "Reader of field `SWIER1`"]
        pub type SWIER1_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER1`"]
        pub struct SWIER1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER2_A = SWIER0_A;
        #[doc = "Reader of field `SWIER2`"]
        pub type SWIER2_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER2`"]
        pub struct SWIER2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER3_A = SWIER0_A;
        #[doc = "Reader of field `SWIER3`"]
        pub type SWIER3_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER3`"]
        pub struct SWIER3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER4_A = SWIER0_A;
        #[doc = "Reader of field `SWIER4`"]
        pub type SWIER4_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER4`"]
        pub struct SWIER4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER5_A = SWIER0_A;
        #[doc = "Reader of field `SWIER5`"]
        pub type SWIER5_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER5`"]
        pub struct SWIER5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER6_A = SWIER0_A;
        #[doc = "Reader of field `SWIER6`"]
        pub type SWIER6_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER6`"]
        pub struct SWIER6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER7_A = SWIER0_A;
        #[doc = "Reader of field `SWIER7`"]
        pub type SWIER7_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER7`"]
        pub struct SWIER7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER8_A = SWIER0_A;
        #[doc = "Reader of field `SWIER8`"]
        pub type SWIER8_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER8`"]
        pub struct SWIER8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER9_A = SWIER0_A;
        #[doc = "Reader of field `SWIER9`"]
        pub type SWIER9_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER9`"]
        pub struct SWIER9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER10_A = SWIER0_A;
        #[doc = "Reader of field `SWIER10`"]
        pub type SWIER10_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER10`"]
        pub struct SWIER10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER11_A = SWIER0_A;
        #[doc = "Reader of field `SWIER11`"]
        pub type SWIER11_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER11`"]
        pub struct SWIER11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER12_A = SWIER0_A;
        #[doc = "Reader of field `SWIER12`"]
        pub type SWIER12_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER12`"]
        pub struct SWIER12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER13_A = SWIER0_A;
        #[doc = "Reader of field `SWIER13`"]
        pub type SWIER13_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER13`"]
        pub struct SWIER13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER14_A = SWIER0_A;
        #[doc = "Reader of field `SWIER14`"]
        pub type SWIER14_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER14`"]
        pub struct SWIER14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER15_A = SWIER0_A;
        #[doc = "Reader of field `SWIER15`"]
        pub type SWIER15_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER15`"]
        pub struct SWIER15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER16_A = SWIER0_A;
        #[doc = "Reader of field `SWIER16`"]
        pub type SWIER16_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER16`"]
        pub struct SWIER16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER17_A = SWIER0_A;
        #[doc = "Reader of field `SWIER17`"]
        pub type SWIER17_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER17`"]
        pub struct SWIER17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER17_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER18_A = SWIER0_A;
        #[doc = "Reader of field `SWIER18`"]
        pub type SWIER18_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER18`"]
        pub struct SWIER18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER18_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER19_A = SWIER0_A;
        #[doc = "Reader of field `SWIER19`"]
        pub type SWIER19_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER19`"]
        pub struct SWIER19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER20_A = SWIER0_A;
        #[doc = "Reader of field `SWIER20`"]
        pub type SWIER20_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER20`"]
        pub struct SWIER20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER20_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER21_A = SWIER0_A;
        #[doc = "Reader of field `SWIER21`"]
        pub type SWIER21_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER21`"]
        pub struct SWIER21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER21_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Software interrupt on line x"]
        pub type SWIER22_A = SWIER0_A;
        #[doc = "Reader of field `SWIER22`"]
        pub type SWIER22_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER22`"]
        pub struct SWIER22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER22_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier0(&self) -> SWIER0_R {
                SWIER0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier1(&self) -> SWIER1_R {
                SWIER1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier2(&self) -> SWIER2_R {
                SWIER2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier3(&self) -> SWIER3_R {
                SWIER3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier4(&self) -> SWIER4_R {
                SWIER4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier5(&self) -> SWIER5_R {
                SWIER5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier6(&self) -> SWIER6_R {
                SWIER6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier7(&self) -> SWIER7_R {
                SWIER7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier8(&self) -> SWIER8_R {
                SWIER8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier9(&self) -> SWIER9_R {
                SWIER9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier10(&self) -> SWIER10_R {
                SWIER10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier11(&self) -> SWIER11_R {
                SWIER11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier12(&self) -> SWIER12_R {
                SWIER12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier13(&self) -> SWIER13_R {
                SWIER13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier14(&self) -> SWIER14_R {
                SWIER14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier15(&self) -> SWIER15_R {
                SWIER15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier16(&self) -> SWIER16_R {
                SWIER16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier17(&self) -> SWIER17_R {
                SWIER17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier18(&self) -> SWIER18_R {
                SWIER18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier19(&self) -> SWIER19_R {
                SWIER19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier20(&self) -> SWIER20_R {
                SWIER20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier21(&self) -> SWIER21_R {
                SWIER21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier22(&self) -> SWIER22_R {
                SWIER22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier0(&mut self) -> SWIER0_W {
                SWIER0_W { w: self }
            }
            #[doc = "Bit 1 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier1(&mut self) -> SWIER1_W {
                SWIER1_W { w: self }
            }
            #[doc = "Bit 2 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier2(&mut self) -> SWIER2_W {
                SWIER2_W { w: self }
            }
            #[doc = "Bit 3 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier3(&mut self) -> SWIER3_W {
                SWIER3_W { w: self }
            }
            #[doc = "Bit 4 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier4(&mut self) -> SWIER4_W {
                SWIER4_W { w: self }
            }
            #[doc = "Bit 5 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier5(&mut self) -> SWIER5_W {
                SWIER5_W { w: self }
            }
            #[doc = "Bit 6 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier6(&mut self) -> SWIER6_W {
                SWIER6_W { w: self }
            }
            #[doc = "Bit 7 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier7(&mut self) -> SWIER7_W {
                SWIER7_W { w: self }
            }
            #[doc = "Bit 8 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier8(&mut self) -> SWIER8_W {
                SWIER8_W { w: self }
            }
            #[doc = "Bit 9 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier9(&mut self) -> SWIER9_W {
                SWIER9_W { w: self }
            }
            #[doc = "Bit 10 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier10(&mut self) -> SWIER10_W {
                SWIER10_W { w: self }
            }
            #[doc = "Bit 11 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier11(&mut self) -> SWIER11_W {
                SWIER11_W { w: self }
            }
            #[doc = "Bit 12 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier12(&mut self) -> SWIER12_W {
                SWIER12_W { w: self }
            }
            #[doc = "Bit 13 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier13(&mut self) -> SWIER13_W {
                SWIER13_W { w: self }
            }
            #[doc = "Bit 14 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier14(&mut self) -> SWIER14_W {
                SWIER14_W { w: self }
            }
            #[doc = "Bit 15 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier15(&mut self) -> SWIER15_W {
                SWIER15_W { w: self }
            }
            #[doc = "Bit 16 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier16(&mut self) -> SWIER16_W {
                SWIER16_W { w: self }
            }
            #[doc = "Bit 17 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier17(&mut self) -> SWIER17_W {
                SWIER17_W { w: self }
            }
            #[doc = "Bit 18 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier18(&mut self) -> SWIER18_W {
                SWIER18_W { w: self }
            }
            #[doc = "Bit 19 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier19(&mut self) -> SWIER19_W {
                SWIER19_W { w: self }
            }
            #[doc = "Bit 20 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier20(&mut self) -> SWIER20_W {
                SWIER20_W { w: self }
            }
            #[doc = "Bit 21 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier21(&mut self) -> SWIER21_W {
                SWIER21_W { w: self }
            }
            #[doc = "Bit 22 - Software interrupt on line x"]
            #[inline(always)]
            pub fn swier22(&mut self) -> SWIER22_W {
                SWIER22_W { w: self }
            }
        }
    }
    #[doc = "PR\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pr](pr) module"]
    pub type PR = crate::Reg<u32, _PR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PR;
    #[doc = "`read()` method returns [pr::R](pr::R) reader structure"]
    impl crate::Readable for PR {}
    #[doc = "`write(|w| ..)` method takes [pr::W](pr::W) writer structure"]
    impl crate::Writable for PR {}
    #[doc = "PR"]
    pub mod pr {
        #[doc = "Reader of register PR"]
        pub type R = crate::R<u32, super::PR>;
        #[doc = "Writer for register PR"]
        pub type W = crate::W<u32, super::PR>;
        #[doc = "Register PR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Pending bit\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PR0_A {
            #[doc = "0: No trigger request occurred"]
            NOTPENDING = 0,
            #[doc = "1: Selected trigger request occurred"]
            PENDING = 1,
        }
        impl From<PR0_A> for bool {
            #[inline(always)]
            fn from(variant: PR0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PR0`"]
        pub type PR0_R = crate::R<bool, PR0_A>;
        impl PR0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PR0_A {
                match self.bits {
                    false => PR0_A::NOTPENDING,
                    true => PR0_A::PENDING,
                }
            }
            #[doc = "Checks if the value of the field is `NOTPENDING`"]
            #[inline(always)]
            pub fn is_not_pending(&self) -> bool {
                *self == PR0_A::NOTPENDING
            }
            #[doc = "Checks if the value of the field is `PENDING`"]
            #[inline(always)]
            pub fn is_pending(&self) -> bool {
                *self == PR0_A::PENDING
            }
        }
        #[doc = "Pending bit\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PR0_AW {
            #[doc = "1: Clears pending bit"]
            CLEAR = 1,
        }
        impl From<PR0_AW> for bool {
            #[inline(always)]
            fn from(variant: PR0_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PR0`"]
        pub struct PR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR1_A = PR0_A;
        #[doc = "Reader of field `PR1`"]
        pub type PR1_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR1_AW = PR0_AW;
        #[doc = "Write proxy for field `PR1`"]
        pub struct PR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR2_A = PR0_A;
        #[doc = "Reader of field `PR2`"]
        pub type PR2_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR2_AW = PR0_AW;
        #[doc = "Write proxy for field `PR2`"]
        pub struct PR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR3_A = PR0_A;
        #[doc = "Reader of field `PR3`"]
        pub type PR3_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR3_AW = PR0_AW;
        #[doc = "Write proxy for field `PR3`"]
        pub struct PR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR4_A = PR0_A;
        #[doc = "Reader of field `PR4`"]
        pub type PR4_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR4_AW = PR0_AW;
        #[doc = "Write proxy for field `PR4`"]
        pub struct PR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR5_A = PR0_A;
        #[doc = "Reader of field `PR5`"]
        pub type PR5_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR5_AW = PR0_AW;
        #[doc = "Write proxy for field `PR5`"]
        pub struct PR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR6_A = PR0_A;
        #[doc = "Reader of field `PR6`"]
        pub type PR6_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR6_AW = PR0_AW;
        #[doc = "Write proxy for field `PR6`"]
        pub struct PR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR7_A = PR0_A;
        #[doc = "Reader of field `PR7`"]
        pub type PR7_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR7_AW = PR0_AW;
        #[doc = "Write proxy for field `PR7`"]
        pub struct PR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR8_A = PR0_A;
        #[doc = "Reader of field `PR8`"]
        pub type PR8_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR8_AW = PR0_AW;
        #[doc = "Write proxy for field `PR8`"]
        pub struct PR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR9_A = PR0_A;
        #[doc = "Reader of field `PR9`"]
        pub type PR9_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR9_AW = PR0_AW;
        #[doc = "Write proxy for field `PR9`"]
        pub struct PR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR10_A = PR0_A;
        #[doc = "Reader of field `PR10`"]
        pub type PR10_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR10_AW = PR0_AW;
        #[doc = "Write proxy for field `PR10`"]
        pub struct PR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR11_A = PR0_A;
        #[doc = "Reader of field `PR11`"]
        pub type PR11_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR11_AW = PR0_AW;
        #[doc = "Write proxy for field `PR11`"]
        pub struct PR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR12_A = PR0_A;
        #[doc = "Reader of field `PR12`"]
        pub type PR12_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR12_AW = PR0_AW;
        #[doc = "Write proxy for field `PR12`"]
        pub struct PR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR13_A = PR0_A;
        #[doc = "Reader of field `PR13`"]
        pub type PR13_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR13_AW = PR0_AW;
        #[doc = "Write proxy for field `PR13`"]
        pub struct PR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR14_A = PR0_A;
        #[doc = "Reader of field `PR14`"]
        pub type PR14_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR14_AW = PR0_AW;
        #[doc = "Write proxy for field `PR14`"]
        pub struct PR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR15_A = PR0_A;
        #[doc = "Reader of field `PR15`"]
        pub type PR15_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR15_AW = PR0_AW;
        #[doc = "Write proxy for field `PR15`"]
        pub struct PR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR16_A = PR0_A;
        #[doc = "Reader of field `PR16`"]
        pub type PR16_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR16_AW = PR0_AW;
        #[doc = "Write proxy for field `PR16`"]
        pub struct PR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR16_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR17_A = PR0_A;
        #[doc = "Reader of field `PR17`"]
        pub type PR17_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR17_AW = PR0_AW;
        #[doc = "Write proxy for field `PR17`"]
        pub struct PR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR17_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR18_A = PR0_A;
        #[doc = "Reader of field `PR18`"]
        pub type PR18_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR18_AW = PR0_AW;
        #[doc = "Write proxy for field `PR18`"]
        pub struct PR18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR18_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR19_A = PR0_A;
        #[doc = "Reader of field `PR19`"]
        pub type PR19_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR19_AW = PR0_AW;
        #[doc = "Write proxy for field `PR19`"]
        pub struct PR19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR19_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR20_A = PR0_A;
        #[doc = "Reader of field `PR20`"]
        pub type PR20_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR20_AW = PR0_AW;
        #[doc = "Write proxy for field `PR20`"]
        pub struct PR20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR20_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR21_A = PR0_A;
        #[doc = "Reader of field `PR21`"]
        pub type PR21_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR21_AW = PR0_AW;
        #[doc = "Write proxy for field `PR21`"]
        pub struct PR21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR21_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Pending bit"]
        pub type PR22_A = PR0_A;
        #[doc = "Reader of field `PR22`"]
        pub type PR22_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit"]
        pub type PR22_AW = PR0_AW;
        #[doc = "Write proxy for field `PR22`"]
        pub struct PR22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR22_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Pending bit"]
            #[inline(always)]
            pub fn pr0(&self) -> PR0_R {
                PR0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Pending bit"]
            #[inline(always)]
            pub fn pr1(&self) -> PR1_R {
                PR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Pending bit"]
            #[inline(always)]
            pub fn pr2(&self) -> PR2_R {
                PR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Pending bit"]
            #[inline(always)]
            pub fn pr3(&self) -> PR3_R {
                PR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Pending bit"]
            #[inline(always)]
            pub fn pr4(&self) -> PR4_R {
                PR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Pending bit"]
            #[inline(always)]
            pub fn pr5(&self) -> PR5_R {
                PR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Pending bit"]
            #[inline(always)]
            pub fn pr6(&self) -> PR6_R {
                PR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Pending bit"]
            #[inline(always)]
            pub fn pr7(&self) -> PR7_R {
                PR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Pending bit"]
            #[inline(always)]
            pub fn pr8(&self) -> PR8_R {
                PR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Pending bit"]
            #[inline(always)]
            pub fn pr9(&self) -> PR9_R {
                PR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Pending bit"]
            #[inline(always)]
            pub fn pr10(&self) -> PR10_R {
                PR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Pending bit"]
            #[inline(always)]
            pub fn pr11(&self) -> PR11_R {
                PR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Pending bit"]
            #[inline(always)]
            pub fn pr12(&self) -> PR12_R {
                PR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Pending bit"]
            #[inline(always)]
            pub fn pr13(&self) -> PR13_R {
                PR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Pending bit"]
            #[inline(always)]
            pub fn pr14(&self) -> PR14_R {
                PR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Pending bit"]
            #[inline(always)]
            pub fn pr15(&self) -> PR15_R {
                PR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Pending bit"]
            #[inline(always)]
            pub fn pr16(&self) -> PR16_R {
                PR16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Pending bit"]
            #[inline(always)]
            pub fn pr17(&self) -> PR17_R {
                PR17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Pending bit"]
            #[inline(always)]
            pub fn pr18(&self) -> PR18_R {
                PR18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Pending bit"]
            #[inline(always)]
            pub fn pr19(&self) -> PR19_R {
                PR19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Pending bit"]
            #[inline(always)]
            pub fn pr20(&self) -> PR20_R {
                PR20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Pending bit"]
            #[inline(always)]
            pub fn pr21(&self) -> PR21_R {
                PR21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Pending bit"]
            #[inline(always)]
            pub fn pr22(&self) -> PR22_R {
                PR22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Pending bit"]
            #[inline(always)]
            pub fn pr0(&mut self) -> PR0_W {
                PR0_W { w: self }
            }
            #[doc = "Bit 1 - Pending bit"]
            #[inline(always)]
            pub fn pr1(&mut self) -> PR1_W {
                PR1_W { w: self }
            }
            #[doc = "Bit 2 - Pending bit"]
            #[inline(always)]
            pub fn pr2(&mut self) -> PR2_W {
                PR2_W { w: self }
            }
            #[doc = "Bit 3 - Pending bit"]
            #[inline(always)]
            pub fn pr3(&mut self) -> PR3_W {
                PR3_W { w: self }
            }
            #[doc = "Bit 4 - Pending bit"]
            #[inline(always)]
            pub fn pr4(&mut self) -> PR4_W {
                PR4_W { w: self }
            }
            #[doc = "Bit 5 - Pending bit"]
            #[inline(always)]
            pub fn pr5(&mut self) -> PR5_W {
                PR5_W { w: self }
            }
            #[doc = "Bit 6 - Pending bit"]
            #[inline(always)]
            pub fn pr6(&mut self) -> PR6_W {
                PR6_W { w: self }
            }
            #[doc = "Bit 7 - Pending bit"]
            #[inline(always)]
            pub fn pr7(&mut self) -> PR7_W {
                PR7_W { w: self }
            }
            #[doc = "Bit 8 - Pending bit"]
            #[inline(always)]
            pub fn pr8(&mut self) -> PR8_W {
                PR8_W { w: self }
            }
            #[doc = "Bit 9 - Pending bit"]
            #[inline(always)]
            pub fn pr9(&mut self) -> PR9_W {
                PR9_W { w: self }
            }
            #[doc = "Bit 10 - Pending bit"]
            #[inline(always)]
            pub fn pr10(&mut self) -> PR10_W {
                PR10_W { w: self }
            }
            #[doc = "Bit 11 - Pending bit"]
            #[inline(always)]
            pub fn pr11(&mut self) -> PR11_W {
                PR11_W { w: self }
            }
            #[doc = "Bit 12 - Pending bit"]
            #[inline(always)]
            pub fn pr12(&mut self) -> PR12_W {
                PR12_W { w: self }
            }
            #[doc = "Bit 13 - Pending bit"]
            #[inline(always)]
            pub fn pr13(&mut self) -> PR13_W {
                PR13_W { w: self }
            }
            #[doc = "Bit 14 - Pending bit"]
            #[inline(always)]
            pub fn pr14(&mut self) -> PR14_W {
                PR14_W { w: self }
            }
            #[doc = "Bit 15 - Pending bit"]
            #[inline(always)]
            pub fn pr15(&mut self) -> PR15_W {
                PR15_W { w: self }
            }
            #[doc = "Bit 16 - Pending bit"]
            #[inline(always)]
            pub fn pr16(&mut self) -> PR16_W {
                PR16_W { w: self }
            }
            #[doc = "Bit 17 - Pending bit"]
            #[inline(always)]
            pub fn pr17(&mut self) -> PR17_W {
                PR17_W { w: self }
            }
            #[doc = "Bit 18 - Pending bit"]
            #[inline(always)]
            pub fn pr18(&mut self) -> PR18_W {
                PR18_W { w: self }
            }
            #[doc = "Bit 19 - Pending bit"]
            #[inline(always)]
            pub fn pr19(&mut self) -> PR19_W {
                PR19_W { w: self }
            }
            #[doc = "Bit 20 - Pending bit"]
            #[inline(always)]
            pub fn pr20(&mut self) -> PR20_W {
                PR20_W { w: self }
            }
            #[doc = "Bit 21 - Pending bit"]
            #[inline(always)]
            pub fn pr21(&mut self) -> PR21_W {
                PR21_W { w: self }
            }
            #[doc = "Bit 22 - Pending bit"]
            #[inline(always)]
            pub fn pr22(&mut self) -> PR22_W {
                PR22_W { w: self }
            }
        }
    }
}
#[doc = "Flash"]
pub struct FLASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FLASH {}
impl FLASH {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const flash::RegisterBlock {
        0x4002_3c00 as *const _
    }
}
impl Deref for FLASH {
    type Target = flash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*FLASH::ptr() }
    }
}
#[doc = "Flash"]
pub mod flash {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Access control register"]
        pub acr: ACR,
        #[doc = "0x04 - Program/erase control register"]
        pub pecr: PECR,
        #[doc = "0x08 - Power down key register"]
        pub pdkeyr: PDKEYR,
        #[doc = "0x0c - Program/erase key register"]
        pub pekeyr: PEKEYR,
        #[doc = "0x10 - Program memory key register"]
        pub prgkeyr: PRGKEYR,
        #[doc = "0x14 - Option byte key register"]
        pub optkeyr: OPTKEYR,
        #[doc = "0x18 - Status register"]
        pub sr: SR,
        #[doc = "0x1c - Option byte register"]
        pub obr: OBR,
        #[doc = "0x20 - Write protection register"]
        pub wrpr1: WRPR1,
        _reserved9: [u8; 92usize],
        #[doc = "0x80 - Write protection register"]
        pub wrpr2: WRPR2,
        #[doc = "0x84 - Write protection register"]
        pub wrpr3: WRPR3,
    }
    #[doc = "Access control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [acr](acr) module"]
    pub type ACR = crate::Reg<u32, _ACR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ACR;
    #[doc = "`read()` method returns [acr::R](acr::R) reader structure"]
    impl crate::Readable for ACR {}
    #[doc = "`write(|w| ..)` method takes [acr::W](acr::W) writer structure"]
    impl crate::Writable for ACR {}
    #[doc = "Access control register"]
    pub mod acr {
        #[doc = "Reader of register ACR"]
        pub type R = crate::R<u32, super::ACR>;
        #[doc = "Writer for register ACR"]
        pub type W = crate::W<u32, super::ACR>;
        #[doc = "Register ACR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ACR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LATENCY`"]
        pub type LATENCY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LATENCY`"]
        pub struct LATENCY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LATENCY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `PRFTEN`"]
        pub type PRFTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PRFTEN`"]
        pub struct PRFTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRFTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `ACC64`"]
        pub type ACC64_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ACC64`"]
        pub struct ACC64_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACC64_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SLEEP_PD`"]
        pub type SLEEP_PD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEEP_PD`"]
        pub struct SLEEP_PD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEEP_PD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `RUN_PD`"]
        pub type RUN_PD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RUN_PD`"]
        pub struct RUN_PD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RUN_PD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Latency"]
            #[inline(always)]
            pub fn latency(&self) -> LATENCY_R {
                LATENCY_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Prefetch enable"]
            #[inline(always)]
            pub fn prften(&self) -> PRFTEN_R {
                PRFTEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - 64-bit access"]
            #[inline(always)]
            pub fn acc64(&self) -> ACC64_R {
                ACC64_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Flash mode during Sleep"]
            #[inline(always)]
            pub fn sleep_pd(&self) -> SLEEP_PD_R {
                SLEEP_PD_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Flash mode during Run"]
            #[inline(always)]
            pub fn run_pd(&self) -> RUN_PD_R {
                RUN_PD_R::new(((self.bits >> 4) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Latency"]
            #[inline(always)]
            pub fn latency(&mut self) -> LATENCY_W {
                LATENCY_W { w: self }
            }
            #[doc = "Bit 1 - Prefetch enable"]
            #[inline(always)]
            pub fn prften(&mut self) -> PRFTEN_W {
                PRFTEN_W { w: self }
            }
            #[doc = "Bit 2 - 64-bit access"]
            #[inline(always)]
            pub fn acc64(&mut self) -> ACC64_W {
                ACC64_W { w: self }
            }
            #[doc = "Bit 3 - Flash mode during Sleep"]
            #[inline(always)]
            pub fn sleep_pd(&mut self) -> SLEEP_PD_W {
                SLEEP_PD_W { w: self }
            }
            #[doc = "Bit 4 - Flash mode during Run"]
            #[inline(always)]
            pub fn run_pd(&mut self) -> RUN_PD_W {
                RUN_PD_W { w: self }
            }
        }
    }
    #[doc = "Program/erase control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pecr](pecr) module"]
    pub type PECR = crate::Reg<u32, _PECR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PECR;
    #[doc = "`read()` method returns [pecr::R](pecr::R) reader structure"]
    impl crate::Readable for PECR {}
    #[doc = "`write(|w| ..)` method takes [pecr::W](pecr::W) writer structure"]
    impl crate::Writable for PECR {}
    #[doc = "Program/erase control register"]
    pub mod pecr {
        #[doc = "Reader of register PECR"]
        pub type R = crate::R<u32, super::PECR>;
        #[doc = "Writer for register PECR"]
        pub type W = crate::W<u32, super::PECR>;
        #[doc = "Register PECR `reset()`'s with value 0x07"]
        impl crate::ResetValue for super::PECR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x07
            }
        }
        #[doc = "Reader of field `PELOCK`"]
        pub type PELOCK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PELOCK`"]
        pub struct PELOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PELOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `PRGLOCK`"]
        pub type PRGLOCK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PRGLOCK`"]
        pub struct PRGLOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRGLOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `OPTLOCK`"]
        pub type OPTLOCK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPTLOCK`"]
        pub struct OPTLOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPTLOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PROG`"]
        pub type PROG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PROG`"]
        pub struct PROG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PROG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `DATA`"]
        pub type DATA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DATA`"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `FTDW`"]
        pub type FTDW_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FTDW`"]
        pub struct FTDW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTDW_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ERASE`"]
        pub type ERASE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ERASE`"]
        pub struct ERASE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERASE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `FPRG`"]
        pub type FPRG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FPRG`"]
        pub struct FPRG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPRG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PARALLELBANK`"]
        pub type PARALLELBANK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PARALLELBANK`"]
        pub struct PARALLELBANK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PARALLELBANK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `EOPIE`"]
        pub type EOPIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOPIE`"]
        pub struct EOPIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOPIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `ERRIE`"]
        pub type ERRIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ERRIE`"]
        pub struct ERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `OBL_LAUNCH`"]
        pub type OBL_LAUNCH_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OBL_LAUNCH`"]
        pub struct OBL_LAUNCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OBL_LAUNCH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - FLASH_PECR and data EEPROM lock"]
            #[inline(always)]
            pub fn pelock(&self) -> PELOCK_R {
                PELOCK_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Program memory lock"]
            #[inline(always)]
            pub fn prglock(&self) -> PRGLOCK_R {
                PRGLOCK_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Option bytes block lock"]
            #[inline(always)]
            pub fn optlock(&self) -> OPTLOCK_R {
                OPTLOCK_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Program memory selection"]
            #[inline(always)]
            pub fn prog(&self) -> PROG_R {
                PROG_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Data EEPROM selection"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Fixed time data write for Byte, Half Word and Word programming"]
            #[inline(always)]
            pub fn ftdw(&self) -> FTDW_R {
                FTDW_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Page or Double Word erase mode"]
            #[inline(always)]
            pub fn erase(&self) -> ERASE_R {
                ERASE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Half Page/Double Word programming mode"]
            #[inline(always)]
            pub fn fprg(&self) -> FPRG_R {
                FPRG_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Parallel bank mode"]
            #[inline(always)]
            pub fn parallelbank(&self) -> PARALLELBANK_R {
                PARALLELBANK_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - End of programming interrupt enable"]
            #[inline(always)]
            pub fn eopie(&self) -> EOPIE_R {
                EOPIE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&self) -> ERRIE_R {
                ERRIE_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Launch the option byte loading"]
            #[inline(always)]
            pub fn obl_launch(&self) -> OBL_LAUNCH_R {
                OBL_LAUNCH_R::new(((self.bits >> 18) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - FLASH_PECR and data EEPROM lock"]
            #[inline(always)]
            pub fn pelock(&mut self) -> PELOCK_W {
                PELOCK_W { w: self }
            }
            #[doc = "Bit 1 - Program memory lock"]
            #[inline(always)]
            pub fn prglock(&mut self) -> PRGLOCK_W {
                PRGLOCK_W { w: self }
            }
            #[doc = "Bit 2 - Option bytes block lock"]
            #[inline(always)]
            pub fn optlock(&mut self) -> OPTLOCK_W {
                OPTLOCK_W { w: self }
            }
            #[doc = "Bit 3 - Program memory selection"]
            #[inline(always)]
            pub fn prog(&mut self) -> PROG_W {
                PROG_W { w: self }
            }
            #[doc = "Bit 4 - Data EEPROM selection"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
            #[doc = "Bit 8 - Fixed time data write for Byte, Half Word and Word programming"]
            #[inline(always)]
            pub fn ftdw(&mut self) -> FTDW_W {
                FTDW_W { w: self }
            }
            #[doc = "Bit 9 - Page or Double Word erase mode"]
            #[inline(always)]
            pub fn erase(&mut self) -> ERASE_W {
                ERASE_W { w: self }
            }
            #[doc = "Bit 10 - Half Page/Double Word programming mode"]
            #[inline(always)]
            pub fn fprg(&mut self) -> FPRG_W {
                FPRG_W { w: self }
            }
            #[doc = "Bit 15 - Parallel bank mode"]
            #[inline(always)]
            pub fn parallelbank(&mut self) -> PARALLELBANK_W {
                PARALLELBANK_W { w: self }
            }
            #[doc = "Bit 16 - End of programming interrupt enable"]
            #[inline(always)]
            pub fn eopie(&mut self) -> EOPIE_W {
                EOPIE_W { w: self }
            }
            #[doc = "Bit 17 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&mut self) -> ERRIE_W {
                ERRIE_W { w: self }
            }
            #[doc = "Bit 18 - Launch the option byte loading"]
            #[inline(always)]
            pub fn obl_launch(&mut self) -> OBL_LAUNCH_W {
                OBL_LAUNCH_W { w: self }
            }
        }
    }
    #[doc = "Power down key register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdkeyr](pdkeyr) module"]
    pub type PDKEYR = crate::Reg<u32, _PDKEYR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDKEYR;
    #[doc = "`write(|w| ..)` method takes [pdkeyr::W](pdkeyr::W) writer structure"]
    impl crate::Writable for PDKEYR {}
    #[doc = "Power down key register"]
    pub mod pdkeyr {
        #[doc = "Writer for register PDKEYR"]
        pub type W = crate::W<u32, super::PDKEYR>;
        #[doc = "Register PDKEYR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDKEYR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `PDKEYR`"]
        pub struct PDKEYR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDKEYR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - RUN_PD in FLASH_ACR key"]
            #[inline(always)]
            pub fn pdkeyr(&mut self) -> PDKEYR_W {
                PDKEYR_W { w: self }
            }
        }
    }
    #[doc = "Program/erase key register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pekeyr](pekeyr) module"]
    pub type PEKEYR = crate::Reg<u32, _PEKEYR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEKEYR;
    #[doc = "`write(|w| ..)` method takes [pekeyr::W](pekeyr::W) writer structure"]
    impl crate::Writable for PEKEYR {}
    #[doc = "Program/erase key register"]
    pub mod pekeyr {
        #[doc = "Writer for register PEKEYR"]
        pub type W = crate::W<u32, super::PEKEYR>;
        #[doc = "Register PEKEYR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PEKEYR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `PEKEYR`"]
        pub struct PEKEYR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEKEYR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FLASH_PEC and data EEPROM key"]
            #[inline(always)]
            pub fn pekeyr(&mut self) -> PEKEYR_W {
                PEKEYR_W { w: self }
            }
        }
    }
    #[doc = "Program memory key register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [prgkeyr](prgkeyr) module"]
    pub type PRGKEYR = crate::Reg<u32, _PRGKEYR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PRGKEYR;
    #[doc = "`write(|w| ..)` method takes [prgkeyr::W](prgkeyr::W) writer structure"]
    impl crate::Writable for PRGKEYR {}
    #[doc = "Program memory key register"]
    pub mod prgkeyr {
        #[doc = "Writer for register PRGKEYR"]
        pub type W = crate::W<u32, super::PRGKEYR>;
        #[doc = "Register PRGKEYR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PRGKEYR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `PRGKEYR`"]
        pub struct PRGKEYR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRGKEYR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Program memory key"]
            #[inline(always)]
            pub fn prgkeyr(&mut self) -> PRGKEYR_W {
                PRGKEYR_W { w: self }
            }
        }
    }
    #[doc = "Option byte key register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [optkeyr](optkeyr) module"]
    pub type OPTKEYR = crate::Reg<u32, _OPTKEYR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OPTKEYR;
    #[doc = "`write(|w| ..)` method takes [optkeyr::W](optkeyr::W) writer structure"]
    impl crate::Writable for OPTKEYR {}
    #[doc = "Option byte key register"]
    pub mod optkeyr {
        #[doc = "Writer for register OPTKEYR"]
        pub type W = crate::W<u32, super::OPTKEYR>;
        #[doc = "Register OPTKEYR `reset()`'s with value 0"]
        impl crate::ResetValue for super::OPTKEYR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `OPTKEYR`"]
        pub struct OPTKEYR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPTKEYR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Option byte key"]
            #[inline(always)]
            pub fn optkeyr(&mut self) -> OPTKEYR_W {
                OPTKEYR_W { w: self }
            }
        }
    }
    #[doc = "Status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "Status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0x04"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x04
            }
        }
        #[doc = "Reader of field `BSY`"]
        pub type BSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EOP`"]
        pub type EOP_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ENDHV`"]
        pub type ENDHV_R = crate::R<bool, bool>;
        #[doc = "Reader of field `READY`"]
        pub type READY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRPERR`"]
        pub type WRPERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WRPERR`"]
        pub struct WRPERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRPERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PGAERR`"]
        pub type PGAERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PGAERR`"]
        pub struct PGAERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PGAERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SIZERR`"]
        pub type SIZERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SIZERR`"]
        pub struct SIZERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SIZERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OPTVERR`"]
        pub type OPTVERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPTVERR`"]
        pub struct OPTVERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPTVERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OPTVERRUSR`"]
        pub type OPTVERRUSR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPTVERRUSR`"]
        pub struct OPTVERRUSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPTVERRUSR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Write/erase operations in progress"]
            #[inline(always)]
            pub fn bsy(&self) -> BSY_R {
                BSY_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - End of operation"]
            #[inline(always)]
            pub fn eop(&self) -> EOP_R {
                EOP_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - End of high voltage"]
            #[inline(always)]
            pub fn endhv(&self) -> ENDHV_R {
                ENDHV_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Flash memory module ready after low power mode"]
            #[inline(always)]
            pub fn ready(&self) -> READY_R {
                READY_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Write protected error"]
            #[inline(always)]
            pub fn wrperr(&self) -> WRPERR_R {
                WRPERR_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Programming alignment error"]
            #[inline(always)]
            pub fn pgaerr(&self) -> PGAERR_R {
                PGAERR_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Size error"]
            #[inline(always)]
            pub fn sizerr(&self) -> SIZERR_R {
                SIZERR_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Option validity error"]
            #[inline(always)]
            pub fn optverr(&self) -> OPTVERR_R {
                OPTVERR_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Option UserValidity Error"]
            #[inline(always)]
            pub fn optverrusr(&self) -> OPTVERRUSR_R {
                OPTVERRUSR_R::new(((self.bits >> 12) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - Write protected error"]
            #[inline(always)]
            pub fn wrperr(&mut self) -> WRPERR_W {
                WRPERR_W { w: self }
            }
            #[doc = "Bit 9 - Programming alignment error"]
            #[inline(always)]
            pub fn pgaerr(&mut self) -> PGAERR_W {
                PGAERR_W { w: self }
            }
            #[doc = "Bit 10 - Size error"]
            #[inline(always)]
            pub fn sizerr(&mut self) -> SIZERR_W {
                SIZERR_W { w: self }
            }
            #[doc = "Bit 11 - Option validity error"]
            #[inline(always)]
            pub fn optverr(&mut self) -> OPTVERR_W {
                OPTVERR_W { w: self }
            }
            #[doc = "Bit 12 - Option UserValidity Error"]
            #[inline(always)]
            pub fn optverrusr(&mut self) -> OPTVERRUSR_W {
                OPTVERRUSR_W { w: self }
            }
        }
    }
    #[doc = "Option byte register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [obr](obr) module"]
    pub type OBR = crate::Reg<u32, _OBR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OBR;
    #[doc = "`read()` method returns [obr::R](obr::R) reader structure"]
    impl crate::Readable for OBR {}
    #[doc = "Option byte register"]
    pub mod obr {
        #[doc = "Reader of register OBR"]
        pub type R = crate::R<u32, super::OBR>;
        #[doc = "Reader of field `RDPRT`"]
        pub type RDPRT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BOR_LEV`"]
        pub type BOR_LEV_R = crate::R<u8, u8>;
        #[doc = "Reader of field `IWDG_SW`"]
        pub type IWDG_SW_R = crate::R<bool, bool>;
        #[doc = "Reader of field `nRTS_STOP`"]
        pub type NRTS_STOP_R = crate::R<bool, bool>;
        #[doc = "Reader of field `nRST_STDBY`"]
        pub type NRST_STDBY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BFB2`"]
        pub type BFB2_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bits 0:7 - Read protection"]
            #[inline(always)]
            pub fn rdprt(&self) -> RDPRT_R {
                RDPRT_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 16:19 - BOR_LEV"]
            #[inline(always)]
            pub fn bor_lev(&self) -> BOR_LEV_R {
                BOR_LEV_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bit 20 - IWDG_SW"]
            #[inline(always)]
            pub fn iwdg_sw(&self) -> IWDG_SW_R {
                IWDG_SW_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - nRTS_STOP"]
            #[inline(always)]
            pub fn n_rts_stop(&self) -> NRTS_STOP_R {
                NRTS_STOP_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - nRST_STDBY"]
            #[inline(always)]
            pub fn n_rst_stdby(&self) -> NRST_STDBY_R {
                NRST_STDBY_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Boot From Bank 2"]
            #[inline(always)]
            pub fn bfb2(&self) -> BFB2_R {
                BFB2_R::new(((self.bits >> 23) & 0x01) != 0)
            }
        }
    }
    #[doc = "Write protection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wrpr1](wrpr1) module"]
    pub type WRPR1 = crate::Reg<u32, _WRPR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WRPR1;
    #[doc = "`read()` method returns [wrpr1::R](wrpr1::R) reader structure"]
    impl crate::Readable for WRPR1 {}
    #[doc = "`write(|w| ..)` method takes [wrpr1::W](wrpr1::W) writer structure"]
    impl crate::Writable for WRPR1 {}
    #[doc = "Write protection register"]
    pub mod wrpr1 {
        #[doc = "Reader of register WRPR1"]
        pub type R = crate::R<u32, super::WRPR1>;
        #[doc = "Writer for register WRPR1"]
        pub type W = crate::W<u32, super::WRPR1>;
        #[doc = "Register WRPR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::WRPR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WRP1`"]
        pub type WRP1_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `WRP1`"]
        pub struct WRP1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRP1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Write protection"]
            #[inline(always)]
            pub fn wrp1(&self) -> WRP1_R {
                WRP1_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Write protection"]
            #[inline(always)]
            pub fn wrp1(&mut self) -> WRP1_W {
                WRP1_W { w: self }
            }
        }
    }
    #[doc = "Write protection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wrpr2](wrpr2) module"]
    pub type WRPR2 = crate::Reg<u32, _WRPR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WRPR2;
    #[doc = "`read()` method returns [wrpr2::R](wrpr2::R) reader structure"]
    impl crate::Readable for WRPR2 {}
    #[doc = "`write(|w| ..)` method takes [wrpr2::W](wrpr2::W) writer structure"]
    impl crate::Writable for WRPR2 {}
    #[doc = "Write protection register"]
    pub mod wrpr2 {
        #[doc = "Reader of register WRPR2"]
        pub type R = crate::R<u32, super::WRPR2>;
        #[doc = "Writer for register WRPR2"]
        pub type W = crate::W<u32, super::WRPR2>;
        #[doc = "Register WRPR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::WRPR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WRP2`"]
        pub type WRP2_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `WRP2`"]
        pub struct WRP2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRP2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - WRP2"]
            #[inline(always)]
            pub fn wrp2(&self) -> WRP2_R {
                WRP2_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - WRP2"]
            #[inline(always)]
            pub fn wrp2(&mut self) -> WRP2_W {
                WRP2_W { w: self }
            }
        }
    }
    #[doc = "Write protection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wrpr3](wrpr3) module"]
    pub type WRPR3 = crate::Reg<u32, _WRPR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WRPR3;
    #[doc = "`read()` method returns [wrpr3::R](wrpr3::R) reader structure"]
    impl crate::Readable for WRPR3 {}
    #[doc = "`write(|w| ..)` method takes [wrpr3::W](wrpr3::W) writer structure"]
    impl crate::Writable for WRPR3 {}
    #[doc = "Write protection register"]
    pub mod wrpr3 {
        #[doc = "Reader of register WRPR3"]
        pub type R = crate::R<u32, super::WRPR3>;
        #[doc = "Writer for register WRPR3"]
        pub type W = crate::W<u32, super::WRPR3>;
        #[doc = "Register WRPR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::WRPR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WRP3`"]
        pub type WRP3_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `WRP3`"]
        pub struct WRP3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRP3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - WRP3"]
            #[inline(always)]
            pub fn wrp3(&self) -> WRP3_R {
                WRP3_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - WRP3"]
            #[inline(always)]
            pub fn wrp3(&mut self) -> WRP3_W {
                WRP3_W { w: self }
            }
        }
    }
}
#[doc = "Flexible static memory controller"]
pub struct FSMC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FSMC {}
impl FSMC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const fsmc::RegisterBlock {
        0xa000_0000 as *const _
    }
}
impl Deref for FSMC {
    type Target = fsmc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*FSMC::ptr() }
    }
}
#[doc = "Flexible static memory controller"]
pub mod fsmc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - BCR1"]
        pub bcr1: BCR1,
        #[doc = "0x04 - BTR1"]
        pub btr1: BTR,
        #[doc = "0x08 - BCR2"]
        pub bcr2: BCR,
        #[doc = "0x0c - BTR1"]
        pub btr2: BTR,
        #[doc = "0x10 - BCR2"]
        pub bcr3: BCR,
        #[doc = "0x14 - BTR1"]
        pub btr3: BTR,
        #[doc = "0x18 - BCR2"]
        pub bcr4: BCR,
        #[doc = "0x1c - BTR1"]
        pub btr4: BTR,
        _reserved8: [u8; 228usize],
        #[doc = "0x104 - BWTR1"]
        pub bwtr1: BWTR,
        _reserved9: [u8; 4usize],
        #[doc = "0x10c - BWTR1"]
        pub bwtr2: BWTR,
        _reserved10: [u8; 4usize],
        #[doc = "0x114 - BWTR1"]
        pub bwtr3: BWTR,
        _reserved11: [u8; 4usize],
        #[doc = "0x11c - BWTR1"]
        pub bwtr4: BWTR,
    }
    #[doc = "BCR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bcr1](bcr1) module"]
    pub type BCR1 = crate::Reg<u32, _BCR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BCR1;
    #[doc = "`read()` method returns [bcr1::R](bcr1::R) reader structure"]
    impl crate::Readable for BCR1 {}
    #[doc = "`write(|w| ..)` method takes [bcr1::W](bcr1::W) writer structure"]
    impl crate::Writable for BCR1 {}
    #[doc = "BCR1"]
    pub mod bcr1 {
        #[doc = "Reader of register BCR1"]
        pub type R = crate::R<u32, super::BCR1>;
        #[doc = "Writer for register BCR1"]
        pub type W = crate::W<u32, super::BCR1>;
        #[doc = "Register BCR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::BCR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "CBURSTRW\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CBURSTRW_A {
            #[doc = "1: Write operations are performed in synchronous mode"]
            ENABLED = 1,
            #[doc = "0: Write operations are always performed in asynchronous mode"]
            DISABLED = 0,
        }
        impl From<CBURSTRW_A> for bool {
            #[inline(always)]
            fn from(variant: CBURSTRW_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CBURSTRW`"]
        pub type CBURSTRW_R = crate::R<bool, CBURSTRW_A>;
        impl CBURSTRW_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CBURSTRW_A {
                match self.bits {
                    true => CBURSTRW_A::ENABLED,
                    false => CBURSTRW_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CBURSTRW_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CBURSTRW_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `CBURSTRW`"]
        pub struct CBURSTRW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBURSTRW_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CBURSTRW_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Write operations are performed in synchronous mode"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CBURSTRW_A::ENABLED)
            }
            #[doc = "Write operations are always performed in asynchronous mode"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CBURSTRW_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "ASYNCWAIT\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ASYNCWAIT_A {
            #[doc = "0: Wait signal not used in asynchronous mode"]
            DISABLED = 0,
            #[doc = "1: Wait signal used even in asynchronous mode"]
            ENABLED = 1,
        }
        impl From<ASYNCWAIT_A> for bool {
            #[inline(always)]
            fn from(variant: ASYNCWAIT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ASYNCWAIT`"]
        pub type ASYNCWAIT_R = crate::R<bool, ASYNCWAIT_A>;
        impl ASYNCWAIT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ASYNCWAIT_A {
                match self.bits {
                    false => ASYNCWAIT_A::DISABLED,
                    true => ASYNCWAIT_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ASYNCWAIT_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ASYNCWAIT_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ASYNCWAIT`"]
        pub struct ASYNCWAIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ASYNCWAIT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ASYNCWAIT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Wait signal not used in asynchronous mode"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ASYNCWAIT_A::DISABLED)
            }
            #[doc = "Wait signal used even in asynchronous mode"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ASYNCWAIT_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "EXTMOD\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EXTMOD_A {
            #[doc = "0: Values inside the FMC_BWTR are not taken into account"]
            DISABLED = 0,
            #[doc = "1: Values inside the FMC_BWTR are taken into account"]
            ENABLED = 1,
        }
        impl From<EXTMOD_A> for bool {
            #[inline(always)]
            fn from(variant: EXTMOD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EXTMOD`"]
        pub type EXTMOD_R = crate::R<bool, EXTMOD_A>;
        impl EXTMOD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EXTMOD_A {
                match self.bits {
                    false => EXTMOD_A::DISABLED,
                    true => EXTMOD_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == EXTMOD_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == EXTMOD_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `EXTMOD`"]
        pub struct EXTMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTMOD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTMOD_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Values inside the FMC_BWTR are not taken into account"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(EXTMOD_A::DISABLED)
            }
            #[doc = "Values inside the FMC_BWTR are taken into account"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(EXTMOD_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "WAITEN\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WAITEN_A {
            #[doc = "0: Values inside the FMC_BWTR are taken into account"]
            DISABLED = 0,
            #[doc = "1: NWAIT signal enabled"]
            ENABLED = 1,
        }
        impl From<WAITEN_A> for bool {
            #[inline(always)]
            fn from(variant: WAITEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WAITEN`"]
        pub type WAITEN_R = crate::R<bool, WAITEN_A>;
        impl WAITEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WAITEN_A {
                match self.bits {
                    false => WAITEN_A::DISABLED,
                    true => WAITEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == WAITEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == WAITEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `WAITEN`"]
        pub struct WAITEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAITEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WAITEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Values inside the FMC_BWTR are taken into account"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(WAITEN_A::DISABLED)
            }
            #[doc = "NWAIT signal enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(WAITEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "WREN\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WREN_A {
            #[doc = "0: Write operations disabled for the bank by the FMC"]
            DISABLED = 0,
            #[doc = "1: Write operations enabled for the bank by the FMC"]
            ENABLED = 1,
        }
        impl From<WREN_A> for bool {
            #[inline(always)]
            fn from(variant: WREN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WREN`"]
        pub type WREN_R = crate::R<bool, WREN_A>;
        impl WREN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WREN_A {
                match self.bits {
                    false => WREN_A::DISABLED,
                    true => WREN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == WREN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == WREN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `WREN`"]
        pub struct WREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WREN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WREN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Write operations disabled for the bank by the FMC"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(WREN_A::DISABLED)
            }
            #[doc = "Write operations enabled for the bank by the FMC"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(WREN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "WAITCFG\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WAITCFG_A {
            #[doc = "0: NWAIT signal is active one data cycle before wait state"]
            BEFOREWAITSTATE = 0,
            #[doc = "1: NWAIT signal is active during wait state"]
            DURINGWAITSTATE = 1,
        }
        impl From<WAITCFG_A> for bool {
            #[inline(always)]
            fn from(variant: WAITCFG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WAITCFG`"]
        pub type WAITCFG_R = crate::R<bool, WAITCFG_A>;
        impl WAITCFG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WAITCFG_A {
                match self.bits {
                    false => WAITCFG_A::BEFOREWAITSTATE,
                    true => WAITCFG_A::DURINGWAITSTATE,
                }
            }
            #[doc = "Checks if the value of the field is `BEFOREWAITSTATE`"]
            #[inline(always)]
            pub fn is_before_wait_state(&self) -> bool {
                *self == WAITCFG_A::BEFOREWAITSTATE
            }
            #[doc = "Checks if the value of the field is `DURINGWAITSTATE`"]
            #[inline(always)]
            pub fn is_during_wait_state(&self) -> bool {
                *self == WAITCFG_A::DURINGWAITSTATE
            }
        }
        #[doc = "Write proxy for field `WAITCFG`"]
        pub struct WAITCFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAITCFG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WAITCFG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "NWAIT signal is active one data cycle before wait state"]
            #[inline(always)]
            pub fn before_wait_state(self) -> &'a mut W {
                self.variant(WAITCFG_A::BEFOREWAITSTATE)
            }
            #[doc = "NWAIT signal is active during wait state"]
            #[inline(always)]
            pub fn during_wait_state(self) -> &'a mut W {
                self.variant(WAITCFG_A::DURINGWAITSTATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `WRAPMOD`"]
        pub type WRAPMOD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WRAPMOD`"]
        pub struct WRAPMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRAPMOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "WAITPOL\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WAITPOL_A {
            #[doc = "0: NWAIT active low"]
            ACTIVELOW = 0,
            #[doc = "1: NWAIT active high"]
            ACTIVEHIGH = 1,
        }
        impl From<WAITPOL_A> for bool {
            #[inline(always)]
            fn from(variant: WAITPOL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WAITPOL`"]
        pub type WAITPOL_R = crate::R<bool, WAITPOL_A>;
        impl WAITPOL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WAITPOL_A {
                match self.bits {
                    false => WAITPOL_A::ACTIVELOW,
                    true => WAITPOL_A::ACTIVEHIGH,
                }
            }
            #[doc = "Checks if the value of the field is `ACTIVELOW`"]
            #[inline(always)]
            pub fn is_active_low(&self) -> bool {
                *self == WAITPOL_A::ACTIVELOW
            }
            #[doc = "Checks if the value of the field is `ACTIVEHIGH`"]
            #[inline(always)]
            pub fn is_active_high(&self) -> bool {
                *self == WAITPOL_A::ACTIVEHIGH
            }
        }
        #[doc = "Write proxy for field `WAITPOL`"]
        pub struct WAITPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAITPOL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WAITPOL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "NWAIT active low"]
            #[inline(always)]
            pub fn active_low(self) -> &'a mut W {
                self.variant(WAITPOL_A::ACTIVELOW)
            }
            #[doc = "NWAIT active high"]
            #[inline(always)]
            pub fn active_high(self) -> &'a mut W {
                self.variant(WAITPOL_A::ACTIVEHIGH)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "BURSTEN\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BURSTEN_A {
            #[doc = "0: Burst mode disabled"]
            DISABLED = 0,
            #[doc = "1: Burst mode enabled"]
            ENABLED = 1,
        }
        impl From<BURSTEN_A> for bool {
            #[inline(always)]
            fn from(variant: BURSTEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BURSTEN`"]
        pub type BURSTEN_R = crate::R<bool, BURSTEN_A>;
        impl BURSTEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BURSTEN_A {
                match self.bits {
                    false => BURSTEN_A::DISABLED,
                    true => BURSTEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == BURSTEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == BURSTEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `BURSTEN`"]
        pub struct BURSTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BURSTEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BURSTEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Burst mode disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(BURSTEN_A::DISABLED)
            }
            #[doc = "Burst mode enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(BURSTEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "FACCEN\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FACCEN_A {
            #[doc = "0: Corresponding NOR Flash memory access is disabled"]
            DISABLED = 0,
            #[doc = "1: Corresponding NOR Flash memory access is enabled"]
            ENABLED = 1,
        }
        impl From<FACCEN_A> for bool {
            #[inline(always)]
            fn from(variant: FACCEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FACCEN`"]
        pub type FACCEN_R = crate::R<bool, FACCEN_A>;
        impl FACCEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FACCEN_A {
                match self.bits {
                    false => FACCEN_A::DISABLED,
                    true => FACCEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == FACCEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == FACCEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `FACCEN`"]
        pub struct FACCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FACCEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FACCEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding NOR Flash memory access is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(FACCEN_A::DISABLED)
            }
            #[doc = "Corresponding NOR Flash memory access is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(FACCEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "MWID\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MWID_A {
            #[doc = "0: Memory data bus width 8 bits"]
            BITS8 = 0,
            #[doc = "1: Memory data bus width 16 bits"]
            BITS16 = 1,
            #[doc = "2: Memory data bus width 32 bits"]
            BITS32 = 2,
        }
        impl From<MWID_A> for u8 {
            #[inline(always)]
            fn from(variant: MWID_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MWID`"]
        pub type MWID_R = crate::R<u8, MWID_A>;
        impl MWID_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, MWID_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(MWID_A::BITS8),
                    1 => Val(MWID_A::BITS16),
                    2 => Val(MWID_A::BITS32),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `BITS8`"]
            #[inline(always)]
            pub fn is_bits8(&self) -> bool {
                *self == MWID_A::BITS8
            }
            #[doc = "Checks if the value of the field is `BITS16`"]
            #[inline(always)]
            pub fn is_bits16(&self) -> bool {
                *self == MWID_A::BITS16
            }
            #[doc = "Checks if the value of the field is `BITS32`"]
            #[inline(always)]
            pub fn is_bits32(&self) -> bool {
                *self == MWID_A::BITS32
            }
        }
        #[doc = "Write proxy for field `MWID`"]
        pub struct MWID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MWID_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MWID_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Memory data bus width 8 bits"]
            #[inline(always)]
            pub fn bits8(self) -> &'a mut W {
                self.variant(MWID_A::BITS8)
            }
            #[doc = "Memory data bus width 16 bits"]
            #[inline(always)]
            pub fn bits16(self) -> &'a mut W {
                self.variant(MWID_A::BITS16)
            }
            #[doc = "Memory data bus width 32 bits"]
            #[inline(always)]
            pub fn bits32(self) -> &'a mut W {
                self.variant(MWID_A::BITS32)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "MTYP\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MTYP_A {
            #[doc = "0: SRAM memory type"]
            SRAM = 0,
            #[doc = "1: PSRAM (CRAM) memory type"]
            PSRAM = 1,
            #[doc = "2: NOR Flash/OneNAND Flash"]
            FLASH = 2,
        }
        impl From<MTYP_A> for u8 {
            #[inline(always)]
            fn from(variant: MTYP_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MTYP`"]
        pub type MTYP_R = crate::R<u8, MTYP_A>;
        impl MTYP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, MTYP_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(MTYP_A::SRAM),
                    1 => Val(MTYP_A::PSRAM),
                    2 => Val(MTYP_A::FLASH),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `SRAM`"]
            #[inline(always)]
            pub fn is_sram(&self) -> bool {
                *self == MTYP_A::SRAM
            }
            #[doc = "Checks if the value of the field is `PSRAM`"]
            #[inline(always)]
            pub fn is_psram(&self) -> bool {
                *self == MTYP_A::PSRAM
            }
            #[doc = "Checks if the value of the field is `FLASH`"]
            #[inline(always)]
            pub fn is_flash(&self) -> bool {
                *self == MTYP_A::FLASH
            }
        }
        #[doc = "Write proxy for field `MTYP`"]
        pub struct MTYP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MTYP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MTYP_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "SRAM memory type"]
            #[inline(always)]
            pub fn sram(self) -> &'a mut W {
                self.variant(MTYP_A::SRAM)
            }
            #[doc = "PSRAM (CRAM) memory type"]
            #[inline(always)]
            pub fn psram(self) -> &'a mut W {
                self.variant(MTYP_A::PSRAM)
            }
            #[doc = "NOR Flash/OneNAND Flash"]
            #[inline(always)]
            pub fn flash(self) -> &'a mut W {
                self.variant(MTYP_A::FLASH)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "MUXEN\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MUXEN_A {
            #[doc = "0: Address/Data non-multiplexed"]
            DISABLED = 0,
            #[doc = "1: Address/Data multiplexed on databus"]
            ENABLED = 1,
        }
        impl From<MUXEN_A> for bool {
            #[inline(always)]
            fn from(variant: MUXEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MUXEN`"]
        pub type MUXEN_R = crate::R<bool, MUXEN_A>;
        impl MUXEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MUXEN_A {
                match self.bits {
                    false => MUXEN_A::DISABLED,
                    true => MUXEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == MUXEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == MUXEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `MUXEN`"]
        pub struct MUXEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MUXEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MUXEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Address/Data non-multiplexed"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(MUXEN_A::DISABLED)
            }
            #[doc = "Address/Data multiplexed on databus"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(MUXEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "MBKEN\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MBKEN_A {
            #[doc = "0: Corresponding memory bank is disabled"]
            DISABLED = 0,
            #[doc = "1: Corresponding memory bank is enabled"]
            ENABLED = 1,
        }
        impl From<MBKEN_A> for bool {
            #[inline(always)]
            fn from(variant: MBKEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MBKEN`"]
        pub type MBKEN_R = crate::R<bool, MBKEN_A>;
        impl MBKEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MBKEN_A {
                match self.bits {
                    false => MBKEN_A::DISABLED,
                    true => MBKEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == MBKEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == MBKEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `MBKEN`"]
        pub struct MBKEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MBKEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MBKEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding memory bank is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(MBKEN_A::DISABLED)
            }
            #[doc = "Corresponding memory bank is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(MBKEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "CRAM page size\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CPSIZE_A {
            #[doc = "0: No burst split when crossing page boundary"]
            NOBURSTSPLIT = 0,
            #[doc = "1: 128 bytes CRAM page size"]
            BYTES128 = 1,
            #[doc = "2: 256 bytes CRAM page size"]
            BYTES256 = 2,
            #[doc = "3: 512 bytes CRAM page size"]
            BYTES512 = 3,
            #[doc = "4: 1024 bytes CRAM page size"]
            BYTES1024 = 4,
        }
        impl From<CPSIZE_A> for u8 {
            #[inline(always)]
            fn from(variant: CPSIZE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CPSIZE`"]
        pub type CPSIZE_R = crate::R<u8, CPSIZE_A>;
        impl CPSIZE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CPSIZE_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CPSIZE_A::NOBURSTSPLIT),
                    1 => Val(CPSIZE_A::BYTES128),
                    2 => Val(CPSIZE_A::BYTES256),
                    3 => Val(CPSIZE_A::BYTES512),
                    4 => Val(CPSIZE_A::BYTES1024),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `NOBURSTSPLIT`"]
            #[inline(always)]
            pub fn is_no_burst_split(&self) -> bool {
                *self == CPSIZE_A::NOBURSTSPLIT
            }
            #[doc = "Checks if the value of the field is `BYTES128`"]
            #[inline(always)]
            pub fn is_bytes128(&self) -> bool {
                *self == CPSIZE_A::BYTES128
            }
            #[doc = "Checks if the value of the field is `BYTES256`"]
            #[inline(always)]
            pub fn is_bytes256(&self) -> bool {
                *self == CPSIZE_A::BYTES256
            }
            #[doc = "Checks if the value of the field is `BYTES512`"]
            #[inline(always)]
            pub fn is_bytes512(&self) -> bool {
                *self == CPSIZE_A::BYTES512
            }
            #[doc = "Checks if the value of the field is `BYTES1024`"]
            #[inline(always)]
            pub fn is_bytes1024(&self) -> bool {
                *self == CPSIZE_A::BYTES1024
            }
        }
        #[doc = "Write proxy for field `CPSIZE`"]
        pub struct CPSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPSIZE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CPSIZE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No burst split when crossing page boundary"]
            #[inline(always)]
            pub fn no_burst_split(self) -> &'a mut W {
                self.variant(CPSIZE_A::NOBURSTSPLIT)
            }
            #[doc = "128 bytes CRAM page size"]
            #[inline(always)]
            pub fn bytes128(self) -> &'a mut W {
                self.variant(CPSIZE_A::BYTES128)
            }
            #[doc = "256 bytes CRAM page size"]
            #[inline(always)]
            pub fn bytes256(self) -> &'a mut W {
                self.variant(CPSIZE_A::BYTES256)
            }
            #[doc = "512 bytes CRAM page size"]
            #[inline(always)]
            pub fn bytes512(self) -> &'a mut W {
                self.variant(CPSIZE_A::BYTES512)
            }
            #[doc = "1024 bytes CRAM page size"]
            #[inline(always)]
            pub fn bytes1024(self) -> &'a mut W {
                self.variant(CPSIZE_A::BYTES1024)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 16)) | (((value as u32) & 0x07) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 19 - CBURSTRW"]
            #[inline(always)]
            pub fn cburstrw(&self) -> CBURSTRW_R {
                CBURSTRW_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 15 - ASYNCWAIT"]
            #[inline(always)]
            pub fn asyncwait(&self) -> ASYNCWAIT_R {
                ASYNCWAIT_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - EXTMOD"]
            #[inline(always)]
            pub fn extmod(&self) -> EXTMOD_R {
                EXTMOD_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - WAITEN"]
            #[inline(always)]
            pub fn waiten(&self) -> WAITEN_R {
                WAITEN_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - WREN"]
            #[inline(always)]
            pub fn wren(&self) -> WREN_R {
                WREN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - WAITCFG"]
            #[inline(always)]
            pub fn waitcfg(&self) -> WAITCFG_R {
                WAITCFG_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - WRAPMOD"]
            #[inline(always)]
            pub fn wrapmod(&self) -> WRAPMOD_R {
                WRAPMOD_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - WAITPOL"]
            #[inline(always)]
            pub fn waitpol(&self) -> WAITPOL_R {
                WAITPOL_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - BURSTEN"]
            #[inline(always)]
            pub fn bursten(&self) -> BURSTEN_R {
                BURSTEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - FACCEN"]
            #[inline(always)]
            pub fn faccen(&self) -> FACCEN_R {
                FACCEN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 4:5 - MWID"]
            #[inline(always)]
            pub fn mwid(&self) -> MWID_R {
                MWID_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - MTYP"]
            #[inline(always)]
            pub fn mtyp(&self) -> MTYP_R {
                MTYP_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bit 1 - MUXEN"]
            #[inline(always)]
            pub fn muxen(&self) -> MUXEN_R {
                MUXEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - MBKEN"]
            #[inline(always)]
            pub fn mbken(&self) -> MBKEN_R {
                MBKEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bits 16:18 - CRAM page size"]
            #[inline(always)]
            pub fn cpsize(&self) -> CPSIZE_R {
                CPSIZE_R::new(((self.bits >> 16) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 19 - CBURSTRW"]
            #[inline(always)]
            pub fn cburstrw(&mut self) -> CBURSTRW_W {
                CBURSTRW_W { w: self }
            }
            #[doc = "Bit 15 - ASYNCWAIT"]
            #[inline(always)]
            pub fn asyncwait(&mut self) -> ASYNCWAIT_W {
                ASYNCWAIT_W { w: self }
            }
            #[doc = "Bit 14 - EXTMOD"]
            #[inline(always)]
            pub fn extmod(&mut self) -> EXTMOD_W {
                EXTMOD_W { w: self }
            }
            #[doc = "Bit 13 - WAITEN"]
            #[inline(always)]
            pub fn waiten(&mut self) -> WAITEN_W {
                WAITEN_W { w: self }
            }
            #[doc = "Bit 12 - WREN"]
            #[inline(always)]
            pub fn wren(&mut self) -> WREN_W {
                WREN_W { w: self }
            }
            #[doc = "Bit 11 - WAITCFG"]
            #[inline(always)]
            pub fn waitcfg(&mut self) -> WAITCFG_W {
                WAITCFG_W { w: self }
            }
            #[doc = "Bit 10 - WRAPMOD"]
            #[inline(always)]
            pub fn wrapmod(&mut self) -> WRAPMOD_W {
                WRAPMOD_W { w: self }
            }
            #[doc = "Bit 9 - WAITPOL"]
            #[inline(always)]
            pub fn waitpol(&mut self) -> WAITPOL_W {
                WAITPOL_W { w: self }
            }
            #[doc = "Bit 8 - BURSTEN"]
            #[inline(always)]
            pub fn bursten(&mut self) -> BURSTEN_W {
                BURSTEN_W { w: self }
            }
            #[doc = "Bit 6 - FACCEN"]
            #[inline(always)]
            pub fn faccen(&mut self) -> FACCEN_W {
                FACCEN_W { w: self }
            }
            #[doc = "Bits 4:5 - MWID"]
            #[inline(always)]
            pub fn mwid(&mut self) -> MWID_W {
                MWID_W { w: self }
            }
            #[doc = "Bits 2:3 - MTYP"]
            #[inline(always)]
            pub fn mtyp(&mut self) -> MTYP_W {
                MTYP_W { w: self }
            }
            #[doc = "Bit 1 - MUXEN"]
            #[inline(always)]
            pub fn muxen(&mut self) -> MUXEN_W {
                MUXEN_W { w: self }
            }
            #[doc = "Bit 0 - MBKEN"]
            #[inline(always)]
            pub fn mbken(&mut self) -> MBKEN_W {
                MBKEN_W { w: self }
            }
            #[doc = "Bits 16:18 - CRAM page size"]
            #[inline(always)]
            pub fn cpsize(&mut self) -> CPSIZE_W {
                CPSIZE_W { w: self }
            }
        }
    }
    #[doc = "BTR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [btr](btr) module"]
    pub type BTR = crate::Reg<u32, _BTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BTR;
    #[doc = "`read()` method returns [btr::R](btr::R) reader structure"]
    impl crate::Readable for BTR {}
    #[doc = "`write(|w| ..)` method takes [btr::W](btr::W) writer structure"]
    impl crate::Writable for BTR {}
    #[doc = "BTR1"]
    pub mod btr {
        #[doc = "Reader of register BTR%s"]
        pub type R = crate::R<u32, super::BTR>;
        #[doc = "Writer for register BTR%s"]
        pub type W = crate::W<u32, super::BTR>;
        #[doc = "Register BTR%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::BTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "ACCMOD\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ACCMOD_A {
            #[doc = "0: Access mode A"]
            A = 0,
            #[doc = "1: Access mode B"]
            B = 1,
            #[doc = "2: Access mode C"]
            C = 2,
            #[doc = "3: Access mode D"]
            D = 3,
        }
        impl From<ACCMOD_A> for u8 {
            #[inline(always)]
            fn from(variant: ACCMOD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ACCMOD`"]
        pub type ACCMOD_R = crate::R<u8, ACCMOD_A>;
        impl ACCMOD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACCMOD_A {
                match self.bits {
                    0 => ACCMOD_A::A,
                    1 => ACCMOD_A::B,
                    2 => ACCMOD_A::C,
                    3 => ACCMOD_A::D,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `A`"]
            #[inline(always)]
            pub fn is_a(&self) -> bool {
                *self == ACCMOD_A::A
            }
            #[doc = "Checks if the value of the field is `B`"]
            #[inline(always)]
            pub fn is_b(&self) -> bool {
                *self == ACCMOD_A::B
            }
            #[doc = "Checks if the value of the field is `C`"]
            #[inline(always)]
            pub fn is_c(&self) -> bool {
                *self == ACCMOD_A::C
            }
            #[doc = "Checks if the value of the field is `D`"]
            #[inline(always)]
            pub fn is_d(&self) -> bool {
                *self == ACCMOD_A::D
            }
        }
        #[doc = "Write proxy for field `ACCMOD`"]
        pub struct ACCMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACCMOD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACCMOD_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Access mode A"]
            #[inline(always)]
            pub fn a(self) -> &'a mut W {
                self.variant(ACCMOD_A::A)
            }
            #[doc = "Access mode B"]
            #[inline(always)]
            pub fn b(self) -> &'a mut W {
                self.variant(ACCMOD_A::B)
            }
            #[doc = "Access mode C"]
            #[inline(always)]
            pub fn c(self) -> &'a mut W {
                self.variant(ACCMOD_A::C)
            }
            #[doc = "Access mode D"]
            #[inline(always)]
            pub fn d(self) -> &'a mut W {
                self.variant(ACCMOD_A::D)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `DATLAT`"]
        pub type DATLAT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATLAT`"]
        pub struct DATLAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATLAT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `CLKDIV`"]
        pub type CLKDIV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CLKDIV`"]
        pub struct CLKDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `BUSTURN`"]
        pub type BUSTURN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BUSTURN`"]
        pub struct BUSTURN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUSTURN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DATAST`"]
        pub type DATAST_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATAST`"]
        pub struct DATAST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATAST_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ADDHLD`"]
        pub type ADDHLD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADDHLD`"]
        pub struct ADDHLD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDHLD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `ADDSET`"]
        pub type ADDSET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADDSET`"]
        pub struct ADDSET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDSET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:29 - ACCMOD"]
            #[inline(always)]
            pub fn accmod(&self) -> ACCMOD_R {
                ACCMOD_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 24:27 - DATLAT"]
            #[inline(always)]
            pub fn datlat(&self) -> DATLAT_R {
                DATLAT_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - CLKDIV"]
            #[inline(always)]
            pub fn clkdiv(&self) -> CLKDIV_R {
                CLKDIV_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - BUSTURN"]
            #[inline(always)]
            pub fn busturn(&self) -> BUSTURN_R {
                BUSTURN_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - DATAST"]
            #[inline(always)]
            pub fn datast(&self) -> DATAST_R {
                DATAST_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 4:7 - ADDHLD"]
            #[inline(always)]
            pub fn addhld(&self) -> ADDHLD_R {
                ADDHLD_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - ADDSET"]
            #[inline(always)]
            pub fn addset(&self) -> ADDSET_R {
                ADDSET_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:29 - ACCMOD"]
            #[inline(always)]
            pub fn accmod(&mut self) -> ACCMOD_W {
                ACCMOD_W { w: self }
            }
            #[doc = "Bits 24:27 - DATLAT"]
            #[inline(always)]
            pub fn datlat(&mut self) -> DATLAT_W {
                DATLAT_W { w: self }
            }
            #[doc = "Bits 20:23 - CLKDIV"]
            #[inline(always)]
            pub fn clkdiv(&mut self) -> CLKDIV_W {
                CLKDIV_W { w: self }
            }
            #[doc = "Bits 16:19 - BUSTURN"]
            #[inline(always)]
            pub fn busturn(&mut self) -> BUSTURN_W {
                BUSTURN_W { w: self }
            }
            #[doc = "Bits 8:15 - DATAST"]
            #[inline(always)]
            pub fn datast(&mut self) -> DATAST_W {
                DATAST_W { w: self }
            }
            #[doc = "Bits 4:7 - ADDHLD"]
            #[inline(always)]
            pub fn addhld(&mut self) -> ADDHLD_W {
                ADDHLD_W { w: self }
            }
            #[doc = "Bits 0:3 - ADDSET"]
            #[inline(always)]
            pub fn addset(&mut self) -> ADDSET_W {
                ADDSET_W { w: self }
            }
        }
    }
    #[doc = "BCR2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bcr](bcr) module"]
    pub type BCR = crate::Reg<u32, _BCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BCR;
    #[doc = "`read()` method returns [bcr::R](bcr::R) reader structure"]
    impl crate::Readable for BCR {}
    #[doc = "`write(|w| ..)` method takes [bcr::W](bcr::W) writer structure"]
    impl crate::Writable for BCR {}
    #[doc = "BCR2"]
    pub mod bcr {
        #[doc = "Reader of register BCR%s"]
        pub type R = crate::R<u32, super::BCR>;
        #[doc = "Writer for register BCR%s"]
        pub type W = crate::W<u32, super::BCR>;
        #[doc = "Register BCR%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::BCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "CBURSTRW\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CBURSTRW_A {
            #[doc = "1: Write operations are performed in synchronous mode"]
            ENABLED = 1,
            #[doc = "0: Write operations are always performed in asynchronous mode"]
            DISABLED = 0,
        }
        impl From<CBURSTRW_A> for bool {
            #[inline(always)]
            fn from(variant: CBURSTRW_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CBURSTRW`"]
        pub type CBURSTRW_R = crate::R<bool, CBURSTRW_A>;
        impl CBURSTRW_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CBURSTRW_A {
                match self.bits {
                    true => CBURSTRW_A::ENABLED,
                    false => CBURSTRW_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CBURSTRW_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CBURSTRW_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `CBURSTRW`"]
        pub struct CBURSTRW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBURSTRW_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CBURSTRW_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Write operations are performed in synchronous mode"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CBURSTRW_A::ENABLED)
            }
            #[doc = "Write operations are always performed in asynchronous mode"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CBURSTRW_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "ASYNCWAIT\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ASYNCWAIT_A {
            #[doc = "0: Wait signal not used in asynchronous mode"]
            DISABLED = 0,
            #[doc = "1: Wait signal used even in asynchronous mode"]
            ENABLED = 1,
        }
        impl From<ASYNCWAIT_A> for bool {
            #[inline(always)]
            fn from(variant: ASYNCWAIT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ASYNCWAIT`"]
        pub type ASYNCWAIT_R = crate::R<bool, ASYNCWAIT_A>;
        impl ASYNCWAIT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ASYNCWAIT_A {
                match self.bits {
                    false => ASYNCWAIT_A::DISABLED,
                    true => ASYNCWAIT_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ASYNCWAIT_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ASYNCWAIT_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ASYNCWAIT`"]
        pub struct ASYNCWAIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ASYNCWAIT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ASYNCWAIT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Wait signal not used in asynchronous mode"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ASYNCWAIT_A::DISABLED)
            }
            #[doc = "Wait signal used even in asynchronous mode"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ASYNCWAIT_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "EXTMOD\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EXTMOD_A {
            #[doc = "0: Values inside the FMC_BWTR are not taken into account"]
            DISABLED = 0,
            #[doc = "1: Values inside the FMC_BWTR are taken into account"]
            ENABLED = 1,
        }
        impl From<EXTMOD_A> for bool {
            #[inline(always)]
            fn from(variant: EXTMOD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EXTMOD`"]
        pub type EXTMOD_R = crate::R<bool, EXTMOD_A>;
        impl EXTMOD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EXTMOD_A {
                match self.bits {
                    false => EXTMOD_A::DISABLED,
                    true => EXTMOD_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == EXTMOD_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == EXTMOD_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `EXTMOD`"]
        pub struct EXTMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTMOD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTMOD_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Values inside the FMC_BWTR are not taken into account"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(EXTMOD_A::DISABLED)
            }
            #[doc = "Values inside the FMC_BWTR are taken into account"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(EXTMOD_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "WAITEN\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WAITEN_A {
            #[doc = "0: Values inside the FMC_BWTR are taken into account"]
            DISABLED = 0,
            #[doc = "1: NWAIT signal enabled"]
            ENABLED = 1,
        }
        impl From<WAITEN_A> for bool {
            #[inline(always)]
            fn from(variant: WAITEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WAITEN`"]
        pub type WAITEN_R = crate::R<bool, WAITEN_A>;
        impl WAITEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WAITEN_A {
                match self.bits {
                    false => WAITEN_A::DISABLED,
                    true => WAITEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == WAITEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == WAITEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `WAITEN`"]
        pub struct WAITEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAITEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WAITEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Values inside the FMC_BWTR are taken into account"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(WAITEN_A::DISABLED)
            }
            #[doc = "NWAIT signal enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(WAITEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "WREN\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WREN_A {
            #[doc = "0: Write operations disabled for the bank by the FMC"]
            DISABLED = 0,
            #[doc = "1: Write operations enabled for the bank by the FMC"]
            ENABLED = 1,
        }
        impl From<WREN_A> for bool {
            #[inline(always)]
            fn from(variant: WREN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WREN`"]
        pub type WREN_R = crate::R<bool, WREN_A>;
        impl WREN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WREN_A {
                match self.bits {
                    false => WREN_A::DISABLED,
                    true => WREN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == WREN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == WREN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `WREN`"]
        pub struct WREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WREN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WREN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Write operations disabled for the bank by the FMC"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(WREN_A::DISABLED)
            }
            #[doc = "Write operations enabled for the bank by the FMC"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(WREN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "WAITCFG\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WAITCFG_A {
            #[doc = "0: NWAIT signal is active one data cycle before wait state"]
            BEFOREWAITSTATE = 0,
            #[doc = "1: NWAIT signal is active during wait state"]
            DURINGWAITSTATE = 1,
        }
        impl From<WAITCFG_A> for bool {
            #[inline(always)]
            fn from(variant: WAITCFG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WAITCFG`"]
        pub type WAITCFG_R = crate::R<bool, WAITCFG_A>;
        impl WAITCFG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WAITCFG_A {
                match self.bits {
                    false => WAITCFG_A::BEFOREWAITSTATE,
                    true => WAITCFG_A::DURINGWAITSTATE,
                }
            }
            #[doc = "Checks if the value of the field is `BEFOREWAITSTATE`"]
            #[inline(always)]
            pub fn is_before_wait_state(&self) -> bool {
                *self == WAITCFG_A::BEFOREWAITSTATE
            }
            #[doc = "Checks if the value of the field is `DURINGWAITSTATE`"]
            #[inline(always)]
            pub fn is_during_wait_state(&self) -> bool {
                *self == WAITCFG_A::DURINGWAITSTATE
            }
        }
        #[doc = "Write proxy for field `WAITCFG`"]
        pub struct WAITCFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAITCFG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WAITCFG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "NWAIT signal is active one data cycle before wait state"]
            #[inline(always)]
            pub fn before_wait_state(self) -> &'a mut W {
                self.variant(WAITCFG_A::BEFOREWAITSTATE)
            }
            #[doc = "NWAIT signal is active during wait state"]
            #[inline(always)]
            pub fn during_wait_state(self) -> &'a mut W {
                self.variant(WAITCFG_A::DURINGWAITSTATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `WRAPMOD`"]
        pub type WRAPMOD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WRAPMOD`"]
        pub struct WRAPMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRAPMOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "WAITPOL\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WAITPOL_A {
            #[doc = "0: NWAIT active low"]
            ACTIVELOW = 0,
            #[doc = "1: NWAIT active high"]
            ACTIVEHIGH = 1,
        }
        impl From<WAITPOL_A> for bool {
            #[inline(always)]
            fn from(variant: WAITPOL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WAITPOL`"]
        pub type WAITPOL_R = crate::R<bool, WAITPOL_A>;
        impl WAITPOL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WAITPOL_A {
                match self.bits {
                    false => WAITPOL_A::ACTIVELOW,
                    true => WAITPOL_A::ACTIVEHIGH,
                }
            }
            #[doc = "Checks if the value of the field is `ACTIVELOW`"]
            #[inline(always)]
            pub fn is_active_low(&self) -> bool {
                *self == WAITPOL_A::ACTIVELOW
            }
            #[doc = "Checks if the value of the field is `ACTIVEHIGH`"]
            #[inline(always)]
            pub fn is_active_high(&self) -> bool {
                *self == WAITPOL_A::ACTIVEHIGH
            }
        }
        #[doc = "Write proxy for field `WAITPOL`"]
        pub struct WAITPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAITPOL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WAITPOL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "NWAIT active low"]
            #[inline(always)]
            pub fn active_low(self) -> &'a mut W {
                self.variant(WAITPOL_A::ACTIVELOW)
            }
            #[doc = "NWAIT active high"]
            #[inline(always)]
            pub fn active_high(self) -> &'a mut W {
                self.variant(WAITPOL_A::ACTIVEHIGH)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "BURSTEN\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BURSTEN_A {
            #[doc = "0: Burst mode disabled"]
            DISABLED = 0,
            #[doc = "1: Burst mode enabled"]
            ENABLED = 1,
        }
        impl From<BURSTEN_A> for bool {
            #[inline(always)]
            fn from(variant: BURSTEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BURSTEN`"]
        pub type BURSTEN_R = crate::R<bool, BURSTEN_A>;
        impl BURSTEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BURSTEN_A {
                match self.bits {
                    false => BURSTEN_A::DISABLED,
                    true => BURSTEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == BURSTEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == BURSTEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `BURSTEN`"]
        pub struct BURSTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BURSTEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BURSTEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Burst mode disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(BURSTEN_A::DISABLED)
            }
            #[doc = "Burst mode enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(BURSTEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "FACCEN\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FACCEN_A {
            #[doc = "0: Corresponding NOR Flash memory access is disabled"]
            DISABLED = 0,
            #[doc = "1: Corresponding NOR Flash memory access is enabled"]
            ENABLED = 1,
        }
        impl From<FACCEN_A> for bool {
            #[inline(always)]
            fn from(variant: FACCEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FACCEN`"]
        pub type FACCEN_R = crate::R<bool, FACCEN_A>;
        impl FACCEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FACCEN_A {
                match self.bits {
                    false => FACCEN_A::DISABLED,
                    true => FACCEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == FACCEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == FACCEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `FACCEN`"]
        pub struct FACCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FACCEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FACCEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding NOR Flash memory access is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(FACCEN_A::DISABLED)
            }
            #[doc = "Corresponding NOR Flash memory access is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(FACCEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "MWID\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MWID_A {
            #[doc = "0: Memory data bus width 8 bits"]
            BITS8 = 0,
            #[doc = "1: Memory data bus width 16 bits"]
            BITS16 = 1,
            #[doc = "2: Memory data bus width 32 bits"]
            BITS32 = 2,
        }
        impl From<MWID_A> for u8 {
            #[inline(always)]
            fn from(variant: MWID_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MWID`"]
        pub type MWID_R = crate::R<u8, MWID_A>;
        impl MWID_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, MWID_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(MWID_A::BITS8),
                    1 => Val(MWID_A::BITS16),
                    2 => Val(MWID_A::BITS32),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `BITS8`"]
            #[inline(always)]
            pub fn is_bits8(&self) -> bool {
                *self == MWID_A::BITS8
            }
            #[doc = "Checks if the value of the field is `BITS16`"]
            #[inline(always)]
            pub fn is_bits16(&self) -> bool {
                *self == MWID_A::BITS16
            }
            #[doc = "Checks if the value of the field is `BITS32`"]
            #[inline(always)]
            pub fn is_bits32(&self) -> bool {
                *self == MWID_A::BITS32
            }
        }
        #[doc = "Write proxy for field `MWID`"]
        pub struct MWID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MWID_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MWID_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Memory data bus width 8 bits"]
            #[inline(always)]
            pub fn bits8(self) -> &'a mut W {
                self.variant(MWID_A::BITS8)
            }
            #[doc = "Memory data bus width 16 bits"]
            #[inline(always)]
            pub fn bits16(self) -> &'a mut W {
                self.variant(MWID_A::BITS16)
            }
            #[doc = "Memory data bus width 32 bits"]
            #[inline(always)]
            pub fn bits32(self) -> &'a mut W {
                self.variant(MWID_A::BITS32)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "MTYP\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MTYP_A {
            #[doc = "0: SRAM memory type"]
            SRAM = 0,
            #[doc = "1: PSRAM (CRAM) memory type"]
            PSRAM = 1,
            #[doc = "2: NOR Flash/OneNAND Flash"]
            FLASH = 2,
        }
        impl From<MTYP_A> for u8 {
            #[inline(always)]
            fn from(variant: MTYP_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MTYP`"]
        pub type MTYP_R = crate::R<u8, MTYP_A>;
        impl MTYP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, MTYP_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(MTYP_A::SRAM),
                    1 => Val(MTYP_A::PSRAM),
                    2 => Val(MTYP_A::FLASH),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `SRAM`"]
            #[inline(always)]
            pub fn is_sram(&self) -> bool {
                *self == MTYP_A::SRAM
            }
            #[doc = "Checks if the value of the field is `PSRAM`"]
            #[inline(always)]
            pub fn is_psram(&self) -> bool {
                *self == MTYP_A::PSRAM
            }
            #[doc = "Checks if the value of the field is `FLASH`"]
            #[inline(always)]
            pub fn is_flash(&self) -> bool {
                *self == MTYP_A::FLASH
            }
        }
        #[doc = "Write proxy for field `MTYP`"]
        pub struct MTYP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MTYP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MTYP_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "SRAM memory type"]
            #[inline(always)]
            pub fn sram(self) -> &'a mut W {
                self.variant(MTYP_A::SRAM)
            }
            #[doc = "PSRAM (CRAM) memory type"]
            #[inline(always)]
            pub fn psram(self) -> &'a mut W {
                self.variant(MTYP_A::PSRAM)
            }
            #[doc = "NOR Flash/OneNAND Flash"]
            #[inline(always)]
            pub fn flash(self) -> &'a mut W {
                self.variant(MTYP_A::FLASH)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "MUXEN\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MUXEN_A {
            #[doc = "0: Address/Data non-multiplexed"]
            DISABLED = 0,
            #[doc = "1: Address/Data multiplexed on databus"]
            ENABLED = 1,
        }
        impl From<MUXEN_A> for bool {
            #[inline(always)]
            fn from(variant: MUXEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MUXEN`"]
        pub type MUXEN_R = crate::R<bool, MUXEN_A>;
        impl MUXEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MUXEN_A {
                match self.bits {
                    false => MUXEN_A::DISABLED,
                    true => MUXEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == MUXEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == MUXEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `MUXEN`"]
        pub struct MUXEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MUXEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MUXEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Address/Data non-multiplexed"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(MUXEN_A::DISABLED)
            }
            #[doc = "Address/Data multiplexed on databus"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(MUXEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "MBKEN\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MBKEN_A {
            #[doc = "0: Corresponding memory bank is disabled"]
            DISABLED = 0,
            #[doc = "1: Corresponding memory bank is enabled"]
            ENABLED = 1,
        }
        impl From<MBKEN_A> for bool {
            #[inline(always)]
            fn from(variant: MBKEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MBKEN`"]
        pub type MBKEN_R = crate::R<bool, MBKEN_A>;
        impl MBKEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MBKEN_A {
                match self.bits {
                    false => MBKEN_A::DISABLED,
                    true => MBKEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == MBKEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == MBKEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `MBKEN`"]
        pub struct MBKEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MBKEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MBKEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding memory bank is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(MBKEN_A::DISABLED)
            }
            #[doc = "Corresponding memory bank is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(MBKEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "CRAM page size\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CPSIZE_A {
            #[doc = "0: No burst split when crossing page boundary"]
            NOBURSTSPLIT = 0,
            #[doc = "1: 128 bytes CRAM page size"]
            BYTES128 = 1,
            #[doc = "2: 256 bytes CRAM page size"]
            BYTES256 = 2,
            #[doc = "3: 512 bytes CRAM page size"]
            BYTES512 = 3,
            #[doc = "4: 1024 bytes CRAM page size"]
            BYTES1024 = 4,
        }
        impl From<CPSIZE_A> for u8 {
            #[inline(always)]
            fn from(variant: CPSIZE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CPSIZE`"]
        pub type CPSIZE_R = crate::R<u8, CPSIZE_A>;
        impl CPSIZE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CPSIZE_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CPSIZE_A::NOBURSTSPLIT),
                    1 => Val(CPSIZE_A::BYTES128),
                    2 => Val(CPSIZE_A::BYTES256),
                    3 => Val(CPSIZE_A::BYTES512),
                    4 => Val(CPSIZE_A::BYTES1024),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `NOBURSTSPLIT`"]
            #[inline(always)]
            pub fn is_no_burst_split(&self) -> bool {
                *self == CPSIZE_A::NOBURSTSPLIT
            }
            #[doc = "Checks if the value of the field is `BYTES128`"]
            #[inline(always)]
            pub fn is_bytes128(&self) -> bool {
                *self == CPSIZE_A::BYTES128
            }
            #[doc = "Checks if the value of the field is `BYTES256`"]
            #[inline(always)]
            pub fn is_bytes256(&self) -> bool {
                *self == CPSIZE_A::BYTES256
            }
            #[doc = "Checks if the value of the field is `BYTES512`"]
            #[inline(always)]
            pub fn is_bytes512(&self) -> bool {
                *self == CPSIZE_A::BYTES512
            }
            #[doc = "Checks if the value of the field is `BYTES1024`"]
            #[inline(always)]
            pub fn is_bytes1024(&self) -> bool {
                *self == CPSIZE_A::BYTES1024
            }
        }
        #[doc = "Write proxy for field `CPSIZE`"]
        pub struct CPSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPSIZE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CPSIZE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No burst split when crossing page boundary"]
            #[inline(always)]
            pub fn no_burst_split(self) -> &'a mut W {
                self.variant(CPSIZE_A::NOBURSTSPLIT)
            }
            #[doc = "128 bytes CRAM page size"]
            #[inline(always)]
            pub fn bytes128(self) -> &'a mut W {
                self.variant(CPSIZE_A::BYTES128)
            }
            #[doc = "256 bytes CRAM page size"]
            #[inline(always)]
            pub fn bytes256(self) -> &'a mut W {
                self.variant(CPSIZE_A::BYTES256)
            }
            #[doc = "512 bytes CRAM page size"]
            #[inline(always)]
            pub fn bytes512(self) -> &'a mut W {
                self.variant(CPSIZE_A::BYTES512)
            }
            #[doc = "1024 bytes CRAM page size"]
            #[inline(always)]
            pub fn bytes1024(self) -> &'a mut W {
                self.variant(CPSIZE_A::BYTES1024)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 16)) | (((value as u32) & 0x07) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 19 - CBURSTRW"]
            #[inline(always)]
            pub fn cburstrw(&self) -> CBURSTRW_R {
                CBURSTRW_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 15 - ASYNCWAIT"]
            #[inline(always)]
            pub fn asyncwait(&self) -> ASYNCWAIT_R {
                ASYNCWAIT_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - EXTMOD"]
            #[inline(always)]
            pub fn extmod(&self) -> EXTMOD_R {
                EXTMOD_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - WAITEN"]
            #[inline(always)]
            pub fn waiten(&self) -> WAITEN_R {
                WAITEN_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - WREN"]
            #[inline(always)]
            pub fn wren(&self) -> WREN_R {
                WREN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - WAITCFG"]
            #[inline(always)]
            pub fn waitcfg(&self) -> WAITCFG_R {
                WAITCFG_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - WRAPMOD"]
            #[inline(always)]
            pub fn wrapmod(&self) -> WRAPMOD_R {
                WRAPMOD_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - WAITPOL"]
            #[inline(always)]
            pub fn waitpol(&self) -> WAITPOL_R {
                WAITPOL_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - BURSTEN"]
            #[inline(always)]
            pub fn bursten(&self) -> BURSTEN_R {
                BURSTEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - FACCEN"]
            #[inline(always)]
            pub fn faccen(&self) -> FACCEN_R {
                FACCEN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 4:5 - MWID"]
            #[inline(always)]
            pub fn mwid(&self) -> MWID_R {
                MWID_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - MTYP"]
            #[inline(always)]
            pub fn mtyp(&self) -> MTYP_R {
                MTYP_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bit 1 - MUXEN"]
            #[inline(always)]
            pub fn muxen(&self) -> MUXEN_R {
                MUXEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - MBKEN"]
            #[inline(always)]
            pub fn mbken(&self) -> MBKEN_R {
                MBKEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bits 16:18 - CRAM page size"]
            #[inline(always)]
            pub fn cpsize(&self) -> CPSIZE_R {
                CPSIZE_R::new(((self.bits >> 16) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 19 - CBURSTRW"]
            #[inline(always)]
            pub fn cburstrw(&mut self) -> CBURSTRW_W {
                CBURSTRW_W { w: self }
            }
            #[doc = "Bit 15 - ASYNCWAIT"]
            #[inline(always)]
            pub fn asyncwait(&mut self) -> ASYNCWAIT_W {
                ASYNCWAIT_W { w: self }
            }
            #[doc = "Bit 14 - EXTMOD"]
            #[inline(always)]
            pub fn extmod(&mut self) -> EXTMOD_W {
                EXTMOD_W { w: self }
            }
            #[doc = "Bit 13 - WAITEN"]
            #[inline(always)]
            pub fn waiten(&mut self) -> WAITEN_W {
                WAITEN_W { w: self }
            }
            #[doc = "Bit 12 - WREN"]
            #[inline(always)]
            pub fn wren(&mut self) -> WREN_W {
                WREN_W { w: self }
            }
            #[doc = "Bit 11 - WAITCFG"]
            #[inline(always)]
            pub fn waitcfg(&mut self) -> WAITCFG_W {
                WAITCFG_W { w: self }
            }
            #[doc = "Bit 10 - WRAPMOD"]
            #[inline(always)]
            pub fn wrapmod(&mut self) -> WRAPMOD_W {
                WRAPMOD_W { w: self }
            }
            #[doc = "Bit 9 - WAITPOL"]
            #[inline(always)]
            pub fn waitpol(&mut self) -> WAITPOL_W {
                WAITPOL_W { w: self }
            }
            #[doc = "Bit 8 - BURSTEN"]
            #[inline(always)]
            pub fn bursten(&mut self) -> BURSTEN_W {
                BURSTEN_W { w: self }
            }
            #[doc = "Bit 6 - FACCEN"]
            #[inline(always)]
            pub fn faccen(&mut self) -> FACCEN_W {
                FACCEN_W { w: self }
            }
            #[doc = "Bits 4:5 - MWID"]
            #[inline(always)]
            pub fn mwid(&mut self) -> MWID_W {
                MWID_W { w: self }
            }
            #[doc = "Bits 2:3 - MTYP"]
            #[inline(always)]
            pub fn mtyp(&mut self) -> MTYP_W {
                MTYP_W { w: self }
            }
            #[doc = "Bit 1 - MUXEN"]
            #[inline(always)]
            pub fn muxen(&mut self) -> MUXEN_W {
                MUXEN_W { w: self }
            }
            #[doc = "Bit 0 - MBKEN"]
            #[inline(always)]
            pub fn mbken(&mut self) -> MBKEN_W {
                MBKEN_W { w: self }
            }
            #[doc = "Bits 16:18 - CRAM page size"]
            #[inline(always)]
            pub fn cpsize(&mut self) -> CPSIZE_W {
                CPSIZE_W { w: self }
            }
        }
    }
    #[doc = "BWTR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bwtr](bwtr) module"]
    pub type BWTR = crate::Reg<u32, _BWTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BWTR;
    #[doc = "`read()` method returns [bwtr::R](bwtr::R) reader structure"]
    impl crate::Readable for BWTR {}
    #[doc = "`write(|w| ..)` method takes [bwtr::W](bwtr::W) writer structure"]
    impl crate::Writable for BWTR {}
    #[doc = "BWTR1"]
    pub mod bwtr {
        #[doc = "Reader of register BWTR%s"]
        pub type R = crate::R<u32, super::BWTR>;
        #[doc = "Writer for register BWTR%s"]
        pub type W = crate::W<u32, super::BWTR>;
        #[doc = "Register BWTR%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::BWTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "ACCMOD\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ACCMOD_A {
            #[doc = "0: Access mode A"]
            A = 0,
            #[doc = "1: Access mode B"]
            B = 1,
            #[doc = "2: Access mode C"]
            C = 2,
            #[doc = "3: Access mode D"]
            D = 3,
        }
        impl From<ACCMOD_A> for u8 {
            #[inline(always)]
            fn from(variant: ACCMOD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ACCMOD`"]
        pub type ACCMOD_R = crate::R<u8, ACCMOD_A>;
        impl ACCMOD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACCMOD_A {
                match self.bits {
                    0 => ACCMOD_A::A,
                    1 => ACCMOD_A::B,
                    2 => ACCMOD_A::C,
                    3 => ACCMOD_A::D,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `A`"]
            #[inline(always)]
            pub fn is_a(&self) -> bool {
                *self == ACCMOD_A::A
            }
            #[doc = "Checks if the value of the field is `B`"]
            #[inline(always)]
            pub fn is_b(&self) -> bool {
                *self == ACCMOD_A::B
            }
            #[doc = "Checks if the value of the field is `C`"]
            #[inline(always)]
            pub fn is_c(&self) -> bool {
                *self == ACCMOD_A::C
            }
            #[doc = "Checks if the value of the field is `D`"]
            #[inline(always)]
            pub fn is_d(&self) -> bool {
                *self == ACCMOD_A::D
            }
        }
        #[doc = "Write proxy for field `ACCMOD`"]
        pub struct ACCMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACCMOD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACCMOD_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Access mode A"]
            #[inline(always)]
            pub fn a(self) -> &'a mut W {
                self.variant(ACCMOD_A::A)
            }
            #[doc = "Access mode B"]
            #[inline(always)]
            pub fn b(self) -> &'a mut W {
                self.variant(ACCMOD_A::B)
            }
            #[doc = "Access mode C"]
            #[inline(always)]
            pub fn c(self) -> &'a mut W {
                self.variant(ACCMOD_A::C)
            }
            #[doc = "Access mode D"]
            #[inline(always)]
            pub fn d(self) -> &'a mut W {
                self.variant(ACCMOD_A::D)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `DATLAT`"]
        pub type DATLAT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATLAT`"]
        pub struct DATLAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATLAT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `CLKDIV`"]
        pub type CLKDIV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CLKDIV`"]
        pub struct CLKDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `DATAST`"]
        pub type DATAST_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATAST`"]
        pub struct DATAST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATAST_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ADDHLD`"]
        pub type ADDHLD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADDHLD`"]
        pub struct ADDHLD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDHLD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `ADDSET`"]
        pub type ADDSET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADDSET`"]
        pub struct ADDSET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDSET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Reader of field `BUSTURN`"]
        pub type BUSTURN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BUSTURN`"]
        pub struct BUSTURN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUSTURN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:29 - ACCMOD"]
            #[inline(always)]
            pub fn accmod(&self) -> ACCMOD_R {
                ACCMOD_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 24:27 - DATLAT"]
            #[inline(always)]
            pub fn datlat(&self) -> DATLAT_R {
                DATLAT_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - CLKDIV"]
            #[inline(always)]
            pub fn clkdiv(&self) -> CLKDIV_R {
                CLKDIV_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - DATAST"]
            #[inline(always)]
            pub fn datast(&self) -> DATAST_R {
                DATAST_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 4:7 - ADDHLD"]
            #[inline(always)]
            pub fn addhld(&self) -> ADDHLD_R {
                ADDHLD_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - ADDSET"]
            #[inline(always)]
            pub fn addset(&self) -> ADDSET_R {
                ADDSET_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Bus turnaround phase duration"]
            #[inline(always)]
            pub fn busturn(&self) -> BUSTURN_R {
                BUSTURN_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:29 - ACCMOD"]
            #[inline(always)]
            pub fn accmod(&mut self) -> ACCMOD_W {
                ACCMOD_W { w: self }
            }
            #[doc = "Bits 24:27 - DATLAT"]
            #[inline(always)]
            pub fn datlat(&mut self) -> DATLAT_W {
                DATLAT_W { w: self }
            }
            #[doc = "Bits 20:23 - CLKDIV"]
            #[inline(always)]
            pub fn clkdiv(&mut self) -> CLKDIV_W {
                CLKDIV_W { w: self }
            }
            #[doc = "Bits 8:15 - DATAST"]
            #[inline(always)]
            pub fn datast(&mut self) -> DATAST_W {
                DATAST_W { w: self }
            }
            #[doc = "Bits 4:7 - ADDHLD"]
            #[inline(always)]
            pub fn addhld(&mut self) -> ADDHLD_W {
                ADDHLD_W { w: self }
            }
            #[doc = "Bits 0:3 - ADDSET"]
            #[inline(always)]
            pub fn addset(&mut self) -> ADDSET_W {
                ADDSET_W { w: self }
            }
            #[doc = "Bits 16:19 - Bus turnaround phase duration"]
            #[inline(always)]
            pub fn busturn(&mut self) -> BUSTURN_W {
                BUSTURN_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOA {}
impl GPIOA {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        0x4002_0000 as *const _
    }
}
impl Deref for GPIOA {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOA::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpioa {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - GPIO port mode register"]
        pub moder: MODER,
        #[doc = "0x04 - GPIO port output type register"]
        pub otyper: OTYPER,
        #[doc = "0x08 - GPIO port output speed register"]
        pub ospeedr: OSPEEDR,
        #[doc = "0x0c - GPIO port pull-up/pull-down register"]
        pub pupdr: PUPDR,
        #[doc = "0x10 - GPIO port input data register"]
        pub idr: IDR,
        #[doc = "0x14 - GPIO port output data register"]
        pub odr: ODR,
        #[doc = "0x18 - GPIO port bit set/reset register"]
        pub bsrr: BSRR,
        #[doc = "0x1c - GPIO port configuration lock register"]
        pub lckr: LCKR,
        #[doc = "0x20 - AFRL"]
        pub afrl: AFRL,
        #[doc = "0x24 - GPIO alternate function high register"]
        pub afrh: AFRH,
    }
    #[doc = "GPIO port mode register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [moder](moder) module"]
    pub type MODER = crate::Reg<u32, _MODER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MODER;
    #[doc = "`read()` method returns [moder::R](moder::R) reader structure"]
    impl crate::Readable for MODER {}
    #[doc = "`write(|w| ..)` method takes [moder::W](moder::W) writer structure"]
    impl crate::Writable for MODER {}
    #[doc = "GPIO port mode register"]
    pub mod moder {
        #[doc = "Reader of register MODER"]
        pub type R = crate::R<u32, super::MODER>;
        #[doc = "Writer for register MODER"]
        pub type W = crate::W<u32, super::MODER>;
        #[doc = "Register MODER `reset()`'s with value 0xa800_0000"]
        impl crate::ResetValue for super::MODER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xa800_0000
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 2"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MODER15_A {
            #[doc = "0: Input mode (reset state)"]
            INPUT = 0,
            #[doc = "1: General purpose output mode"]
            OUTPUT = 1,
            #[doc = "2: Alternate function mode"]
            ALTERNATE = 2,
            #[doc = "3: Analog mode"]
            ANALOG = 3,
        }
        impl From<MODER15_A> for u8 {
            #[inline(always)]
            fn from(variant: MODER15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MODER15`"]
        pub type MODER15_R = crate::R<u8, MODER15_A>;
        impl MODER15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MODER15_A {
                match self.bits {
                    0 => MODER15_A::INPUT,
                    1 => MODER15_A::OUTPUT,
                    2 => MODER15_A::ALTERNATE,
                    3 => MODER15_A::ANALOG,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                *self == MODER15_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == MODER15_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `ALTERNATE`"]
            #[inline(always)]
            pub fn is_alternate(&self) -> bool {
                *self == MODER15_A::ALTERNATE
            }
            #[doc = "Checks if the value of the field is `ANALOG`"]
            #[inline(always)]
            pub fn is_analog(&self) -> bool {
                *self == MODER15_A::ANALOG
            }
        }
        #[doc = "Write proxy for field `MODER15`"]
        pub struct MODER15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER14_A = MODER15_A;
        #[doc = "Reader of field `MODER14`"]
        pub type MODER14_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER14`"]
        pub struct MODER14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER13_A = MODER15_A;
        #[doc = "Reader of field `MODER13`"]
        pub type MODER13_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER13`"]
        pub struct MODER13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER12_A = MODER15_A;
        #[doc = "Reader of field `MODER12`"]
        pub type MODER12_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER12`"]
        pub struct MODER12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER11_A = MODER15_A;
        #[doc = "Reader of field `MODER11`"]
        pub type MODER11_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER11`"]
        pub struct MODER11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER10_A = MODER15_A;
        #[doc = "Reader of field `MODER10`"]
        pub type MODER10_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER10`"]
        pub struct MODER10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER9_A = MODER15_A;
        #[doc = "Reader of field `MODER9`"]
        pub type MODER9_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER9`"]
        pub struct MODER9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER8_A = MODER15_A;
        #[doc = "Reader of field `MODER8`"]
        pub type MODER8_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER8`"]
        pub struct MODER8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER7_A = MODER15_A;
        #[doc = "Reader of field `MODER7`"]
        pub type MODER7_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER7`"]
        pub struct MODER7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER6_A = MODER15_A;
        #[doc = "Reader of field `MODER6`"]
        pub type MODER6_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER6`"]
        pub struct MODER6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER5_A = MODER15_A;
        #[doc = "Reader of field `MODER5`"]
        pub type MODER5_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER5`"]
        pub struct MODER5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER4_A = MODER15_A;
        #[doc = "Reader of field `MODER4`"]
        pub type MODER4_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER4`"]
        pub struct MODER4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER3_A = MODER15_A;
        #[doc = "Reader of field `MODER3`"]
        pub type MODER3_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER3`"]
        pub struct MODER3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER2_A = MODER15_A;
        #[doc = "Reader of field `MODER2`"]
        pub type MODER2_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER2`"]
        pub struct MODER2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER1_A = MODER15_A;
        #[doc = "Reader of field `MODER1`"]
        pub type MODER1_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER1`"]
        pub struct MODER1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER0_A = MODER15_A;
        #[doc = "Reader of field `MODER0`"]
        pub type MODER0_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER0`"]
        pub struct MODER0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder15(&self) -> MODER15_R {
                MODER15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder14(&self) -> MODER14_R {
                MODER14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder13(&self) -> MODER13_R {
                MODER13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder12(&self) -> MODER12_R {
                MODER12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder11(&self) -> MODER11_R {
                MODER11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder10(&self) -> MODER10_R {
                MODER10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder9(&self) -> MODER9_R {
                MODER9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder8(&self) -> MODER8_R {
                MODER8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder7(&self) -> MODER7_R {
                MODER7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder6(&self) -> MODER6_R {
                MODER6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder5(&self) -> MODER5_R {
                MODER5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder4(&self) -> MODER4_R {
                MODER4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder3(&self) -> MODER3_R {
                MODER3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder2(&self) -> MODER2_R {
                MODER2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder1(&self) -> MODER1_R {
                MODER1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder0(&self) -> MODER0_R {
                MODER0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder15(&mut self) -> MODER15_W {
                MODER15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder14(&mut self) -> MODER14_W {
                MODER14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder13(&mut self) -> MODER13_W {
                MODER13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder12(&mut self) -> MODER12_W {
                MODER12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder11(&mut self) -> MODER11_W {
                MODER11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder10(&mut self) -> MODER10_W {
                MODER10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder9(&mut self) -> MODER9_W {
                MODER9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder8(&mut self) -> MODER8_W {
                MODER8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder7(&mut self) -> MODER7_W {
                MODER7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder6(&mut self) -> MODER6_W {
                MODER6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder5(&mut self) -> MODER5_W {
                MODER5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder4(&mut self) -> MODER4_W {
                MODER4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder3(&mut self) -> MODER3_W {
                MODER3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder2(&mut self) -> MODER2_W {
                MODER2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder1(&mut self) -> MODER1_W {
                MODER1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder0(&mut self) -> MODER0_W {
                MODER0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port output type register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [otyper](otyper) module"]
    pub type OTYPER = crate::Reg<u32, _OTYPER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OTYPER;
    #[doc = "`read()` method returns [otyper::R](otyper::R) reader structure"]
    impl crate::Readable for OTYPER {}
    #[doc = "`write(|w| ..)` method takes [otyper::W](otyper::W) writer structure"]
    impl crate::Writable for OTYPER {}
    #[doc = "GPIO port output type register"]
    pub mod otyper {
        #[doc = "Reader of register OTYPER"]
        pub type R = crate::R<u32, super::OTYPER>;
        #[doc = "Writer for register OTYPER"]
        pub type W = crate::W<u32, super::OTYPER>;
        #[doc = "Register OTYPER `reset()`'s with value 0"]
        impl crate::ResetValue for super::OTYPER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OT15_A {
            #[doc = "0: Output push-pull (reset state)"]
            PUSHPULL = 0,
            #[doc = "1: Output open-drain"]
            OPENDRAIN = 1,
        }
        impl From<OT15_A> for bool {
            #[inline(always)]
            fn from(variant: OT15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OT15`"]
        pub type OT15_R = crate::R<bool, OT15_A>;
        impl OT15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OT15_A {
                match self.bits {
                    false => OT15_A::PUSHPULL,
                    true => OT15_A::OPENDRAIN,
                }
            }
            #[doc = "Checks if the value of the field is `PUSHPULL`"]
            #[inline(always)]
            pub fn is_push_pull(&self) -> bool {
                *self == OT15_A::PUSHPULL
            }
            #[doc = "Checks if the value of the field is `OPENDRAIN`"]
            #[inline(always)]
            pub fn is_open_drain(&self) -> bool {
                *self == OT15_A::OPENDRAIN
            }
        }
        #[doc = "Write proxy for field `OT15`"]
        pub struct OT15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT14_A = OT15_A;
        #[doc = "Reader of field `OT14`"]
        pub type OT14_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT14`"]
        pub struct OT14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT13_A = OT15_A;
        #[doc = "Reader of field `OT13`"]
        pub type OT13_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT13`"]
        pub struct OT13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT12_A = OT15_A;
        #[doc = "Reader of field `OT12`"]
        pub type OT12_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT12`"]
        pub struct OT12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT11_A = OT15_A;
        #[doc = "Reader of field `OT11`"]
        pub type OT11_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT11`"]
        pub struct OT11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT10_A = OT15_A;
        #[doc = "Reader of field `OT10`"]
        pub type OT10_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT10`"]
        pub struct OT10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT9_A = OT15_A;
        #[doc = "Reader of field `OT9`"]
        pub type OT9_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT9`"]
        pub struct OT9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT8_A = OT15_A;
        #[doc = "Reader of field `OT8`"]
        pub type OT8_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT8`"]
        pub struct OT8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT7_A = OT15_A;
        #[doc = "Reader of field `OT7`"]
        pub type OT7_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT7`"]
        pub struct OT7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT6_A = OT15_A;
        #[doc = "Reader of field `OT6`"]
        pub type OT6_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT6`"]
        pub struct OT6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT5_A = OT15_A;
        #[doc = "Reader of field `OT5`"]
        pub type OT5_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT5`"]
        pub struct OT5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT4_A = OT15_A;
        #[doc = "Reader of field `OT4`"]
        pub type OT4_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT4`"]
        pub struct OT4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT3_A = OT15_A;
        #[doc = "Reader of field `OT3`"]
        pub type OT3_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT3`"]
        pub struct OT3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT2_A = OT15_A;
        #[doc = "Reader of field `OT2`"]
        pub type OT2_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT2`"]
        pub struct OT2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT1_A = OT15_A;
        #[doc = "Reader of field `OT1`"]
        pub type OT1_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT1`"]
        pub struct OT1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT0_A = OT15_A;
        #[doc = "Reader of field `OT0`"]
        pub type OT0_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT0`"]
        pub struct OT0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot15(&self) -> OT15_R {
                OT15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot14(&self) -> OT14_R {
                OT14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot13(&self) -> OT13_R {
                OT13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot12(&self) -> OT12_R {
                OT12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot11(&self) -> OT11_R {
                OT11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot10(&self) -> OT10_R {
                OT10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot9(&self) -> OT9_R {
                OT9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot8(&self) -> OT8_R {
                OT8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot7(&self) -> OT7_R {
                OT7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot6(&self) -> OT6_R {
                OT6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot5(&self) -> OT5_R {
                OT5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot4(&self) -> OT4_R {
                OT4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot3(&self) -> OT3_R {
                OT3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot2(&self) -> OT2_R {
                OT2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot1(&self) -> OT1_R {
                OT1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot0(&self) -> OT0_R {
                OT0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot15(&mut self) -> OT15_W {
                OT15_W { w: self }
            }
            #[doc = "Bit 14 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot14(&mut self) -> OT14_W {
                OT14_W { w: self }
            }
            #[doc = "Bit 13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot13(&mut self) -> OT13_W {
                OT13_W { w: self }
            }
            #[doc = "Bit 12 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot12(&mut self) -> OT12_W {
                OT12_W { w: self }
            }
            #[doc = "Bit 11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot11(&mut self) -> OT11_W {
                OT11_W { w: self }
            }
            #[doc = "Bit 10 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot10(&mut self) -> OT10_W {
                OT10_W { w: self }
            }
            #[doc = "Bit 9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot9(&mut self) -> OT9_W {
                OT9_W { w: self }
            }
            #[doc = "Bit 8 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot8(&mut self) -> OT8_W {
                OT8_W { w: self }
            }
            #[doc = "Bit 7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot7(&mut self) -> OT7_W {
                OT7_W { w: self }
            }
            #[doc = "Bit 6 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot6(&mut self) -> OT6_W {
                OT6_W { w: self }
            }
            #[doc = "Bit 5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot5(&mut self) -> OT5_W {
                OT5_W { w: self }
            }
            #[doc = "Bit 4 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot4(&mut self) -> OT4_W {
                OT4_W { w: self }
            }
            #[doc = "Bit 3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot3(&mut self) -> OT3_W {
                OT3_W { w: self }
            }
            #[doc = "Bit 2 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot2(&mut self) -> OT2_W {
                OT2_W { w: self }
            }
            #[doc = "Bit 1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot1(&mut self) -> OT1_W {
                OT1_W { w: self }
            }
            #[doc = "Bit 0 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot0(&mut self) -> OT0_W {
                OT0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port output speed register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ospeedr](ospeedr) module"]
    pub type OSPEEDR = crate::Reg<u32, _OSPEEDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OSPEEDR;
    #[doc = "`read()` method returns [ospeedr::R](ospeedr::R) reader structure"]
    impl crate::Readable for OSPEEDR {}
    #[doc = "`write(|w| ..)` method takes [ospeedr::W](ospeedr::W) writer structure"]
    impl crate::Writable for OSPEEDR {}
    #[doc = "GPIO port output speed register"]
    pub mod ospeedr {
        #[doc = "Reader of register OSPEEDR"]
        pub type R = crate::R<u32, super::OSPEEDR>;
        #[doc = "Writer for register OSPEEDR"]
        pub type W = crate::W<u32, super::OSPEEDR>;
        #[doc = "Register OSPEEDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::OSPEEDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "OSPEEDR15\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OSPEEDR15_A {
            #[doc = "0: Low speed"]
            LOWSPEED = 0,
            #[doc = "1: Medium speed"]
            MEDIUMSPEED = 1,
            #[doc = "2: High speed"]
            HIGHSPEED = 2,
            #[doc = "3: Very high speed"]
            VERYHIGHSPEED = 3,
        }
        impl From<OSPEEDR15_A> for u8 {
            #[inline(always)]
            fn from(variant: OSPEEDR15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `OSPEEDR15`"]
        pub type OSPEEDR15_R = crate::R<u8, OSPEEDR15_A>;
        impl OSPEEDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OSPEEDR15_A {
                match self.bits {
                    0 => OSPEEDR15_A::LOWSPEED,
                    1 => OSPEEDR15_A::MEDIUMSPEED,
                    2 => OSPEEDR15_A::HIGHSPEED,
                    3 => OSPEEDR15_A::VERYHIGHSPEED,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `LOWSPEED`"]
            #[inline(always)]
            pub fn is_low_speed(&self) -> bool {
                *self == OSPEEDR15_A::LOWSPEED
            }
            #[doc = "Checks if the value of the field is `MEDIUMSPEED`"]
            #[inline(always)]
            pub fn is_medium_speed(&self) -> bool {
                *self == OSPEEDR15_A::MEDIUMSPEED
            }
            #[doc = "Checks if the value of the field is `HIGHSPEED`"]
            #[inline(always)]
            pub fn is_high_speed(&self) -> bool {
                *self == OSPEEDR15_A::HIGHSPEED
            }
            #[doc = "Checks if the value of the field is `VERYHIGHSPEED`"]
            #[inline(always)]
            pub fn is_very_high_speed(&self) -> bool {
                *self == OSPEEDR15_A::VERYHIGHSPEED
            }
        }
        #[doc = "Write proxy for field `OSPEEDR15`"]
        pub struct OSPEEDR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "OSPEEDR14"]
        pub type OSPEEDR14_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR14`"]
        pub type OSPEEDR14_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR14`"]
        pub struct OSPEEDR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "OSPEEDR13"]
        pub type OSPEEDR13_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR13`"]
        pub type OSPEEDR13_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR13`"]
        pub struct OSPEEDR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "OSPEEDR12"]
        pub type OSPEEDR12_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR12`"]
        pub type OSPEEDR12_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR12`"]
        pub struct OSPEEDR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "OSPEEDR11"]
        pub type OSPEEDR11_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR11`"]
        pub type OSPEEDR11_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR11`"]
        pub struct OSPEEDR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "OSPEEDR10"]
        pub type OSPEEDR10_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR10`"]
        pub type OSPEEDR10_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR10`"]
        pub struct OSPEEDR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "OSPEEDR9"]
        pub type OSPEEDR9_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR9`"]
        pub type OSPEEDR9_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR9`"]
        pub struct OSPEEDR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "OSPEEDR8"]
        pub type OSPEEDR8_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR8`"]
        pub type OSPEEDR8_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR8`"]
        pub struct OSPEEDR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "OSPEEDR7"]
        pub type OSPEEDR7_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR7`"]
        pub type OSPEEDR7_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR7`"]
        pub struct OSPEEDR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "OSPEEDR6"]
        pub type OSPEEDR6_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR6`"]
        pub type OSPEEDR6_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR6`"]
        pub struct OSPEEDR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "OSPEEDR5"]
        pub type OSPEEDR5_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR5`"]
        pub type OSPEEDR5_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR5`"]
        pub struct OSPEEDR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "OSPEEDR4"]
        pub type OSPEEDR4_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR4`"]
        pub type OSPEEDR4_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR4`"]
        pub struct OSPEEDR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "OSPEEDR3"]
        pub type OSPEEDR3_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR3`"]
        pub type OSPEEDR3_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR3`"]
        pub struct OSPEEDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "OSPEEDR2"]
        pub type OSPEEDR2_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR2`"]
        pub type OSPEEDR2_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR2`"]
        pub struct OSPEEDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "OSPEEDR1"]
        pub type OSPEEDR1_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR1`"]
        pub type OSPEEDR1_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR1`"]
        pub struct OSPEEDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "OSPEEDR0"]
        pub type OSPEEDR0_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR0`"]
        pub type OSPEEDR0_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR0`"]
        pub struct OSPEEDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - OSPEEDR15"]
            #[inline(always)]
            pub fn ospeedr15(&self) -> OSPEEDR15_R {
                OSPEEDR15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - OSPEEDR14"]
            #[inline(always)]
            pub fn ospeedr14(&self) -> OSPEEDR14_R {
                OSPEEDR14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - OSPEEDR13"]
            #[inline(always)]
            pub fn ospeedr13(&self) -> OSPEEDR13_R {
                OSPEEDR13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - OSPEEDR12"]
            #[inline(always)]
            pub fn ospeedr12(&self) -> OSPEEDR12_R {
                OSPEEDR12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - OSPEEDR11"]
            #[inline(always)]
            pub fn ospeedr11(&self) -> OSPEEDR11_R {
                OSPEEDR11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - OSPEEDR10"]
            #[inline(always)]
            pub fn ospeedr10(&self) -> OSPEEDR10_R {
                OSPEEDR10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - OSPEEDR9"]
            #[inline(always)]
            pub fn ospeedr9(&self) -> OSPEEDR9_R {
                OSPEEDR9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - OSPEEDR8"]
            #[inline(always)]
            pub fn ospeedr8(&self) -> OSPEEDR8_R {
                OSPEEDR8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - OSPEEDR7"]
            #[inline(always)]
            pub fn ospeedr7(&self) -> OSPEEDR7_R {
                OSPEEDR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - OSPEEDR6"]
            #[inline(always)]
            pub fn ospeedr6(&self) -> OSPEEDR6_R {
                OSPEEDR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - OSPEEDR5"]
            #[inline(always)]
            pub fn ospeedr5(&self) -> OSPEEDR5_R {
                OSPEEDR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - OSPEEDR4"]
            #[inline(always)]
            pub fn ospeedr4(&self) -> OSPEEDR4_R {
                OSPEEDR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - OSPEEDR3"]
            #[inline(always)]
            pub fn ospeedr3(&self) -> OSPEEDR3_R {
                OSPEEDR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - OSPEEDR2"]
            #[inline(always)]
            pub fn ospeedr2(&self) -> OSPEEDR2_R {
                OSPEEDR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - OSPEEDR1"]
            #[inline(always)]
            pub fn ospeedr1(&self) -> OSPEEDR1_R {
                OSPEEDR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - OSPEEDR0"]
            #[inline(always)]
            pub fn ospeedr0(&self) -> OSPEEDR0_R {
                OSPEEDR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - OSPEEDR15"]
            #[inline(always)]
            pub fn ospeedr15(&mut self) -> OSPEEDR15_W {
                OSPEEDR15_W { w: self }
            }
            #[doc = "Bits 28:29 - OSPEEDR14"]
            #[inline(always)]
            pub fn ospeedr14(&mut self) -> OSPEEDR14_W {
                OSPEEDR14_W { w: self }
            }
            #[doc = "Bits 26:27 - OSPEEDR13"]
            #[inline(always)]
            pub fn ospeedr13(&mut self) -> OSPEEDR13_W {
                OSPEEDR13_W { w: self }
            }
            #[doc = "Bits 24:25 - OSPEEDR12"]
            #[inline(always)]
            pub fn ospeedr12(&mut self) -> OSPEEDR12_W {
                OSPEEDR12_W { w: self }
            }
            #[doc = "Bits 22:23 - OSPEEDR11"]
            #[inline(always)]
            pub fn ospeedr11(&mut self) -> OSPEEDR11_W {
                OSPEEDR11_W { w: self }
            }
            #[doc = "Bits 20:21 - OSPEEDR10"]
            #[inline(always)]
            pub fn ospeedr10(&mut self) -> OSPEEDR10_W {
                OSPEEDR10_W { w: self }
            }
            #[doc = "Bits 18:19 - OSPEEDR9"]
            #[inline(always)]
            pub fn ospeedr9(&mut self) -> OSPEEDR9_W {
                OSPEEDR9_W { w: self }
            }
            #[doc = "Bits 16:17 - OSPEEDR8"]
            #[inline(always)]
            pub fn ospeedr8(&mut self) -> OSPEEDR8_W {
                OSPEEDR8_W { w: self }
            }
            #[doc = "Bits 14:15 - OSPEEDR7"]
            #[inline(always)]
            pub fn ospeedr7(&mut self) -> OSPEEDR7_W {
                OSPEEDR7_W { w: self }
            }
            #[doc = "Bits 12:13 - OSPEEDR6"]
            #[inline(always)]
            pub fn ospeedr6(&mut self) -> OSPEEDR6_W {
                OSPEEDR6_W { w: self }
            }
            #[doc = "Bits 10:11 - OSPEEDR5"]
            #[inline(always)]
            pub fn ospeedr5(&mut self) -> OSPEEDR5_W {
                OSPEEDR5_W { w: self }
            }
            #[doc = "Bits 8:9 - OSPEEDR4"]
            #[inline(always)]
            pub fn ospeedr4(&mut self) -> OSPEEDR4_W {
                OSPEEDR4_W { w: self }
            }
            #[doc = "Bits 6:7 - OSPEEDR3"]
            #[inline(always)]
            pub fn ospeedr3(&mut self) -> OSPEEDR3_W {
                OSPEEDR3_W { w: self }
            }
            #[doc = "Bits 4:5 - OSPEEDR2"]
            #[inline(always)]
            pub fn ospeedr2(&mut self) -> OSPEEDR2_W {
                OSPEEDR2_W { w: self }
            }
            #[doc = "Bits 2:3 - OSPEEDR1"]
            #[inline(always)]
            pub fn ospeedr1(&mut self) -> OSPEEDR1_W {
                OSPEEDR1_W { w: self }
            }
            #[doc = "Bits 0:1 - OSPEEDR0"]
            #[inline(always)]
            pub fn ospeedr0(&mut self) -> OSPEEDR0_W {
                OSPEEDR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port pull-up/pull-down register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pupdr](pupdr) module"]
    pub type PUPDR = crate::Reg<u32, _PUPDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PUPDR;
    #[doc = "`read()` method returns [pupdr::R](pupdr::R) reader structure"]
    impl crate::Readable for PUPDR {}
    #[doc = "`write(|w| ..)` method takes [pupdr::W](pupdr::W) writer structure"]
    impl crate::Writable for PUPDR {}
    #[doc = "GPIO port pull-up/pull-down register"]
    pub mod pupdr {
        #[doc = "Reader of register PUPDR"]
        pub type R = crate::R<u32, super::PUPDR>;
        #[doc = "Writer for register PUPDR"]
        pub type W = crate::W<u32, super::PUPDR>;
        #[doc = "Register PUPDR `reset()`'s with value 0x6400_0000"]
        impl crate::ResetValue for super::PUPDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6400_0000
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PUPDR15_A {
            #[doc = "0: No pull-up, pull-down"]
            FLOATING = 0,
            #[doc = "1: Pull-up"]
            PULLUP = 1,
            #[doc = "2: Pull-down"]
            PULLDOWN = 2,
        }
        impl From<PUPDR15_A> for u8 {
            #[inline(always)]
            fn from(variant: PUPDR15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PUPDR15`"]
        pub type PUPDR15_R = crate::R<u8, PUPDR15_A>;
        impl PUPDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, PUPDR15_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(PUPDR15_A::FLOATING),
                    1 => Val(PUPDR15_A::PULLUP),
                    2 => Val(PUPDR15_A::PULLDOWN),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `FLOATING`"]
            #[inline(always)]
            pub fn is_floating(&self) -> bool {
                *self == PUPDR15_A::FLOATING
            }
            #[doc = "Checks if the value of the field is `PULLUP`"]
            #[inline(always)]
            pub fn is_pull_up(&self) -> bool {
                *self == PUPDR15_A::PULLUP
            }
            #[doc = "Checks if the value of the field is `PULLDOWN`"]
            #[inline(always)]
            pub fn is_pull_down(&self) -> bool {
                *self == PUPDR15_A::PULLDOWN
            }
        }
        #[doc = "Write proxy for field `PUPDR15`"]
        pub struct PUPDR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR15_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR14_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR14`"]
        pub type PUPDR14_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR14`"]
        pub struct PUPDR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR14_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR13_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR13`"]
        pub type PUPDR13_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR13`"]
        pub struct PUPDR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR13_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR12_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR12`"]
        pub type PUPDR12_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR12`"]
        pub struct PUPDR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR12_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR11_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR11`"]
        pub type PUPDR11_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR11`"]
        pub struct PUPDR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR11_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR10_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR10`"]
        pub type PUPDR10_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR10`"]
        pub struct PUPDR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR10_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR9_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR9`"]
        pub type PUPDR9_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR9`"]
        pub struct PUPDR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR9_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR8_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR8`"]
        pub type PUPDR8_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR8`"]
        pub struct PUPDR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR8_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR7_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR7`"]
        pub type PUPDR7_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR7`"]
        pub struct PUPDR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR7_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR6_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR6`"]
        pub type PUPDR6_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR6`"]
        pub struct PUPDR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR6_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR5_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR5`"]
        pub type PUPDR5_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR5`"]
        pub struct PUPDR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR5_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR4_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR4`"]
        pub type PUPDR4_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR4`"]
        pub struct PUPDR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR4_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR3_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR3`"]
        pub type PUPDR3_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR3`"]
        pub struct PUPDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR3_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR2_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR2`"]
        pub type PUPDR2_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR2`"]
        pub struct PUPDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR2_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR1_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR1`"]
        pub type PUPDR1_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR1`"]
        pub struct PUPDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR1_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR0_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR0`"]
        pub type PUPDR0_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR0`"]
        pub struct PUPDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR0_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr15(&self) -> PUPDR15_R {
                PUPDR15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr14(&self) -> PUPDR14_R {
                PUPDR14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr13(&self) -> PUPDR13_R {
                PUPDR13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr12(&self) -> PUPDR12_R {
                PUPDR12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr11(&self) -> PUPDR11_R {
                PUPDR11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr10(&self) -> PUPDR10_R {
                PUPDR10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr9(&self) -> PUPDR9_R {
                PUPDR9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr8(&self) -> PUPDR8_R {
                PUPDR8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr7(&self) -> PUPDR7_R {
                PUPDR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr6(&self) -> PUPDR6_R {
                PUPDR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr5(&self) -> PUPDR5_R {
                PUPDR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr4(&self) -> PUPDR4_R {
                PUPDR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr3(&self) -> PUPDR3_R {
                PUPDR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr2(&self) -> PUPDR2_R {
                PUPDR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr1(&self) -> PUPDR1_R {
                PUPDR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr0(&self) -> PUPDR0_R {
                PUPDR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr15(&mut self) -> PUPDR15_W {
                PUPDR15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr14(&mut self) -> PUPDR14_W {
                PUPDR14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr13(&mut self) -> PUPDR13_W {
                PUPDR13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr12(&mut self) -> PUPDR12_W {
                PUPDR12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr11(&mut self) -> PUPDR11_W {
                PUPDR11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr10(&mut self) -> PUPDR10_W {
                PUPDR10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr9(&mut self) -> PUPDR9_W {
                PUPDR9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr8(&mut self) -> PUPDR8_W {
                PUPDR8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr7(&mut self) -> PUPDR7_W {
                PUPDR7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr6(&mut self) -> PUPDR6_W {
                PUPDR6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr5(&mut self) -> PUPDR5_W {
                PUPDR5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr4(&mut self) -> PUPDR4_W {
                PUPDR4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr3(&mut self) -> PUPDR3_W {
                PUPDR3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr2(&mut self) -> PUPDR2_W {
                PUPDR2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr1(&mut self) -> PUPDR1_W {
                PUPDR1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr0(&mut self) -> PUPDR0_W {
                PUPDR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port input data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idr](idr) module"]
    pub type IDR = crate::Reg<u32, _IDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IDR;
    #[doc = "`read()` method returns [idr::R](idr::R) reader structure"]
    impl crate::Readable for IDR {}
    #[doc = "GPIO port input data register"]
    pub mod idr {
        #[doc = "Reader of register IDR"]
        pub type R = crate::R<u32, super::IDR>;
        #[doc = "Port input data (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IDR15_A {
            #[doc = "1: Input is logic high"]
            HIGH = 1,
            #[doc = "0: Input is logic low"]
            LOW = 0,
        }
        impl From<IDR15_A> for bool {
            #[inline(always)]
            fn from(variant: IDR15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IDR15`"]
        pub type IDR15_R = crate::R<bool, IDR15_A>;
        impl IDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IDR15_A {
                match self.bits {
                    true => IDR15_A::HIGH,
                    false => IDR15_A::LOW,
                }
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == IDR15_A::HIGH
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == IDR15_A::LOW
            }
        }
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR14_A = IDR15_A;
        #[doc = "Reader of field `IDR14`"]
        pub type IDR14_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR13_A = IDR15_A;
        #[doc = "Reader of field `IDR13`"]
        pub type IDR13_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR12_A = IDR15_A;
        #[doc = "Reader of field `IDR12`"]
        pub type IDR12_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR11_A = IDR15_A;
        #[doc = "Reader of field `IDR11`"]
        pub type IDR11_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR10_A = IDR15_A;
        #[doc = "Reader of field `IDR10`"]
        pub type IDR10_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR9_A = IDR15_A;
        #[doc = "Reader of field `IDR9`"]
        pub type IDR9_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR8_A = IDR15_A;
        #[doc = "Reader of field `IDR8`"]
        pub type IDR8_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR7_A = IDR15_A;
        #[doc = "Reader of field `IDR7`"]
        pub type IDR7_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR6_A = IDR15_A;
        #[doc = "Reader of field `IDR6`"]
        pub type IDR6_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR5_A = IDR15_A;
        #[doc = "Reader of field `IDR5`"]
        pub type IDR5_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR4_A = IDR15_A;
        #[doc = "Reader of field `IDR4`"]
        pub type IDR4_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR3_A = IDR15_A;
        #[doc = "Reader of field `IDR3`"]
        pub type IDR3_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR2_A = IDR15_A;
        #[doc = "Reader of field `IDR2`"]
        pub type IDR2_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR1_A = IDR15_A;
        #[doc = "Reader of field `IDR1`"]
        pub type IDR1_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR0_A = IDR15_A;
        #[doc = "Reader of field `IDR0`"]
        pub type IDR0_R = crate::R<bool, IDR15_A>;
        impl R {
            #[doc = "Bit 15 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr15(&self) -> IDR15_R {
                IDR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr14(&self) -> IDR14_R {
                IDR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr13(&self) -> IDR13_R {
                IDR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr12(&self) -> IDR12_R {
                IDR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr11(&self) -> IDR11_R {
                IDR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr10(&self) -> IDR10_R {
                IDR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr9(&self) -> IDR9_R {
                IDR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr8(&self) -> IDR8_R {
                IDR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr7(&self) -> IDR7_R {
                IDR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr6(&self) -> IDR6_R {
                IDR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr5(&self) -> IDR5_R {
                IDR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr4(&self) -> IDR4_R {
                IDR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr3(&self) -> IDR3_R {
                IDR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr2(&self) -> IDR2_R {
                IDR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr1(&self) -> IDR1_R {
                IDR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr0(&self) -> IDR0_R {
                IDR0_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "GPIO port output data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [odr](odr) module"]
    pub type ODR = crate::Reg<u32, _ODR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ODR;
    #[doc = "`read()` method returns [odr::R](odr::R) reader structure"]
    impl crate::Readable for ODR {}
    #[doc = "`write(|w| ..)` method takes [odr::W](odr::W) writer structure"]
    impl crate::Writable for ODR {}
    #[doc = "GPIO port output data register"]
    pub mod odr {
        #[doc = "Reader of register ODR"]
        pub type R = crate::R<u32, super::ODR>;
        #[doc = "Writer for register ODR"]
        pub type W = crate::W<u32, super::ODR>;
        #[doc = "Register ODR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ODR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port output data (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ODR15_A {
            #[doc = "1: Set output to logic high"]
            HIGH = 1,
            #[doc = "0: Set output to logic low"]
            LOW = 0,
        }
        impl From<ODR15_A> for bool {
            #[inline(always)]
            fn from(variant: ODR15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ODR15`"]
        pub type ODR15_R = crate::R<bool, ODR15_A>;
        impl ODR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ODR15_A {
                match self.bits {
                    true => ODR15_A::HIGH,
                    false => ODR15_A::LOW,
                }
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == ODR15_A::HIGH
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == ODR15_A::LOW
            }
        }
        #[doc = "Write proxy for field `ODR15`"]
        pub struct ODR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR14_A = ODR15_A;
        #[doc = "Reader of field `ODR14`"]
        pub type ODR14_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR14`"]
        pub struct ODR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR13_A = ODR15_A;
        #[doc = "Reader of field `ODR13`"]
        pub type ODR13_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR13`"]
        pub struct ODR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR12_A = ODR15_A;
        #[doc = "Reader of field `ODR12`"]
        pub type ODR12_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR12`"]
        pub struct ODR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR11_A = ODR15_A;
        #[doc = "Reader of field `ODR11`"]
        pub type ODR11_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR11`"]
        pub struct ODR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR10_A = ODR15_A;
        #[doc = "Reader of field `ODR10`"]
        pub type ODR10_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR10`"]
        pub struct ODR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR9_A = ODR15_A;
        #[doc = "Reader of field `ODR9`"]
        pub type ODR9_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR9`"]
        pub struct ODR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR8_A = ODR15_A;
        #[doc = "Reader of field `ODR8`"]
        pub type ODR8_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR8`"]
        pub struct ODR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR7_A = ODR15_A;
        #[doc = "Reader of field `ODR7`"]
        pub type ODR7_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR7`"]
        pub struct ODR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR6_A = ODR15_A;
        #[doc = "Reader of field `ODR6`"]
        pub type ODR6_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR6`"]
        pub struct ODR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR5_A = ODR15_A;
        #[doc = "Reader of field `ODR5`"]
        pub type ODR5_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR5`"]
        pub struct ODR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR4_A = ODR15_A;
        #[doc = "Reader of field `ODR4`"]
        pub type ODR4_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR4`"]
        pub struct ODR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR3_A = ODR15_A;
        #[doc = "Reader of field `ODR3`"]
        pub type ODR3_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR3`"]
        pub struct ODR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR2_A = ODR15_A;
        #[doc = "Reader of field `ODR2`"]
        pub type ODR2_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR2`"]
        pub struct ODR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR1_A = ODR15_A;
        #[doc = "Reader of field `ODR1`"]
        pub type ODR1_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR1`"]
        pub struct ODR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR0_A = ODR15_A;
        #[doc = "Reader of field `ODR0`"]
        pub type ODR0_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR0`"]
        pub struct ODR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr15(&self) -> ODR15_R {
                ODR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr14(&self) -> ODR14_R {
                ODR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr13(&self) -> ODR13_R {
                ODR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr12(&self) -> ODR12_R {
                ODR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr11(&self) -> ODR11_R {
                ODR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr10(&self) -> ODR10_R {
                ODR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr9(&self) -> ODR9_R {
                ODR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr8(&self) -> ODR8_R {
                ODR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr7(&self) -> ODR7_R {
                ODR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr6(&self) -> ODR6_R {
                ODR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr5(&self) -> ODR5_R {
                ODR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr4(&self) -> ODR4_R {
                ODR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr3(&self) -> ODR3_R {
                ODR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr2(&self) -> ODR2_R {
                ODR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr1(&self) -> ODR1_R {
                ODR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr0(&self) -> ODR0_R {
                ODR0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr15(&mut self) -> ODR15_W {
                ODR15_W { w: self }
            }
            #[doc = "Bit 14 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr14(&mut self) -> ODR14_W {
                ODR14_W { w: self }
            }
            #[doc = "Bit 13 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr13(&mut self) -> ODR13_W {
                ODR13_W { w: self }
            }
            #[doc = "Bit 12 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr12(&mut self) -> ODR12_W {
                ODR12_W { w: self }
            }
            #[doc = "Bit 11 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr11(&mut self) -> ODR11_W {
                ODR11_W { w: self }
            }
            #[doc = "Bit 10 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr10(&mut self) -> ODR10_W {
                ODR10_W { w: self }
            }
            #[doc = "Bit 9 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr9(&mut self) -> ODR9_W {
                ODR9_W { w: self }
            }
            #[doc = "Bit 8 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr8(&mut self) -> ODR8_W {
                ODR8_W { w: self }
            }
            #[doc = "Bit 7 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr7(&mut self) -> ODR7_W {
                ODR7_W { w: self }
            }
            #[doc = "Bit 6 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr6(&mut self) -> ODR6_W {
                ODR6_W { w: self }
            }
            #[doc = "Bit 5 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr5(&mut self) -> ODR5_W {
                ODR5_W { w: self }
            }
            #[doc = "Bit 4 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr4(&mut self) -> ODR4_W {
                ODR4_W { w: self }
            }
            #[doc = "Bit 3 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr3(&mut self) -> ODR3_W {
                ODR3_W { w: self }
            }
            #[doc = "Bit 2 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr2(&mut self) -> ODR2_W {
                ODR2_W { w: self }
            }
            #[doc = "Bit 1 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr1(&mut self) -> ODR1_W {
                ODR1_W { w: self }
            }
            #[doc = "Bit 0 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr0(&mut self) -> ODR0_W {
                ODR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port bit set/reset register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bsrr](bsrr) module"]
    pub type BSRR = crate::Reg<u32, _BSRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BSRR;
    #[doc = "`write(|w| ..)` method takes [bsrr::W](bsrr::W) writer structure"]
    impl crate::Writable for BSRR {}
    #[doc = "GPIO port bit set/reset register"]
    pub mod bsrr {
        #[doc = "Writer for register BSRR"]
        pub type W = crate::W<u32, super::BSRR>;
        #[doc = "Register BSRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BSRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BR15_AW {
            #[doc = "1: Resets the corresponding ODRx bit"]
            RESET = 1,
        }
        impl From<BR15_AW> for bool {
            #[inline(always)]
            fn from(variant: BR15_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BR15`"]
        pub struct BR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR14_AW = BR15_AW;
        #[doc = "Write proxy for field `BR14`"]
        pub struct BR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR13_AW = BR15_AW;
        #[doc = "Write proxy for field `BR13`"]
        pub struct BR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR12_AW = BR15_AW;
        #[doc = "Write proxy for field `BR12`"]
        pub struct BR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR11_AW = BR15_AW;
        #[doc = "Write proxy for field `BR11`"]
        pub struct BR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR10_AW = BR15_AW;
        #[doc = "Write proxy for field `BR10`"]
        pub struct BR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR9_AW = BR15_AW;
        #[doc = "Write proxy for field `BR9`"]
        pub struct BR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR8_AW = BR15_AW;
        #[doc = "Write proxy for field `BR8`"]
        pub struct BR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR7_AW = BR15_AW;
        #[doc = "Write proxy for field `BR7`"]
        pub struct BR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR6_AW = BR15_AW;
        #[doc = "Write proxy for field `BR6`"]
        pub struct BR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR5_AW = BR15_AW;
        #[doc = "Write proxy for field `BR5`"]
        pub struct BR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR4_AW = BR15_AW;
        #[doc = "Write proxy for field `BR4`"]
        pub struct BR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR3_AW = BR15_AW;
        #[doc = "Write proxy for field `BR3`"]
        pub struct BR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR2_AW = BR15_AW;
        #[doc = "Write proxy for field `BR2`"]
        pub struct BR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR1_AW = BR15_AW;
        #[doc = "Write proxy for field `BR1`"]
        pub struct BR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BR0_AW = BR15_AW;
        #[doc = "Write proxy for field `BR0`"]
        pub struct BR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BS15_AW {
            #[doc = "1: Sets the corresponding ODRx bit"]
            SET = 1,
        }
        impl From<BS15_AW> for bool {
            #[inline(always)]
            fn from(variant: BS15_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BS15`"]
        pub struct BS15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS14_AW = BS15_AW;
        #[doc = "Write proxy for field `BS14`"]
        pub struct BS14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS13_AW = BS15_AW;
        #[doc = "Write proxy for field `BS13`"]
        pub struct BS13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS12_AW = BS15_AW;
        #[doc = "Write proxy for field `BS12`"]
        pub struct BS12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS11_AW = BS15_AW;
        #[doc = "Write proxy for field `BS11`"]
        pub struct BS11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS10_AW = BS15_AW;
        #[doc = "Write proxy for field `BS10`"]
        pub struct BS10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS9_AW = BS15_AW;
        #[doc = "Write proxy for field `BS9`"]
        pub struct BS9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS8_AW = BS15_AW;
        #[doc = "Write proxy for field `BS8`"]
        pub struct BS8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS7_AW = BS15_AW;
        #[doc = "Write proxy for field `BS7`"]
        pub struct BS7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS6_AW = BS15_AW;
        #[doc = "Write proxy for field `BS6`"]
        pub struct BS6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS5_AW = BS15_AW;
        #[doc = "Write proxy for field `BS5`"]
        pub struct BS5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS4_AW = BS15_AW;
        #[doc = "Write proxy for field `BS4`"]
        pub struct BS4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS3_AW = BS15_AW;
        #[doc = "Write proxy for field `BS3`"]
        pub struct BS3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS2_AW = BS15_AW;
        #[doc = "Write proxy for field `BS2`"]
        pub struct BS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS1_AW = BS15_AW;
        #[doc = "Write proxy for field `BS1`"]
        pub struct BS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS0_AW = BS15_AW;
        #[doc = "Write proxy for field `BS0`"]
        pub struct BS0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 31 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br15(&mut self) -> BR15_W {
                BR15_W { w: self }
            }
            #[doc = "Bit 30 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br14(&mut self) -> BR14_W {
                BR14_W { w: self }
            }
            #[doc = "Bit 29 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br13(&mut self) -> BR13_W {
                BR13_W { w: self }
            }
            #[doc = "Bit 28 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br12(&mut self) -> BR12_W {
                BR12_W { w: self }
            }
            #[doc = "Bit 27 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br11(&mut self) -> BR11_W {
                BR11_W { w: self }
            }
            #[doc = "Bit 26 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br10(&mut self) -> BR10_W {
                BR10_W { w: self }
            }
            #[doc = "Bit 25 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br9(&mut self) -> BR9_W {
                BR9_W { w: self }
            }
            #[doc = "Bit 24 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br8(&mut self) -> BR8_W {
                BR8_W { w: self }
            }
            #[doc = "Bit 23 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br7(&mut self) -> BR7_W {
                BR7_W { w: self }
            }
            #[doc = "Bit 22 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br6(&mut self) -> BR6_W {
                BR6_W { w: self }
            }
            #[doc = "Bit 21 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br5(&mut self) -> BR5_W {
                BR5_W { w: self }
            }
            #[doc = "Bit 20 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br4(&mut self) -> BR4_W {
                BR4_W { w: self }
            }
            #[doc = "Bit 19 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br3(&mut self) -> BR3_W {
                BR3_W { w: self }
            }
            #[doc = "Bit 18 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br2(&mut self) -> BR2_W {
                BR2_W { w: self }
            }
            #[doc = "Bit 17 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br1(&mut self) -> BR1_W {
                BR1_W { w: self }
            }
            #[doc = "Bit 16 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn br0(&mut self) -> BR0_W {
                BR0_W { w: self }
            }
            #[doc = "Bit 15 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs15(&mut self) -> BS15_W {
                BS15_W { w: self }
            }
            #[doc = "Bit 14 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs14(&mut self) -> BS14_W {
                BS14_W { w: self }
            }
            #[doc = "Bit 13 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs13(&mut self) -> BS13_W {
                BS13_W { w: self }
            }
            #[doc = "Bit 12 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs12(&mut self) -> BS12_W {
                BS12_W { w: self }
            }
            #[doc = "Bit 11 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs11(&mut self) -> BS11_W {
                BS11_W { w: self }
            }
            #[doc = "Bit 10 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs10(&mut self) -> BS10_W {
                BS10_W { w: self }
            }
            #[doc = "Bit 9 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs9(&mut self) -> BS9_W {
                BS9_W { w: self }
            }
            #[doc = "Bit 8 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs8(&mut self) -> BS8_W {
                BS8_W { w: self }
            }
            #[doc = "Bit 7 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs7(&mut self) -> BS7_W {
                BS7_W { w: self }
            }
            #[doc = "Bit 6 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs6(&mut self) -> BS6_W {
                BS6_W { w: self }
            }
            #[doc = "Bit 5 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs5(&mut self) -> BS5_W {
                BS5_W { w: self }
            }
            #[doc = "Bit 4 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs4(&mut self) -> BS4_W {
                BS4_W { w: self }
            }
            #[doc = "Bit 3 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs3(&mut self) -> BS3_W {
                BS3_W { w: self }
            }
            #[doc = "Bit 2 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs2(&mut self) -> BS2_W {
                BS2_W { w: self }
            }
            #[doc = "Bit 1 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs1(&mut self) -> BS1_W {
                BS1_W { w: self }
            }
            #[doc = "Bit 0 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs0(&mut self) -> BS0_W {
                BS0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port configuration lock register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lckr](lckr) module"]
    pub type LCKR = crate::Reg<u32, _LCKR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LCKR;
    #[doc = "`read()` method returns [lckr::R](lckr::R) reader structure"]
    impl crate::Readable for LCKR {}
    #[doc = "`write(|w| ..)` method takes [lckr::W](lckr::W) writer structure"]
    impl crate::Writable for LCKR {}
    #[doc = "GPIO port configuration lock register"]
    pub mod lckr {
        #[doc = "Reader of register LCKR"]
        pub type R = crate::R<u32, super::LCKR>;
        #[doc = "Writer for register LCKR"]
        pub type W = crate::W<u32, super::LCKR>;
        #[doc = "Register LCKR `reset()`'s with value 0"]
        impl crate::ResetValue for super::LCKR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCKK_A {
            #[doc = "0: Port configuration lock key not active"]
            NOTACTIVE = 0,
            #[doc = "1: Port configuration lock key active"]
            ACTIVE = 1,
        }
        impl From<LCKK_A> for bool {
            #[inline(always)]
            fn from(variant: LCKK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCKK`"]
        pub type LCKK_R = crate::R<bool, LCKK_A>;
        impl LCKK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCKK_A {
                match self.bits {
                    false => LCKK_A::NOTACTIVE,
                    true => LCKK_A::ACTIVE,
                }
            }
            #[doc = "Checks if the value of the field is `NOTACTIVE`"]
            #[inline(always)]
            pub fn is_not_active(&self) -> bool {
                *self == LCKK_A::NOTACTIVE
            }
            #[doc = "Checks if the value of the field is `ACTIVE`"]
            #[inline(always)]
            pub fn is_active(&self) -> bool {
                *self == LCKK_A::ACTIVE
            }
        }
        #[doc = "Write proxy for field `LCKK`"]
        pub struct LCKK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCKK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCKK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration lock key not active"]
            #[inline(always)]
            pub fn not_active(self) -> &'a mut W {
                self.variant(LCKK_A::NOTACTIVE)
            }
            #[doc = "Port configuration lock key active"]
            #[inline(always)]
            pub fn active(self) -> &'a mut W {
                self.variant(LCKK_A::ACTIVE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCK15_A {
            #[doc = "0: Port configuration not locked"]
            UNLOCKED = 0,
            #[doc = "1: Port configuration locked"]
            LOCKED = 1,
        }
        impl From<LCK15_A> for bool {
            #[inline(always)]
            fn from(variant: LCK15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCK15`"]
        pub type LCK15_R = crate::R<bool, LCK15_A>;
        impl LCK15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCK15_A {
                match self.bits {
                    false => LCK15_A::UNLOCKED,
                    true => LCK15_A::LOCKED,
                }
            }
            #[doc = "Checks if the value of the field is `UNLOCKED`"]
            #[inline(always)]
            pub fn is_unlocked(&self) -> bool {
                *self == LCK15_A::UNLOCKED
            }
            #[doc = "Checks if the value of the field is `LOCKED`"]
            #[inline(always)]
            pub fn is_locked(&self) -> bool {
                *self == LCK15_A::LOCKED
            }
        }
        #[doc = "Write proxy for field `LCK15`"]
        pub struct LCK15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK14_A = LCK15_A;
        #[doc = "Reader of field `LCK14`"]
        pub type LCK14_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK14`"]
        pub struct LCK14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK13_A = LCK15_A;
        #[doc = "Reader of field `LCK13`"]
        pub type LCK13_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK13`"]
        pub struct LCK13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK12_A = LCK15_A;
        #[doc = "Reader of field `LCK12`"]
        pub type LCK12_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK12`"]
        pub struct LCK12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK11_A = LCK15_A;
        #[doc = "Reader of field `LCK11`"]
        pub type LCK11_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK11`"]
        pub struct LCK11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK10_A = LCK15_A;
        #[doc = "Reader of field `LCK10`"]
        pub type LCK10_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK10`"]
        pub struct LCK10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCK9_A {
            #[doc = "0: Port configuration not locked"]
            UNLOCKED = 0,
            #[doc = "1: Port configuration locked"]
            LOCKED = 1,
        }
        impl From<LCK9_A> for bool {
            #[inline(always)]
            fn from(variant: LCK9_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCK9`"]
        pub type LCK9_R = crate::R<bool, LCK9_A>;
        impl LCK9_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCK9_A {
                match self.bits {
                    false => LCK9_A::UNLOCKED,
                    true => LCK9_A::LOCKED,
                }
            }
            #[doc = "Checks if the value of the field is `UNLOCKED`"]
            #[inline(always)]
            pub fn is_unlocked(&self) -> bool {
                *self == LCK9_A::UNLOCKED
            }
            #[doc = "Checks if the value of the field is `LOCKED`"]
            #[inline(always)]
            pub fn is_locked(&self) -> bool {
                *self == LCK9_A::LOCKED
            }
        }
        #[doc = "Write proxy for field `LCK9`"]
        pub struct LCK9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK8_A = LCK9_A;
        #[doc = "Reader of field `LCK8`"]
        pub type LCK8_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK8`"]
        pub struct LCK8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK7_A = LCK9_A;
        #[doc = "Reader of field `LCK7`"]
        pub type LCK7_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK7`"]
        pub struct LCK7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK6_A = LCK9_A;
        #[doc = "Reader of field `LCK6`"]
        pub type LCK6_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK6`"]
        pub struct LCK6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK5_A = LCK9_A;
        #[doc = "Reader of field `LCK5`"]
        pub type LCK5_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK5`"]
        pub struct LCK5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK4_A = LCK9_A;
        #[doc = "Reader of field `LCK4`"]
        pub type LCK4_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK4`"]
        pub struct LCK4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK3_A = LCK9_A;
        #[doc = "Reader of field `LCK3`"]
        pub type LCK3_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK3`"]
        pub struct LCK3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK2_A = LCK9_A;
        #[doc = "Reader of field `LCK2`"]
        pub type LCK2_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK2`"]
        pub struct LCK2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK1_A = LCK9_A;
        #[doc = "Reader of field `LCK1`"]
        pub type LCK1_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK1`"]
        pub struct LCK1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK0_A = LCK9_A;
        #[doc = "Reader of field `LCK0`"]
        pub type LCK0_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK0`"]
        pub struct LCK0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lckk(&self) -> LCKK_R {
                LCKK_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck15(&self) -> LCK15_R {
                LCK15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck14(&self) -> LCK14_R {
                LCK14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck13(&self) -> LCK13_R {
                LCK13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck12(&self) -> LCK12_R {
                LCK12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck11(&self) -> LCK11_R {
                LCK11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck10(&self) -> LCK10_R {
                LCK10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck9(&self) -> LCK9_R {
                LCK9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck8(&self) -> LCK8_R {
                LCK8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck7(&self) -> LCK7_R {
                LCK7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck6(&self) -> LCK6_R {
                LCK6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck5(&self) -> LCK5_R {
                LCK5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck4(&self) -> LCK4_R {
                LCK4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck3(&self) -> LCK3_R {
                LCK3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck2(&self) -> LCK2_R {
                LCK2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck1(&self) -> LCK1_R {
                LCK1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck0(&self) -> LCK0_R {
                LCK0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lckk(&mut self) -> LCKK_W {
                LCKK_W { w: self }
            }
            #[doc = "Bit 15 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck15(&mut self) -> LCK15_W {
                LCK15_W { w: self }
            }
            #[doc = "Bit 14 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck14(&mut self) -> LCK14_W {
                LCK14_W { w: self }
            }
            #[doc = "Bit 13 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck13(&mut self) -> LCK13_W {
                LCK13_W { w: self }
            }
            #[doc = "Bit 12 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck12(&mut self) -> LCK12_W {
                LCK12_W { w: self }
            }
            #[doc = "Bit 11 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck11(&mut self) -> LCK11_W {
                LCK11_W { w: self }
            }
            #[doc = "Bit 10 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck10(&mut self) -> LCK10_W {
                LCK10_W { w: self }
            }
            #[doc = "Bit 9 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck9(&mut self) -> LCK9_W {
                LCK9_W { w: self }
            }
            #[doc = "Bit 8 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck8(&mut self) -> LCK8_W {
                LCK8_W { w: self }
            }
            #[doc = "Bit 7 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck7(&mut self) -> LCK7_W {
                LCK7_W { w: self }
            }
            #[doc = "Bit 6 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck6(&mut self) -> LCK6_W {
                LCK6_W { w: self }
            }
            #[doc = "Bit 5 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck5(&mut self) -> LCK5_W {
                LCK5_W { w: self }
            }
            #[doc = "Bit 4 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck4(&mut self) -> LCK4_W {
                LCK4_W { w: self }
            }
            #[doc = "Bit 3 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck3(&mut self) -> LCK3_W {
                LCK3_W { w: self }
            }
            #[doc = "Bit 2 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck2(&mut self) -> LCK2_W {
                LCK2_W { w: self }
            }
            #[doc = "Bit 1 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck1(&mut self) -> LCK1_W {
                LCK1_W { w: self }
            }
            #[doc = "Bit 0 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck0(&mut self) -> LCK0_W {
                LCK0_W { w: self }
            }
        }
    }
    #[doc = "AFRL\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [afrl](afrl) module"]
    pub type AFRL = crate::Reg<u32, _AFRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AFRL;
    #[doc = "`read()` method returns [afrl::R](afrl::R) reader structure"]
    impl crate::Readable for AFRL {}
    #[doc = "`write(|w| ..)` method takes [afrl::W](afrl::W) writer structure"]
    impl crate::Writable for AFRL {}
    #[doc = "AFRL"]
    pub mod afrl {
        #[doc = "Reader of register AFRL"]
        pub type R = crate::R<u32, super::AFRL>;
        #[doc = "Writer for register AFRL"]
        pub type W = crate::W<u32, super::AFRL>;
        #[doc = "Register AFRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::AFRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum AFRL7_A {
            #[doc = "0: AF0"]
            AF0 = 0,
            #[doc = "1: AF1"]
            AF1 = 1,
            #[doc = "2: AF2"]
            AF2 = 2,
            #[doc = "3: AF3"]
            AF3 = 3,
            #[doc = "4: AF4"]
            AF4 = 4,
            #[doc = "5: AF5"]
            AF5 = 5,
            #[doc = "6: AF6"]
            AF6 = 6,
            #[doc = "7: AF7"]
            AF7 = 7,
            #[doc = "8: AF8"]
            AF8 = 8,
            #[doc = "9: AF9"]
            AF9 = 9,
            #[doc = "10: AF10"]
            AF10 = 10,
            #[doc = "11: AF11"]
            AF11 = 11,
            #[doc = "12: AF12"]
            AF12 = 12,
            #[doc = "13: AF13"]
            AF13 = 13,
            #[doc = "14: AF14"]
            AF14 = 14,
            #[doc = "15: AF15"]
            AF15 = 15,
        }
        impl From<AFRL7_A> for u8 {
            #[inline(always)]
            fn from(variant: AFRL7_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `AFRL7`"]
        pub type AFRL7_R = crate::R<u8, AFRL7_A>;
        impl AFRL7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AFRL7_A {
                match self.bits {
                    0 => AFRL7_A::AF0,
                    1 => AFRL7_A::AF1,
                    2 => AFRL7_A::AF2,
                    3 => AFRL7_A::AF3,
                    4 => AFRL7_A::AF4,
                    5 => AFRL7_A::AF5,
                    6 => AFRL7_A::AF6,
                    7 => AFRL7_A::AF7,
                    8 => AFRL7_A::AF8,
                    9 => AFRL7_A::AF9,
                    10 => AFRL7_A::AF10,
                    11 => AFRL7_A::AF11,
                    12 => AFRL7_A::AF12,
                    13 => AFRL7_A::AF13,
                    14 => AFRL7_A::AF14,
                    15 => AFRL7_A::AF15,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `AF0`"]
            #[inline(always)]
            pub fn is_af0(&self) -> bool {
                *self == AFRL7_A::AF0
            }
            #[doc = "Checks if the value of the field is `AF1`"]
            #[inline(always)]
            pub fn is_af1(&self) -> bool {
                *self == AFRL7_A::AF1
            }
            #[doc = "Checks if the value of the field is `AF2`"]
            #[inline(always)]
            pub fn is_af2(&self) -> bool {
                *self == AFRL7_A::AF2
            }
            #[doc = "Checks if the value of the field is `AF3`"]
            #[inline(always)]
            pub fn is_af3(&self) -> bool {
                *self == AFRL7_A::AF3
            }
            #[doc = "Checks if the value of the field is `AF4`"]
            #[inline(always)]
            pub fn is_af4(&self) -> bool {
                *self == AFRL7_A::AF4
            }
            #[doc = "Checks if the value of the field is `AF5`"]
            #[inline(always)]
            pub fn is_af5(&self) -> bool {
                *self == AFRL7_A::AF5
            }
            #[doc = "Checks if the value of the field is `AF6`"]
            #[inline(always)]
            pub fn is_af6(&self) -> bool {
                *self == AFRL7_A::AF6
            }
            #[doc = "Checks if the value of the field is `AF7`"]
            #[inline(always)]
            pub fn is_af7(&self) -> bool {
                *self == AFRL7_A::AF7
            }
            #[doc = "Checks if the value of the field is `AF8`"]
            #[inline(always)]
            pub fn is_af8(&self) -> bool {
                *self == AFRL7_A::AF8
            }
            #[doc = "Checks if the value of the field is `AF9`"]
            #[inline(always)]
            pub fn is_af9(&self) -> bool {
                *self == AFRL7_A::AF9
            }
            #[doc = "Checks if the value of the field is `AF10`"]
            #[inline(always)]
            pub fn is_af10(&self) -> bool {
                *self == AFRL7_A::AF10
            }
            #[doc = "Checks if the value of the field is `AF11`"]
            #[inline(always)]
            pub fn is_af11(&self) -> bool {
                *self == AFRL7_A::AF11
            }
            #[doc = "Checks if the value of the field is `AF12`"]
            #[inline(always)]
            pub fn is_af12(&self) -> bool {
                *self == AFRL7_A::AF12
            }
            #[doc = "Checks if the value of the field is `AF13`"]
            #[inline(always)]
            pub fn is_af13(&self) -> bool {
                *self == AFRL7_A::AF13
            }
            #[doc = "Checks if the value of the field is `AF14`"]
            #[inline(always)]
            pub fn is_af14(&self) -> bool {
                *self == AFRL7_A::AF14
            }
            #[doc = "Checks if the value of the field is `AF15`"]
            #[inline(always)]
            pub fn is_af15(&self) -> bool {
                *self == AFRL7_A::AF15
            }
        }
        #[doc = "Write proxy for field `AFRL7`"]
        pub struct AFRL7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL6_A = AFRL7_A;
        #[doc = "Reader of field `AFRL6`"]
        pub type AFRL6_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL6`"]
        pub struct AFRL6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL5_A = AFRL7_A;
        #[doc = "Reader of field `AFRL5`"]
        pub type AFRL5_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL5`"]
        pub struct AFRL5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL4_A = AFRL7_A;
        #[doc = "Reader of field `AFRL4`"]
        pub type AFRL4_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL4`"]
        pub struct AFRL4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL3_A = AFRL7_A;
        #[doc = "Reader of field `AFRL3`"]
        pub type AFRL3_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL3`"]
        pub struct AFRL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL2_A = AFRL7_A;
        #[doc = "Reader of field `AFRL2`"]
        pub type AFRL2_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL2`"]
        pub struct AFRL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL1_A = AFRL7_A;
        #[doc = "Reader of field `AFRL1`"]
        pub type AFRL1_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL1`"]
        pub struct AFRL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL0_A = AFRL7_A;
        #[doc = "Reader of field `AFRL0`"]
        pub type AFRL0_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL0`"]
        pub struct AFRL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl7(&self) -> AFRL7_R {
                AFRL7_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl6(&self) -> AFRL6_R {
                AFRL6_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl5(&self) -> AFRL5_R {
                AFRL5_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl4(&self) -> AFRL4_R {
                AFRL4_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl3(&self) -> AFRL3_R {
                AFRL3_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl2(&self) -> AFRL2_R {
                AFRL2_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl1(&self) -> AFRL1_R {
                AFRL1_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl0(&self) -> AFRL0_R {
                AFRL0_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl7(&mut self) -> AFRL7_W {
                AFRL7_W { w: self }
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl6(&mut self) -> AFRL6_W {
                AFRL6_W { w: self }
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl5(&mut self) -> AFRL5_W {
                AFRL5_W { w: self }
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl4(&mut self) -> AFRL4_W {
                AFRL4_W { w: self }
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl3(&mut self) -> AFRL3_W {
                AFRL3_W { w: self }
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl2(&mut self) -> AFRL2_W {
                AFRL2_W { w: self }
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl1(&mut self) -> AFRL1_W {
                AFRL1_W { w: self }
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl0(&mut self) -> AFRL0_W {
                AFRL0_W { w: self }
            }
        }
    }
    #[doc = "GPIO alternate function high register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [afrh](afrh) module"]
    pub type AFRH = crate::Reg<u32, _AFRH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AFRH;
    #[doc = "`read()` method returns [afrh::R](afrh::R) reader structure"]
    impl crate::Readable for AFRH {}
    #[doc = "`write(|w| ..)` method takes [afrh::W](afrh::W) writer structure"]
    impl crate::Writable for AFRH {}
    #[doc = "GPIO alternate function high register"]
    pub mod afrh {
        #[doc = "Reader of register AFRH"]
        pub type R = crate::R<u32, super::AFRH>;
        #[doc = "Writer for register AFRH"]
        pub type W = crate::W<u32, super::AFRH>;
        #[doc = "Register AFRH `reset()`'s with value 0"]
        impl crate::ResetValue for super::AFRH {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum AFRH15_A {
            #[doc = "0: AF0"]
            AF0 = 0,
            #[doc = "1: AF1"]
            AF1 = 1,
            #[doc = "2: AF2"]
            AF2 = 2,
            #[doc = "3: AF3"]
            AF3 = 3,
            #[doc = "4: AF4"]
            AF4 = 4,
            #[doc = "5: AF5"]
            AF5 = 5,
            #[doc = "6: AF6"]
            AF6 = 6,
            #[doc = "7: AF7"]
            AF7 = 7,
            #[doc = "8: AF8"]
            AF8 = 8,
            #[doc = "9: AF9"]
            AF9 = 9,
            #[doc = "10: AF10"]
            AF10 = 10,
            #[doc = "11: AF11"]
            AF11 = 11,
            #[doc = "12: AF12"]
            AF12 = 12,
            #[doc = "13: AF13"]
            AF13 = 13,
            #[doc = "14: AF14"]
            AF14 = 14,
            #[doc = "15: AF15"]
            AF15 = 15,
        }
        impl From<AFRH15_A> for u8 {
            #[inline(always)]
            fn from(variant: AFRH15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `AFRH15`"]
        pub type AFRH15_R = crate::R<u8, AFRH15_A>;
        impl AFRH15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AFRH15_A {
                match self.bits {
                    0 => AFRH15_A::AF0,
                    1 => AFRH15_A::AF1,
                    2 => AFRH15_A::AF2,
                    3 => AFRH15_A::AF3,
                    4 => AFRH15_A::AF4,
                    5 => AFRH15_A::AF5,
                    6 => AFRH15_A::AF6,
                    7 => AFRH15_A::AF7,
                    8 => AFRH15_A::AF8,
                    9 => AFRH15_A::AF9,
                    10 => AFRH15_A::AF10,
                    11 => AFRH15_A::AF11,
                    12 => AFRH15_A::AF12,
                    13 => AFRH15_A::AF13,
                    14 => AFRH15_A::AF14,
                    15 => AFRH15_A::AF15,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `AF0`"]
            #[inline(always)]
            pub fn is_af0(&self) -> bool {
                *self == AFRH15_A::AF0
            }
            #[doc = "Checks if the value of the field is `AF1`"]
            #[inline(always)]
            pub fn is_af1(&self) -> bool {
                *self == AFRH15_A::AF1
            }
            #[doc = "Checks if the value of the field is `AF2`"]
            #[inline(always)]
            pub fn is_af2(&self) -> bool {
                *self == AFRH15_A::AF2
            }
            #[doc = "Checks if the value of the field is `AF3`"]
            #[inline(always)]
            pub fn is_af3(&self) -> bool {
                *self == AFRH15_A::AF3
            }
            #[doc = "Checks if the value of the field is `AF4`"]
            #[inline(always)]
            pub fn is_af4(&self) -> bool {
                *self == AFRH15_A::AF4
            }
            #[doc = "Checks if the value of the field is `AF5`"]
            #[inline(always)]
            pub fn is_af5(&self) -> bool {
                *self == AFRH15_A::AF5
            }
            #[doc = "Checks if the value of the field is `AF6`"]
            #[inline(always)]
            pub fn is_af6(&self) -> bool {
                *self == AFRH15_A::AF6
            }
            #[doc = "Checks if the value of the field is `AF7`"]
            #[inline(always)]
            pub fn is_af7(&self) -> bool {
                *self == AFRH15_A::AF7
            }
            #[doc = "Checks if the value of the field is `AF8`"]
            #[inline(always)]
            pub fn is_af8(&self) -> bool {
                *self == AFRH15_A::AF8
            }
            #[doc = "Checks if the value of the field is `AF9`"]
            #[inline(always)]
            pub fn is_af9(&self) -> bool {
                *self == AFRH15_A::AF9
            }
            #[doc = "Checks if the value of the field is `AF10`"]
            #[inline(always)]
            pub fn is_af10(&self) -> bool {
                *self == AFRH15_A::AF10
            }
            #[doc = "Checks if the value of the field is `AF11`"]
            #[inline(always)]
            pub fn is_af11(&self) -> bool {
                *self == AFRH15_A::AF11
            }
            #[doc = "Checks if the value of the field is `AF12`"]
            #[inline(always)]
            pub fn is_af12(&self) -> bool {
                *self == AFRH15_A::AF12
            }
            #[doc = "Checks if the value of the field is `AF13`"]
            #[inline(always)]
            pub fn is_af13(&self) -> bool {
                *self == AFRH15_A::AF13
            }
            #[doc = "Checks if the value of the field is `AF14`"]
            #[inline(always)]
            pub fn is_af14(&self) -> bool {
                *self == AFRH15_A::AF14
            }
            #[doc = "Checks if the value of the field is `AF15`"]
            #[inline(always)]
            pub fn is_af15(&self) -> bool {
                *self == AFRH15_A::AF15
            }
        }
        #[doc = "Write proxy for field `AFRH15`"]
        pub struct AFRH15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH14_A = AFRH15_A;
        #[doc = "Reader of field `AFRH14`"]
        pub type AFRH14_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH14`"]
        pub struct AFRH14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH13_A = AFRH15_A;
        #[doc = "Reader of field `AFRH13`"]
        pub type AFRH13_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH13`"]
        pub struct AFRH13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH12_A = AFRH15_A;
        #[doc = "Reader of field `AFRH12`"]
        pub type AFRH12_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH12`"]
        pub struct AFRH12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH11_A = AFRH15_A;
        #[doc = "Reader of field `AFRH11`"]
        pub type AFRH11_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH11`"]
        pub struct AFRH11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH10_A = AFRH15_A;
        #[doc = "Reader of field `AFRH10`"]
        pub type AFRH10_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH10`"]
        pub struct AFRH10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH9_A = AFRH15_A;
        #[doc = "Reader of field `AFRH9`"]
        pub type AFRH9_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH9`"]
        pub struct AFRH9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH8_A = AFRH15_A;
        #[doc = "Reader of field `AFRH8`"]
        pub type AFRH8_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH8`"]
        pub struct AFRH8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh15(&self) -> AFRH15_R {
                AFRH15_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh14(&self) -> AFRH14_R {
                AFRH14_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh13(&self) -> AFRH13_R {
                AFRH13_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh12(&self) -> AFRH12_R {
                AFRH12_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh11(&self) -> AFRH11_R {
                AFRH11_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh10(&self) -> AFRH10_R {
                AFRH10_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh9(&self) -> AFRH9_R {
                AFRH9_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh8(&self) -> AFRH8_R {
                AFRH8_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh15(&mut self) -> AFRH15_W {
                AFRH15_W { w: self }
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh14(&mut self) -> AFRH14_W {
                AFRH14_W { w: self }
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh13(&mut self) -> AFRH13_W {
                AFRH13_W { w: self }
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh12(&mut self) -> AFRH12_W {
                AFRH12_W { w: self }
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh11(&mut self) -> AFRH11_W {
                AFRH11_W { w: self }
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh10(&mut self) -> AFRH10_W {
                AFRH10_W { w: self }
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh9(&mut self) -> AFRH9_W {
                AFRH9_W { w: self }
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh8(&mut self) -> AFRH8_W {
                AFRH8_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOB {}
impl GPIOB {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpiob::RegisterBlock {
        0x4002_0400 as *const _
    }
}
impl Deref for GPIOB {
    type Target = gpiob::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOB::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpiob {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - GPIO port mode register"]
        pub moder: MODER,
        #[doc = "0x04 - GPIO port output type register"]
        pub otyper: OTYPER,
        #[doc = "0x08 - GPIO port output speed register"]
        pub ospeedr: OSPEEDR,
        #[doc = "0x0c - GPIO port pull-up/pull-down register"]
        pub pupdr: PUPDR,
        #[doc = "0x10 - GPIO port input data register"]
        pub idr: IDR,
        #[doc = "0x14 - GPIO port output data register"]
        pub odr: ODR,
        #[doc = "0x18 - GPIO port bit set/reset register"]
        pub bsrr: BSRR,
        #[doc = "0x1c - GPIO port configuration lock register"]
        pub lckr: LCKR,
        #[doc = "0x20 - AFRL"]
        pub afrl: AFRL,
        #[doc = "0x24 - GPIO alternate function high register"]
        pub afrh: AFRH,
    }
    #[doc = "GPIO port mode register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [moder](moder) module"]
    pub type MODER = crate::Reg<u32, _MODER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MODER;
    #[doc = "`read()` method returns [moder::R](moder::R) reader structure"]
    impl crate::Readable for MODER {}
    #[doc = "`write(|w| ..)` method takes [moder::W](moder::W) writer structure"]
    impl crate::Writable for MODER {}
    #[doc = "GPIO port mode register"]
    pub mod moder {
        #[doc = "Reader of register MODER"]
        pub type R = crate::R<u32, super::MODER>;
        #[doc = "Writer for register MODER"]
        pub type W = crate::W<u32, super::MODER>;
        #[doc = "Register MODER `reset()`'s with value 0x0280"]
        impl crate::ResetValue for super::MODER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0280
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MODER15_A {
            #[doc = "0: Input mode (reset state)"]
            INPUT = 0,
            #[doc = "1: General purpose output mode"]
            OUTPUT = 1,
            #[doc = "2: Alternate function mode"]
            ALTERNATE = 2,
            #[doc = "3: Analog mode"]
            ANALOG = 3,
        }
        impl From<MODER15_A> for u8 {
            #[inline(always)]
            fn from(variant: MODER15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MODER15`"]
        pub type MODER15_R = crate::R<u8, MODER15_A>;
        impl MODER15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MODER15_A {
                match self.bits {
                    0 => MODER15_A::INPUT,
                    1 => MODER15_A::OUTPUT,
                    2 => MODER15_A::ALTERNATE,
                    3 => MODER15_A::ANALOG,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                *self == MODER15_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == MODER15_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `ALTERNATE`"]
            #[inline(always)]
            pub fn is_alternate(&self) -> bool {
                *self == MODER15_A::ALTERNATE
            }
            #[doc = "Checks if the value of the field is `ANALOG`"]
            #[inline(always)]
            pub fn is_analog(&self) -> bool {
                *self == MODER15_A::ANALOG
            }
        }
        #[doc = "Write proxy for field `MODER15`"]
        pub struct MODER15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER14_A = MODER15_A;
        #[doc = "Reader of field `MODER14`"]
        pub type MODER14_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER14`"]
        pub struct MODER14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER13_A = MODER15_A;
        #[doc = "Reader of field `MODER13`"]
        pub type MODER13_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER13`"]
        pub struct MODER13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER12_A = MODER15_A;
        #[doc = "Reader of field `MODER12`"]
        pub type MODER12_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER12`"]
        pub struct MODER12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER11_A = MODER15_A;
        #[doc = "Reader of field `MODER11`"]
        pub type MODER11_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER11`"]
        pub struct MODER11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER10_A = MODER15_A;
        #[doc = "Reader of field `MODER10`"]
        pub type MODER10_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER10`"]
        pub struct MODER10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER9_A = MODER15_A;
        #[doc = "Reader of field `MODER9`"]
        pub type MODER9_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER9`"]
        pub struct MODER9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER8_A = MODER15_A;
        #[doc = "Reader of field `MODER8`"]
        pub type MODER8_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER8`"]
        pub struct MODER8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER7_A = MODER15_A;
        #[doc = "Reader of field `MODER7`"]
        pub type MODER7_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER7`"]
        pub struct MODER7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER6_A = MODER15_A;
        #[doc = "Reader of field `MODER6`"]
        pub type MODER6_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER6`"]
        pub struct MODER6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER5_A = MODER15_A;
        #[doc = "Reader of field `MODER5`"]
        pub type MODER5_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER5`"]
        pub struct MODER5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER4_A = MODER15_A;
        #[doc = "Reader of field `MODER4`"]
        pub type MODER4_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER4`"]
        pub struct MODER4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER3_A = MODER15_A;
        #[doc = "Reader of field `MODER3`"]
        pub type MODER3_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER3`"]
        pub struct MODER3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER2_A = MODER15_A;
        #[doc = "Reader of field `MODER2`"]
        pub type MODER2_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER2`"]
        pub struct MODER2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER1_A = MODER15_A;
        #[doc = "Reader of field `MODER1`"]
        pub type MODER1_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER1`"]
        pub struct MODER1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER0_A = MODER15_A;
        #[doc = "Reader of field `MODER0`"]
        pub type MODER0_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER0`"]
        pub struct MODER0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder15(&self) -> MODER15_R {
                MODER15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder14(&self) -> MODER14_R {
                MODER14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder13(&self) -> MODER13_R {
                MODER13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder12(&self) -> MODER12_R {
                MODER12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder11(&self) -> MODER11_R {
                MODER11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder10(&self) -> MODER10_R {
                MODER10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder9(&self) -> MODER9_R {
                MODER9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder8(&self) -> MODER8_R {
                MODER8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder7(&self) -> MODER7_R {
                MODER7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder6(&self) -> MODER6_R {
                MODER6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder5(&self) -> MODER5_R {
                MODER5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder4(&self) -> MODER4_R {
                MODER4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder3(&self) -> MODER3_R {
                MODER3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder2(&self) -> MODER2_R {
                MODER2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder1(&self) -> MODER1_R {
                MODER1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder0(&self) -> MODER0_R {
                MODER0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder15(&mut self) -> MODER15_W {
                MODER15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder14(&mut self) -> MODER14_W {
                MODER14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder13(&mut self) -> MODER13_W {
                MODER13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder12(&mut self) -> MODER12_W {
                MODER12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder11(&mut self) -> MODER11_W {
                MODER11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder10(&mut self) -> MODER10_W {
                MODER10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder9(&mut self) -> MODER9_W {
                MODER9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder8(&mut self) -> MODER8_W {
                MODER8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder7(&mut self) -> MODER7_W {
                MODER7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder6(&mut self) -> MODER6_W {
                MODER6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder5(&mut self) -> MODER5_W {
                MODER5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder4(&mut self) -> MODER4_W {
                MODER4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder3(&mut self) -> MODER3_W {
                MODER3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder2(&mut self) -> MODER2_W {
                MODER2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder1(&mut self) -> MODER1_W {
                MODER1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder0(&mut self) -> MODER0_W {
                MODER0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port output type register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [otyper](otyper) module"]
    pub type OTYPER = crate::Reg<u32, _OTYPER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OTYPER;
    #[doc = "`read()` method returns [otyper::R](otyper::R) reader structure"]
    impl crate::Readable for OTYPER {}
    #[doc = "`write(|w| ..)` method takes [otyper::W](otyper::W) writer structure"]
    impl crate::Writable for OTYPER {}
    #[doc = "GPIO port output type register"]
    pub mod otyper {
        #[doc = "Reader of register OTYPER"]
        pub type R = crate::R<u32, super::OTYPER>;
        #[doc = "Writer for register OTYPER"]
        pub type W = crate::W<u32, super::OTYPER>;
        #[doc = "Register OTYPER `reset()`'s with value 0"]
        impl crate::ResetValue for super::OTYPER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OT15_A {
            #[doc = "0: Output push-pull (reset state)"]
            PUSHPULL = 0,
            #[doc = "1: Output open-drain"]
            OPENDRAIN = 1,
        }
        impl From<OT15_A> for bool {
            #[inline(always)]
            fn from(variant: OT15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OT15`"]
        pub type OT15_R = crate::R<bool, OT15_A>;
        impl OT15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OT15_A {
                match self.bits {
                    false => OT15_A::PUSHPULL,
                    true => OT15_A::OPENDRAIN,
                }
            }
            #[doc = "Checks if the value of the field is `PUSHPULL`"]
            #[inline(always)]
            pub fn is_push_pull(&self) -> bool {
                *self == OT15_A::PUSHPULL
            }
            #[doc = "Checks if the value of the field is `OPENDRAIN`"]
            #[inline(always)]
            pub fn is_open_drain(&self) -> bool {
                *self == OT15_A::OPENDRAIN
            }
        }
        #[doc = "Write proxy for field `OT15`"]
        pub struct OT15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT14_A = OT15_A;
        #[doc = "Reader of field `OT14`"]
        pub type OT14_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT14`"]
        pub struct OT14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT13_A = OT15_A;
        #[doc = "Reader of field `OT13`"]
        pub type OT13_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT13`"]
        pub struct OT13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT12_A = OT15_A;
        #[doc = "Reader of field `OT12`"]
        pub type OT12_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT12`"]
        pub struct OT12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT11_A = OT15_A;
        #[doc = "Reader of field `OT11`"]
        pub type OT11_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT11`"]
        pub struct OT11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT10_A = OT15_A;
        #[doc = "Reader of field `OT10`"]
        pub type OT10_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT10`"]
        pub struct OT10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT9_A = OT15_A;
        #[doc = "Reader of field `OT9`"]
        pub type OT9_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT9`"]
        pub struct OT9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT8_A = OT15_A;
        #[doc = "Reader of field `OT8`"]
        pub type OT8_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT8`"]
        pub struct OT8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT7_A = OT15_A;
        #[doc = "Reader of field `OT7`"]
        pub type OT7_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT7`"]
        pub struct OT7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT6_A = OT15_A;
        #[doc = "Reader of field `OT6`"]
        pub type OT6_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT6`"]
        pub struct OT6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT5_A = OT15_A;
        #[doc = "Reader of field `OT5`"]
        pub type OT5_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT5`"]
        pub struct OT5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT4_A = OT15_A;
        #[doc = "Reader of field `OT4`"]
        pub type OT4_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT4`"]
        pub struct OT4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT3_A = OT15_A;
        #[doc = "Reader of field `OT3`"]
        pub type OT3_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT3`"]
        pub struct OT3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT2_A = OT15_A;
        #[doc = "Reader of field `OT2`"]
        pub type OT2_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT2`"]
        pub struct OT2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT1_A = OT15_A;
        #[doc = "Reader of field `OT1`"]
        pub type OT1_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT1`"]
        pub struct OT1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT0_A = OT15_A;
        #[doc = "Reader of field `OT0`"]
        pub type OT0_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT0`"]
        pub struct OT0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot15(&self) -> OT15_R {
                OT15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot14(&self) -> OT14_R {
                OT14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot13(&self) -> OT13_R {
                OT13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot12(&self) -> OT12_R {
                OT12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot11(&self) -> OT11_R {
                OT11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot10(&self) -> OT10_R {
                OT10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot9(&self) -> OT9_R {
                OT9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot8(&self) -> OT8_R {
                OT8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot7(&self) -> OT7_R {
                OT7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot6(&self) -> OT6_R {
                OT6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot5(&self) -> OT5_R {
                OT5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot4(&self) -> OT4_R {
                OT4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot3(&self) -> OT3_R {
                OT3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot2(&self) -> OT2_R {
                OT2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot1(&self) -> OT1_R {
                OT1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot0(&self) -> OT0_R {
                OT0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot15(&mut self) -> OT15_W {
                OT15_W { w: self }
            }
            #[doc = "Bit 14 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot14(&mut self) -> OT14_W {
                OT14_W { w: self }
            }
            #[doc = "Bit 13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot13(&mut self) -> OT13_W {
                OT13_W { w: self }
            }
            #[doc = "Bit 12 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot12(&mut self) -> OT12_W {
                OT12_W { w: self }
            }
            #[doc = "Bit 11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot11(&mut self) -> OT11_W {
                OT11_W { w: self }
            }
            #[doc = "Bit 10 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot10(&mut self) -> OT10_W {
                OT10_W { w: self }
            }
            #[doc = "Bit 9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot9(&mut self) -> OT9_W {
                OT9_W { w: self }
            }
            #[doc = "Bit 8 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot8(&mut self) -> OT8_W {
                OT8_W { w: self }
            }
            #[doc = "Bit 7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot7(&mut self) -> OT7_W {
                OT7_W { w: self }
            }
            #[doc = "Bit 6 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot6(&mut self) -> OT6_W {
                OT6_W { w: self }
            }
            #[doc = "Bit 5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot5(&mut self) -> OT5_W {
                OT5_W { w: self }
            }
            #[doc = "Bit 4 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot4(&mut self) -> OT4_W {
                OT4_W { w: self }
            }
            #[doc = "Bit 3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot3(&mut self) -> OT3_W {
                OT3_W { w: self }
            }
            #[doc = "Bit 2 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot2(&mut self) -> OT2_W {
                OT2_W { w: self }
            }
            #[doc = "Bit 1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot1(&mut self) -> OT1_W {
                OT1_W { w: self }
            }
            #[doc = "Bit 0 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot0(&mut self) -> OT0_W {
                OT0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port output speed register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ospeedr](ospeedr) module"]
    pub type OSPEEDR = crate::Reg<u32, _OSPEEDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OSPEEDR;
    #[doc = "`read()` method returns [ospeedr::R](ospeedr::R) reader structure"]
    impl crate::Readable for OSPEEDR {}
    #[doc = "`write(|w| ..)` method takes [ospeedr::W](ospeedr::W) writer structure"]
    impl crate::Writable for OSPEEDR {}
    #[doc = "GPIO port output speed register"]
    pub mod ospeedr {
        #[doc = "Reader of register OSPEEDR"]
        pub type R = crate::R<u32, super::OSPEEDR>;
        #[doc = "Writer for register OSPEEDR"]
        pub type W = crate::W<u32, super::OSPEEDR>;
        #[doc = "Register OSPEEDR `reset()`'s with value 0xc0"]
        impl crate::ResetValue for super::OSPEEDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xc0
            }
        }
        #[doc = "OSPEEDR15\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OSPEEDR15_A {
            #[doc = "0: Low speed"]
            LOWSPEED = 0,
            #[doc = "1: Medium speed"]
            MEDIUMSPEED = 1,
            #[doc = "2: High speed"]
            HIGHSPEED = 2,
            #[doc = "3: Very high speed"]
            VERYHIGHSPEED = 3,
        }
        impl From<OSPEEDR15_A> for u8 {
            #[inline(always)]
            fn from(variant: OSPEEDR15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `OSPEEDR15`"]
        pub type OSPEEDR15_R = crate::R<u8, OSPEEDR15_A>;
        impl OSPEEDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OSPEEDR15_A {
                match self.bits {
                    0 => OSPEEDR15_A::LOWSPEED,
                    1 => OSPEEDR15_A::MEDIUMSPEED,
                    2 => OSPEEDR15_A::HIGHSPEED,
                    3 => OSPEEDR15_A::VERYHIGHSPEED,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `LOWSPEED`"]
            #[inline(always)]
            pub fn is_low_speed(&self) -> bool {
                *self == OSPEEDR15_A::LOWSPEED
            }
            #[doc = "Checks if the value of the field is `MEDIUMSPEED`"]
            #[inline(always)]
            pub fn is_medium_speed(&self) -> bool {
                *self == OSPEEDR15_A::MEDIUMSPEED
            }
            #[doc = "Checks if the value of the field is `HIGHSPEED`"]
            #[inline(always)]
            pub fn is_high_speed(&self) -> bool {
                *self == OSPEEDR15_A::HIGHSPEED
            }
            #[doc = "Checks if the value of the field is `VERYHIGHSPEED`"]
            #[inline(always)]
            pub fn is_very_high_speed(&self) -> bool {
                *self == OSPEEDR15_A::VERYHIGHSPEED
            }
        }
        #[doc = "Write proxy for field `OSPEEDR15`"]
        pub struct OSPEEDR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "OSPEEDR14"]
        pub type OSPEEDR14_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR14`"]
        pub type OSPEEDR14_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR14`"]
        pub struct OSPEEDR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "OSPEEDR13"]
        pub type OSPEEDR13_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR13`"]
        pub type OSPEEDR13_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR13`"]
        pub struct OSPEEDR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "OSPEEDR12"]
        pub type OSPEEDR12_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR12`"]
        pub type OSPEEDR12_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR12`"]
        pub struct OSPEEDR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "OSPEEDR11"]
        pub type OSPEEDR11_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR11`"]
        pub type OSPEEDR11_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR11`"]
        pub struct OSPEEDR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "OSPEEDR10"]
        pub type OSPEEDR10_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR10`"]
        pub type OSPEEDR10_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR10`"]
        pub struct OSPEEDR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "OSPEEDR9"]
        pub type OSPEEDR9_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR9`"]
        pub type OSPEEDR9_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR9`"]
        pub struct OSPEEDR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "OSPEEDR8"]
        pub type OSPEEDR8_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR8`"]
        pub type OSPEEDR8_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR8`"]
        pub struct OSPEEDR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "OSPEEDR7"]
        pub type OSPEEDR7_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR7`"]
        pub type OSPEEDR7_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR7`"]
        pub struct OSPEEDR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "OSPEEDR6"]
        pub type OSPEEDR6_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR6`"]
        pub type OSPEEDR6_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR6`"]
        pub struct OSPEEDR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "OSPEEDR5"]
        pub type OSPEEDR5_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR5`"]
        pub type OSPEEDR5_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR5`"]
        pub struct OSPEEDR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "OSPEEDR4"]
        pub type OSPEEDR4_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR4`"]
        pub type OSPEEDR4_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR4`"]
        pub struct OSPEEDR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "OSPEEDR3"]
        pub type OSPEEDR3_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR3`"]
        pub type OSPEEDR3_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR3`"]
        pub struct OSPEEDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "OSPEEDR2"]
        pub type OSPEEDR2_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR2`"]
        pub type OSPEEDR2_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR2`"]
        pub struct OSPEEDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "OSPEEDR1"]
        pub type OSPEEDR1_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR1`"]
        pub type OSPEEDR1_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR1`"]
        pub struct OSPEEDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "OSPEEDR0"]
        pub type OSPEEDR0_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR0`"]
        pub type OSPEEDR0_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR0`"]
        pub struct OSPEEDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - OSPEEDR15"]
            #[inline(always)]
            pub fn ospeedr15(&self) -> OSPEEDR15_R {
                OSPEEDR15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - OSPEEDR14"]
            #[inline(always)]
            pub fn ospeedr14(&self) -> OSPEEDR14_R {
                OSPEEDR14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - OSPEEDR13"]
            #[inline(always)]
            pub fn ospeedr13(&self) -> OSPEEDR13_R {
                OSPEEDR13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - OSPEEDR12"]
            #[inline(always)]
            pub fn ospeedr12(&self) -> OSPEEDR12_R {
                OSPEEDR12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - OSPEEDR11"]
            #[inline(always)]
            pub fn ospeedr11(&self) -> OSPEEDR11_R {
                OSPEEDR11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - OSPEEDR10"]
            #[inline(always)]
            pub fn ospeedr10(&self) -> OSPEEDR10_R {
                OSPEEDR10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - OSPEEDR9"]
            #[inline(always)]
            pub fn ospeedr9(&self) -> OSPEEDR9_R {
                OSPEEDR9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - OSPEEDR8"]
            #[inline(always)]
            pub fn ospeedr8(&self) -> OSPEEDR8_R {
                OSPEEDR8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - OSPEEDR7"]
            #[inline(always)]
            pub fn ospeedr7(&self) -> OSPEEDR7_R {
                OSPEEDR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - OSPEEDR6"]
            #[inline(always)]
            pub fn ospeedr6(&self) -> OSPEEDR6_R {
                OSPEEDR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - OSPEEDR5"]
            #[inline(always)]
            pub fn ospeedr5(&self) -> OSPEEDR5_R {
                OSPEEDR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - OSPEEDR4"]
            #[inline(always)]
            pub fn ospeedr4(&self) -> OSPEEDR4_R {
                OSPEEDR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - OSPEEDR3"]
            #[inline(always)]
            pub fn ospeedr3(&self) -> OSPEEDR3_R {
                OSPEEDR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - OSPEEDR2"]
            #[inline(always)]
            pub fn ospeedr2(&self) -> OSPEEDR2_R {
                OSPEEDR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - OSPEEDR1"]
            #[inline(always)]
            pub fn ospeedr1(&self) -> OSPEEDR1_R {
                OSPEEDR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - OSPEEDR0"]
            #[inline(always)]
            pub fn ospeedr0(&self) -> OSPEEDR0_R {
                OSPEEDR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - OSPEEDR15"]
            #[inline(always)]
            pub fn ospeedr15(&mut self) -> OSPEEDR15_W {
                OSPEEDR15_W { w: self }
            }
            #[doc = "Bits 28:29 - OSPEEDR14"]
            #[inline(always)]
            pub fn ospeedr14(&mut self) -> OSPEEDR14_W {
                OSPEEDR14_W { w: self }
            }
            #[doc = "Bits 26:27 - OSPEEDR13"]
            #[inline(always)]
            pub fn ospeedr13(&mut self) -> OSPEEDR13_W {
                OSPEEDR13_W { w: self }
            }
            #[doc = "Bits 24:25 - OSPEEDR12"]
            #[inline(always)]
            pub fn ospeedr12(&mut self) -> OSPEEDR12_W {
                OSPEEDR12_W { w: self }
            }
            #[doc = "Bits 22:23 - OSPEEDR11"]
            #[inline(always)]
            pub fn ospeedr11(&mut self) -> OSPEEDR11_W {
                OSPEEDR11_W { w: self }
            }
            #[doc = "Bits 20:21 - OSPEEDR10"]
            #[inline(always)]
            pub fn ospeedr10(&mut self) -> OSPEEDR10_W {
                OSPEEDR10_W { w: self }
            }
            #[doc = "Bits 18:19 - OSPEEDR9"]
            #[inline(always)]
            pub fn ospeedr9(&mut self) -> OSPEEDR9_W {
                OSPEEDR9_W { w: self }
            }
            #[doc = "Bits 16:17 - OSPEEDR8"]
            #[inline(always)]
            pub fn ospeedr8(&mut self) -> OSPEEDR8_W {
                OSPEEDR8_W { w: self }
            }
            #[doc = "Bits 14:15 - OSPEEDR7"]
            #[inline(always)]
            pub fn ospeedr7(&mut self) -> OSPEEDR7_W {
                OSPEEDR7_W { w: self }
            }
            #[doc = "Bits 12:13 - OSPEEDR6"]
            #[inline(always)]
            pub fn ospeedr6(&mut self) -> OSPEEDR6_W {
                OSPEEDR6_W { w: self }
            }
            #[doc = "Bits 10:11 - OSPEEDR5"]
            #[inline(always)]
            pub fn ospeedr5(&mut self) -> OSPEEDR5_W {
                OSPEEDR5_W { w: self }
            }
            #[doc = "Bits 8:9 - OSPEEDR4"]
            #[inline(always)]
            pub fn ospeedr4(&mut self) -> OSPEEDR4_W {
                OSPEEDR4_W { w: self }
            }
            #[doc = "Bits 6:7 - OSPEEDR3"]
            #[inline(always)]
            pub fn ospeedr3(&mut self) -> OSPEEDR3_W {
                OSPEEDR3_W { w: self }
            }
            #[doc = "Bits 4:5 - OSPEEDR2"]
            #[inline(always)]
            pub fn ospeedr2(&mut self) -> OSPEEDR2_W {
                OSPEEDR2_W { w: self }
            }
            #[doc = "Bits 2:3 - OSPEEDR1"]
            #[inline(always)]
            pub fn ospeedr1(&mut self) -> OSPEEDR1_W {
                OSPEEDR1_W { w: self }
            }
            #[doc = "Bits 0:1 - OSPEEDR0"]
            #[inline(always)]
            pub fn ospeedr0(&mut self) -> OSPEEDR0_W {
                OSPEEDR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port pull-up/pull-down register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pupdr](pupdr) module"]
    pub type PUPDR = crate::Reg<u32, _PUPDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PUPDR;
    #[doc = "`read()` method returns [pupdr::R](pupdr::R) reader structure"]
    impl crate::Readable for PUPDR {}
    #[doc = "`write(|w| ..)` method takes [pupdr::W](pupdr::W) writer structure"]
    impl crate::Writable for PUPDR {}
    #[doc = "GPIO port pull-up/pull-down register"]
    pub mod pupdr {
        #[doc = "Reader of register PUPDR"]
        pub type R = crate::R<u32, super::PUPDR>;
        #[doc = "Writer for register PUPDR"]
        pub type W = crate::W<u32, super::PUPDR>;
        #[doc = "Register PUPDR `reset()`'s with value 0x0100"]
        impl crate::ResetValue for super::PUPDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0100
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PUPDR15_A {
            #[doc = "0: No pull-up, pull-down"]
            FLOATING = 0,
            #[doc = "1: Pull-up"]
            PULLUP = 1,
            #[doc = "2: Pull-down"]
            PULLDOWN = 2,
        }
        impl From<PUPDR15_A> for u8 {
            #[inline(always)]
            fn from(variant: PUPDR15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PUPDR15`"]
        pub type PUPDR15_R = crate::R<u8, PUPDR15_A>;
        impl PUPDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, PUPDR15_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(PUPDR15_A::FLOATING),
                    1 => Val(PUPDR15_A::PULLUP),
                    2 => Val(PUPDR15_A::PULLDOWN),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `FLOATING`"]
            #[inline(always)]
            pub fn is_floating(&self) -> bool {
                *self == PUPDR15_A::FLOATING
            }
            #[doc = "Checks if the value of the field is `PULLUP`"]
            #[inline(always)]
            pub fn is_pull_up(&self) -> bool {
                *self == PUPDR15_A::PULLUP
            }
            #[doc = "Checks if the value of the field is `PULLDOWN`"]
            #[inline(always)]
            pub fn is_pull_down(&self) -> bool {
                *self == PUPDR15_A::PULLDOWN
            }
        }
        #[doc = "Write proxy for field `PUPDR15`"]
        pub struct PUPDR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR15_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR14_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR14`"]
        pub type PUPDR14_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR14`"]
        pub struct PUPDR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR14_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR13_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR13`"]
        pub type PUPDR13_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR13`"]
        pub struct PUPDR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR13_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR12_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR12`"]
        pub type PUPDR12_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR12`"]
        pub struct PUPDR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR12_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR11_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR11`"]
        pub type PUPDR11_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR11`"]
        pub struct PUPDR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR11_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR10_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR10`"]
        pub type PUPDR10_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR10`"]
        pub struct PUPDR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR10_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR9_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR9`"]
        pub type PUPDR9_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR9`"]
        pub struct PUPDR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR9_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR8_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR8`"]
        pub type PUPDR8_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR8`"]
        pub struct PUPDR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR8_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR7_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR7`"]
        pub type PUPDR7_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR7`"]
        pub struct PUPDR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR7_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR6_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR6`"]
        pub type PUPDR6_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR6`"]
        pub struct PUPDR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR6_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR5_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR5`"]
        pub type PUPDR5_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR5`"]
        pub struct PUPDR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR5_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR4_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR4`"]
        pub type PUPDR4_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR4`"]
        pub struct PUPDR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR4_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR3_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR3`"]
        pub type PUPDR3_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR3`"]
        pub struct PUPDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR3_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR2_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR2`"]
        pub type PUPDR2_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR2`"]
        pub struct PUPDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR2_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR1_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR1`"]
        pub type PUPDR1_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR1`"]
        pub struct PUPDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR1_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR0_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR0`"]
        pub type PUPDR0_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR0`"]
        pub struct PUPDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR0_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr15(&self) -> PUPDR15_R {
                PUPDR15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr14(&self) -> PUPDR14_R {
                PUPDR14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr13(&self) -> PUPDR13_R {
                PUPDR13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr12(&self) -> PUPDR12_R {
                PUPDR12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr11(&self) -> PUPDR11_R {
                PUPDR11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr10(&self) -> PUPDR10_R {
                PUPDR10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr9(&self) -> PUPDR9_R {
                PUPDR9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr8(&self) -> PUPDR8_R {
                PUPDR8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr7(&self) -> PUPDR7_R {
                PUPDR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr6(&self) -> PUPDR6_R {
                PUPDR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr5(&self) -> PUPDR5_R {
                PUPDR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr4(&self) -> PUPDR4_R {
                PUPDR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr3(&self) -> PUPDR3_R {
                PUPDR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr2(&self) -> PUPDR2_R {
                PUPDR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr1(&self) -> PUPDR1_R {
                PUPDR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr0(&self) -> PUPDR0_R {
                PUPDR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr15(&mut self) -> PUPDR15_W {
                PUPDR15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr14(&mut self) -> PUPDR14_W {
                PUPDR14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr13(&mut self) -> PUPDR13_W {
                PUPDR13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr12(&mut self) -> PUPDR12_W {
                PUPDR12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr11(&mut self) -> PUPDR11_W {
                PUPDR11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr10(&mut self) -> PUPDR10_W {
                PUPDR10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr9(&mut self) -> PUPDR9_W {
                PUPDR9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr8(&mut self) -> PUPDR8_W {
                PUPDR8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr7(&mut self) -> PUPDR7_W {
                PUPDR7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr6(&mut self) -> PUPDR6_W {
                PUPDR6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr5(&mut self) -> PUPDR5_W {
                PUPDR5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr4(&mut self) -> PUPDR4_W {
                PUPDR4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr3(&mut self) -> PUPDR3_W {
                PUPDR3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr2(&mut self) -> PUPDR2_W {
                PUPDR2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr1(&mut self) -> PUPDR1_W {
                PUPDR1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr0(&mut self) -> PUPDR0_W {
                PUPDR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port input data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idr](idr) module"]
    pub type IDR = crate::Reg<u32, _IDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IDR;
    #[doc = "`read()` method returns [idr::R](idr::R) reader structure"]
    impl crate::Readable for IDR {}
    #[doc = "GPIO port input data register"]
    pub mod idr {
        #[doc = "Reader of register IDR"]
        pub type R = crate::R<u32, super::IDR>;
        #[doc = "Port input data (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IDR15_A {
            #[doc = "1: Input is logic high"]
            HIGH = 1,
            #[doc = "0: Input is logic low"]
            LOW = 0,
        }
        impl From<IDR15_A> for bool {
            #[inline(always)]
            fn from(variant: IDR15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IDR15`"]
        pub type IDR15_R = crate::R<bool, IDR15_A>;
        impl IDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IDR15_A {
                match self.bits {
                    true => IDR15_A::HIGH,
                    false => IDR15_A::LOW,
                }
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == IDR15_A::HIGH
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == IDR15_A::LOW
            }
        }
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR14_A = IDR15_A;
        #[doc = "Reader of field `IDR14`"]
        pub type IDR14_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR13_A = IDR15_A;
        #[doc = "Reader of field `IDR13`"]
        pub type IDR13_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR12_A = IDR15_A;
        #[doc = "Reader of field `IDR12`"]
        pub type IDR12_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR11_A = IDR15_A;
        #[doc = "Reader of field `IDR11`"]
        pub type IDR11_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR10_A = IDR15_A;
        #[doc = "Reader of field `IDR10`"]
        pub type IDR10_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR9_A = IDR15_A;
        #[doc = "Reader of field `IDR9`"]
        pub type IDR9_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR8_A = IDR15_A;
        #[doc = "Reader of field `IDR8`"]
        pub type IDR8_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR7_A = IDR15_A;
        #[doc = "Reader of field `IDR7`"]
        pub type IDR7_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR6_A = IDR15_A;
        #[doc = "Reader of field `IDR6`"]
        pub type IDR6_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR5_A = IDR15_A;
        #[doc = "Reader of field `IDR5`"]
        pub type IDR5_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR4_A = IDR15_A;
        #[doc = "Reader of field `IDR4`"]
        pub type IDR4_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR3_A = IDR15_A;
        #[doc = "Reader of field `IDR3`"]
        pub type IDR3_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR2_A = IDR15_A;
        #[doc = "Reader of field `IDR2`"]
        pub type IDR2_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR1_A = IDR15_A;
        #[doc = "Reader of field `IDR1`"]
        pub type IDR1_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR0_A = IDR15_A;
        #[doc = "Reader of field `IDR0`"]
        pub type IDR0_R = crate::R<bool, IDR15_A>;
        impl R {
            #[doc = "Bit 15 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr15(&self) -> IDR15_R {
                IDR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr14(&self) -> IDR14_R {
                IDR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr13(&self) -> IDR13_R {
                IDR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr12(&self) -> IDR12_R {
                IDR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr11(&self) -> IDR11_R {
                IDR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr10(&self) -> IDR10_R {
                IDR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr9(&self) -> IDR9_R {
                IDR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr8(&self) -> IDR8_R {
                IDR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr7(&self) -> IDR7_R {
                IDR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr6(&self) -> IDR6_R {
                IDR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr5(&self) -> IDR5_R {
                IDR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr4(&self) -> IDR4_R {
                IDR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr3(&self) -> IDR3_R {
                IDR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr2(&self) -> IDR2_R {
                IDR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr1(&self) -> IDR1_R {
                IDR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr0(&self) -> IDR0_R {
                IDR0_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "GPIO port output data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [odr](odr) module"]
    pub type ODR = crate::Reg<u32, _ODR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ODR;
    #[doc = "`read()` method returns [odr::R](odr::R) reader structure"]
    impl crate::Readable for ODR {}
    #[doc = "`write(|w| ..)` method takes [odr::W](odr::W) writer structure"]
    impl crate::Writable for ODR {}
    #[doc = "GPIO port output data register"]
    pub mod odr {
        #[doc = "Reader of register ODR"]
        pub type R = crate::R<u32, super::ODR>;
        #[doc = "Writer for register ODR"]
        pub type W = crate::W<u32, super::ODR>;
        #[doc = "Register ODR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ODR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port output data (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ODR15_A {
            #[doc = "1: Set output to logic high"]
            HIGH = 1,
            #[doc = "0: Set output to logic low"]
            LOW = 0,
        }
        impl From<ODR15_A> for bool {
            #[inline(always)]
            fn from(variant: ODR15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ODR15`"]
        pub type ODR15_R = crate::R<bool, ODR15_A>;
        impl ODR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ODR15_A {
                match self.bits {
                    true => ODR15_A::HIGH,
                    false => ODR15_A::LOW,
                }
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == ODR15_A::HIGH
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == ODR15_A::LOW
            }
        }
        #[doc = "Write proxy for field `ODR15`"]
        pub struct ODR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR14_A = ODR15_A;
        #[doc = "Reader of field `ODR14`"]
        pub type ODR14_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR14`"]
        pub struct ODR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR13_A = ODR15_A;
        #[doc = "Reader of field `ODR13`"]
        pub type ODR13_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR13`"]
        pub struct ODR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR12_A = ODR15_A;
        #[doc = "Reader of field `ODR12`"]
        pub type ODR12_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR12`"]
        pub struct ODR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR11_A = ODR15_A;
        #[doc = "Reader of field `ODR11`"]
        pub type ODR11_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR11`"]
        pub struct ODR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR10_A = ODR15_A;
        #[doc = "Reader of field `ODR10`"]
        pub type ODR10_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR10`"]
        pub struct ODR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR9_A = ODR15_A;
        #[doc = "Reader of field `ODR9`"]
        pub type ODR9_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR9`"]
        pub struct ODR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR8_A = ODR15_A;
        #[doc = "Reader of field `ODR8`"]
        pub type ODR8_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR8`"]
        pub struct ODR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR7_A = ODR15_A;
        #[doc = "Reader of field `ODR7`"]
        pub type ODR7_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR7`"]
        pub struct ODR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR6_A = ODR15_A;
        #[doc = "Reader of field `ODR6`"]
        pub type ODR6_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR6`"]
        pub struct ODR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR5_A = ODR15_A;
        #[doc = "Reader of field `ODR5`"]
        pub type ODR5_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR5`"]
        pub struct ODR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR4_A = ODR15_A;
        #[doc = "Reader of field `ODR4`"]
        pub type ODR4_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR4`"]
        pub struct ODR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR3_A = ODR15_A;
        #[doc = "Reader of field `ODR3`"]
        pub type ODR3_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR3`"]
        pub struct ODR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR2_A = ODR15_A;
        #[doc = "Reader of field `ODR2`"]
        pub type ODR2_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR2`"]
        pub struct ODR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR1_A = ODR15_A;
        #[doc = "Reader of field `ODR1`"]
        pub type ODR1_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR1`"]
        pub struct ODR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR0_A = ODR15_A;
        #[doc = "Reader of field `ODR0`"]
        pub type ODR0_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR0`"]
        pub struct ODR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr15(&self) -> ODR15_R {
                ODR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr14(&self) -> ODR14_R {
                ODR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr13(&self) -> ODR13_R {
                ODR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr12(&self) -> ODR12_R {
                ODR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr11(&self) -> ODR11_R {
                ODR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr10(&self) -> ODR10_R {
                ODR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr9(&self) -> ODR9_R {
                ODR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr8(&self) -> ODR8_R {
                ODR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr7(&self) -> ODR7_R {
                ODR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr6(&self) -> ODR6_R {
                ODR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr5(&self) -> ODR5_R {
                ODR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr4(&self) -> ODR4_R {
                ODR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr3(&self) -> ODR3_R {
                ODR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr2(&self) -> ODR2_R {
                ODR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr1(&self) -> ODR1_R {
                ODR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr0(&self) -> ODR0_R {
                ODR0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr15(&mut self) -> ODR15_W {
                ODR15_W { w: self }
            }
            #[doc = "Bit 14 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr14(&mut self) -> ODR14_W {
                ODR14_W { w: self }
            }
            #[doc = "Bit 13 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr13(&mut self) -> ODR13_W {
                ODR13_W { w: self }
            }
            #[doc = "Bit 12 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr12(&mut self) -> ODR12_W {
                ODR12_W { w: self }
            }
            #[doc = "Bit 11 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr11(&mut self) -> ODR11_W {
                ODR11_W { w: self }
            }
            #[doc = "Bit 10 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr10(&mut self) -> ODR10_W {
                ODR10_W { w: self }
            }
            #[doc = "Bit 9 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr9(&mut self) -> ODR9_W {
                ODR9_W { w: self }
            }
            #[doc = "Bit 8 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr8(&mut self) -> ODR8_W {
                ODR8_W { w: self }
            }
            #[doc = "Bit 7 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr7(&mut self) -> ODR7_W {
                ODR7_W { w: self }
            }
            #[doc = "Bit 6 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr6(&mut self) -> ODR6_W {
                ODR6_W { w: self }
            }
            #[doc = "Bit 5 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr5(&mut self) -> ODR5_W {
                ODR5_W { w: self }
            }
            #[doc = "Bit 4 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr4(&mut self) -> ODR4_W {
                ODR4_W { w: self }
            }
            #[doc = "Bit 3 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr3(&mut self) -> ODR3_W {
                ODR3_W { w: self }
            }
            #[doc = "Bit 2 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr2(&mut self) -> ODR2_W {
                ODR2_W { w: self }
            }
            #[doc = "Bit 1 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr1(&mut self) -> ODR1_W {
                ODR1_W { w: self }
            }
            #[doc = "Bit 0 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr0(&mut self) -> ODR0_W {
                ODR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port bit set/reset register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bsrr](bsrr) module"]
    pub type BSRR = crate::Reg<u32, _BSRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BSRR;
    #[doc = "`write(|w| ..)` method takes [bsrr::W](bsrr::W) writer structure"]
    impl crate::Writable for BSRR {}
    #[doc = "GPIO port bit set/reset register"]
    pub mod bsrr {
        #[doc = "Writer for register BSRR"]
        pub type W = crate::W<u32, super::BSRR>;
        #[doc = "Register BSRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BSRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BR15_AW {
            #[doc = "1: Resets the corresponding ODRx bit"]
            RESET = 1,
        }
        impl From<BR15_AW> for bool {
            #[inline(always)]
            fn from(variant: BR15_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BR15`"]
        pub struct BR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR14_AW = BR15_AW;
        #[doc = "Write proxy for field `BR14`"]
        pub struct BR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR13_AW = BR15_AW;
        #[doc = "Write proxy for field `BR13`"]
        pub struct BR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR12_AW = BR15_AW;
        #[doc = "Write proxy for field `BR12`"]
        pub struct BR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR11_AW = BR15_AW;
        #[doc = "Write proxy for field `BR11`"]
        pub struct BR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR10_AW = BR15_AW;
        #[doc = "Write proxy for field `BR10`"]
        pub struct BR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR9_AW = BR15_AW;
        #[doc = "Write proxy for field `BR9`"]
        pub struct BR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR8_AW = BR15_AW;
        #[doc = "Write proxy for field `BR8`"]
        pub struct BR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR7_AW = BR15_AW;
        #[doc = "Write proxy for field `BR7`"]
        pub struct BR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR6_AW = BR15_AW;
        #[doc = "Write proxy for field `BR6`"]
        pub struct BR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR5_AW = BR15_AW;
        #[doc = "Write proxy for field `BR5`"]
        pub struct BR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR4_AW = BR15_AW;
        #[doc = "Write proxy for field `BR4`"]
        pub struct BR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR3_AW = BR15_AW;
        #[doc = "Write proxy for field `BR3`"]
        pub struct BR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR2_AW = BR15_AW;
        #[doc = "Write proxy for field `BR2`"]
        pub struct BR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR1_AW = BR15_AW;
        #[doc = "Write proxy for field `BR1`"]
        pub struct BR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BR0_AW = BR15_AW;
        #[doc = "Write proxy for field `BR0`"]
        pub struct BR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BS15_AW {
            #[doc = "1: Sets the corresponding ODRx bit"]
            SET = 1,
        }
        impl From<BS15_AW> for bool {
            #[inline(always)]
            fn from(variant: BS15_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BS15`"]
        pub struct BS15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS14_AW = BS15_AW;
        #[doc = "Write proxy for field `BS14`"]
        pub struct BS14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS13_AW = BS15_AW;
        #[doc = "Write proxy for field `BS13`"]
        pub struct BS13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS12_AW = BS15_AW;
        #[doc = "Write proxy for field `BS12`"]
        pub struct BS12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS11_AW = BS15_AW;
        #[doc = "Write proxy for field `BS11`"]
        pub struct BS11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS10_AW = BS15_AW;
        #[doc = "Write proxy for field `BS10`"]
        pub struct BS10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS9_AW = BS15_AW;
        #[doc = "Write proxy for field `BS9`"]
        pub struct BS9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS8_AW = BS15_AW;
        #[doc = "Write proxy for field `BS8`"]
        pub struct BS8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS7_AW = BS15_AW;
        #[doc = "Write proxy for field `BS7`"]
        pub struct BS7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS6_AW = BS15_AW;
        #[doc = "Write proxy for field `BS6`"]
        pub struct BS6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS5_AW = BS15_AW;
        #[doc = "Write proxy for field `BS5`"]
        pub struct BS5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS4_AW = BS15_AW;
        #[doc = "Write proxy for field `BS4`"]
        pub struct BS4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS3_AW = BS15_AW;
        #[doc = "Write proxy for field `BS3`"]
        pub struct BS3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS2_AW = BS15_AW;
        #[doc = "Write proxy for field `BS2`"]
        pub struct BS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS1_AW = BS15_AW;
        #[doc = "Write proxy for field `BS1`"]
        pub struct BS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS0_AW = BS15_AW;
        #[doc = "Write proxy for field `BS0`"]
        pub struct BS0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 31 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br15(&mut self) -> BR15_W {
                BR15_W { w: self }
            }
            #[doc = "Bit 30 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br14(&mut self) -> BR14_W {
                BR14_W { w: self }
            }
            #[doc = "Bit 29 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br13(&mut self) -> BR13_W {
                BR13_W { w: self }
            }
            #[doc = "Bit 28 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br12(&mut self) -> BR12_W {
                BR12_W { w: self }
            }
            #[doc = "Bit 27 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br11(&mut self) -> BR11_W {
                BR11_W { w: self }
            }
            #[doc = "Bit 26 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br10(&mut self) -> BR10_W {
                BR10_W { w: self }
            }
            #[doc = "Bit 25 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br9(&mut self) -> BR9_W {
                BR9_W { w: self }
            }
            #[doc = "Bit 24 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br8(&mut self) -> BR8_W {
                BR8_W { w: self }
            }
            #[doc = "Bit 23 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br7(&mut self) -> BR7_W {
                BR7_W { w: self }
            }
            #[doc = "Bit 22 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br6(&mut self) -> BR6_W {
                BR6_W { w: self }
            }
            #[doc = "Bit 21 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br5(&mut self) -> BR5_W {
                BR5_W { w: self }
            }
            #[doc = "Bit 20 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br4(&mut self) -> BR4_W {
                BR4_W { w: self }
            }
            #[doc = "Bit 19 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br3(&mut self) -> BR3_W {
                BR3_W { w: self }
            }
            #[doc = "Bit 18 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br2(&mut self) -> BR2_W {
                BR2_W { w: self }
            }
            #[doc = "Bit 17 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br1(&mut self) -> BR1_W {
                BR1_W { w: self }
            }
            #[doc = "Bit 16 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn br0(&mut self) -> BR0_W {
                BR0_W { w: self }
            }
            #[doc = "Bit 15 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs15(&mut self) -> BS15_W {
                BS15_W { w: self }
            }
            #[doc = "Bit 14 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs14(&mut self) -> BS14_W {
                BS14_W { w: self }
            }
            #[doc = "Bit 13 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs13(&mut self) -> BS13_W {
                BS13_W { w: self }
            }
            #[doc = "Bit 12 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs12(&mut self) -> BS12_W {
                BS12_W { w: self }
            }
            #[doc = "Bit 11 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs11(&mut self) -> BS11_W {
                BS11_W { w: self }
            }
            #[doc = "Bit 10 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs10(&mut self) -> BS10_W {
                BS10_W { w: self }
            }
            #[doc = "Bit 9 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs9(&mut self) -> BS9_W {
                BS9_W { w: self }
            }
            #[doc = "Bit 8 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs8(&mut self) -> BS8_W {
                BS8_W { w: self }
            }
            #[doc = "Bit 7 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs7(&mut self) -> BS7_W {
                BS7_W { w: self }
            }
            #[doc = "Bit 6 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs6(&mut self) -> BS6_W {
                BS6_W { w: self }
            }
            #[doc = "Bit 5 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs5(&mut self) -> BS5_W {
                BS5_W { w: self }
            }
            #[doc = "Bit 4 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs4(&mut self) -> BS4_W {
                BS4_W { w: self }
            }
            #[doc = "Bit 3 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs3(&mut self) -> BS3_W {
                BS3_W { w: self }
            }
            #[doc = "Bit 2 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs2(&mut self) -> BS2_W {
                BS2_W { w: self }
            }
            #[doc = "Bit 1 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs1(&mut self) -> BS1_W {
                BS1_W { w: self }
            }
            #[doc = "Bit 0 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs0(&mut self) -> BS0_W {
                BS0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port configuration lock register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lckr](lckr) module"]
    pub type LCKR = crate::Reg<u32, _LCKR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LCKR;
    #[doc = "`read()` method returns [lckr::R](lckr::R) reader structure"]
    impl crate::Readable for LCKR {}
    #[doc = "`write(|w| ..)` method takes [lckr::W](lckr::W) writer structure"]
    impl crate::Writable for LCKR {}
    #[doc = "GPIO port configuration lock register"]
    pub mod lckr {
        #[doc = "Reader of register LCKR"]
        pub type R = crate::R<u32, super::LCKR>;
        #[doc = "Writer for register LCKR"]
        pub type W = crate::W<u32, super::LCKR>;
        #[doc = "Register LCKR `reset()`'s with value 0"]
        impl crate::ResetValue for super::LCKR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCKK_A {
            #[doc = "0: Port configuration lock key not active"]
            NOTACTIVE = 0,
            #[doc = "1: Port configuration lock key active"]
            ACTIVE = 1,
        }
        impl From<LCKK_A> for bool {
            #[inline(always)]
            fn from(variant: LCKK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCKK`"]
        pub type LCKK_R = crate::R<bool, LCKK_A>;
        impl LCKK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCKK_A {
                match self.bits {
                    false => LCKK_A::NOTACTIVE,
                    true => LCKK_A::ACTIVE,
                }
            }
            #[doc = "Checks if the value of the field is `NOTACTIVE`"]
            #[inline(always)]
            pub fn is_not_active(&self) -> bool {
                *self == LCKK_A::NOTACTIVE
            }
            #[doc = "Checks if the value of the field is `ACTIVE`"]
            #[inline(always)]
            pub fn is_active(&self) -> bool {
                *self == LCKK_A::ACTIVE
            }
        }
        #[doc = "Write proxy for field `LCKK`"]
        pub struct LCKK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCKK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCKK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration lock key not active"]
            #[inline(always)]
            pub fn not_active(self) -> &'a mut W {
                self.variant(LCKK_A::NOTACTIVE)
            }
            #[doc = "Port configuration lock key active"]
            #[inline(always)]
            pub fn active(self) -> &'a mut W {
                self.variant(LCKK_A::ACTIVE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCK15_A {
            #[doc = "0: Port configuration not locked"]
            UNLOCKED = 0,
            #[doc = "1: Port configuration locked"]
            LOCKED = 1,
        }
        impl From<LCK15_A> for bool {
            #[inline(always)]
            fn from(variant: LCK15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCK15`"]
        pub type LCK15_R = crate::R<bool, LCK15_A>;
        impl LCK15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCK15_A {
                match self.bits {
                    false => LCK15_A::UNLOCKED,
                    true => LCK15_A::LOCKED,
                }
            }
            #[doc = "Checks if the value of the field is `UNLOCKED`"]
            #[inline(always)]
            pub fn is_unlocked(&self) -> bool {
                *self == LCK15_A::UNLOCKED
            }
            #[doc = "Checks if the value of the field is `LOCKED`"]
            #[inline(always)]
            pub fn is_locked(&self) -> bool {
                *self == LCK15_A::LOCKED
            }
        }
        #[doc = "Write proxy for field `LCK15`"]
        pub struct LCK15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK14_A = LCK15_A;
        #[doc = "Reader of field `LCK14`"]
        pub type LCK14_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK14`"]
        pub struct LCK14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK13_A = LCK15_A;
        #[doc = "Reader of field `LCK13`"]
        pub type LCK13_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK13`"]
        pub struct LCK13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK12_A = LCK15_A;
        #[doc = "Reader of field `LCK12`"]
        pub type LCK12_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK12`"]
        pub struct LCK12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK11_A = LCK15_A;
        #[doc = "Reader of field `LCK11`"]
        pub type LCK11_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK11`"]
        pub struct LCK11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK10_A = LCK15_A;
        #[doc = "Reader of field `LCK10`"]
        pub type LCK10_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK10`"]
        pub struct LCK10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCK9_A {
            #[doc = "0: Port configuration not locked"]
            UNLOCKED = 0,
            #[doc = "1: Port configuration locked"]
            LOCKED = 1,
        }
        impl From<LCK9_A> for bool {
            #[inline(always)]
            fn from(variant: LCK9_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCK9`"]
        pub type LCK9_R = crate::R<bool, LCK9_A>;
        impl LCK9_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCK9_A {
                match self.bits {
                    false => LCK9_A::UNLOCKED,
                    true => LCK9_A::LOCKED,
                }
            }
            #[doc = "Checks if the value of the field is `UNLOCKED`"]
            #[inline(always)]
            pub fn is_unlocked(&self) -> bool {
                *self == LCK9_A::UNLOCKED
            }
            #[doc = "Checks if the value of the field is `LOCKED`"]
            #[inline(always)]
            pub fn is_locked(&self) -> bool {
                *self == LCK9_A::LOCKED
            }
        }
        #[doc = "Write proxy for field `LCK9`"]
        pub struct LCK9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK8_A = LCK9_A;
        #[doc = "Reader of field `LCK8`"]
        pub type LCK8_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK8`"]
        pub struct LCK8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK7_A = LCK9_A;
        #[doc = "Reader of field `LCK7`"]
        pub type LCK7_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK7`"]
        pub struct LCK7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK6_A = LCK9_A;
        #[doc = "Reader of field `LCK6`"]
        pub type LCK6_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK6`"]
        pub struct LCK6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK5_A = LCK9_A;
        #[doc = "Reader of field `LCK5`"]
        pub type LCK5_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK5`"]
        pub struct LCK5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK4_A = LCK9_A;
        #[doc = "Reader of field `LCK4`"]
        pub type LCK4_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK4`"]
        pub struct LCK4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK3_A = LCK9_A;
        #[doc = "Reader of field `LCK3`"]
        pub type LCK3_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK3`"]
        pub struct LCK3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK2_A = LCK9_A;
        #[doc = "Reader of field `LCK2`"]
        pub type LCK2_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK2`"]
        pub struct LCK2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK1_A = LCK9_A;
        #[doc = "Reader of field `LCK1`"]
        pub type LCK1_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK1`"]
        pub struct LCK1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK0_A = LCK9_A;
        #[doc = "Reader of field `LCK0`"]
        pub type LCK0_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK0`"]
        pub struct LCK0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lckk(&self) -> LCKK_R {
                LCKK_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck15(&self) -> LCK15_R {
                LCK15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck14(&self) -> LCK14_R {
                LCK14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck13(&self) -> LCK13_R {
                LCK13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck12(&self) -> LCK12_R {
                LCK12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck11(&self) -> LCK11_R {
                LCK11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck10(&self) -> LCK10_R {
                LCK10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck9(&self) -> LCK9_R {
                LCK9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck8(&self) -> LCK8_R {
                LCK8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck7(&self) -> LCK7_R {
                LCK7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck6(&self) -> LCK6_R {
                LCK6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck5(&self) -> LCK5_R {
                LCK5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck4(&self) -> LCK4_R {
                LCK4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck3(&self) -> LCK3_R {
                LCK3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck2(&self) -> LCK2_R {
                LCK2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck1(&self) -> LCK1_R {
                LCK1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck0(&self) -> LCK0_R {
                LCK0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lckk(&mut self) -> LCKK_W {
                LCKK_W { w: self }
            }
            #[doc = "Bit 15 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck15(&mut self) -> LCK15_W {
                LCK15_W { w: self }
            }
            #[doc = "Bit 14 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck14(&mut self) -> LCK14_W {
                LCK14_W { w: self }
            }
            #[doc = "Bit 13 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck13(&mut self) -> LCK13_W {
                LCK13_W { w: self }
            }
            #[doc = "Bit 12 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck12(&mut self) -> LCK12_W {
                LCK12_W { w: self }
            }
            #[doc = "Bit 11 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck11(&mut self) -> LCK11_W {
                LCK11_W { w: self }
            }
            #[doc = "Bit 10 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck10(&mut self) -> LCK10_W {
                LCK10_W { w: self }
            }
            #[doc = "Bit 9 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck9(&mut self) -> LCK9_W {
                LCK9_W { w: self }
            }
            #[doc = "Bit 8 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck8(&mut self) -> LCK8_W {
                LCK8_W { w: self }
            }
            #[doc = "Bit 7 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck7(&mut self) -> LCK7_W {
                LCK7_W { w: self }
            }
            #[doc = "Bit 6 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck6(&mut self) -> LCK6_W {
                LCK6_W { w: self }
            }
            #[doc = "Bit 5 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck5(&mut self) -> LCK5_W {
                LCK5_W { w: self }
            }
            #[doc = "Bit 4 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck4(&mut self) -> LCK4_W {
                LCK4_W { w: self }
            }
            #[doc = "Bit 3 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck3(&mut self) -> LCK3_W {
                LCK3_W { w: self }
            }
            #[doc = "Bit 2 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck2(&mut self) -> LCK2_W {
                LCK2_W { w: self }
            }
            #[doc = "Bit 1 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck1(&mut self) -> LCK1_W {
                LCK1_W { w: self }
            }
            #[doc = "Bit 0 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck0(&mut self) -> LCK0_W {
                LCK0_W { w: self }
            }
        }
    }
    #[doc = "AFRL\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [afrl](afrl) module"]
    pub type AFRL = crate::Reg<u32, _AFRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AFRL;
    #[doc = "`read()` method returns [afrl::R](afrl::R) reader structure"]
    impl crate::Readable for AFRL {}
    #[doc = "`write(|w| ..)` method takes [afrl::W](afrl::W) writer structure"]
    impl crate::Writable for AFRL {}
    #[doc = "AFRL"]
    pub mod afrl {
        #[doc = "Reader of register AFRL"]
        pub type R = crate::R<u32, super::AFRL>;
        #[doc = "Writer for register AFRL"]
        pub type W = crate::W<u32, super::AFRL>;
        #[doc = "Register AFRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::AFRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum AFRL7_A {
            #[doc = "0: AF0"]
            AF0 = 0,
            #[doc = "1: AF1"]
            AF1 = 1,
            #[doc = "2: AF2"]
            AF2 = 2,
            #[doc = "3: AF3"]
            AF3 = 3,
            #[doc = "4: AF4"]
            AF4 = 4,
            #[doc = "5: AF5"]
            AF5 = 5,
            #[doc = "6: AF6"]
            AF6 = 6,
            #[doc = "7: AF7"]
            AF7 = 7,
            #[doc = "8: AF8"]
            AF8 = 8,
            #[doc = "9: AF9"]
            AF9 = 9,
            #[doc = "10: AF10"]
            AF10 = 10,
            #[doc = "11: AF11"]
            AF11 = 11,
            #[doc = "12: AF12"]
            AF12 = 12,
            #[doc = "13: AF13"]
            AF13 = 13,
            #[doc = "14: AF14"]
            AF14 = 14,
            #[doc = "15: AF15"]
            AF15 = 15,
        }
        impl From<AFRL7_A> for u8 {
            #[inline(always)]
            fn from(variant: AFRL7_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `AFRL7`"]
        pub type AFRL7_R = crate::R<u8, AFRL7_A>;
        impl AFRL7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AFRL7_A {
                match self.bits {
                    0 => AFRL7_A::AF0,
                    1 => AFRL7_A::AF1,
                    2 => AFRL7_A::AF2,
                    3 => AFRL7_A::AF3,
                    4 => AFRL7_A::AF4,
                    5 => AFRL7_A::AF5,
                    6 => AFRL7_A::AF6,
                    7 => AFRL7_A::AF7,
                    8 => AFRL7_A::AF8,
                    9 => AFRL7_A::AF9,
                    10 => AFRL7_A::AF10,
                    11 => AFRL7_A::AF11,
                    12 => AFRL7_A::AF12,
                    13 => AFRL7_A::AF13,
                    14 => AFRL7_A::AF14,
                    15 => AFRL7_A::AF15,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `AF0`"]
            #[inline(always)]
            pub fn is_af0(&self) -> bool {
                *self == AFRL7_A::AF0
            }
            #[doc = "Checks if the value of the field is `AF1`"]
            #[inline(always)]
            pub fn is_af1(&self) -> bool {
                *self == AFRL7_A::AF1
            }
            #[doc = "Checks if the value of the field is `AF2`"]
            #[inline(always)]
            pub fn is_af2(&self) -> bool {
                *self == AFRL7_A::AF2
            }
            #[doc = "Checks if the value of the field is `AF3`"]
            #[inline(always)]
            pub fn is_af3(&self) -> bool {
                *self == AFRL7_A::AF3
            }
            #[doc = "Checks if the value of the field is `AF4`"]
            #[inline(always)]
            pub fn is_af4(&self) -> bool {
                *self == AFRL7_A::AF4
            }
            #[doc = "Checks if the value of the field is `AF5`"]
            #[inline(always)]
            pub fn is_af5(&self) -> bool {
                *self == AFRL7_A::AF5
            }
            #[doc = "Checks if the value of the field is `AF6`"]
            #[inline(always)]
            pub fn is_af6(&self) -> bool {
                *self == AFRL7_A::AF6
            }
            #[doc = "Checks if the value of the field is `AF7`"]
            #[inline(always)]
            pub fn is_af7(&self) -> bool {
                *self == AFRL7_A::AF7
            }
            #[doc = "Checks if the value of the field is `AF8`"]
            #[inline(always)]
            pub fn is_af8(&self) -> bool {
                *self == AFRL7_A::AF8
            }
            #[doc = "Checks if the value of the field is `AF9`"]
            #[inline(always)]
            pub fn is_af9(&self) -> bool {
                *self == AFRL7_A::AF9
            }
            #[doc = "Checks if the value of the field is `AF10`"]
            #[inline(always)]
            pub fn is_af10(&self) -> bool {
                *self == AFRL7_A::AF10
            }
            #[doc = "Checks if the value of the field is `AF11`"]
            #[inline(always)]
            pub fn is_af11(&self) -> bool {
                *self == AFRL7_A::AF11
            }
            #[doc = "Checks if the value of the field is `AF12`"]
            #[inline(always)]
            pub fn is_af12(&self) -> bool {
                *self == AFRL7_A::AF12
            }
            #[doc = "Checks if the value of the field is `AF13`"]
            #[inline(always)]
            pub fn is_af13(&self) -> bool {
                *self == AFRL7_A::AF13
            }
            #[doc = "Checks if the value of the field is `AF14`"]
            #[inline(always)]
            pub fn is_af14(&self) -> bool {
                *self == AFRL7_A::AF14
            }
            #[doc = "Checks if the value of the field is `AF15`"]
            #[inline(always)]
            pub fn is_af15(&self) -> bool {
                *self == AFRL7_A::AF15
            }
        }
        #[doc = "Write proxy for field `AFRL7`"]
        pub struct AFRL7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL6_A = AFRL7_A;
        #[doc = "Reader of field `AFRL6`"]
        pub type AFRL6_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL6`"]
        pub struct AFRL6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL5_A = AFRL7_A;
        #[doc = "Reader of field `AFRL5`"]
        pub type AFRL5_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL5`"]
        pub struct AFRL5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL4_A = AFRL7_A;
        #[doc = "Reader of field `AFRL4`"]
        pub type AFRL4_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL4`"]
        pub struct AFRL4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL3_A = AFRL7_A;
        #[doc = "Reader of field `AFRL3`"]
        pub type AFRL3_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL3`"]
        pub struct AFRL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL2_A = AFRL7_A;
        #[doc = "Reader of field `AFRL2`"]
        pub type AFRL2_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL2`"]
        pub struct AFRL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL1_A = AFRL7_A;
        #[doc = "Reader of field `AFRL1`"]
        pub type AFRL1_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL1`"]
        pub struct AFRL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL0_A = AFRL7_A;
        #[doc = "Reader of field `AFRL0`"]
        pub type AFRL0_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL0`"]
        pub struct AFRL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl7(&self) -> AFRL7_R {
                AFRL7_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl6(&self) -> AFRL6_R {
                AFRL6_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl5(&self) -> AFRL5_R {
                AFRL5_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl4(&self) -> AFRL4_R {
                AFRL4_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl3(&self) -> AFRL3_R {
                AFRL3_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl2(&self) -> AFRL2_R {
                AFRL2_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl1(&self) -> AFRL1_R {
                AFRL1_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl0(&self) -> AFRL0_R {
                AFRL0_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl7(&mut self) -> AFRL7_W {
                AFRL7_W { w: self }
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl6(&mut self) -> AFRL6_W {
                AFRL6_W { w: self }
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl5(&mut self) -> AFRL5_W {
                AFRL5_W { w: self }
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl4(&mut self) -> AFRL4_W {
                AFRL4_W { w: self }
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl3(&mut self) -> AFRL3_W {
                AFRL3_W { w: self }
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl2(&mut self) -> AFRL2_W {
                AFRL2_W { w: self }
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl1(&mut self) -> AFRL1_W {
                AFRL1_W { w: self }
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl0(&mut self) -> AFRL0_W {
                AFRL0_W { w: self }
            }
        }
    }
    #[doc = "GPIO alternate function high register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [afrh](afrh) module"]
    pub type AFRH = crate::Reg<u32, _AFRH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AFRH;
    #[doc = "`read()` method returns [afrh::R](afrh::R) reader structure"]
    impl crate::Readable for AFRH {}
    #[doc = "`write(|w| ..)` method takes [afrh::W](afrh::W) writer structure"]
    impl crate::Writable for AFRH {}
    #[doc = "GPIO alternate function high register"]
    pub mod afrh {
        #[doc = "Reader of register AFRH"]
        pub type R = crate::R<u32, super::AFRH>;
        #[doc = "Writer for register AFRH"]
        pub type W = crate::W<u32, super::AFRH>;
        #[doc = "Register AFRH `reset()`'s with value 0"]
        impl crate::ResetValue for super::AFRH {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum AFRH15_A {
            #[doc = "0: AF0"]
            AF0 = 0,
            #[doc = "1: AF1"]
            AF1 = 1,
            #[doc = "2: AF2"]
            AF2 = 2,
            #[doc = "3: AF3"]
            AF3 = 3,
            #[doc = "4: AF4"]
            AF4 = 4,
            #[doc = "5: AF5"]
            AF5 = 5,
            #[doc = "6: AF6"]
            AF6 = 6,
            #[doc = "7: AF7"]
            AF7 = 7,
            #[doc = "8: AF8"]
            AF8 = 8,
            #[doc = "9: AF9"]
            AF9 = 9,
            #[doc = "10: AF10"]
            AF10 = 10,
            #[doc = "11: AF11"]
            AF11 = 11,
            #[doc = "12: AF12"]
            AF12 = 12,
            #[doc = "13: AF13"]
            AF13 = 13,
            #[doc = "14: AF14"]
            AF14 = 14,
            #[doc = "15: AF15"]
            AF15 = 15,
        }
        impl From<AFRH15_A> for u8 {
            #[inline(always)]
            fn from(variant: AFRH15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `AFRH15`"]
        pub type AFRH15_R = crate::R<u8, AFRH15_A>;
        impl AFRH15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AFRH15_A {
                match self.bits {
                    0 => AFRH15_A::AF0,
                    1 => AFRH15_A::AF1,
                    2 => AFRH15_A::AF2,
                    3 => AFRH15_A::AF3,
                    4 => AFRH15_A::AF4,
                    5 => AFRH15_A::AF5,
                    6 => AFRH15_A::AF6,
                    7 => AFRH15_A::AF7,
                    8 => AFRH15_A::AF8,
                    9 => AFRH15_A::AF9,
                    10 => AFRH15_A::AF10,
                    11 => AFRH15_A::AF11,
                    12 => AFRH15_A::AF12,
                    13 => AFRH15_A::AF13,
                    14 => AFRH15_A::AF14,
                    15 => AFRH15_A::AF15,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `AF0`"]
            #[inline(always)]
            pub fn is_af0(&self) -> bool {
                *self == AFRH15_A::AF0
            }
            #[doc = "Checks if the value of the field is `AF1`"]
            #[inline(always)]
            pub fn is_af1(&self) -> bool {
                *self == AFRH15_A::AF1
            }
            #[doc = "Checks if the value of the field is `AF2`"]
            #[inline(always)]
            pub fn is_af2(&self) -> bool {
                *self == AFRH15_A::AF2
            }
            #[doc = "Checks if the value of the field is `AF3`"]
            #[inline(always)]
            pub fn is_af3(&self) -> bool {
                *self == AFRH15_A::AF3
            }
            #[doc = "Checks if the value of the field is `AF4`"]
            #[inline(always)]
            pub fn is_af4(&self) -> bool {
                *self == AFRH15_A::AF4
            }
            #[doc = "Checks if the value of the field is `AF5`"]
            #[inline(always)]
            pub fn is_af5(&self) -> bool {
                *self == AFRH15_A::AF5
            }
            #[doc = "Checks if the value of the field is `AF6`"]
            #[inline(always)]
            pub fn is_af6(&self) -> bool {
                *self == AFRH15_A::AF6
            }
            #[doc = "Checks if the value of the field is `AF7`"]
            #[inline(always)]
            pub fn is_af7(&self) -> bool {
                *self == AFRH15_A::AF7
            }
            #[doc = "Checks if the value of the field is `AF8`"]
            #[inline(always)]
            pub fn is_af8(&self) -> bool {
                *self == AFRH15_A::AF8
            }
            #[doc = "Checks if the value of the field is `AF9`"]
            #[inline(always)]
            pub fn is_af9(&self) -> bool {
                *self == AFRH15_A::AF9
            }
            #[doc = "Checks if the value of the field is `AF10`"]
            #[inline(always)]
            pub fn is_af10(&self) -> bool {
                *self == AFRH15_A::AF10
            }
            #[doc = "Checks if the value of the field is `AF11`"]
            #[inline(always)]
            pub fn is_af11(&self) -> bool {
                *self == AFRH15_A::AF11
            }
            #[doc = "Checks if the value of the field is `AF12`"]
            #[inline(always)]
            pub fn is_af12(&self) -> bool {
                *self == AFRH15_A::AF12
            }
            #[doc = "Checks if the value of the field is `AF13`"]
            #[inline(always)]
            pub fn is_af13(&self) -> bool {
                *self == AFRH15_A::AF13
            }
            #[doc = "Checks if the value of the field is `AF14`"]
            #[inline(always)]
            pub fn is_af14(&self) -> bool {
                *self == AFRH15_A::AF14
            }
            #[doc = "Checks if the value of the field is `AF15`"]
            #[inline(always)]
            pub fn is_af15(&self) -> bool {
                *self == AFRH15_A::AF15
            }
        }
        #[doc = "Write proxy for field `AFRH15`"]
        pub struct AFRH15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH14_A = AFRH15_A;
        #[doc = "Reader of field `AFRH14`"]
        pub type AFRH14_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH14`"]
        pub struct AFRH14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH13_A = AFRH15_A;
        #[doc = "Reader of field `AFRH13`"]
        pub type AFRH13_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH13`"]
        pub struct AFRH13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH12_A = AFRH15_A;
        #[doc = "Reader of field `AFRH12`"]
        pub type AFRH12_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH12`"]
        pub struct AFRH12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH11_A = AFRH15_A;
        #[doc = "Reader of field `AFRH11`"]
        pub type AFRH11_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH11`"]
        pub struct AFRH11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH10_A = AFRH15_A;
        #[doc = "Reader of field `AFRH10`"]
        pub type AFRH10_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH10`"]
        pub struct AFRH10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH9_A = AFRH15_A;
        #[doc = "Reader of field `AFRH9`"]
        pub type AFRH9_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH9`"]
        pub struct AFRH9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH8_A = AFRH15_A;
        #[doc = "Reader of field `AFRH8`"]
        pub type AFRH8_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH8`"]
        pub struct AFRH8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh15(&self) -> AFRH15_R {
                AFRH15_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh14(&self) -> AFRH14_R {
                AFRH14_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh13(&self) -> AFRH13_R {
                AFRH13_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh12(&self) -> AFRH12_R {
                AFRH12_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh11(&self) -> AFRH11_R {
                AFRH11_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh10(&self) -> AFRH10_R {
                AFRH10_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh9(&self) -> AFRH9_R {
                AFRH9_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh8(&self) -> AFRH8_R {
                AFRH8_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh15(&mut self) -> AFRH15_W {
                AFRH15_W { w: self }
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh14(&mut self) -> AFRH14_W {
                AFRH14_W { w: self }
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh13(&mut self) -> AFRH13_W {
                AFRH13_W { w: self }
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh12(&mut self) -> AFRH12_W {
                AFRH12_W { w: self }
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh11(&mut self) -> AFRH11_W {
                AFRH11_W { w: self }
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh10(&mut self) -> AFRH10_W {
                AFRH10_W { w: self }
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh9(&mut self) -> AFRH9_W {
                AFRH9_W { w: self }
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh8(&mut self) -> AFRH8_W {
                AFRH8_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOC {}
impl GPIOC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        0x4002_0800 as *const _
    }
}
impl Deref for GPIOC {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOC::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpioc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - GPIO port mode register"]
        pub moder: MODER,
        #[doc = "0x04 - GPIO port output type register"]
        pub otyper: OTYPER,
        #[doc = "0x08 - GPIO port output speed register"]
        pub ospeedr: OSPEEDR,
        #[doc = "0x0c - GPIO port pull-up/pull-down register"]
        pub pupdr: PUPDR,
        #[doc = "0x10 - GPIO port input data register"]
        pub idr: IDR,
        #[doc = "0x14 - GPIO port output data register"]
        pub odr: ODR,
        #[doc = "0x18 - GPIO port bit set/reset register"]
        pub bsrr: BSRR,
        #[doc = "0x1c - GPIO port configuration lock register"]
        pub lckr: LCKR,
        #[doc = "0x20 - AFRL"]
        pub afrl: AFRL,
        #[doc = "0x24 - GPIO alternate function high register"]
        pub afrh: AFRH,
    }
    #[doc = "GPIO port mode register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [moder](moder) module"]
    pub type MODER = crate::Reg<u32, _MODER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MODER;
    #[doc = "`read()` method returns [moder::R](moder::R) reader structure"]
    impl crate::Readable for MODER {}
    #[doc = "`write(|w| ..)` method takes [moder::W](moder::W) writer structure"]
    impl crate::Writable for MODER {}
    #[doc = "GPIO port mode register"]
    pub mod moder {
        #[doc = "Reader of register MODER"]
        pub type R = crate::R<u32, super::MODER>;
        #[doc = "Writer for register MODER"]
        pub type W = crate::W<u32, super::MODER>;
        #[doc = "Register MODER `reset()`'s with value 0"]
        impl crate::ResetValue for super::MODER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MODER15_A {
            #[doc = "0: Input mode (reset state)"]
            INPUT = 0,
            #[doc = "1: General purpose output mode"]
            OUTPUT = 1,
            #[doc = "2: Alternate function mode"]
            ALTERNATE = 2,
            #[doc = "3: Analog mode"]
            ANALOG = 3,
        }
        impl From<MODER15_A> for u8 {
            #[inline(always)]
            fn from(variant: MODER15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MODER15`"]
        pub type MODER15_R = crate::R<u8, MODER15_A>;
        impl MODER15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MODER15_A {
                match self.bits {
                    0 => MODER15_A::INPUT,
                    1 => MODER15_A::OUTPUT,
                    2 => MODER15_A::ALTERNATE,
                    3 => MODER15_A::ANALOG,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                *self == MODER15_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == MODER15_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `ALTERNATE`"]
            #[inline(always)]
            pub fn is_alternate(&self) -> bool {
                *self == MODER15_A::ALTERNATE
            }
            #[doc = "Checks if the value of the field is `ANALOG`"]
            #[inline(always)]
            pub fn is_analog(&self) -> bool {
                *self == MODER15_A::ANALOG
            }
        }
        #[doc = "Write proxy for field `MODER15`"]
        pub struct MODER15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER14_A = MODER15_A;
        #[doc = "Reader of field `MODER14`"]
        pub type MODER14_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER14`"]
        pub struct MODER14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER13_A = MODER15_A;
        #[doc = "Reader of field `MODER13`"]
        pub type MODER13_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER13`"]
        pub struct MODER13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER12_A = MODER15_A;
        #[doc = "Reader of field `MODER12`"]
        pub type MODER12_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER12`"]
        pub struct MODER12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER11_A = MODER15_A;
        #[doc = "Reader of field `MODER11`"]
        pub type MODER11_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER11`"]
        pub struct MODER11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER10_A = MODER15_A;
        #[doc = "Reader of field `MODER10`"]
        pub type MODER10_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER10`"]
        pub struct MODER10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER9_A = MODER15_A;
        #[doc = "Reader of field `MODER9`"]
        pub type MODER9_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER9`"]
        pub struct MODER9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER8_A = MODER15_A;
        #[doc = "Reader of field `MODER8`"]
        pub type MODER8_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER8`"]
        pub struct MODER8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER7_A = MODER15_A;
        #[doc = "Reader of field `MODER7`"]
        pub type MODER7_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER7`"]
        pub struct MODER7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER6_A = MODER15_A;
        #[doc = "Reader of field `MODER6`"]
        pub type MODER6_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER6`"]
        pub struct MODER6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER5_A = MODER15_A;
        #[doc = "Reader of field `MODER5`"]
        pub type MODER5_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER5`"]
        pub struct MODER5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER4_A = MODER15_A;
        #[doc = "Reader of field `MODER4`"]
        pub type MODER4_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER4`"]
        pub struct MODER4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER3_A = MODER15_A;
        #[doc = "Reader of field `MODER3`"]
        pub type MODER3_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER3`"]
        pub struct MODER3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER2_A = MODER15_A;
        #[doc = "Reader of field `MODER2`"]
        pub type MODER2_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER2`"]
        pub struct MODER2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER1_A = MODER15_A;
        #[doc = "Reader of field `MODER1`"]
        pub type MODER1_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER1`"]
        pub struct MODER1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER0_A = MODER15_A;
        #[doc = "Reader of field `MODER0`"]
        pub type MODER0_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER0`"]
        pub struct MODER0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder15(&self) -> MODER15_R {
                MODER15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder14(&self) -> MODER14_R {
                MODER14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder13(&self) -> MODER13_R {
                MODER13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder12(&self) -> MODER12_R {
                MODER12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder11(&self) -> MODER11_R {
                MODER11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder10(&self) -> MODER10_R {
                MODER10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder9(&self) -> MODER9_R {
                MODER9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder8(&self) -> MODER8_R {
                MODER8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder7(&self) -> MODER7_R {
                MODER7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder6(&self) -> MODER6_R {
                MODER6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder5(&self) -> MODER5_R {
                MODER5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder4(&self) -> MODER4_R {
                MODER4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder3(&self) -> MODER3_R {
                MODER3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder2(&self) -> MODER2_R {
                MODER2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder1(&self) -> MODER1_R {
                MODER1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder0(&self) -> MODER0_R {
                MODER0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder15(&mut self) -> MODER15_W {
                MODER15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder14(&mut self) -> MODER14_W {
                MODER14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder13(&mut self) -> MODER13_W {
                MODER13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder12(&mut self) -> MODER12_W {
                MODER12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder11(&mut self) -> MODER11_W {
                MODER11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder10(&mut self) -> MODER10_W {
                MODER10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder9(&mut self) -> MODER9_W {
                MODER9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder8(&mut self) -> MODER8_W {
                MODER8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder7(&mut self) -> MODER7_W {
                MODER7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder6(&mut self) -> MODER6_W {
                MODER6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder5(&mut self) -> MODER5_W {
                MODER5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder4(&mut self) -> MODER4_W {
                MODER4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder3(&mut self) -> MODER3_W {
                MODER3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder2(&mut self) -> MODER2_W {
                MODER2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder1(&mut self) -> MODER1_W {
                MODER1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder0(&mut self) -> MODER0_W {
                MODER0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port output type register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [otyper](otyper) module"]
    pub type OTYPER = crate::Reg<u32, _OTYPER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OTYPER;
    #[doc = "`read()` method returns [otyper::R](otyper::R) reader structure"]
    impl crate::Readable for OTYPER {}
    #[doc = "`write(|w| ..)` method takes [otyper::W](otyper::W) writer structure"]
    impl crate::Writable for OTYPER {}
    #[doc = "GPIO port output type register"]
    pub mod otyper {
        #[doc = "Reader of register OTYPER"]
        pub type R = crate::R<u32, super::OTYPER>;
        #[doc = "Writer for register OTYPER"]
        pub type W = crate::W<u32, super::OTYPER>;
        #[doc = "Register OTYPER `reset()`'s with value 0"]
        impl crate::ResetValue for super::OTYPER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OT15_A {
            #[doc = "0: Output push-pull (reset state)"]
            PUSHPULL = 0,
            #[doc = "1: Output open-drain"]
            OPENDRAIN = 1,
        }
        impl From<OT15_A> for bool {
            #[inline(always)]
            fn from(variant: OT15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OT15`"]
        pub type OT15_R = crate::R<bool, OT15_A>;
        impl OT15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OT15_A {
                match self.bits {
                    false => OT15_A::PUSHPULL,
                    true => OT15_A::OPENDRAIN,
                }
            }
            #[doc = "Checks if the value of the field is `PUSHPULL`"]
            #[inline(always)]
            pub fn is_push_pull(&self) -> bool {
                *self == OT15_A::PUSHPULL
            }
            #[doc = "Checks if the value of the field is `OPENDRAIN`"]
            #[inline(always)]
            pub fn is_open_drain(&self) -> bool {
                *self == OT15_A::OPENDRAIN
            }
        }
        #[doc = "Write proxy for field `OT15`"]
        pub struct OT15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT14_A = OT15_A;
        #[doc = "Reader of field `OT14`"]
        pub type OT14_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT14`"]
        pub struct OT14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT13_A = OT15_A;
        #[doc = "Reader of field `OT13`"]
        pub type OT13_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT13`"]
        pub struct OT13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT12_A = OT15_A;
        #[doc = "Reader of field `OT12`"]
        pub type OT12_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT12`"]
        pub struct OT12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT11_A = OT15_A;
        #[doc = "Reader of field `OT11`"]
        pub type OT11_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT11`"]
        pub struct OT11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT10_A = OT15_A;
        #[doc = "Reader of field `OT10`"]
        pub type OT10_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT10`"]
        pub struct OT10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT9_A = OT15_A;
        #[doc = "Reader of field `OT9`"]
        pub type OT9_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT9`"]
        pub struct OT9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT8_A = OT15_A;
        #[doc = "Reader of field `OT8`"]
        pub type OT8_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT8`"]
        pub struct OT8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT7_A = OT15_A;
        #[doc = "Reader of field `OT7`"]
        pub type OT7_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT7`"]
        pub struct OT7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT6_A = OT15_A;
        #[doc = "Reader of field `OT6`"]
        pub type OT6_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT6`"]
        pub struct OT6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT5_A = OT15_A;
        #[doc = "Reader of field `OT5`"]
        pub type OT5_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT5`"]
        pub struct OT5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT4_A = OT15_A;
        #[doc = "Reader of field `OT4`"]
        pub type OT4_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT4`"]
        pub struct OT4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT3_A = OT15_A;
        #[doc = "Reader of field `OT3`"]
        pub type OT3_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT3`"]
        pub struct OT3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT2_A = OT15_A;
        #[doc = "Reader of field `OT2`"]
        pub type OT2_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT2`"]
        pub struct OT2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT1_A = OT15_A;
        #[doc = "Reader of field `OT1`"]
        pub type OT1_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT1`"]
        pub struct OT1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT0_A = OT15_A;
        #[doc = "Reader of field `OT0`"]
        pub type OT0_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT0`"]
        pub struct OT0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot15(&self) -> OT15_R {
                OT15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot14(&self) -> OT14_R {
                OT14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot13(&self) -> OT13_R {
                OT13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot12(&self) -> OT12_R {
                OT12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot11(&self) -> OT11_R {
                OT11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot10(&self) -> OT10_R {
                OT10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot9(&self) -> OT9_R {
                OT9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot8(&self) -> OT8_R {
                OT8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot7(&self) -> OT7_R {
                OT7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot6(&self) -> OT6_R {
                OT6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot5(&self) -> OT5_R {
                OT5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot4(&self) -> OT4_R {
                OT4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot3(&self) -> OT3_R {
                OT3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot2(&self) -> OT2_R {
                OT2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot1(&self) -> OT1_R {
                OT1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot0(&self) -> OT0_R {
                OT0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot15(&mut self) -> OT15_W {
                OT15_W { w: self }
            }
            #[doc = "Bit 14 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot14(&mut self) -> OT14_W {
                OT14_W { w: self }
            }
            #[doc = "Bit 13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot13(&mut self) -> OT13_W {
                OT13_W { w: self }
            }
            #[doc = "Bit 12 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot12(&mut self) -> OT12_W {
                OT12_W { w: self }
            }
            #[doc = "Bit 11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot11(&mut self) -> OT11_W {
                OT11_W { w: self }
            }
            #[doc = "Bit 10 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot10(&mut self) -> OT10_W {
                OT10_W { w: self }
            }
            #[doc = "Bit 9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot9(&mut self) -> OT9_W {
                OT9_W { w: self }
            }
            #[doc = "Bit 8 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot8(&mut self) -> OT8_W {
                OT8_W { w: self }
            }
            #[doc = "Bit 7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot7(&mut self) -> OT7_W {
                OT7_W { w: self }
            }
            #[doc = "Bit 6 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot6(&mut self) -> OT6_W {
                OT6_W { w: self }
            }
            #[doc = "Bit 5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot5(&mut self) -> OT5_W {
                OT5_W { w: self }
            }
            #[doc = "Bit 4 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot4(&mut self) -> OT4_W {
                OT4_W { w: self }
            }
            #[doc = "Bit 3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot3(&mut self) -> OT3_W {
                OT3_W { w: self }
            }
            #[doc = "Bit 2 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot2(&mut self) -> OT2_W {
                OT2_W { w: self }
            }
            #[doc = "Bit 1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot1(&mut self) -> OT1_W {
                OT1_W { w: self }
            }
            #[doc = "Bit 0 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot0(&mut self) -> OT0_W {
                OT0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port output speed register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ospeedr](ospeedr) module"]
    pub type OSPEEDR = crate::Reg<u32, _OSPEEDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OSPEEDR;
    #[doc = "`read()` method returns [ospeedr::R](ospeedr::R) reader structure"]
    impl crate::Readable for OSPEEDR {}
    #[doc = "`write(|w| ..)` method takes [ospeedr::W](ospeedr::W) writer structure"]
    impl crate::Writable for OSPEEDR {}
    #[doc = "GPIO port output speed register"]
    pub mod ospeedr {
        #[doc = "Reader of register OSPEEDR"]
        pub type R = crate::R<u32, super::OSPEEDR>;
        #[doc = "Writer for register OSPEEDR"]
        pub type W = crate::W<u32, super::OSPEEDR>;
        #[doc = "Register OSPEEDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::OSPEEDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "OSPEEDR15\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OSPEEDR15_A {
            #[doc = "0: Low speed"]
            LOWSPEED = 0,
            #[doc = "1: Medium speed"]
            MEDIUMSPEED = 1,
            #[doc = "2: High speed"]
            HIGHSPEED = 2,
            #[doc = "3: Very high speed"]
            VERYHIGHSPEED = 3,
        }
        impl From<OSPEEDR15_A> for u8 {
            #[inline(always)]
            fn from(variant: OSPEEDR15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `OSPEEDR15`"]
        pub type OSPEEDR15_R = crate::R<u8, OSPEEDR15_A>;
        impl OSPEEDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OSPEEDR15_A {
                match self.bits {
                    0 => OSPEEDR15_A::LOWSPEED,
                    1 => OSPEEDR15_A::MEDIUMSPEED,
                    2 => OSPEEDR15_A::HIGHSPEED,
                    3 => OSPEEDR15_A::VERYHIGHSPEED,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `LOWSPEED`"]
            #[inline(always)]
            pub fn is_low_speed(&self) -> bool {
                *self == OSPEEDR15_A::LOWSPEED
            }
            #[doc = "Checks if the value of the field is `MEDIUMSPEED`"]
            #[inline(always)]
            pub fn is_medium_speed(&self) -> bool {
                *self == OSPEEDR15_A::MEDIUMSPEED
            }
            #[doc = "Checks if the value of the field is `HIGHSPEED`"]
            #[inline(always)]
            pub fn is_high_speed(&self) -> bool {
                *self == OSPEEDR15_A::HIGHSPEED
            }
            #[doc = "Checks if the value of the field is `VERYHIGHSPEED`"]
            #[inline(always)]
            pub fn is_very_high_speed(&self) -> bool {
                *self == OSPEEDR15_A::VERYHIGHSPEED
            }
        }
        #[doc = "Write proxy for field `OSPEEDR15`"]
        pub struct OSPEEDR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "OSPEEDR14"]
        pub type OSPEEDR14_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR14`"]
        pub type OSPEEDR14_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR14`"]
        pub struct OSPEEDR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "OSPEEDR13"]
        pub type OSPEEDR13_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR13`"]
        pub type OSPEEDR13_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR13`"]
        pub struct OSPEEDR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "OSPEEDR12"]
        pub type OSPEEDR12_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR12`"]
        pub type OSPEEDR12_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR12`"]
        pub struct OSPEEDR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "OSPEEDR11"]
        pub type OSPEEDR11_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR11`"]
        pub type OSPEEDR11_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR11`"]
        pub struct OSPEEDR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "OSPEEDR10"]
        pub type OSPEEDR10_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR10`"]
        pub type OSPEEDR10_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR10`"]
        pub struct OSPEEDR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "OSPEEDR9"]
        pub type OSPEEDR9_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR9`"]
        pub type OSPEEDR9_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR9`"]
        pub struct OSPEEDR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "OSPEEDR8"]
        pub type OSPEEDR8_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR8`"]
        pub type OSPEEDR8_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR8`"]
        pub struct OSPEEDR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "OSPEEDR7"]
        pub type OSPEEDR7_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR7`"]
        pub type OSPEEDR7_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR7`"]
        pub struct OSPEEDR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "OSPEEDR6"]
        pub type OSPEEDR6_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR6`"]
        pub type OSPEEDR6_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR6`"]
        pub struct OSPEEDR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "OSPEEDR5"]
        pub type OSPEEDR5_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR5`"]
        pub type OSPEEDR5_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR5`"]
        pub struct OSPEEDR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "OSPEEDR4"]
        pub type OSPEEDR4_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR4`"]
        pub type OSPEEDR4_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR4`"]
        pub struct OSPEEDR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "OSPEEDR3"]
        pub type OSPEEDR3_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR3`"]
        pub type OSPEEDR3_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR3`"]
        pub struct OSPEEDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "OSPEEDR2"]
        pub type OSPEEDR2_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR2`"]
        pub type OSPEEDR2_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR2`"]
        pub struct OSPEEDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "OSPEEDR1"]
        pub type OSPEEDR1_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR1`"]
        pub type OSPEEDR1_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR1`"]
        pub struct OSPEEDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "OSPEEDR0"]
        pub type OSPEEDR0_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR0`"]
        pub type OSPEEDR0_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR0`"]
        pub struct OSPEEDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - OSPEEDR15"]
            #[inline(always)]
            pub fn ospeedr15(&self) -> OSPEEDR15_R {
                OSPEEDR15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - OSPEEDR14"]
            #[inline(always)]
            pub fn ospeedr14(&self) -> OSPEEDR14_R {
                OSPEEDR14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - OSPEEDR13"]
            #[inline(always)]
            pub fn ospeedr13(&self) -> OSPEEDR13_R {
                OSPEEDR13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - OSPEEDR12"]
            #[inline(always)]
            pub fn ospeedr12(&self) -> OSPEEDR12_R {
                OSPEEDR12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - OSPEEDR11"]
            #[inline(always)]
            pub fn ospeedr11(&self) -> OSPEEDR11_R {
                OSPEEDR11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - OSPEEDR10"]
            #[inline(always)]
            pub fn ospeedr10(&self) -> OSPEEDR10_R {
                OSPEEDR10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - OSPEEDR9"]
            #[inline(always)]
            pub fn ospeedr9(&self) -> OSPEEDR9_R {
                OSPEEDR9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - OSPEEDR8"]
            #[inline(always)]
            pub fn ospeedr8(&self) -> OSPEEDR8_R {
                OSPEEDR8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - OSPEEDR7"]
            #[inline(always)]
            pub fn ospeedr7(&self) -> OSPEEDR7_R {
                OSPEEDR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - OSPEEDR6"]
            #[inline(always)]
            pub fn ospeedr6(&self) -> OSPEEDR6_R {
                OSPEEDR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - OSPEEDR5"]
            #[inline(always)]
            pub fn ospeedr5(&self) -> OSPEEDR5_R {
                OSPEEDR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - OSPEEDR4"]
            #[inline(always)]
            pub fn ospeedr4(&self) -> OSPEEDR4_R {
                OSPEEDR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - OSPEEDR3"]
            #[inline(always)]
            pub fn ospeedr3(&self) -> OSPEEDR3_R {
                OSPEEDR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - OSPEEDR2"]
            #[inline(always)]
            pub fn ospeedr2(&self) -> OSPEEDR2_R {
                OSPEEDR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - OSPEEDR1"]
            #[inline(always)]
            pub fn ospeedr1(&self) -> OSPEEDR1_R {
                OSPEEDR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - OSPEEDR0"]
            #[inline(always)]
            pub fn ospeedr0(&self) -> OSPEEDR0_R {
                OSPEEDR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - OSPEEDR15"]
            #[inline(always)]
            pub fn ospeedr15(&mut self) -> OSPEEDR15_W {
                OSPEEDR15_W { w: self }
            }
            #[doc = "Bits 28:29 - OSPEEDR14"]
            #[inline(always)]
            pub fn ospeedr14(&mut self) -> OSPEEDR14_W {
                OSPEEDR14_W { w: self }
            }
            #[doc = "Bits 26:27 - OSPEEDR13"]
            #[inline(always)]
            pub fn ospeedr13(&mut self) -> OSPEEDR13_W {
                OSPEEDR13_W { w: self }
            }
            #[doc = "Bits 24:25 - OSPEEDR12"]
            #[inline(always)]
            pub fn ospeedr12(&mut self) -> OSPEEDR12_W {
                OSPEEDR12_W { w: self }
            }
            #[doc = "Bits 22:23 - OSPEEDR11"]
            #[inline(always)]
            pub fn ospeedr11(&mut self) -> OSPEEDR11_W {
                OSPEEDR11_W { w: self }
            }
            #[doc = "Bits 20:21 - OSPEEDR10"]
            #[inline(always)]
            pub fn ospeedr10(&mut self) -> OSPEEDR10_W {
                OSPEEDR10_W { w: self }
            }
            #[doc = "Bits 18:19 - OSPEEDR9"]
            #[inline(always)]
            pub fn ospeedr9(&mut self) -> OSPEEDR9_W {
                OSPEEDR9_W { w: self }
            }
            #[doc = "Bits 16:17 - OSPEEDR8"]
            #[inline(always)]
            pub fn ospeedr8(&mut self) -> OSPEEDR8_W {
                OSPEEDR8_W { w: self }
            }
            #[doc = "Bits 14:15 - OSPEEDR7"]
            #[inline(always)]
            pub fn ospeedr7(&mut self) -> OSPEEDR7_W {
                OSPEEDR7_W { w: self }
            }
            #[doc = "Bits 12:13 - OSPEEDR6"]
            #[inline(always)]
            pub fn ospeedr6(&mut self) -> OSPEEDR6_W {
                OSPEEDR6_W { w: self }
            }
            #[doc = "Bits 10:11 - OSPEEDR5"]
            #[inline(always)]
            pub fn ospeedr5(&mut self) -> OSPEEDR5_W {
                OSPEEDR5_W { w: self }
            }
            #[doc = "Bits 8:9 - OSPEEDR4"]
            #[inline(always)]
            pub fn ospeedr4(&mut self) -> OSPEEDR4_W {
                OSPEEDR4_W { w: self }
            }
            #[doc = "Bits 6:7 - OSPEEDR3"]
            #[inline(always)]
            pub fn ospeedr3(&mut self) -> OSPEEDR3_W {
                OSPEEDR3_W { w: self }
            }
            #[doc = "Bits 4:5 - OSPEEDR2"]
            #[inline(always)]
            pub fn ospeedr2(&mut self) -> OSPEEDR2_W {
                OSPEEDR2_W { w: self }
            }
            #[doc = "Bits 2:3 - OSPEEDR1"]
            #[inline(always)]
            pub fn ospeedr1(&mut self) -> OSPEEDR1_W {
                OSPEEDR1_W { w: self }
            }
            #[doc = "Bits 0:1 - OSPEEDR0"]
            #[inline(always)]
            pub fn ospeedr0(&mut self) -> OSPEEDR0_W {
                OSPEEDR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port pull-up/pull-down register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pupdr](pupdr) module"]
    pub type PUPDR = crate::Reg<u32, _PUPDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PUPDR;
    #[doc = "`read()` method returns [pupdr::R](pupdr::R) reader structure"]
    impl crate::Readable for PUPDR {}
    #[doc = "`write(|w| ..)` method takes [pupdr::W](pupdr::W) writer structure"]
    impl crate::Writable for PUPDR {}
    #[doc = "GPIO port pull-up/pull-down register"]
    pub mod pupdr {
        #[doc = "Reader of register PUPDR"]
        pub type R = crate::R<u32, super::PUPDR>;
        #[doc = "Writer for register PUPDR"]
        pub type W = crate::W<u32, super::PUPDR>;
        #[doc = "Register PUPDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PUPDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PUPDR15_A {
            #[doc = "0: No pull-up, pull-down"]
            FLOATING = 0,
            #[doc = "1: Pull-up"]
            PULLUP = 1,
            #[doc = "2: Pull-down"]
            PULLDOWN = 2,
        }
        impl From<PUPDR15_A> for u8 {
            #[inline(always)]
            fn from(variant: PUPDR15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PUPDR15`"]
        pub type PUPDR15_R = crate::R<u8, PUPDR15_A>;
        impl PUPDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, PUPDR15_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(PUPDR15_A::FLOATING),
                    1 => Val(PUPDR15_A::PULLUP),
                    2 => Val(PUPDR15_A::PULLDOWN),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `FLOATING`"]
            #[inline(always)]
            pub fn is_floating(&self) -> bool {
                *self == PUPDR15_A::FLOATING
            }
            #[doc = "Checks if the value of the field is `PULLUP`"]
            #[inline(always)]
            pub fn is_pull_up(&self) -> bool {
                *self == PUPDR15_A::PULLUP
            }
            #[doc = "Checks if the value of the field is `PULLDOWN`"]
            #[inline(always)]
            pub fn is_pull_down(&self) -> bool {
                *self == PUPDR15_A::PULLDOWN
            }
        }
        #[doc = "Write proxy for field `PUPDR15`"]
        pub struct PUPDR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR15_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR14_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR14`"]
        pub type PUPDR14_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR14`"]
        pub struct PUPDR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR14_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR13_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR13`"]
        pub type PUPDR13_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR13`"]
        pub struct PUPDR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR13_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR12_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR12`"]
        pub type PUPDR12_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR12`"]
        pub struct PUPDR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR12_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR11_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR11`"]
        pub type PUPDR11_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR11`"]
        pub struct PUPDR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR11_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR10_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR10`"]
        pub type PUPDR10_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR10`"]
        pub struct PUPDR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR10_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR9_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR9`"]
        pub type PUPDR9_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR9`"]
        pub struct PUPDR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR9_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR8_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR8`"]
        pub type PUPDR8_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR8`"]
        pub struct PUPDR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR8_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR7_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR7`"]
        pub type PUPDR7_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR7`"]
        pub struct PUPDR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR7_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR6_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR6`"]
        pub type PUPDR6_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR6`"]
        pub struct PUPDR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR6_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR5_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR5`"]
        pub type PUPDR5_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR5`"]
        pub struct PUPDR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR5_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR4_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR4`"]
        pub type PUPDR4_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR4`"]
        pub struct PUPDR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR4_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR3_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR3`"]
        pub type PUPDR3_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR3`"]
        pub struct PUPDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR3_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR2_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR2`"]
        pub type PUPDR2_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR2`"]
        pub struct PUPDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR2_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR1_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR1`"]
        pub type PUPDR1_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR1`"]
        pub struct PUPDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR1_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR0_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR0`"]
        pub type PUPDR0_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR0`"]
        pub struct PUPDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR0_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr15(&self) -> PUPDR15_R {
                PUPDR15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr14(&self) -> PUPDR14_R {
                PUPDR14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr13(&self) -> PUPDR13_R {
                PUPDR13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr12(&self) -> PUPDR12_R {
                PUPDR12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr11(&self) -> PUPDR11_R {
                PUPDR11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr10(&self) -> PUPDR10_R {
                PUPDR10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr9(&self) -> PUPDR9_R {
                PUPDR9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr8(&self) -> PUPDR8_R {
                PUPDR8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr7(&self) -> PUPDR7_R {
                PUPDR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr6(&self) -> PUPDR6_R {
                PUPDR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr5(&self) -> PUPDR5_R {
                PUPDR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr4(&self) -> PUPDR4_R {
                PUPDR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr3(&self) -> PUPDR3_R {
                PUPDR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr2(&self) -> PUPDR2_R {
                PUPDR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr1(&self) -> PUPDR1_R {
                PUPDR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr0(&self) -> PUPDR0_R {
                PUPDR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr15(&mut self) -> PUPDR15_W {
                PUPDR15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr14(&mut self) -> PUPDR14_W {
                PUPDR14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr13(&mut self) -> PUPDR13_W {
                PUPDR13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr12(&mut self) -> PUPDR12_W {
                PUPDR12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr11(&mut self) -> PUPDR11_W {
                PUPDR11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr10(&mut self) -> PUPDR10_W {
                PUPDR10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr9(&mut self) -> PUPDR9_W {
                PUPDR9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr8(&mut self) -> PUPDR8_W {
                PUPDR8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr7(&mut self) -> PUPDR7_W {
                PUPDR7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr6(&mut self) -> PUPDR6_W {
                PUPDR6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr5(&mut self) -> PUPDR5_W {
                PUPDR5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr4(&mut self) -> PUPDR4_W {
                PUPDR4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr3(&mut self) -> PUPDR3_W {
                PUPDR3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr2(&mut self) -> PUPDR2_W {
                PUPDR2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr1(&mut self) -> PUPDR1_W {
                PUPDR1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr0(&mut self) -> PUPDR0_W {
                PUPDR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port input data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idr](idr) module"]
    pub type IDR = crate::Reg<u32, _IDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IDR;
    #[doc = "`read()` method returns [idr::R](idr::R) reader structure"]
    impl crate::Readable for IDR {}
    #[doc = "GPIO port input data register"]
    pub mod idr {
        #[doc = "Reader of register IDR"]
        pub type R = crate::R<u32, super::IDR>;
        #[doc = "Port input data (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IDR15_A {
            #[doc = "1: Input is logic high"]
            HIGH = 1,
            #[doc = "0: Input is logic low"]
            LOW = 0,
        }
        impl From<IDR15_A> for bool {
            #[inline(always)]
            fn from(variant: IDR15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IDR15`"]
        pub type IDR15_R = crate::R<bool, IDR15_A>;
        impl IDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IDR15_A {
                match self.bits {
                    true => IDR15_A::HIGH,
                    false => IDR15_A::LOW,
                }
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == IDR15_A::HIGH
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == IDR15_A::LOW
            }
        }
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR14_A = IDR15_A;
        #[doc = "Reader of field `IDR14`"]
        pub type IDR14_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR13_A = IDR15_A;
        #[doc = "Reader of field `IDR13`"]
        pub type IDR13_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR12_A = IDR15_A;
        #[doc = "Reader of field `IDR12`"]
        pub type IDR12_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR11_A = IDR15_A;
        #[doc = "Reader of field `IDR11`"]
        pub type IDR11_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR10_A = IDR15_A;
        #[doc = "Reader of field `IDR10`"]
        pub type IDR10_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR9_A = IDR15_A;
        #[doc = "Reader of field `IDR9`"]
        pub type IDR9_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR8_A = IDR15_A;
        #[doc = "Reader of field `IDR8`"]
        pub type IDR8_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR7_A = IDR15_A;
        #[doc = "Reader of field `IDR7`"]
        pub type IDR7_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR6_A = IDR15_A;
        #[doc = "Reader of field `IDR6`"]
        pub type IDR6_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR5_A = IDR15_A;
        #[doc = "Reader of field `IDR5`"]
        pub type IDR5_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR4_A = IDR15_A;
        #[doc = "Reader of field `IDR4`"]
        pub type IDR4_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR3_A = IDR15_A;
        #[doc = "Reader of field `IDR3`"]
        pub type IDR3_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR2_A = IDR15_A;
        #[doc = "Reader of field `IDR2`"]
        pub type IDR2_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR1_A = IDR15_A;
        #[doc = "Reader of field `IDR1`"]
        pub type IDR1_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR0_A = IDR15_A;
        #[doc = "Reader of field `IDR0`"]
        pub type IDR0_R = crate::R<bool, IDR15_A>;
        impl R {
            #[doc = "Bit 15 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr15(&self) -> IDR15_R {
                IDR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr14(&self) -> IDR14_R {
                IDR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr13(&self) -> IDR13_R {
                IDR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr12(&self) -> IDR12_R {
                IDR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr11(&self) -> IDR11_R {
                IDR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr10(&self) -> IDR10_R {
                IDR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr9(&self) -> IDR9_R {
                IDR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr8(&self) -> IDR8_R {
                IDR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr7(&self) -> IDR7_R {
                IDR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr6(&self) -> IDR6_R {
                IDR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr5(&self) -> IDR5_R {
                IDR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr4(&self) -> IDR4_R {
                IDR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr3(&self) -> IDR3_R {
                IDR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr2(&self) -> IDR2_R {
                IDR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr1(&self) -> IDR1_R {
                IDR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr0(&self) -> IDR0_R {
                IDR0_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "GPIO port output data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [odr](odr) module"]
    pub type ODR = crate::Reg<u32, _ODR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ODR;
    #[doc = "`read()` method returns [odr::R](odr::R) reader structure"]
    impl crate::Readable for ODR {}
    #[doc = "`write(|w| ..)` method takes [odr::W](odr::W) writer structure"]
    impl crate::Writable for ODR {}
    #[doc = "GPIO port output data register"]
    pub mod odr {
        #[doc = "Reader of register ODR"]
        pub type R = crate::R<u32, super::ODR>;
        #[doc = "Writer for register ODR"]
        pub type W = crate::W<u32, super::ODR>;
        #[doc = "Register ODR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ODR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port output data (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ODR15_A {
            #[doc = "1: Set output to logic high"]
            HIGH = 1,
            #[doc = "0: Set output to logic low"]
            LOW = 0,
        }
        impl From<ODR15_A> for bool {
            #[inline(always)]
            fn from(variant: ODR15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ODR15`"]
        pub type ODR15_R = crate::R<bool, ODR15_A>;
        impl ODR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ODR15_A {
                match self.bits {
                    true => ODR15_A::HIGH,
                    false => ODR15_A::LOW,
                }
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == ODR15_A::HIGH
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == ODR15_A::LOW
            }
        }
        #[doc = "Write proxy for field `ODR15`"]
        pub struct ODR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR14_A = ODR15_A;
        #[doc = "Reader of field `ODR14`"]
        pub type ODR14_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR14`"]
        pub struct ODR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR13_A = ODR15_A;
        #[doc = "Reader of field `ODR13`"]
        pub type ODR13_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR13`"]
        pub struct ODR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR12_A = ODR15_A;
        #[doc = "Reader of field `ODR12`"]
        pub type ODR12_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR12`"]
        pub struct ODR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR11_A = ODR15_A;
        #[doc = "Reader of field `ODR11`"]
        pub type ODR11_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR11`"]
        pub struct ODR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR10_A = ODR15_A;
        #[doc = "Reader of field `ODR10`"]
        pub type ODR10_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR10`"]
        pub struct ODR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR9_A = ODR15_A;
        #[doc = "Reader of field `ODR9`"]
        pub type ODR9_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR9`"]
        pub struct ODR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR8_A = ODR15_A;
        #[doc = "Reader of field `ODR8`"]
        pub type ODR8_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR8`"]
        pub struct ODR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR7_A = ODR15_A;
        #[doc = "Reader of field `ODR7`"]
        pub type ODR7_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR7`"]
        pub struct ODR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR6_A = ODR15_A;
        #[doc = "Reader of field `ODR6`"]
        pub type ODR6_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR6`"]
        pub struct ODR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR5_A = ODR15_A;
        #[doc = "Reader of field `ODR5`"]
        pub type ODR5_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR5`"]
        pub struct ODR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR4_A = ODR15_A;
        #[doc = "Reader of field `ODR4`"]
        pub type ODR4_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR4`"]
        pub struct ODR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR3_A = ODR15_A;
        #[doc = "Reader of field `ODR3`"]
        pub type ODR3_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR3`"]
        pub struct ODR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR2_A = ODR15_A;
        #[doc = "Reader of field `ODR2`"]
        pub type ODR2_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR2`"]
        pub struct ODR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR1_A = ODR15_A;
        #[doc = "Reader of field `ODR1`"]
        pub type ODR1_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR1`"]
        pub struct ODR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR0_A = ODR15_A;
        #[doc = "Reader of field `ODR0`"]
        pub type ODR0_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR0`"]
        pub struct ODR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr15(&self) -> ODR15_R {
                ODR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr14(&self) -> ODR14_R {
                ODR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr13(&self) -> ODR13_R {
                ODR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr12(&self) -> ODR12_R {
                ODR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr11(&self) -> ODR11_R {
                ODR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr10(&self) -> ODR10_R {
                ODR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr9(&self) -> ODR9_R {
                ODR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr8(&self) -> ODR8_R {
                ODR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr7(&self) -> ODR7_R {
                ODR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr6(&self) -> ODR6_R {
                ODR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr5(&self) -> ODR5_R {
                ODR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr4(&self) -> ODR4_R {
                ODR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr3(&self) -> ODR3_R {
                ODR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr2(&self) -> ODR2_R {
                ODR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr1(&self) -> ODR1_R {
                ODR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr0(&self) -> ODR0_R {
                ODR0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr15(&mut self) -> ODR15_W {
                ODR15_W { w: self }
            }
            #[doc = "Bit 14 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr14(&mut self) -> ODR14_W {
                ODR14_W { w: self }
            }
            #[doc = "Bit 13 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr13(&mut self) -> ODR13_W {
                ODR13_W { w: self }
            }
            #[doc = "Bit 12 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr12(&mut self) -> ODR12_W {
                ODR12_W { w: self }
            }
            #[doc = "Bit 11 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr11(&mut self) -> ODR11_W {
                ODR11_W { w: self }
            }
            #[doc = "Bit 10 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr10(&mut self) -> ODR10_W {
                ODR10_W { w: self }
            }
            #[doc = "Bit 9 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr9(&mut self) -> ODR9_W {
                ODR9_W { w: self }
            }
            #[doc = "Bit 8 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr8(&mut self) -> ODR8_W {
                ODR8_W { w: self }
            }
            #[doc = "Bit 7 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr7(&mut self) -> ODR7_W {
                ODR7_W { w: self }
            }
            #[doc = "Bit 6 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr6(&mut self) -> ODR6_W {
                ODR6_W { w: self }
            }
            #[doc = "Bit 5 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr5(&mut self) -> ODR5_W {
                ODR5_W { w: self }
            }
            #[doc = "Bit 4 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr4(&mut self) -> ODR4_W {
                ODR4_W { w: self }
            }
            #[doc = "Bit 3 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr3(&mut self) -> ODR3_W {
                ODR3_W { w: self }
            }
            #[doc = "Bit 2 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr2(&mut self) -> ODR2_W {
                ODR2_W { w: self }
            }
            #[doc = "Bit 1 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr1(&mut self) -> ODR1_W {
                ODR1_W { w: self }
            }
            #[doc = "Bit 0 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr0(&mut self) -> ODR0_W {
                ODR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port bit set/reset register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bsrr](bsrr) module"]
    pub type BSRR = crate::Reg<u32, _BSRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BSRR;
    #[doc = "`write(|w| ..)` method takes [bsrr::W](bsrr::W) writer structure"]
    impl crate::Writable for BSRR {}
    #[doc = "GPIO port bit set/reset register"]
    pub mod bsrr {
        #[doc = "Writer for register BSRR"]
        pub type W = crate::W<u32, super::BSRR>;
        #[doc = "Register BSRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BSRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BR15_AW {
            #[doc = "1: Resets the corresponding ODRx bit"]
            RESET = 1,
        }
        impl From<BR15_AW> for bool {
            #[inline(always)]
            fn from(variant: BR15_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BR15`"]
        pub struct BR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR14_AW = BR15_AW;
        #[doc = "Write proxy for field `BR14`"]
        pub struct BR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR13_AW = BR15_AW;
        #[doc = "Write proxy for field `BR13`"]
        pub struct BR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR12_AW = BR15_AW;
        #[doc = "Write proxy for field `BR12`"]
        pub struct BR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR11_AW = BR15_AW;
        #[doc = "Write proxy for field `BR11`"]
        pub struct BR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR10_AW = BR15_AW;
        #[doc = "Write proxy for field `BR10`"]
        pub struct BR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR9_AW = BR15_AW;
        #[doc = "Write proxy for field `BR9`"]
        pub struct BR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR8_AW = BR15_AW;
        #[doc = "Write proxy for field `BR8`"]
        pub struct BR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR7_AW = BR15_AW;
        #[doc = "Write proxy for field `BR7`"]
        pub struct BR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR6_AW = BR15_AW;
        #[doc = "Write proxy for field `BR6`"]
        pub struct BR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR5_AW = BR15_AW;
        #[doc = "Write proxy for field `BR5`"]
        pub struct BR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR4_AW = BR15_AW;
        #[doc = "Write proxy for field `BR4`"]
        pub struct BR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR3_AW = BR15_AW;
        #[doc = "Write proxy for field `BR3`"]
        pub struct BR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR2_AW = BR15_AW;
        #[doc = "Write proxy for field `BR2`"]
        pub struct BR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR1_AW = BR15_AW;
        #[doc = "Write proxy for field `BR1`"]
        pub struct BR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BR0_AW = BR15_AW;
        #[doc = "Write proxy for field `BR0`"]
        pub struct BR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BS15_AW {
            #[doc = "1: Sets the corresponding ODRx bit"]
            SET = 1,
        }
        impl From<BS15_AW> for bool {
            #[inline(always)]
            fn from(variant: BS15_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BS15`"]
        pub struct BS15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS14_AW = BS15_AW;
        #[doc = "Write proxy for field `BS14`"]
        pub struct BS14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS13_AW = BS15_AW;
        #[doc = "Write proxy for field `BS13`"]
        pub struct BS13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS12_AW = BS15_AW;
        #[doc = "Write proxy for field `BS12`"]
        pub struct BS12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS11_AW = BS15_AW;
        #[doc = "Write proxy for field `BS11`"]
        pub struct BS11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS10_AW = BS15_AW;
        #[doc = "Write proxy for field `BS10`"]
        pub struct BS10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS9_AW = BS15_AW;
        #[doc = "Write proxy for field `BS9`"]
        pub struct BS9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS8_AW = BS15_AW;
        #[doc = "Write proxy for field `BS8`"]
        pub struct BS8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS7_AW = BS15_AW;
        #[doc = "Write proxy for field `BS7`"]
        pub struct BS7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS6_AW = BS15_AW;
        #[doc = "Write proxy for field `BS6`"]
        pub struct BS6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS5_AW = BS15_AW;
        #[doc = "Write proxy for field `BS5`"]
        pub struct BS5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS4_AW = BS15_AW;
        #[doc = "Write proxy for field `BS4`"]
        pub struct BS4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS3_AW = BS15_AW;
        #[doc = "Write proxy for field `BS3`"]
        pub struct BS3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS2_AW = BS15_AW;
        #[doc = "Write proxy for field `BS2`"]
        pub struct BS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS1_AW = BS15_AW;
        #[doc = "Write proxy for field `BS1`"]
        pub struct BS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS0_AW = BS15_AW;
        #[doc = "Write proxy for field `BS0`"]
        pub struct BS0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 31 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br15(&mut self) -> BR15_W {
                BR15_W { w: self }
            }
            #[doc = "Bit 30 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br14(&mut self) -> BR14_W {
                BR14_W { w: self }
            }
            #[doc = "Bit 29 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br13(&mut self) -> BR13_W {
                BR13_W { w: self }
            }
            #[doc = "Bit 28 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br12(&mut self) -> BR12_W {
                BR12_W { w: self }
            }
            #[doc = "Bit 27 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br11(&mut self) -> BR11_W {
                BR11_W { w: self }
            }
            #[doc = "Bit 26 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br10(&mut self) -> BR10_W {
                BR10_W { w: self }
            }
            #[doc = "Bit 25 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br9(&mut self) -> BR9_W {
                BR9_W { w: self }
            }
            #[doc = "Bit 24 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br8(&mut self) -> BR8_W {
                BR8_W { w: self }
            }
            #[doc = "Bit 23 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br7(&mut self) -> BR7_W {
                BR7_W { w: self }
            }
            #[doc = "Bit 22 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br6(&mut self) -> BR6_W {
                BR6_W { w: self }
            }
            #[doc = "Bit 21 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br5(&mut self) -> BR5_W {
                BR5_W { w: self }
            }
            #[doc = "Bit 20 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br4(&mut self) -> BR4_W {
                BR4_W { w: self }
            }
            #[doc = "Bit 19 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br3(&mut self) -> BR3_W {
                BR3_W { w: self }
            }
            #[doc = "Bit 18 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br2(&mut self) -> BR2_W {
                BR2_W { w: self }
            }
            #[doc = "Bit 17 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br1(&mut self) -> BR1_W {
                BR1_W { w: self }
            }
            #[doc = "Bit 16 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn br0(&mut self) -> BR0_W {
                BR0_W { w: self }
            }
            #[doc = "Bit 15 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs15(&mut self) -> BS15_W {
                BS15_W { w: self }
            }
            #[doc = "Bit 14 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs14(&mut self) -> BS14_W {
                BS14_W { w: self }
            }
            #[doc = "Bit 13 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs13(&mut self) -> BS13_W {
                BS13_W { w: self }
            }
            #[doc = "Bit 12 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs12(&mut self) -> BS12_W {
                BS12_W { w: self }
            }
            #[doc = "Bit 11 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs11(&mut self) -> BS11_W {
                BS11_W { w: self }
            }
            #[doc = "Bit 10 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs10(&mut self) -> BS10_W {
                BS10_W { w: self }
            }
            #[doc = "Bit 9 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs9(&mut self) -> BS9_W {
                BS9_W { w: self }
            }
            #[doc = "Bit 8 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs8(&mut self) -> BS8_W {
                BS8_W { w: self }
            }
            #[doc = "Bit 7 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs7(&mut self) -> BS7_W {
                BS7_W { w: self }
            }
            #[doc = "Bit 6 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs6(&mut self) -> BS6_W {
                BS6_W { w: self }
            }
            #[doc = "Bit 5 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs5(&mut self) -> BS5_W {
                BS5_W { w: self }
            }
            #[doc = "Bit 4 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs4(&mut self) -> BS4_W {
                BS4_W { w: self }
            }
            #[doc = "Bit 3 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs3(&mut self) -> BS3_W {
                BS3_W { w: self }
            }
            #[doc = "Bit 2 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs2(&mut self) -> BS2_W {
                BS2_W { w: self }
            }
            #[doc = "Bit 1 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs1(&mut self) -> BS1_W {
                BS1_W { w: self }
            }
            #[doc = "Bit 0 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs0(&mut self) -> BS0_W {
                BS0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port configuration lock register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lckr](lckr) module"]
    pub type LCKR = crate::Reg<u32, _LCKR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LCKR;
    #[doc = "`read()` method returns [lckr::R](lckr::R) reader structure"]
    impl crate::Readable for LCKR {}
    #[doc = "`write(|w| ..)` method takes [lckr::W](lckr::W) writer structure"]
    impl crate::Writable for LCKR {}
    #[doc = "GPIO port configuration lock register"]
    pub mod lckr {
        #[doc = "Reader of register LCKR"]
        pub type R = crate::R<u32, super::LCKR>;
        #[doc = "Writer for register LCKR"]
        pub type W = crate::W<u32, super::LCKR>;
        #[doc = "Register LCKR `reset()`'s with value 0"]
        impl crate::ResetValue for super::LCKR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCKK_A {
            #[doc = "0: Port configuration lock key not active"]
            NOTACTIVE = 0,
            #[doc = "1: Port configuration lock key active"]
            ACTIVE = 1,
        }
        impl From<LCKK_A> for bool {
            #[inline(always)]
            fn from(variant: LCKK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCKK`"]
        pub type LCKK_R = crate::R<bool, LCKK_A>;
        impl LCKK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCKK_A {
                match self.bits {
                    false => LCKK_A::NOTACTIVE,
                    true => LCKK_A::ACTIVE,
                }
            }
            #[doc = "Checks if the value of the field is `NOTACTIVE`"]
            #[inline(always)]
            pub fn is_not_active(&self) -> bool {
                *self == LCKK_A::NOTACTIVE
            }
            #[doc = "Checks if the value of the field is `ACTIVE`"]
            #[inline(always)]
            pub fn is_active(&self) -> bool {
                *self == LCKK_A::ACTIVE
            }
        }
        #[doc = "Write proxy for field `LCKK`"]
        pub struct LCKK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCKK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCKK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration lock key not active"]
            #[inline(always)]
            pub fn not_active(self) -> &'a mut W {
                self.variant(LCKK_A::NOTACTIVE)
            }
            #[doc = "Port configuration lock key active"]
            #[inline(always)]
            pub fn active(self) -> &'a mut W {
                self.variant(LCKK_A::ACTIVE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCK15_A {
            #[doc = "0: Port configuration not locked"]
            UNLOCKED = 0,
            #[doc = "1: Port configuration locked"]
            LOCKED = 1,
        }
        impl From<LCK15_A> for bool {
            #[inline(always)]
            fn from(variant: LCK15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCK15`"]
        pub type LCK15_R = crate::R<bool, LCK15_A>;
        impl LCK15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCK15_A {
                match self.bits {
                    false => LCK15_A::UNLOCKED,
                    true => LCK15_A::LOCKED,
                }
            }
            #[doc = "Checks if the value of the field is `UNLOCKED`"]
            #[inline(always)]
            pub fn is_unlocked(&self) -> bool {
                *self == LCK15_A::UNLOCKED
            }
            #[doc = "Checks if the value of the field is `LOCKED`"]
            #[inline(always)]
            pub fn is_locked(&self) -> bool {
                *self == LCK15_A::LOCKED
            }
        }
        #[doc = "Write proxy for field `LCK15`"]
        pub struct LCK15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK14_A = LCK15_A;
        #[doc = "Reader of field `LCK14`"]
        pub type LCK14_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK14`"]
        pub struct LCK14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK13_A = LCK15_A;
        #[doc = "Reader of field `LCK13`"]
        pub type LCK13_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK13`"]
        pub struct LCK13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK12_A = LCK15_A;
        #[doc = "Reader of field `LCK12`"]
        pub type LCK12_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK12`"]
        pub struct LCK12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK11_A = LCK15_A;
        #[doc = "Reader of field `LCK11`"]
        pub type LCK11_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK11`"]
        pub struct LCK11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK10_A = LCK15_A;
        #[doc = "Reader of field `LCK10`"]
        pub type LCK10_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK10`"]
        pub struct LCK10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCK9_A {
            #[doc = "0: Port configuration not locked"]
            UNLOCKED = 0,
            #[doc = "1: Port configuration locked"]
            LOCKED = 1,
        }
        impl From<LCK9_A> for bool {
            #[inline(always)]
            fn from(variant: LCK9_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCK9`"]
        pub type LCK9_R = crate::R<bool, LCK9_A>;
        impl LCK9_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCK9_A {
                match self.bits {
                    false => LCK9_A::UNLOCKED,
                    true => LCK9_A::LOCKED,
                }
            }
            #[doc = "Checks if the value of the field is `UNLOCKED`"]
            #[inline(always)]
            pub fn is_unlocked(&self) -> bool {
                *self == LCK9_A::UNLOCKED
            }
            #[doc = "Checks if the value of the field is `LOCKED`"]
            #[inline(always)]
            pub fn is_locked(&self) -> bool {
                *self == LCK9_A::LOCKED
            }
        }
        #[doc = "Write proxy for field `LCK9`"]
        pub struct LCK9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK8_A = LCK9_A;
        #[doc = "Reader of field `LCK8`"]
        pub type LCK8_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK8`"]
        pub struct LCK8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK7_A = LCK9_A;
        #[doc = "Reader of field `LCK7`"]
        pub type LCK7_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK7`"]
        pub struct LCK7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK6_A = LCK9_A;
        #[doc = "Reader of field `LCK6`"]
        pub type LCK6_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK6`"]
        pub struct LCK6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK5_A = LCK9_A;
        #[doc = "Reader of field `LCK5`"]
        pub type LCK5_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK5`"]
        pub struct LCK5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK4_A = LCK9_A;
        #[doc = "Reader of field `LCK4`"]
        pub type LCK4_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK4`"]
        pub struct LCK4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK3_A = LCK9_A;
        #[doc = "Reader of field `LCK3`"]
        pub type LCK3_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK3`"]
        pub struct LCK3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK2_A = LCK9_A;
        #[doc = "Reader of field `LCK2`"]
        pub type LCK2_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK2`"]
        pub struct LCK2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK1_A = LCK9_A;
        #[doc = "Reader of field `LCK1`"]
        pub type LCK1_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK1`"]
        pub struct LCK1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK0_A = LCK9_A;
        #[doc = "Reader of field `LCK0`"]
        pub type LCK0_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK0`"]
        pub struct LCK0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lckk(&self) -> LCKK_R {
                LCKK_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck15(&self) -> LCK15_R {
                LCK15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck14(&self) -> LCK14_R {
                LCK14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck13(&self) -> LCK13_R {
                LCK13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck12(&self) -> LCK12_R {
                LCK12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck11(&self) -> LCK11_R {
                LCK11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck10(&self) -> LCK10_R {
                LCK10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck9(&self) -> LCK9_R {
                LCK9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck8(&self) -> LCK8_R {
                LCK8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck7(&self) -> LCK7_R {
                LCK7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck6(&self) -> LCK6_R {
                LCK6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck5(&self) -> LCK5_R {
                LCK5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck4(&self) -> LCK4_R {
                LCK4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck3(&self) -> LCK3_R {
                LCK3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck2(&self) -> LCK2_R {
                LCK2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck1(&self) -> LCK1_R {
                LCK1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck0(&self) -> LCK0_R {
                LCK0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lckk(&mut self) -> LCKK_W {
                LCKK_W { w: self }
            }
            #[doc = "Bit 15 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck15(&mut self) -> LCK15_W {
                LCK15_W { w: self }
            }
            #[doc = "Bit 14 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck14(&mut self) -> LCK14_W {
                LCK14_W { w: self }
            }
            #[doc = "Bit 13 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck13(&mut self) -> LCK13_W {
                LCK13_W { w: self }
            }
            #[doc = "Bit 12 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck12(&mut self) -> LCK12_W {
                LCK12_W { w: self }
            }
            #[doc = "Bit 11 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck11(&mut self) -> LCK11_W {
                LCK11_W { w: self }
            }
            #[doc = "Bit 10 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck10(&mut self) -> LCK10_W {
                LCK10_W { w: self }
            }
            #[doc = "Bit 9 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck9(&mut self) -> LCK9_W {
                LCK9_W { w: self }
            }
            #[doc = "Bit 8 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck8(&mut self) -> LCK8_W {
                LCK8_W { w: self }
            }
            #[doc = "Bit 7 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck7(&mut self) -> LCK7_W {
                LCK7_W { w: self }
            }
            #[doc = "Bit 6 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck6(&mut self) -> LCK6_W {
                LCK6_W { w: self }
            }
            #[doc = "Bit 5 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck5(&mut self) -> LCK5_W {
                LCK5_W { w: self }
            }
            #[doc = "Bit 4 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck4(&mut self) -> LCK4_W {
                LCK4_W { w: self }
            }
            #[doc = "Bit 3 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck3(&mut self) -> LCK3_W {
                LCK3_W { w: self }
            }
            #[doc = "Bit 2 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck2(&mut self) -> LCK2_W {
                LCK2_W { w: self }
            }
            #[doc = "Bit 1 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck1(&mut self) -> LCK1_W {
                LCK1_W { w: self }
            }
            #[doc = "Bit 0 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck0(&mut self) -> LCK0_W {
                LCK0_W { w: self }
            }
        }
    }
    #[doc = "AFRL\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [afrl](afrl) module"]
    pub type AFRL = crate::Reg<u32, _AFRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AFRL;
    #[doc = "`read()` method returns [afrl::R](afrl::R) reader structure"]
    impl crate::Readable for AFRL {}
    #[doc = "`write(|w| ..)` method takes [afrl::W](afrl::W) writer structure"]
    impl crate::Writable for AFRL {}
    #[doc = "AFRL"]
    pub mod afrl {
        #[doc = "Reader of register AFRL"]
        pub type R = crate::R<u32, super::AFRL>;
        #[doc = "Writer for register AFRL"]
        pub type W = crate::W<u32, super::AFRL>;
        #[doc = "Register AFRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::AFRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum AFRL7_A {
            #[doc = "0: AF0"]
            AF0 = 0,
            #[doc = "1: AF1"]
            AF1 = 1,
            #[doc = "2: AF2"]
            AF2 = 2,
            #[doc = "3: AF3"]
            AF3 = 3,
            #[doc = "4: AF4"]
            AF4 = 4,
            #[doc = "5: AF5"]
            AF5 = 5,
            #[doc = "6: AF6"]
            AF6 = 6,
            #[doc = "7: AF7"]
            AF7 = 7,
            #[doc = "8: AF8"]
            AF8 = 8,
            #[doc = "9: AF9"]
            AF9 = 9,
            #[doc = "10: AF10"]
            AF10 = 10,
            #[doc = "11: AF11"]
            AF11 = 11,
            #[doc = "12: AF12"]
            AF12 = 12,
            #[doc = "13: AF13"]
            AF13 = 13,
            #[doc = "14: AF14"]
            AF14 = 14,
            #[doc = "15: AF15"]
            AF15 = 15,
        }
        impl From<AFRL7_A> for u8 {
            #[inline(always)]
            fn from(variant: AFRL7_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `AFRL7`"]
        pub type AFRL7_R = crate::R<u8, AFRL7_A>;
        impl AFRL7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AFRL7_A {
                match self.bits {
                    0 => AFRL7_A::AF0,
                    1 => AFRL7_A::AF1,
                    2 => AFRL7_A::AF2,
                    3 => AFRL7_A::AF3,
                    4 => AFRL7_A::AF4,
                    5 => AFRL7_A::AF5,
                    6 => AFRL7_A::AF6,
                    7 => AFRL7_A::AF7,
                    8 => AFRL7_A::AF8,
                    9 => AFRL7_A::AF9,
                    10 => AFRL7_A::AF10,
                    11 => AFRL7_A::AF11,
                    12 => AFRL7_A::AF12,
                    13 => AFRL7_A::AF13,
                    14 => AFRL7_A::AF14,
                    15 => AFRL7_A::AF15,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `AF0`"]
            #[inline(always)]
            pub fn is_af0(&self) -> bool {
                *self == AFRL7_A::AF0
            }
            #[doc = "Checks if the value of the field is `AF1`"]
            #[inline(always)]
            pub fn is_af1(&self) -> bool {
                *self == AFRL7_A::AF1
            }
            #[doc = "Checks if the value of the field is `AF2`"]
            #[inline(always)]
            pub fn is_af2(&self) -> bool {
                *self == AFRL7_A::AF2
            }
            #[doc = "Checks if the value of the field is `AF3`"]
            #[inline(always)]
            pub fn is_af3(&self) -> bool {
                *self == AFRL7_A::AF3
            }
            #[doc = "Checks if the value of the field is `AF4`"]
            #[inline(always)]
            pub fn is_af4(&self) -> bool {
                *self == AFRL7_A::AF4
            }
            #[doc = "Checks if the value of the field is `AF5`"]
            #[inline(always)]
            pub fn is_af5(&self) -> bool {
                *self == AFRL7_A::AF5
            }
            #[doc = "Checks if the value of the field is `AF6`"]
            #[inline(always)]
            pub fn is_af6(&self) -> bool {
                *self == AFRL7_A::AF6
            }
            #[doc = "Checks if the value of the field is `AF7`"]
            #[inline(always)]
            pub fn is_af7(&self) -> bool {
                *self == AFRL7_A::AF7
            }
            #[doc = "Checks if the value of the field is `AF8`"]
            #[inline(always)]
            pub fn is_af8(&self) -> bool {
                *self == AFRL7_A::AF8
            }
            #[doc = "Checks if the value of the field is `AF9`"]
            #[inline(always)]
            pub fn is_af9(&self) -> bool {
                *self == AFRL7_A::AF9
            }
            #[doc = "Checks if the value of the field is `AF10`"]
            #[inline(always)]
            pub fn is_af10(&self) -> bool {
                *self == AFRL7_A::AF10
            }
            #[doc = "Checks if the value of the field is `AF11`"]
            #[inline(always)]
            pub fn is_af11(&self) -> bool {
                *self == AFRL7_A::AF11
            }
            #[doc = "Checks if the value of the field is `AF12`"]
            #[inline(always)]
            pub fn is_af12(&self) -> bool {
                *self == AFRL7_A::AF12
            }
            #[doc = "Checks if the value of the field is `AF13`"]
            #[inline(always)]
            pub fn is_af13(&self) -> bool {
                *self == AFRL7_A::AF13
            }
            #[doc = "Checks if the value of the field is `AF14`"]
            #[inline(always)]
            pub fn is_af14(&self) -> bool {
                *self == AFRL7_A::AF14
            }
            #[doc = "Checks if the value of the field is `AF15`"]
            #[inline(always)]
            pub fn is_af15(&self) -> bool {
                *self == AFRL7_A::AF15
            }
        }
        #[doc = "Write proxy for field `AFRL7`"]
        pub struct AFRL7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL6_A = AFRL7_A;
        #[doc = "Reader of field `AFRL6`"]
        pub type AFRL6_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL6`"]
        pub struct AFRL6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL5_A = AFRL7_A;
        #[doc = "Reader of field `AFRL5`"]
        pub type AFRL5_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL5`"]
        pub struct AFRL5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL4_A = AFRL7_A;
        #[doc = "Reader of field `AFRL4`"]
        pub type AFRL4_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL4`"]
        pub struct AFRL4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL3_A = AFRL7_A;
        #[doc = "Reader of field `AFRL3`"]
        pub type AFRL3_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL3`"]
        pub struct AFRL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL2_A = AFRL7_A;
        #[doc = "Reader of field `AFRL2`"]
        pub type AFRL2_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL2`"]
        pub struct AFRL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL1_A = AFRL7_A;
        #[doc = "Reader of field `AFRL1`"]
        pub type AFRL1_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL1`"]
        pub struct AFRL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL0_A = AFRL7_A;
        #[doc = "Reader of field `AFRL0`"]
        pub type AFRL0_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL0`"]
        pub struct AFRL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl7(&self) -> AFRL7_R {
                AFRL7_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl6(&self) -> AFRL6_R {
                AFRL6_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl5(&self) -> AFRL5_R {
                AFRL5_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl4(&self) -> AFRL4_R {
                AFRL4_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl3(&self) -> AFRL3_R {
                AFRL3_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl2(&self) -> AFRL2_R {
                AFRL2_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl1(&self) -> AFRL1_R {
                AFRL1_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl0(&self) -> AFRL0_R {
                AFRL0_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl7(&mut self) -> AFRL7_W {
                AFRL7_W { w: self }
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl6(&mut self) -> AFRL6_W {
                AFRL6_W { w: self }
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl5(&mut self) -> AFRL5_W {
                AFRL5_W { w: self }
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl4(&mut self) -> AFRL4_W {
                AFRL4_W { w: self }
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl3(&mut self) -> AFRL3_W {
                AFRL3_W { w: self }
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl2(&mut self) -> AFRL2_W {
                AFRL2_W { w: self }
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl1(&mut self) -> AFRL1_W {
                AFRL1_W { w: self }
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl0(&mut self) -> AFRL0_W {
                AFRL0_W { w: self }
            }
        }
    }
    #[doc = "GPIO alternate function high register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [afrh](afrh) module"]
    pub type AFRH = crate::Reg<u32, _AFRH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AFRH;
    #[doc = "`read()` method returns [afrh::R](afrh::R) reader structure"]
    impl crate::Readable for AFRH {}
    #[doc = "`write(|w| ..)` method takes [afrh::W](afrh::W) writer structure"]
    impl crate::Writable for AFRH {}
    #[doc = "GPIO alternate function high register"]
    pub mod afrh {
        #[doc = "Reader of register AFRH"]
        pub type R = crate::R<u32, super::AFRH>;
        #[doc = "Writer for register AFRH"]
        pub type W = crate::W<u32, super::AFRH>;
        #[doc = "Register AFRH `reset()`'s with value 0"]
        impl crate::ResetValue for super::AFRH {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum AFRH15_A {
            #[doc = "0: AF0"]
            AF0 = 0,
            #[doc = "1: AF1"]
            AF1 = 1,
            #[doc = "2: AF2"]
            AF2 = 2,
            #[doc = "3: AF3"]
            AF3 = 3,
            #[doc = "4: AF4"]
            AF4 = 4,
            #[doc = "5: AF5"]
            AF5 = 5,
            #[doc = "6: AF6"]
            AF6 = 6,
            #[doc = "7: AF7"]
            AF7 = 7,
            #[doc = "8: AF8"]
            AF8 = 8,
            #[doc = "9: AF9"]
            AF9 = 9,
            #[doc = "10: AF10"]
            AF10 = 10,
            #[doc = "11: AF11"]
            AF11 = 11,
            #[doc = "12: AF12"]
            AF12 = 12,
            #[doc = "13: AF13"]
            AF13 = 13,
            #[doc = "14: AF14"]
            AF14 = 14,
            #[doc = "15: AF15"]
            AF15 = 15,
        }
        impl From<AFRH15_A> for u8 {
            #[inline(always)]
            fn from(variant: AFRH15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `AFRH15`"]
        pub type AFRH15_R = crate::R<u8, AFRH15_A>;
        impl AFRH15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AFRH15_A {
                match self.bits {
                    0 => AFRH15_A::AF0,
                    1 => AFRH15_A::AF1,
                    2 => AFRH15_A::AF2,
                    3 => AFRH15_A::AF3,
                    4 => AFRH15_A::AF4,
                    5 => AFRH15_A::AF5,
                    6 => AFRH15_A::AF6,
                    7 => AFRH15_A::AF7,
                    8 => AFRH15_A::AF8,
                    9 => AFRH15_A::AF9,
                    10 => AFRH15_A::AF10,
                    11 => AFRH15_A::AF11,
                    12 => AFRH15_A::AF12,
                    13 => AFRH15_A::AF13,
                    14 => AFRH15_A::AF14,
                    15 => AFRH15_A::AF15,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `AF0`"]
            #[inline(always)]
            pub fn is_af0(&self) -> bool {
                *self == AFRH15_A::AF0
            }
            #[doc = "Checks if the value of the field is `AF1`"]
            #[inline(always)]
            pub fn is_af1(&self) -> bool {
                *self == AFRH15_A::AF1
            }
            #[doc = "Checks if the value of the field is `AF2`"]
            #[inline(always)]
            pub fn is_af2(&self) -> bool {
                *self == AFRH15_A::AF2
            }
            #[doc = "Checks if the value of the field is `AF3`"]
            #[inline(always)]
            pub fn is_af3(&self) -> bool {
                *self == AFRH15_A::AF3
            }
            #[doc = "Checks if the value of the field is `AF4`"]
            #[inline(always)]
            pub fn is_af4(&self) -> bool {
                *self == AFRH15_A::AF4
            }
            #[doc = "Checks if the value of the field is `AF5`"]
            #[inline(always)]
            pub fn is_af5(&self) -> bool {
                *self == AFRH15_A::AF5
            }
            #[doc = "Checks if the value of the field is `AF6`"]
            #[inline(always)]
            pub fn is_af6(&self) -> bool {
                *self == AFRH15_A::AF6
            }
            #[doc = "Checks if the value of the field is `AF7`"]
            #[inline(always)]
            pub fn is_af7(&self) -> bool {
                *self == AFRH15_A::AF7
            }
            #[doc = "Checks if the value of the field is `AF8`"]
            #[inline(always)]
            pub fn is_af8(&self) -> bool {
                *self == AFRH15_A::AF8
            }
            #[doc = "Checks if the value of the field is `AF9`"]
            #[inline(always)]
            pub fn is_af9(&self) -> bool {
                *self == AFRH15_A::AF9
            }
            #[doc = "Checks if the value of the field is `AF10`"]
            #[inline(always)]
            pub fn is_af10(&self) -> bool {
                *self == AFRH15_A::AF10
            }
            #[doc = "Checks if the value of the field is `AF11`"]
            #[inline(always)]
            pub fn is_af11(&self) -> bool {
                *self == AFRH15_A::AF11
            }
            #[doc = "Checks if the value of the field is `AF12`"]
            #[inline(always)]
            pub fn is_af12(&self) -> bool {
                *self == AFRH15_A::AF12
            }
            #[doc = "Checks if the value of the field is `AF13`"]
            #[inline(always)]
            pub fn is_af13(&self) -> bool {
                *self == AFRH15_A::AF13
            }
            #[doc = "Checks if the value of the field is `AF14`"]
            #[inline(always)]
            pub fn is_af14(&self) -> bool {
                *self == AFRH15_A::AF14
            }
            #[doc = "Checks if the value of the field is `AF15`"]
            #[inline(always)]
            pub fn is_af15(&self) -> bool {
                *self == AFRH15_A::AF15
            }
        }
        #[doc = "Write proxy for field `AFRH15`"]
        pub struct AFRH15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH14_A = AFRH15_A;
        #[doc = "Reader of field `AFRH14`"]
        pub type AFRH14_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH14`"]
        pub struct AFRH14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH13_A = AFRH15_A;
        #[doc = "Reader of field `AFRH13`"]
        pub type AFRH13_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH13`"]
        pub struct AFRH13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH12_A = AFRH15_A;
        #[doc = "Reader of field `AFRH12`"]
        pub type AFRH12_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH12`"]
        pub struct AFRH12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH11_A = AFRH15_A;
        #[doc = "Reader of field `AFRH11`"]
        pub type AFRH11_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH11`"]
        pub struct AFRH11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH10_A = AFRH15_A;
        #[doc = "Reader of field `AFRH10`"]
        pub type AFRH10_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH10`"]
        pub struct AFRH10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH9_A = AFRH15_A;
        #[doc = "Reader of field `AFRH9`"]
        pub type AFRH9_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH9`"]
        pub struct AFRH9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH8_A = AFRH15_A;
        #[doc = "Reader of field `AFRH8`"]
        pub type AFRH8_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH8`"]
        pub struct AFRH8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh15(&self) -> AFRH15_R {
                AFRH15_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh14(&self) -> AFRH14_R {
                AFRH14_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh13(&self) -> AFRH13_R {
                AFRH13_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh12(&self) -> AFRH12_R {
                AFRH12_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh11(&self) -> AFRH11_R {
                AFRH11_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh10(&self) -> AFRH10_R {
                AFRH10_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh9(&self) -> AFRH9_R {
                AFRH9_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh8(&self) -> AFRH8_R {
                AFRH8_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh15(&mut self) -> AFRH15_W {
                AFRH15_W { w: self }
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh14(&mut self) -> AFRH14_W {
                AFRH14_W { w: self }
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh13(&mut self) -> AFRH13_W {
                AFRH13_W { w: self }
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh12(&mut self) -> AFRH12_W {
                AFRH12_W { w: self }
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh11(&mut self) -> AFRH11_W {
                AFRH11_W { w: self }
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh10(&mut self) -> AFRH10_W {
                AFRH10_W { w: self }
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh9(&mut self) -> AFRH9_W {
                AFRH9_W { w: self }
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh8(&mut self) -> AFRH8_W {
                AFRH8_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOD {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOD {}
impl GPIOD {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        0x4002_0c00 as *const _
    }
}
impl Deref for GPIOD {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOD::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOE {}
impl GPIOE {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        0x4002_1000 as *const _
    }
}
impl Deref for GPIOE {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOE::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOF {}
impl GPIOF {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        0x4002_1800 as *const _
    }
}
impl Deref for GPIOF {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOF::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOG {}
impl GPIOG {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        0x4002_1c00 as *const _
    }
}
impl Deref for GPIOG {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOG::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOH {}
impl GPIOH {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        0x4002_1400 as *const _
    }
}
impl Deref for GPIOH {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOH::ptr() }
    }
}
#[doc = "Inter-integrated circuit"]
pub struct I2C1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C1 {}
impl I2C1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        0x4000_5400 as *const _
    }
}
impl Deref for I2C1 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*I2C1::ptr() }
    }
}
#[doc = "Inter-integrated circuit"]
pub mod i2c1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - CR1"]
        pub cr1: CR1,
        #[doc = "0x04 - CR2"]
        pub cr2: CR2,
        #[doc = "0x08 - OAR1"]
        pub oar1: OAR1,
        #[doc = "0x0c - OAR2"]
        pub oar2: OAR2,
        #[doc = "0x10 - DR"]
        pub dr: DR,
        #[doc = "0x14 - SR1"]
        pub sr1: SR1,
        #[doc = "0x18 - SR2"]
        pub sr2: SR2,
        #[doc = "0x1c - CCR"]
        pub ccr: CCR,
        #[doc = "0x20 - TRISE"]
        pub trise: TRISE,
    }
    #[doc = "CR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "CR1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Software reset\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWRST_A {
            #[doc = "0: I2C peripheral not under reset"]
            NOTRESET = 0,
            #[doc = "1: I2C peripheral under reset"]
            RESET = 1,
        }
        impl From<SWRST_A> for bool {
            #[inline(always)]
            fn from(variant: SWRST_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWRST`"]
        pub type SWRST_R = crate::R<bool, SWRST_A>;
        impl SWRST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWRST_A {
                match self.bits {
                    false => SWRST_A::NOTRESET,
                    true => SWRST_A::RESET,
                }
            }
            #[doc = "Checks if the value of the field is `NOTRESET`"]
            #[inline(always)]
            pub fn is_not_reset(&self) -> bool {
                *self == SWRST_A::NOTRESET
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == SWRST_A::RESET
            }
        }
        #[doc = "Write proxy for field `SWRST`"]
        pub struct SWRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWRST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWRST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "I2C peripheral not under reset"]
            #[inline(always)]
            pub fn not_reset(self) -> &'a mut W {
                self.variant(SWRST_A::NOTRESET)
            }
            #[doc = "I2C peripheral under reset"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(SWRST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "SMBus alert\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ALERT_A {
            #[doc = "0: SMBA pin released high"]
            RELEASE = 0,
            #[doc = "1: SMBA pin driven low"]
            DRIVE = 1,
        }
        impl From<ALERT_A> for bool {
            #[inline(always)]
            fn from(variant: ALERT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ALERT`"]
        pub type ALERT_R = crate::R<bool, ALERT_A>;
        impl ALERT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ALERT_A {
                match self.bits {
                    false => ALERT_A::RELEASE,
                    true => ALERT_A::DRIVE,
                }
            }
            #[doc = "Checks if the value of the field is `RELEASE`"]
            #[inline(always)]
            pub fn is_release(&self) -> bool {
                *self == ALERT_A::RELEASE
            }
            #[doc = "Checks if the value of the field is `DRIVE`"]
            #[inline(always)]
            pub fn is_drive(&self) -> bool {
                *self == ALERT_A::DRIVE
            }
        }
        #[doc = "Write proxy for field `ALERT`"]
        pub struct ALERT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALERT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ALERT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SMBA pin released high"]
            #[inline(always)]
            pub fn release(self) -> &'a mut W {
                self.variant(ALERT_A::RELEASE)
            }
            #[doc = "SMBA pin driven low"]
            #[inline(always)]
            pub fn drive(self) -> &'a mut W {
                self.variant(ALERT_A::DRIVE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Packet error checking\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PEC_A {
            #[doc = "0: No PEC transfer"]
            DISABLED = 0,
            #[doc = "1: PEC transfer"]
            ENABLED = 1,
        }
        impl From<PEC_A> for bool {
            #[inline(always)]
            fn from(variant: PEC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PEC`"]
        pub type PEC_R = crate::R<bool, PEC_A>;
        impl PEC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PEC_A {
                match self.bits {
                    false => PEC_A::DISABLED,
                    true => PEC_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == PEC_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == PEC_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `PEC`"]
        pub struct PEC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PEC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No PEC transfer"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(PEC_A::DISABLED)
            }
            #[doc = "PEC transfer"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(PEC_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Acknowledge/PEC Position (for data reception)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POS_A {
            #[doc = "0: ACK bit controls the (N)ACK of the current byte being received"]
            CURRENT = 0,
            #[doc = "1: ACK bit controls the (N)ACK of the next byte to be received"]
            NEXT = 1,
        }
        impl From<POS_A> for bool {
            #[inline(always)]
            fn from(variant: POS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POS`"]
        pub type POS_R = crate::R<bool, POS_A>;
        impl POS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POS_A {
                match self.bits {
                    false => POS_A::CURRENT,
                    true => POS_A::NEXT,
                }
            }
            #[doc = "Checks if the value of the field is `CURRENT`"]
            #[inline(always)]
            pub fn is_current(&self) -> bool {
                *self == POS_A::CURRENT
            }
            #[doc = "Checks if the value of the field is `NEXT`"]
            #[inline(always)]
            pub fn is_next(&self) -> bool {
                *self == POS_A::NEXT
            }
        }
        #[doc = "Write proxy for field `POS`"]
        pub struct POS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ACK bit controls the (N)ACK of the current byte being received"]
            #[inline(always)]
            pub fn current(self) -> &'a mut W {
                self.variant(POS_A::CURRENT)
            }
            #[doc = "ACK bit controls the (N)ACK of the next byte to be received"]
            #[inline(always)]
            pub fn next(self) -> &'a mut W {
                self.variant(POS_A::NEXT)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Acknowledge enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ACK_A {
            #[doc = "0: No acknowledge returned"]
            NAK = 0,
            #[doc = "1: Acknowledge returned after a byte is received"]
            ACK = 1,
        }
        impl From<ACK_A> for bool {
            #[inline(always)]
            fn from(variant: ACK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ACK`"]
        pub type ACK_R = crate::R<bool, ACK_A>;
        impl ACK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACK_A {
                match self.bits {
                    false => ACK_A::NAK,
                    true => ACK_A::ACK,
                }
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == ACK_A::NAK
            }
            #[doc = "Checks if the value of the field is `ACK`"]
            #[inline(always)]
            pub fn is_ack(&self) -> bool {
                *self == ACK_A::ACK
            }
        }
        #[doc = "Write proxy for field `ACK`"]
        pub struct ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No acknowledge returned"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(ACK_A::NAK)
            }
            #[doc = "Acknowledge returned after a byte is received"]
            #[inline(always)]
            pub fn ack(self) -> &'a mut W {
                self.variant(ACK_A::ACK)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Stop generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum STOP_A {
            #[doc = "0: No Stop generation"]
            NOSTOP = 0,
            #[doc = "1: In master mode: stop generation after current byte/start, in slave mode: release SCL and SDA after current byte"]
            STOP = 1,
        }
        impl From<STOP_A> for bool {
            #[inline(always)]
            fn from(variant: STOP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `STOP`"]
        pub type STOP_R = crate::R<bool, STOP_A>;
        impl STOP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STOP_A {
                match self.bits {
                    false => STOP_A::NOSTOP,
                    true => STOP_A::STOP,
                }
            }
            #[doc = "Checks if the value of the field is `NOSTOP`"]
            #[inline(always)]
            pub fn is_no_stop(&self) -> bool {
                *self == STOP_A::NOSTOP
            }
            #[doc = "Checks if the value of the field is `STOP`"]
            #[inline(always)]
            pub fn is_stop(&self) -> bool {
                *self == STOP_A::STOP
            }
        }
        #[doc = "Write proxy for field `STOP`"]
        pub struct STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STOP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No Stop generation"]
            #[inline(always)]
            pub fn no_stop(self) -> &'a mut W {
                self.variant(STOP_A::NOSTOP)
            }
            #[doc = "In master mode: stop generation after current byte/start, in slave mode: release SCL and SDA after current byte"]
            #[inline(always)]
            pub fn stop(self) -> &'a mut W {
                self.variant(STOP_A::STOP)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Start generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum START_A {
            #[doc = "0: No Start generation"]
            NOSTART = 0,
            #[doc = "1: In master mode: repeated start generation, in slave mode: start generation when bus is free"]
            START = 1,
        }
        impl From<START_A> for bool {
            #[inline(always)]
            fn from(variant: START_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `START`"]
        pub type START_R = crate::R<bool, START_A>;
        impl START_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> START_A {
                match self.bits {
                    false => START_A::NOSTART,
                    true => START_A::START,
                }
            }
            #[doc = "Checks if the value of the field is `NOSTART`"]
            #[inline(always)]
            pub fn is_no_start(&self) -> bool {
                *self == START_A::NOSTART
            }
            #[doc = "Checks if the value of the field is `START`"]
            #[inline(always)]
            pub fn is_start(&self) -> bool {
                *self == START_A::START
            }
        }
        #[doc = "Write proxy for field `START`"]
        pub struct START_W<'a> {
            w: &'a mut W,
        }
        impl<'a> START_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: START_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No Start generation"]
            #[inline(always)]
            pub fn no_start(self) -> &'a mut W {
                self.variant(START_A::NOSTART)
            }
            #[doc = "In master mode: repeated start generation, in slave mode: start generation when bus is free"]
            #[inline(always)]
            pub fn start(self) -> &'a mut W {
                self.variant(START_A::START)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Clock stretching disable (Slave mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NOSTRETCH_A {
            #[doc = "0: Clock stretching enabled"]
            ENABLED = 0,
            #[doc = "1: Clock stretching disabled"]
            DISABLED = 1,
        }
        impl From<NOSTRETCH_A> for bool {
            #[inline(always)]
            fn from(variant: NOSTRETCH_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `NOSTRETCH`"]
        pub type NOSTRETCH_R = crate::R<bool, NOSTRETCH_A>;
        impl NOSTRETCH_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> NOSTRETCH_A {
                match self.bits {
                    false => NOSTRETCH_A::ENABLED,
                    true => NOSTRETCH_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == NOSTRETCH_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == NOSTRETCH_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `NOSTRETCH`"]
        pub struct NOSTRETCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NOSTRETCH_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: NOSTRETCH_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clock stretching enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(NOSTRETCH_A::ENABLED)
            }
            #[doc = "Clock stretching disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(NOSTRETCH_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "General call enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ENGC_A {
            #[doc = "0: General call disabled"]
            DISABLED = 0,
            #[doc = "1: General call enabled"]
            ENABLED = 1,
        }
        impl From<ENGC_A> for bool {
            #[inline(always)]
            fn from(variant: ENGC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ENGC`"]
        pub type ENGC_R = crate::R<bool, ENGC_A>;
        impl ENGC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ENGC_A {
                match self.bits {
                    false => ENGC_A::DISABLED,
                    true => ENGC_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ENGC_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ENGC_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ENGC`"]
        pub struct ENGC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENGC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ENGC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "General call disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ENGC_A::DISABLED)
            }
            #[doc = "General call enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ENGC_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "PEC enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ENPEC_A {
            #[doc = "0: PEC calculation disabled"]
            DISABLED = 0,
            #[doc = "1: PEC calculation enabled"]
            ENABLED = 1,
        }
        impl From<ENPEC_A> for bool {
            #[inline(always)]
            fn from(variant: ENPEC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ENPEC`"]
        pub type ENPEC_R = crate::R<bool, ENPEC_A>;
        impl ENPEC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ENPEC_A {
                match self.bits {
                    false => ENPEC_A::DISABLED,
                    true => ENPEC_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ENPEC_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ENPEC_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ENPEC`"]
        pub struct ENPEC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENPEC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ENPEC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PEC calculation disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ENPEC_A::DISABLED)
            }
            #[doc = "PEC calculation enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ENPEC_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "ARP enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ENARP_A {
            #[doc = "0: ARP disabled"]
            DISABLED = 0,
            #[doc = "1: ARP enabled"]
            ENABLED = 1,
        }
        impl From<ENARP_A> for bool {
            #[inline(always)]
            fn from(variant: ENARP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ENARP`"]
        pub type ENARP_R = crate::R<bool, ENARP_A>;
        impl ENARP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ENARP_A {
                match self.bits {
                    false => ENARP_A::DISABLED,
                    true => ENARP_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ENARP_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ENARP_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ENARP`"]
        pub struct ENARP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENARP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ENARP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ARP disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ENARP_A::DISABLED)
            }
            #[doc = "ARP enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ENARP_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "SMBus type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SMBTYPE_A {
            #[doc = "0: SMBus Device"]
            DEVICE = 0,
            #[doc = "1: SMBus Host"]
            HOST = 1,
        }
        impl From<SMBTYPE_A> for bool {
            #[inline(always)]
            fn from(variant: SMBTYPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SMBTYPE`"]
        pub type SMBTYPE_R = crate::R<bool, SMBTYPE_A>;
        impl SMBTYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SMBTYPE_A {
                match self.bits {
                    false => SMBTYPE_A::DEVICE,
                    true => SMBTYPE_A::HOST,
                }
            }
            #[doc = "Checks if the value of the field is `DEVICE`"]
            #[inline(always)]
            pub fn is_device(&self) -> bool {
                *self == SMBTYPE_A::DEVICE
            }
            #[doc = "Checks if the value of the field is `HOST`"]
            #[inline(always)]
            pub fn is_host(&self) -> bool {
                *self == SMBTYPE_A::HOST
            }
        }
        #[doc = "Write proxy for field `SMBTYPE`"]
        pub struct SMBTYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMBTYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SMBTYPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SMBus Device"]
            #[inline(always)]
            pub fn device(self) -> &'a mut W {
                self.variant(SMBTYPE_A::DEVICE)
            }
            #[doc = "SMBus Host"]
            #[inline(always)]
            pub fn host(self) -> &'a mut W {
                self.variant(SMBTYPE_A::HOST)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "SMBus mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SMBUS_A {
            #[doc = "0: I2C Mode"]
            I2C = 0,
            #[doc = "1: SMBus"]
            SMBUS = 1,
        }
        impl From<SMBUS_A> for bool {
            #[inline(always)]
            fn from(variant: SMBUS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SMBUS`"]
        pub type SMBUS_R = crate::R<bool, SMBUS_A>;
        impl SMBUS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SMBUS_A {
                match self.bits {
                    false => SMBUS_A::I2C,
                    true => SMBUS_A::SMBUS,
                }
            }
            #[doc = "Checks if the value of the field is `I2C`"]
            #[inline(always)]
            pub fn is_i2c(&self) -> bool {
                *self == SMBUS_A::I2C
            }
            #[doc = "Checks if the value of the field is `SMBUS`"]
            #[inline(always)]
            pub fn is_smbus(&self) -> bool {
                *self == SMBUS_A::SMBUS
            }
        }
        #[doc = "Write proxy for field `SMBUS`"]
        pub struct SMBUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMBUS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SMBUS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "I2C Mode"]
            #[inline(always)]
            pub fn i2c(self) -> &'a mut W {
                self.variant(SMBUS_A::I2C)
            }
            #[doc = "SMBus"]
            #[inline(always)]
            pub fn smbus(self) -> &'a mut W {
                self.variant(SMBUS_A::SMBUS)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Peripheral enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PE_A {
            #[doc = "0: Peripheral disabled"]
            DISABLED = 0,
            #[doc = "1: Peripheral enabled"]
            ENABLED = 1,
        }
        impl From<PE_A> for bool {
            #[inline(always)]
            fn from(variant: PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PE`"]
        pub type PE_R = crate::R<bool, PE_A>;
        impl PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PE_A {
                match self.bits {
                    false => PE_A::DISABLED,
                    true => PE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == PE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == PE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `PE`"]
        pub struct PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Peripheral disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(PE_A::DISABLED)
            }
            #[doc = "Peripheral enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(PE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Software reset"]
            #[inline(always)]
            pub fn swrst(&self) -> SWRST_R {
                SWRST_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 13 - SMBus alert"]
            #[inline(always)]
            pub fn alert(&self) -> ALERT_R {
                ALERT_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Packet error checking"]
            #[inline(always)]
            pub fn pec(&self) -> PEC_R {
                PEC_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Acknowledge/PEC Position (for data reception)"]
            #[inline(always)]
            pub fn pos(&self) -> POS_R {
                POS_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Acknowledge enable"]
            #[inline(always)]
            pub fn ack(&self) -> ACK_R {
                ACK_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Stop generation"]
            #[inline(always)]
            pub fn stop(&self) -> STOP_R {
                STOP_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Start generation"]
            #[inline(always)]
            pub fn start(&self) -> START_R {
                START_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Clock stretching disable (Slave mode)"]
            #[inline(always)]
            pub fn nostretch(&self) -> NOSTRETCH_R {
                NOSTRETCH_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - General call enable"]
            #[inline(always)]
            pub fn engc(&self) -> ENGC_R {
                ENGC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - PEC enable"]
            #[inline(always)]
            pub fn enpec(&self) -> ENPEC_R {
                ENPEC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - ARP enable"]
            #[inline(always)]
            pub fn enarp(&self) -> ENARP_R {
                ENARP_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - SMBus type"]
            #[inline(always)]
            pub fn smbtype(&self) -> SMBTYPE_R {
                SMBTYPE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SMBus mode"]
            #[inline(always)]
            pub fn smbus(&self) -> SMBUS_R {
                SMBUS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Peripheral enable"]
            #[inline(always)]
            pub fn pe(&self) -> PE_R {
                PE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Software reset"]
            #[inline(always)]
            pub fn swrst(&mut self) -> SWRST_W {
                SWRST_W { w: self }
            }
            #[doc = "Bit 13 - SMBus alert"]
            #[inline(always)]
            pub fn alert(&mut self) -> ALERT_W {
                ALERT_W { w: self }
            }
            #[doc = "Bit 12 - Packet error checking"]
            #[inline(always)]
            pub fn pec(&mut self) -> PEC_W {
                PEC_W { w: self }
            }
            #[doc = "Bit 11 - Acknowledge/PEC Position (for data reception)"]
            #[inline(always)]
            pub fn pos(&mut self) -> POS_W {
                POS_W { w: self }
            }
            #[doc = "Bit 10 - Acknowledge enable"]
            #[inline(always)]
            pub fn ack(&mut self) -> ACK_W {
                ACK_W { w: self }
            }
            #[doc = "Bit 9 - Stop generation"]
            #[inline(always)]
            pub fn stop(&mut self) -> STOP_W {
                STOP_W { w: self }
            }
            #[doc = "Bit 8 - Start generation"]
            #[inline(always)]
            pub fn start(&mut self) -> START_W {
                START_W { w: self }
            }
            #[doc = "Bit 7 - Clock stretching disable (Slave mode)"]
            #[inline(always)]
            pub fn nostretch(&mut self) -> NOSTRETCH_W {
                NOSTRETCH_W { w: self }
            }
            #[doc = "Bit 6 - General call enable"]
            #[inline(always)]
            pub fn engc(&mut self) -> ENGC_W {
                ENGC_W { w: self }
            }
            #[doc = "Bit 5 - PEC enable"]
            #[inline(always)]
            pub fn enpec(&mut self) -> ENPEC_W {
                ENPEC_W { w: self }
            }
            #[doc = "Bit 4 - ARP enable"]
            #[inline(always)]
            pub fn enarp(&mut self) -> ENARP_W {
                ENARP_W { w: self }
            }
            #[doc = "Bit 3 - SMBus type"]
            #[inline(always)]
            pub fn smbtype(&mut self) -> SMBTYPE_W {
                SMBTYPE_W { w: self }
            }
            #[doc = "Bit 1 - SMBus mode"]
            #[inline(always)]
            pub fn smbus(&mut self) -> SMBUS_W {
                SMBUS_W { w: self }
            }
            #[doc = "Bit 0 - Peripheral enable"]
            #[inline(always)]
            pub fn pe(&mut self) -> PE_W {
                PE_W { w: self }
            }
        }
    }
    #[doc = "CR2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "CR2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "DMA last transfer\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LAST_A {
            #[doc = "0: Next DMA EOT is not the last transfer"]
            NOTLAST = 0,
            #[doc = "1: Next DMA EOT is the last transfer"]
            LAST = 1,
        }
        impl From<LAST_A> for bool {
            #[inline(always)]
            fn from(variant: LAST_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LAST`"]
        pub type LAST_R = crate::R<bool, LAST_A>;
        impl LAST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LAST_A {
                match self.bits {
                    false => LAST_A::NOTLAST,
                    true => LAST_A::LAST,
                }
            }
            #[doc = "Checks if the value of the field is `NOTLAST`"]
            #[inline(always)]
            pub fn is_not_last(&self) -> bool {
                *self == LAST_A::NOTLAST
            }
            #[doc = "Checks if the value of the field is `LAST`"]
            #[inline(always)]
            pub fn is_last(&self) -> bool {
                *self == LAST_A::LAST
            }
        }
        #[doc = "Write proxy for field `LAST`"]
        pub struct LAST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LAST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LAST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Next DMA EOT is not the last transfer"]
            #[inline(always)]
            pub fn not_last(self) -> &'a mut W {
                self.variant(LAST_A::NOTLAST)
            }
            #[doc = "Next DMA EOT is the last transfer"]
            #[inline(always)]
            pub fn last(self) -> &'a mut W {
                self.variant(LAST_A::LAST)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "DMA requests enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DMAEN_A {
            #[doc = "0: DMA requests disabled"]
            DISABLED = 0,
            #[doc = "1: DMA request enabled when TxE=1 or RxNE=1"]
            ENABLED = 1,
        }
        impl From<DMAEN_A> for bool {
            #[inline(always)]
            fn from(variant: DMAEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DMAEN`"]
        pub type DMAEN_R = crate::R<bool, DMAEN_A>;
        impl DMAEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DMAEN_A {
                match self.bits {
                    false => DMAEN_A::DISABLED,
                    true => DMAEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == DMAEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == DMAEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `DMAEN`"]
        pub struct DMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DMAEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DMA requests disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMAEN_A::DISABLED)
            }
            #[doc = "DMA request enabled when TxE=1 or RxNE=1"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMAEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Buffer interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ITBUFEN_A {
            #[doc = "0: TxE=1 or RxNE=1 does not generate any interrupt"]
            DISABLED = 0,
            #[doc = "1: TxE=1 or RxNE=1 generates Event interrupt"]
            ENABLED = 1,
        }
        impl From<ITBUFEN_A> for bool {
            #[inline(always)]
            fn from(variant: ITBUFEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ITBUFEN`"]
        pub type ITBUFEN_R = crate::R<bool, ITBUFEN_A>;
        impl ITBUFEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ITBUFEN_A {
                match self.bits {
                    false => ITBUFEN_A::DISABLED,
                    true => ITBUFEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ITBUFEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ITBUFEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ITBUFEN`"]
        pub struct ITBUFEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITBUFEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ITBUFEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TxE=1 or RxNE=1 does not generate any interrupt"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ITBUFEN_A::DISABLED)
            }
            #[doc = "TxE=1 or RxNE=1 generates Event interrupt"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ITBUFEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Event interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ITEVTEN_A {
            #[doc = "0: Event interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Event interrupt enabled"]
            ENABLED = 1,
        }
        impl From<ITEVTEN_A> for bool {
            #[inline(always)]
            fn from(variant: ITEVTEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ITEVTEN`"]
        pub type ITEVTEN_R = crate::R<bool, ITEVTEN_A>;
        impl ITEVTEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ITEVTEN_A {
                match self.bits {
                    false => ITEVTEN_A::DISABLED,
                    true => ITEVTEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ITEVTEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ITEVTEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ITEVTEN`"]
        pub struct ITEVTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITEVTEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ITEVTEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Event interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ITEVTEN_A::DISABLED)
            }
            #[doc = "Event interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ITEVTEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Error interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ITERREN_A {
            #[doc = "0: Error interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Error interrupt enabled"]
            ENABLED = 1,
        }
        impl From<ITERREN_A> for bool {
            #[inline(always)]
            fn from(variant: ITERREN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ITERREN`"]
        pub type ITERREN_R = crate::R<bool, ITERREN_A>;
        impl ITERREN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ITERREN_A {
                match self.bits {
                    false => ITERREN_A::DISABLED,
                    true => ITERREN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ITERREN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ITERREN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ITERREN`"]
        pub struct ITERREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITERREN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ITERREN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Error interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ITERREN_A::DISABLED)
            }
            #[doc = "Error interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ITERREN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `FREQ`"]
        pub type FREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FREQ`"]
        pub struct FREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 12 - DMA last transfer"]
            #[inline(always)]
            pub fn last(&self) -> LAST_R {
                LAST_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - DMA requests enable"]
            #[inline(always)]
            pub fn dmaen(&self) -> DMAEN_R {
                DMAEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Buffer interrupt enable"]
            #[inline(always)]
            pub fn itbufen(&self) -> ITBUFEN_R {
                ITBUFEN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Event interrupt enable"]
            #[inline(always)]
            pub fn itevten(&self) -> ITEVTEN_R {
                ITEVTEN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Error interrupt enable"]
            #[inline(always)]
            pub fn iterren(&self) -> ITERREN_R {
                ITERREN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 0:5 - Peripheral clock frequency"]
            #[inline(always)]
            pub fn freq(&self) -> FREQ_R {
                FREQ_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 12 - DMA last transfer"]
            #[inline(always)]
            pub fn last(&mut self) -> LAST_W {
                LAST_W { w: self }
            }
            #[doc = "Bit 11 - DMA requests enable"]
            #[inline(always)]
            pub fn dmaen(&mut self) -> DMAEN_W {
                DMAEN_W { w: self }
            }
            #[doc = "Bit 10 - Buffer interrupt enable"]
            #[inline(always)]
            pub fn itbufen(&mut self) -> ITBUFEN_W {
                ITBUFEN_W { w: self }
            }
            #[doc = "Bit 9 - Event interrupt enable"]
            #[inline(always)]
            pub fn itevten(&mut self) -> ITEVTEN_W {
                ITEVTEN_W { w: self }
            }
            #[doc = "Bit 8 - Error interrupt enable"]
            #[inline(always)]
            pub fn iterren(&mut self) -> ITERREN_W {
                ITERREN_W { w: self }
            }
            #[doc = "Bits 0:5 - Peripheral clock frequency"]
            #[inline(always)]
            pub fn freq(&mut self) -> FREQ_W {
                FREQ_W { w: self }
            }
        }
    }
    #[doc = "OAR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [oar1](oar1) module"]
    pub type OAR1 = crate::Reg<u32, _OAR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OAR1;
    #[doc = "`read()` method returns [oar1::R](oar1::R) reader structure"]
    impl crate::Readable for OAR1 {}
    #[doc = "`write(|w| ..)` method takes [oar1::W](oar1::W) writer structure"]
    impl crate::Writable for OAR1 {}
    #[doc = "OAR1"]
    pub mod oar1 {
        #[doc = "Reader of register OAR1"]
        pub type R = crate::R<u32, super::OAR1>;
        #[doc = "Writer for register OAR1"]
        pub type W = crate::W<u32, super::OAR1>;
        #[doc = "Register OAR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::OAR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "ADDMODE\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADDMODE_A {
            #[doc = "0: 7-bit slave address"]
            ADD7 = 0,
            #[doc = "1: 10-bit slave address"]
            ADD10 = 1,
        }
        impl From<ADDMODE_A> for bool {
            #[inline(always)]
            fn from(variant: ADDMODE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADDMODE`"]
        pub type ADDMODE_R = crate::R<bool, ADDMODE_A>;
        impl ADDMODE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADDMODE_A {
                match self.bits {
                    false => ADDMODE_A::ADD7,
                    true => ADDMODE_A::ADD10,
                }
            }
            #[doc = "Checks if the value of the field is `ADD7`"]
            #[inline(always)]
            pub fn is_add7(&self) -> bool {
                *self == ADDMODE_A::ADD7
            }
            #[doc = "Checks if the value of the field is `ADD10`"]
            #[inline(always)]
            pub fn is_add10(&self) -> bool {
                *self == ADDMODE_A::ADD10
            }
        }
        #[doc = "Write proxy for field `ADDMODE`"]
        pub struct ADDMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDMODE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADDMODE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "7-bit slave address"]
            #[inline(always)]
            pub fn add7(self) -> &'a mut W {
                self.variant(ADDMODE_A::ADD7)
            }
            #[doc = "10-bit slave address"]
            #[inline(always)]
            pub fn add10(self) -> &'a mut W {
                self.variant(ADDMODE_A::ADD10)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `ADD`"]
        pub type ADD_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ADD`"]
        pub struct ADD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03ff) | ((value as u32) & 0x03ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - ADDMODE"]
            #[inline(always)]
            pub fn addmode(&self) -> ADDMODE_R {
                ADDMODE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 0:9 - Interface address"]
            #[inline(always)]
            pub fn add(&self) -> ADD_R {
                ADD_R::new((self.bits & 0x03ff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 15 - ADDMODE"]
            #[inline(always)]
            pub fn addmode(&mut self) -> ADDMODE_W {
                ADDMODE_W { w: self }
            }
            #[doc = "Bits 0:9 - Interface address"]
            #[inline(always)]
            pub fn add(&mut self) -> ADD_W {
                ADD_W { w: self }
            }
        }
    }
    #[doc = "OAR2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [oar2](oar2) module"]
    pub type OAR2 = crate::Reg<u32, _OAR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OAR2;
    #[doc = "`read()` method returns [oar2::R](oar2::R) reader structure"]
    impl crate::Readable for OAR2 {}
    #[doc = "`write(|w| ..)` method takes [oar2::W](oar2::W) writer structure"]
    impl crate::Writable for OAR2 {}
    #[doc = "OAR2"]
    pub mod oar2 {
        #[doc = "Reader of register OAR2"]
        pub type R = crate::R<u32, super::OAR2>;
        #[doc = "Writer for register OAR2"]
        pub type W = crate::W<u32, super::OAR2>;
        #[doc = "Register OAR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::OAR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADD2`"]
        pub type ADD2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADD2`"]
        pub struct ADD2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 1)) | (((value as u32) & 0x7f) << 1);
                self.w
            }
        }
        #[doc = "Dual addressing mode enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ENDUAL_A {
            #[doc = "0: Single addressing mode"]
            SINGLE = 0,
            #[doc = "1: Dual addressing mode"]
            DUAL = 1,
        }
        impl From<ENDUAL_A> for bool {
            #[inline(always)]
            fn from(variant: ENDUAL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ENDUAL`"]
        pub type ENDUAL_R = crate::R<bool, ENDUAL_A>;
        impl ENDUAL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ENDUAL_A {
                match self.bits {
                    false => ENDUAL_A::SINGLE,
                    true => ENDUAL_A::DUAL,
                }
            }
            #[doc = "Checks if the value of the field is `SINGLE`"]
            #[inline(always)]
            pub fn is_single(&self) -> bool {
                *self == ENDUAL_A::SINGLE
            }
            #[doc = "Checks if the value of the field is `DUAL`"]
            #[inline(always)]
            pub fn is_dual(&self) -> bool {
                *self == ENDUAL_A::DUAL
            }
        }
        #[doc = "Write proxy for field `ENDUAL`"]
        pub struct ENDUAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENDUAL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ENDUAL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Single addressing mode"]
            #[inline(always)]
            pub fn single(self) -> &'a mut W {
                self.variant(ENDUAL_A::SINGLE)
            }
            #[doc = "Dual addressing mode"]
            #[inline(always)]
            pub fn dual(self) -> &'a mut W {
                self.variant(ENDUAL_A::DUAL)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 1:7 - Interface address"]
            #[inline(always)]
            pub fn add2(&self) -> ADD2_R {
                ADD2_R::new(((self.bits >> 1) & 0x7f) as u8)
            }
            #[doc = "Bit 0 - Dual addressing mode enable"]
            #[inline(always)]
            pub fn endual(&self) -> ENDUAL_R {
                ENDUAL_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 1:7 - Interface address"]
            #[inline(always)]
            pub fn add2(&mut self) -> ADD2_W {
                ADD2_W { w: self }
            }
            #[doc = "Bit 0 - Dual addressing mode enable"]
            #[inline(always)]
            pub fn endual(&mut self) -> ENDUAL_W {
                ENDUAL_W { w: self }
            }
        }
    }
    #[doc = "DR\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "`write(|w| ..)` method takes [dr::W](dr::W) writer structure"]
    impl crate::Writable for DR {}
    #[doc = "DR"]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Writer for register DR"]
        pub type W = crate::W<u32, super::DR>;
        #[doc = "Register DR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DR`"]
        pub type DR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DR`"]
        pub struct DR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - -bit data register"]
            #[inline(always)]
            pub fn dr(&self) -> DR_R {
                DR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - -bit data register"]
            #[inline(always)]
            pub fn dr(&mut self) -> DR_W {
                DR_W { w: self }
            }
        }
    }
    #[doc = "SR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr1](sr1) module"]
    pub type SR1 = crate::Reg<u32, _SR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR1;
    #[doc = "`read()` method returns [sr1::R](sr1::R) reader structure"]
    impl crate::Readable for SR1 {}
    #[doc = "`write(|w| ..)` method takes [sr1::W](sr1::W) writer structure"]
    impl crate::Writable for SR1 {}
    #[doc = "SR1"]
    pub mod sr1 {
        #[doc = "Reader of register SR1"]
        pub type R = crate::R<u32, super::SR1>;
        #[doc = "Writer for register SR1"]
        pub type W = crate::W<u32, super::SR1>;
        #[doc = "Register SR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "SMBus alert\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SMBALERT_A {
            #[doc = "0: No SMBALERT occured"]
            NOALERT = 0,
            #[doc = "1: SMBALERT occurred"]
            ALERT = 1,
        }
        impl From<SMBALERT_A> for bool {
            #[inline(always)]
            fn from(variant: SMBALERT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SMBALERT`"]
        pub type SMBALERT_R = crate::R<bool, SMBALERT_A>;
        impl SMBALERT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SMBALERT_A {
                match self.bits {
                    false => SMBALERT_A::NOALERT,
                    true => SMBALERT_A::ALERT,
                }
            }
            #[doc = "Checks if the value of the field is `NOALERT`"]
            #[inline(always)]
            pub fn is_no_alert(&self) -> bool {
                *self == SMBALERT_A::NOALERT
            }
            #[doc = "Checks if the value of the field is `ALERT`"]
            #[inline(always)]
            pub fn is_alert(&self) -> bool {
                *self == SMBALERT_A::ALERT
            }
        }
        #[doc = "Write proxy for field `SMBALERT`"]
        pub struct SMBALERT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMBALERT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SMBALERT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No SMBALERT occured"]
            #[inline(always)]
            pub fn no_alert(self) -> &'a mut W {
                self.variant(SMBALERT_A::NOALERT)
            }
            #[doc = "SMBALERT occurred"]
            #[inline(always)]
            pub fn alert(self) -> &'a mut W {
                self.variant(SMBALERT_A::ALERT)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Timeout or Tlow error\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIMEOUT_A {
            #[doc = "0: No Timeout error"]
            NOTIMEOUT = 0,
            #[doc = "1: SCL remained LOW for 25 ms"]
            TIMEOUT = 1,
        }
        impl From<TIMEOUT_A> for bool {
            #[inline(always)]
            fn from(variant: TIMEOUT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIMEOUT`"]
        pub type TIMEOUT_R = crate::R<bool, TIMEOUT_A>;
        impl TIMEOUT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIMEOUT_A {
                match self.bits {
                    false => TIMEOUT_A::NOTIMEOUT,
                    true => TIMEOUT_A::TIMEOUT,
                }
            }
            #[doc = "Checks if the value of the field is `NOTIMEOUT`"]
            #[inline(always)]
            pub fn is_no_timeout(&self) -> bool {
                *self == TIMEOUT_A::NOTIMEOUT
            }
            #[doc = "Checks if the value of the field is `TIMEOUT`"]
            #[inline(always)]
            pub fn is_timeout(&self) -> bool {
                *self == TIMEOUT_A::TIMEOUT
            }
        }
        #[doc = "Write proxy for field `TIMEOUT`"]
        pub struct TIMEOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMEOUT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIMEOUT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No Timeout error"]
            #[inline(always)]
            pub fn no_timeout(self) -> &'a mut W {
                self.variant(TIMEOUT_A::NOTIMEOUT)
            }
            #[doc = "SCL remained LOW for 25 ms"]
            #[inline(always)]
            pub fn timeout(self) -> &'a mut W {
                self.variant(TIMEOUT_A::TIMEOUT)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "PEC Error in reception\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PECERR_A {
            #[doc = "0: no PEC error: receiver returns ACK after PEC reception (if ACK=1)"]
            NOERROR = 0,
            #[doc = "1: PEC error: receiver returns NACK after PEC reception (whatever ACK)"]
            ERROR = 1,
        }
        impl From<PECERR_A> for bool {
            #[inline(always)]
            fn from(variant: PECERR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PECERR`"]
        pub type PECERR_R = crate::R<bool, PECERR_A>;
        impl PECERR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PECERR_A {
                match self.bits {
                    false => PECERR_A::NOERROR,
                    true => PECERR_A::ERROR,
                }
            }
            #[doc = "Checks if the value of the field is `NOERROR`"]
            #[inline(always)]
            pub fn is_no_error(&self) -> bool {
                *self == PECERR_A::NOERROR
            }
            #[doc = "Checks if the value of the field is `ERROR`"]
            #[inline(always)]
            pub fn is_error(&self) -> bool {
                *self == PECERR_A::ERROR
            }
        }
        #[doc = "Write proxy for field `PECERR`"]
        pub struct PECERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PECERR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PECERR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "no PEC error: receiver returns ACK after PEC reception (if ACK=1)"]
            #[inline(always)]
            pub fn no_error(self) -> &'a mut W {
                self.variant(PECERR_A::NOERROR)
            }
            #[doc = "PEC error: receiver returns NACK after PEC reception (whatever ACK)"]
            #[inline(always)]
            pub fn error(self) -> &'a mut W {
                self.variant(PECERR_A::ERROR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Overrun/Underrun\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OVR_A {
            #[doc = "0: No overrun/underrun occured"]
            NOOVERRUN = 0,
            #[doc = "1: Overrun/underrun occured"]
            OVERRUN = 1,
        }
        impl From<OVR_A> for bool {
            #[inline(always)]
            fn from(variant: OVR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OVR`"]
        pub type OVR_R = crate::R<bool, OVR_A>;
        impl OVR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OVR_A {
                match self.bits {
                    false => OVR_A::NOOVERRUN,
                    true => OVR_A::OVERRUN,
                }
            }
            #[doc = "Checks if the value of the field is `NOOVERRUN`"]
            #[inline(always)]
            pub fn is_no_overrun(&self) -> bool {
                *self == OVR_A::NOOVERRUN
            }
            #[doc = "Checks if the value of the field is `OVERRUN`"]
            #[inline(always)]
            pub fn is_overrun(&self) -> bool {
                *self == OVR_A::OVERRUN
            }
        }
        #[doc = "Write proxy for field `OVR`"]
        pub struct OVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OVR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No overrun/underrun occured"]
            #[inline(always)]
            pub fn no_overrun(self) -> &'a mut W {
                self.variant(OVR_A::NOOVERRUN)
            }
            #[doc = "Overrun/underrun occured"]
            #[inline(always)]
            pub fn overrun(self) -> &'a mut W {
                self.variant(OVR_A::OVERRUN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Acknowledge failure\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum AF_A {
            #[doc = "0: No acknowledge failure"]
            NOFAILURE = 0,
            #[doc = "1: Acknowledge failure"]
            FAILURE = 1,
        }
        impl From<AF_A> for bool {
            #[inline(always)]
            fn from(variant: AF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `AF`"]
        pub type AF_R = crate::R<bool, AF_A>;
        impl AF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AF_A {
                match self.bits {
                    false => AF_A::NOFAILURE,
                    true => AF_A::FAILURE,
                }
            }
            #[doc = "Checks if the value of the field is `NOFAILURE`"]
            #[inline(always)]
            pub fn is_no_failure(&self) -> bool {
                *self == AF_A::NOFAILURE
            }
            #[doc = "Checks if the value of the field is `FAILURE`"]
            #[inline(always)]
            pub fn is_failure(&self) -> bool {
                *self == AF_A::FAILURE
            }
        }
        #[doc = "Write proxy for field `AF`"]
        pub struct AF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No acknowledge failure"]
            #[inline(always)]
            pub fn no_failure(self) -> &'a mut W {
                self.variant(AF_A::NOFAILURE)
            }
            #[doc = "Acknowledge failure"]
            #[inline(always)]
            pub fn failure(self) -> &'a mut W {
                self.variant(AF_A::FAILURE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Arbitration lost (master mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARLO_A {
            #[doc = "0: No Arbitration Lost detected"]
            NOLOST = 0,
            #[doc = "1: Arbitration Lost detected"]
            LOST = 1,
        }
        impl From<ARLO_A> for bool {
            #[inline(always)]
            fn from(variant: ARLO_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ARLO`"]
        pub type ARLO_R = crate::R<bool, ARLO_A>;
        impl ARLO_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ARLO_A {
                match self.bits {
                    false => ARLO_A::NOLOST,
                    true => ARLO_A::LOST,
                }
            }
            #[doc = "Checks if the value of the field is `NOLOST`"]
            #[inline(always)]
            pub fn is_no_lost(&self) -> bool {
                *self == ARLO_A::NOLOST
            }
            #[doc = "Checks if the value of the field is `LOST`"]
            #[inline(always)]
            pub fn is_lost(&self) -> bool {
                *self == ARLO_A::LOST
            }
        }
        #[doc = "Write proxy for field `ARLO`"]
        pub struct ARLO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARLO_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ARLO_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No Arbitration Lost detected"]
            #[inline(always)]
            pub fn no_lost(self) -> &'a mut W {
                self.variant(ARLO_A::NOLOST)
            }
            #[doc = "Arbitration Lost detected"]
            #[inline(always)]
            pub fn lost(self) -> &'a mut W {
                self.variant(ARLO_A::LOST)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Bus error\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BERR_A {
            #[doc = "0: No misplaced Start or Stop condition"]
            NOERROR = 0,
            #[doc = "1: Misplaced Start or Stop condition"]
            ERROR = 1,
        }
        impl From<BERR_A> for bool {
            #[inline(always)]
            fn from(variant: BERR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BERR`"]
        pub type BERR_R = crate::R<bool, BERR_A>;
        impl BERR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BERR_A {
                match self.bits {
                    false => BERR_A::NOERROR,
                    true => BERR_A::ERROR,
                }
            }
            #[doc = "Checks if the value of the field is `NOERROR`"]
            #[inline(always)]
            pub fn is_no_error(&self) -> bool {
                *self == BERR_A::NOERROR
            }
            #[doc = "Checks if the value of the field is `ERROR`"]
            #[inline(always)]
            pub fn is_error(&self) -> bool {
                *self == BERR_A::ERROR
            }
        }
        #[doc = "Write proxy for field `BERR`"]
        pub struct BERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BERR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BERR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No misplaced Start or Stop condition"]
            #[inline(always)]
            pub fn no_error(self) -> &'a mut W {
                self.variant(BERR_A::NOERROR)
            }
            #[doc = "Misplaced Start or Stop condition"]
            #[inline(always)]
            pub fn error(self) -> &'a mut W {
                self.variant(BERR_A::ERROR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Data register empty (transmitters)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXE_A {
            #[doc = "0: Data register not empty"]
            NOTEMPTY = 0,
            #[doc = "1: Data register empty"]
            EMPTY = 1,
        }
        impl From<TXE_A> for bool {
            #[inline(always)]
            fn from(variant: TXE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TxE`"]
        pub type TXE_R = crate::R<bool, TXE_A>;
        impl TXE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TXE_A {
                match self.bits {
                    false => TXE_A::NOTEMPTY,
                    true => TXE_A::EMPTY,
                }
            }
            #[doc = "Checks if the value of the field is `NOTEMPTY`"]
            #[inline(always)]
            pub fn is_not_empty(&self) -> bool {
                *self == TXE_A::NOTEMPTY
            }
            #[doc = "Checks if the value of the field is `EMPTY`"]
            #[inline(always)]
            pub fn is_empty(&self) -> bool {
                *self == TXE_A::EMPTY
            }
        }
        #[doc = "Data register not empty (receivers)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXNE_A {
            #[doc = "0: Data register empty"]
            EMPTY = 0,
            #[doc = "1: Data register not empty"]
            NOTEMPTY = 1,
        }
        impl From<RXNE_A> for bool {
            #[inline(always)]
            fn from(variant: RXNE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RxNE`"]
        pub type RXNE_R = crate::R<bool, RXNE_A>;
        impl RXNE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXNE_A {
                match self.bits {
                    false => RXNE_A::EMPTY,
                    true => RXNE_A::NOTEMPTY,
                }
            }
            #[doc = "Checks if the value of the field is `EMPTY`"]
            #[inline(always)]
            pub fn is_empty(&self) -> bool {
                *self == RXNE_A::EMPTY
            }
            #[doc = "Checks if the value of the field is `NOTEMPTY`"]
            #[inline(always)]
            pub fn is_not_empty(&self) -> bool {
                *self == RXNE_A::NOTEMPTY
            }
        }
        #[doc = "Stop detection (slave mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum STOPF_A {
            #[doc = "0: No Stop condition detected"]
            NOSTOP = 0,
            #[doc = "1: Stop condition detected"]
            STOP = 1,
        }
        impl From<STOPF_A> for bool {
            #[inline(always)]
            fn from(variant: STOPF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `STOPF`"]
        pub type STOPF_R = crate::R<bool, STOPF_A>;
        impl STOPF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STOPF_A {
                match self.bits {
                    false => STOPF_A::NOSTOP,
                    true => STOPF_A::STOP,
                }
            }
            #[doc = "Checks if the value of the field is `NOSTOP`"]
            #[inline(always)]
            pub fn is_no_stop(&self) -> bool {
                *self == STOPF_A::NOSTOP
            }
            #[doc = "Checks if the value of the field is `STOP`"]
            #[inline(always)]
            pub fn is_stop(&self) -> bool {
                *self == STOPF_A::STOP
            }
        }
        #[doc = "Reader of field `ADD10`"]
        pub type ADD10_R = crate::R<bool, bool>;
        #[doc = "Byte transfer finished\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BTF_A {
            #[doc = "0: Data byte transfer not done"]
            NOTFINISHED = 0,
            #[doc = "1: Data byte transfer successful"]
            FINISHED = 1,
        }
        impl From<BTF_A> for bool {
            #[inline(always)]
            fn from(variant: BTF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BTF`"]
        pub type BTF_R = crate::R<bool, BTF_A>;
        impl BTF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BTF_A {
                match self.bits {
                    false => BTF_A::NOTFINISHED,
                    true => BTF_A::FINISHED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTFINISHED`"]
            #[inline(always)]
            pub fn is_not_finished(&self) -> bool {
                *self == BTF_A::NOTFINISHED
            }
            #[doc = "Checks if the value of the field is `FINISHED`"]
            #[inline(always)]
            pub fn is_finished(&self) -> bool {
                *self == BTF_A::FINISHED
            }
        }
        #[doc = "Address sent (master mode)/matched (slave mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADDR_A {
            #[doc = "0: Adress mismatched or not received"]
            NOTMATCH = 0,
            #[doc = "1: Received slave address matched with one of the enabled slave addresses"]
            MATCH = 1,
        }
        impl From<ADDR_A> for bool {
            #[inline(always)]
            fn from(variant: ADDR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADDR`"]
        pub type ADDR_R = crate::R<bool, ADDR_A>;
        impl ADDR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADDR_A {
                match self.bits {
                    false => ADDR_A::NOTMATCH,
                    true => ADDR_A::MATCH,
                }
            }
            #[doc = "Checks if the value of the field is `NOTMATCH`"]
            #[inline(always)]
            pub fn is_not_match(&self) -> bool {
                *self == ADDR_A::NOTMATCH
            }
            #[doc = "Checks if the value of the field is `MATCH`"]
            #[inline(always)]
            pub fn is_match_(&self) -> bool {
                *self == ADDR_A::MATCH
            }
        }
        #[doc = "Start bit (Master mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SB_A {
            #[doc = "0: No Start condition"]
            NOSTART = 0,
            #[doc = "1: Start condition generated"]
            START = 1,
        }
        impl From<SB_A> for bool {
            #[inline(always)]
            fn from(variant: SB_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SB`"]
        pub type SB_R = crate::R<bool, SB_A>;
        impl SB_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SB_A {
                match self.bits {
                    false => SB_A::NOSTART,
                    true => SB_A::START,
                }
            }
            #[doc = "Checks if the value of the field is `NOSTART`"]
            #[inline(always)]
            pub fn is_no_start(&self) -> bool {
                *self == SB_A::NOSTART
            }
            #[doc = "Checks if the value of the field is `START`"]
            #[inline(always)]
            pub fn is_start(&self) -> bool {
                *self == SB_A::START
            }
        }
        impl R {
            #[doc = "Bit 15 - SMBus alert"]
            #[inline(always)]
            pub fn smbalert(&self) -> SMBALERT_R {
                SMBALERT_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Timeout or Tlow error"]
            #[inline(always)]
            pub fn timeout(&self) -> TIMEOUT_R {
                TIMEOUT_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 12 - PEC Error in reception"]
            #[inline(always)]
            pub fn pecerr(&self) -> PECERR_R {
                PECERR_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Overrun/Underrun"]
            #[inline(always)]
            pub fn ovr(&self) -> OVR_R {
                OVR_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Acknowledge failure"]
            #[inline(always)]
            pub fn af(&self) -> AF_R {
                AF_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Arbitration lost (master mode)"]
            #[inline(always)]
            pub fn arlo(&self) -> ARLO_R {
                ARLO_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Bus error"]
            #[inline(always)]
            pub fn berr(&self) -> BERR_R {
                BERR_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Data register empty (transmitters)"]
            #[inline(always)]
            pub fn tx_e(&self) -> TXE_R {
                TXE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Data register not empty (receivers)"]
            #[inline(always)]
            pub fn rx_ne(&self) -> RXNE_R {
                RXNE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Stop detection (slave mode)"]
            #[inline(always)]
            pub fn stopf(&self) -> STOPF_R {
                STOPF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - 10-bit header sent (Master mode)"]
            #[inline(always)]
            pub fn add10(&self) -> ADD10_R {
                ADD10_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Byte transfer finished"]
            #[inline(always)]
            pub fn btf(&self) -> BTF_R {
                BTF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Address sent (master mode)/matched (slave mode)"]
            #[inline(always)]
            pub fn addr(&self) -> ADDR_R {
                ADDR_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Start bit (Master mode)"]
            #[inline(always)]
            pub fn sb(&self) -> SB_R {
                SB_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - SMBus alert"]
            #[inline(always)]
            pub fn smbalert(&mut self) -> SMBALERT_W {
                SMBALERT_W { w: self }
            }
            #[doc = "Bit 14 - Timeout or Tlow error"]
            #[inline(always)]
            pub fn timeout(&mut self) -> TIMEOUT_W {
                TIMEOUT_W { w: self }
            }
            #[doc = "Bit 12 - PEC Error in reception"]
            #[inline(always)]
            pub fn pecerr(&mut self) -> PECERR_W {
                PECERR_W { w: self }
            }
            #[doc = "Bit 11 - Overrun/Underrun"]
            #[inline(always)]
            pub fn ovr(&mut self) -> OVR_W {
                OVR_W { w: self }
            }
            #[doc = "Bit 10 - Acknowledge failure"]
            #[inline(always)]
            pub fn af(&mut self) -> AF_W {
                AF_W { w: self }
            }
            #[doc = "Bit 9 - Arbitration lost (master mode)"]
            #[inline(always)]
            pub fn arlo(&mut self) -> ARLO_W {
                ARLO_W { w: self }
            }
            #[doc = "Bit 8 - Bus error"]
            #[inline(always)]
            pub fn berr(&mut self) -> BERR_W {
                BERR_W { w: self }
            }
        }
    }
    #[doc = "SR2\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr2](sr2) module"]
    pub type SR2 = crate::Reg<u32, _SR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR2;
    #[doc = "`read()` method returns [sr2::R](sr2::R) reader structure"]
    impl crate::Readable for SR2 {}
    #[doc = "SR2"]
    pub mod sr2 {
        #[doc = "Reader of register SR2"]
        pub type R = crate::R<u32, super::SR2>;
        #[doc = "Reader of field `PEC`"]
        pub type PEC_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DUALF`"]
        pub type DUALF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SMBHOST`"]
        pub type SMBHOST_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SMBDEFAULT`"]
        pub type SMBDEFAULT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `GENCALL`"]
        pub type GENCALL_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TRA`"]
        pub type TRA_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BUSY`"]
        pub type BUSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `MSL`"]
        pub type MSL_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bits 8:15 - acket error checking register"]
            #[inline(always)]
            pub fn pec(&self) -> PEC_R {
                PEC_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bit 7 - Dual flag (Slave mode)"]
            #[inline(always)]
            pub fn dualf(&self) -> DUALF_R {
                DUALF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SMBus host header (Slave mode)"]
            #[inline(always)]
            pub fn smbhost(&self) -> SMBHOST_R {
                SMBHOST_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - SMBus device default address (Slave mode)"]
            #[inline(always)]
            pub fn smbdefault(&self) -> SMBDEFAULT_R {
                SMBDEFAULT_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - General call address (Slave mode)"]
            #[inline(always)]
            pub fn gencall(&self) -> GENCALL_R {
                GENCALL_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Transmitter/receiver"]
            #[inline(always)]
            pub fn tra(&self) -> TRA_R {
                TRA_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Bus busy"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Master/slave"]
            #[inline(always)]
            pub fn msl(&self) -> MSL_R {
                MSL_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "CCR\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr](ccr) module"]
    pub type CCR = crate::Reg<u32, _CCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR;
    #[doc = "`read()` method returns [ccr::R](ccr::R) reader structure"]
    impl crate::Readable for CCR {}
    #[doc = "`write(|w| ..)` method takes [ccr::W](ccr::W) writer structure"]
    impl crate::Writable for CCR {}
    #[doc = "CCR"]
    pub mod ccr {
        #[doc = "Reader of register CCR"]
        pub type R = crate::R<u32, super::CCR>;
        #[doc = "Writer for register CCR"]
        pub type W = crate::W<u32, super::CCR>;
        #[doc = "Register CCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "I2C master mode selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum F_S_A {
            #[doc = "0: Standard mode I2C"]
            STANDARD = 0,
            #[doc = "1: Fast mode I2C"]
            FAST = 1,
        }
        impl From<F_S_A> for bool {
            #[inline(always)]
            fn from(variant: F_S_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `F_S`"]
        pub type F_S_R = crate::R<bool, F_S_A>;
        impl F_S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> F_S_A {
                match self.bits {
                    false => F_S_A::STANDARD,
                    true => F_S_A::FAST,
                }
            }
            #[doc = "Checks if the value of the field is `STANDARD`"]
            #[inline(always)]
            pub fn is_standard(&self) -> bool {
                *self == F_S_A::STANDARD
            }
            #[doc = "Checks if the value of the field is `FAST`"]
            #[inline(always)]
            pub fn is_fast(&self) -> bool {
                *self == F_S_A::FAST
            }
        }
        #[doc = "Write proxy for field `F_S`"]
        pub struct F_S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> F_S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: F_S_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Standard mode I2C"]
            #[inline(always)]
            pub fn standard(self) -> &'a mut W {
                self.variant(F_S_A::STANDARD)
            }
            #[doc = "Fast mode I2C"]
            #[inline(always)]
            pub fn fast(self) -> &'a mut W {
                self.variant(F_S_A::FAST)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Fast mode duty cycle\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DUTY_A {
            #[doc = "0: Duty cycle t_low/t_high = 2/1"]
            DUTY2_1 = 0,
            #[doc = "1: Duty cycle t_low/t_high = 16/9"]
            DUTY16_9 = 1,
        }
        impl From<DUTY_A> for bool {
            #[inline(always)]
            fn from(variant: DUTY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DUTY`"]
        pub type DUTY_R = crate::R<bool, DUTY_A>;
        impl DUTY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DUTY_A {
                match self.bits {
                    false => DUTY_A::DUTY2_1,
                    true => DUTY_A::DUTY16_9,
                }
            }
            #[doc = "Checks if the value of the field is `DUTY2_1`"]
            #[inline(always)]
            pub fn is_duty2_1(&self) -> bool {
                *self == DUTY_A::DUTY2_1
            }
            #[doc = "Checks if the value of the field is `DUTY16_9`"]
            #[inline(always)]
            pub fn is_duty16_9(&self) -> bool {
                *self == DUTY_A::DUTY16_9
            }
        }
        #[doc = "Write proxy for field `DUTY`"]
        pub struct DUTY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DUTY_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DUTY_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Duty cycle t_low/t_high = 2/1"]
            #[inline(always)]
            pub fn duty2_1(self) -> &'a mut W {
                self.variant(DUTY_A::DUTY2_1)
            }
            #[doc = "Duty cycle t_low/t_high = 16/9"]
            #[inline(always)]
            pub fn duty16_9(self) -> &'a mut W {
                self.variant(DUTY_A::DUTY16_9)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CCR`"]
        pub type CCR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR`"]
        pub struct CCR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - I2C master mode selection"]
            #[inline(always)]
            pub fn f_s(&self) -> F_S_R {
                F_S_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Fast mode duty cycle"]
            #[inline(always)]
            pub fn duty(&self) -> DUTY_R {
                DUTY_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 0:11 - Clock control register in Fast/Standard mode (Master mode)"]
            #[inline(always)]
            pub fn ccr(&self) -> CCR_R {
                CCR_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 15 - I2C master mode selection"]
            #[inline(always)]
            pub fn f_s(&mut self) -> F_S_W {
                F_S_W { w: self }
            }
            #[doc = "Bit 14 - Fast mode duty cycle"]
            #[inline(always)]
            pub fn duty(&mut self) -> DUTY_W {
                DUTY_W { w: self }
            }
            #[doc = "Bits 0:11 - Clock control register in Fast/Standard mode (Master mode)"]
            #[inline(always)]
            pub fn ccr(&mut self) -> CCR_W {
                CCR_W { w: self }
            }
        }
    }
    #[doc = "TRISE\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [trise](trise) module"]
    pub type TRISE = crate::Reg<u32, _TRISE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TRISE;
    #[doc = "`read()` method returns [trise::R](trise::R) reader structure"]
    impl crate::Readable for TRISE {}
    #[doc = "`write(|w| ..)` method takes [trise::W](trise::W) writer structure"]
    impl crate::Writable for TRISE {}
    #[doc = "TRISE"]
    pub mod trise {
        #[doc = "Reader of register TRISE"]
        pub type R = crate::R<u32, super::TRISE>;
        #[doc = "Writer for register TRISE"]
        pub type W = crate::W<u32, super::TRISE>;
        #[doc = "Register TRISE `reset()`'s with value 0x02"]
        impl crate::ResetValue for super::TRISE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x02
            }
        }
        #[doc = "Reader of field `TRISE`"]
        pub type TRISE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TRISE`"]
        pub struct TRISE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRISE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - Maximum rise time in Fast/Standard mode (Master mode)"]
            #[inline(always)]
            pub fn trise(&self) -> TRISE_R {
                TRISE_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - Maximum rise time in Fast/Standard mode (Master mode)"]
            #[inline(always)]
            pub fn trise(&mut self) -> TRISE_W {
                TRISE_W { w: self }
            }
        }
    }
}
#[doc = "Inter-integrated circuit"]
pub struct I2C2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C2 {}
impl I2C2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        0x4000_5800 as *const _
    }
}
impl Deref for I2C2 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*I2C2::ptr() }
    }
}
#[doc = "Independent watchdog"]
pub struct IWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IWDG {}
impl IWDG {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const iwdg::RegisterBlock {
        0x4000_3000 as *const _
    }
}
impl Deref for IWDG {
    type Target = iwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*IWDG::ptr() }
    }
}
#[doc = "Independent watchdog"]
pub mod iwdg {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Key register"]
        pub kr: KR,
        #[doc = "0x04 - Prescaler register"]
        pub pr: PR,
        #[doc = "0x08 - Reload register"]
        pub rlr: RLR,
        #[doc = "0x0c - Status register"]
        pub sr: SR,
    }
    #[doc = "Key register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [kr](kr) module"]
    pub type KR = crate::Reg<u32, _KR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _KR;
    #[doc = "`write(|w| ..)` method takes [kr::W](kr::W) writer structure"]
    impl crate::Writable for KR {}
    #[doc = "Key register"]
    pub mod kr {
        #[doc = "Writer for register KR"]
        pub type W = crate::W<u32, super::KR>;
        #[doc = "Register KR `reset()`'s with value 0"]
        impl crate::ResetValue for super::KR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Key value (write only, read 0000h)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u16)]
        pub enum KEY_AW {
            #[doc = "21845: Enable access to PR, RLR and WINR registers (0x5555)"]
            ENABLE = 21845,
            #[doc = "43690: Reset the watchdog value (0xAAAA)"]
            RESET = 43690,
            #[doc = "52428: Start the watchdog (0xCCCC)"]
            START = 52428,
        }
        impl From<KEY_AW> for u16 {
            #[inline(always)]
            fn from(variant: KEY_AW) -> Self {
                variant as _
            }
        }
        #[doc = "Write proxy for field `KEY`"]
        pub struct KEY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEY_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: KEY_AW) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Enable access to PR, RLR and WINR registers (0x5555)"]
            #[inline(always)]
            pub fn enable(self) -> &'a mut W {
                self.variant(KEY_AW::ENABLE)
            }
            #[doc = "Reset the watchdog value (0xAAAA)"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(KEY_AW::RESET)
            }
            #[doc = "Start the watchdog (0xCCCC)"]
            #[inline(always)]
            pub fn start(self) -> &'a mut W {
                self.variant(KEY_AW::START)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Key value (write only, read 0000h)"]
            #[inline(always)]
            pub fn key(&mut self) -> KEY_W {
                KEY_W { w: self }
            }
        }
    }
    #[doc = "Prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pr](pr) module"]
    pub type PR = crate::Reg<u32, _PR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PR;
    #[doc = "`read()` method returns [pr::R](pr::R) reader structure"]
    impl crate::Readable for PR {}
    #[doc = "`write(|w| ..)` method takes [pr::W](pr::W) writer structure"]
    impl crate::Writable for PR {}
    #[doc = "Prescaler register"]
    pub mod pr {
        #[doc = "Reader of register PR"]
        pub type R = crate::R<u32, super::PR>;
        #[doc = "Writer for register PR"]
        pub type W = crate::W<u32, super::PR>;
        #[doc = "Register PR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Prescaler divider\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PR_A {
            #[doc = "0: Divider /4"]
            DIVIDEBY4 = 0,
            #[doc = "1: Divider /8"]
            DIVIDEBY8 = 1,
            #[doc = "2: Divider /16"]
            DIVIDEBY16 = 2,
            #[doc = "3: Divider /32"]
            DIVIDEBY32 = 3,
            #[doc = "4: Divider /64"]
            DIVIDEBY64 = 4,
            #[doc = "5: Divider /128"]
            DIVIDEBY128 = 5,
            #[doc = "6: Divider /256"]
            DIVIDEBY256 = 6,
            #[doc = "7: Divider /256"]
            DIVIDEBY256BIS = 7,
        }
        impl From<PR_A> for u8 {
            #[inline(always)]
            fn from(variant: PR_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PR`"]
        pub type PR_R = crate::R<u8, PR_A>;
        impl PR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PR_A {
                match self.bits {
                    0 => PR_A::DIVIDEBY4,
                    1 => PR_A::DIVIDEBY8,
                    2 => PR_A::DIVIDEBY16,
                    3 => PR_A::DIVIDEBY32,
                    4 => PR_A::DIVIDEBY64,
                    5 => PR_A::DIVIDEBY128,
                    6 => PR_A::DIVIDEBY256,
                    7 => PR_A::DIVIDEBY256BIS,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY4`"]
            #[inline(always)]
            pub fn is_divide_by4(&self) -> bool {
                *self == PR_A::DIVIDEBY4
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY8`"]
            #[inline(always)]
            pub fn is_divide_by8(&self) -> bool {
                *self == PR_A::DIVIDEBY8
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY16`"]
            #[inline(always)]
            pub fn is_divide_by16(&self) -> bool {
                *self == PR_A::DIVIDEBY16
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY32`"]
            #[inline(always)]
            pub fn is_divide_by32(&self) -> bool {
                *self == PR_A::DIVIDEBY32
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY64`"]
            #[inline(always)]
            pub fn is_divide_by64(&self) -> bool {
                *self == PR_A::DIVIDEBY64
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY128`"]
            #[inline(always)]
            pub fn is_divide_by128(&self) -> bool {
                *self == PR_A::DIVIDEBY128
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY256`"]
            #[inline(always)]
            pub fn is_divide_by256(&self) -> bool {
                *self == PR_A::DIVIDEBY256
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY256BIS`"]
            #[inline(always)]
            pub fn is_divide_by256bis(&self) -> bool {
                *self == PR_A::DIVIDEBY256BIS
            }
        }
        #[doc = "Write proxy for field `PR`"]
        pub struct PR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Divider /4"]
            #[inline(always)]
            pub fn divide_by4(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY4)
            }
            #[doc = "Divider /8"]
            #[inline(always)]
            pub fn divide_by8(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY8)
            }
            #[doc = "Divider /16"]
            #[inline(always)]
            pub fn divide_by16(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY16)
            }
            #[doc = "Divider /32"]
            #[inline(always)]
            pub fn divide_by32(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY32)
            }
            #[doc = "Divider /64"]
            #[inline(always)]
            pub fn divide_by64(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY64)
            }
            #[doc = "Divider /128"]
            #[inline(always)]
            pub fn divide_by128(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY128)
            }
            #[doc = "Divider /256"]
            #[inline(always)]
            pub fn divide_by256(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY256)
            }
            #[doc = "Divider /256"]
            #[inline(always)]
            pub fn divide_by256bis(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY256BIS)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Prescaler divider"]
            #[inline(always)]
            pub fn pr(&self) -> PR_R {
                PR_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Prescaler divider"]
            #[inline(always)]
            pub fn pr(&mut self) -> PR_W {
                PR_W { w: self }
            }
        }
    }
    #[doc = "Reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rlr](rlr) module"]
    pub type RLR = crate::Reg<u32, _RLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RLR;
    #[doc = "`read()` method returns [rlr::R](rlr::R) reader structure"]
    impl crate::Readable for RLR {}
    #[doc = "`write(|w| ..)` method takes [rlr::W](rlr::W) writer structure"]
    impl crate::Writable for RLR {}
    #[doc = "Reload register"]
    pub mod rlr {
        #[doc = "Reader of register RLR"]
        pub type R = crate::R<u32, super::RLR>;
        #[doc = "Writer for register RLR"]
        pub type W = crate::W<u32, super::RLR>;
        #[doc = "Register RLR `reset()`'s with value 0x0fff"]
        impl crate::ResetValue for super::RLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0fff
            }
        }
        #[doc = "Reader of field `RL`"]
        pub type RL_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `RL`"]
        pub struct RL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Watchdog counter reload value"]
            #[inline(always)]
            pub fn rl(&self) -> RL_R {
                RL_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Watchdog counter reload value"]
            #[inline(always)]
            pub fn rl(&mut self) -> RL_W {
                RL_W { w: self }
            }
        }
    }
    #[doc = "Status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "Status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Reader of field `RVU`"]
        pub type RVU_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PVU`"]
        pub type PVU_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 1 - Watchdog counter reload value update"]
            #[inline(always)]
            pub fn rvu(&self) -> RVU_R {
                RVU_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Watchdog prescaler value update"]
            #[inline(always)]
            pub fn pvu(&self) -> PVU_R {
                PVU_R::new((self.bits & 0x01) != 0)
            }
        }
    }
}
#[doc = "Liquid crystal display controller"]
pub struct LCD {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LCD {}
impl LCD {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lcd::RegisterBlock {
        0x4000_2400 as *const _
    }
}
impl Deref for LCD {
    type Target = lcd::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*LCD::ptr() }
    }
}
#[doc = "Liquid crystal display controller"]
pub mod lcd {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register"]
        pub cr: CR,
        #[doc = "0x04 - frame control register"]
        pub fcr: FCR,
        #[doc = "0x08 - status register"]
        pub sr: SR,
        #[doc = "0x0c - clear register"]
        pub clr: CLR,
        _reserved4: [u8; 4usize],
        #[doc = "0x14 - display memory"]
        pub ram_com0: RAM_COM0,
        _reserved5: [u8; 4usize],
        #[doc = "0x1c - display memory"]
        pub ram_com1: RAM_COM1,
        _reserved6: [u8; 4usize],
        #[doc = "0x24 - display memory"]
        pub ram_com2: RAM_COM2,
        _reserved7: [u8; 4usize],
        #[doc = "0x2c - display memory"]
        pub ram_com3: RAM_COM3,
        _reserved8: [u8; 4usize],
        #[doc = "0x34 - display memory"]
        pub ram_com4: RAM_COM4,
        _reserved9: [u8; 4usize],
        #[doc = "0x3c - display memory"]
        pub ram_com5: RAM_COM5,
        _reserved10: [u8; 4usize],
        #[doc = "0x44 - display memory"]
        pub ram_com6: RAM_COM6,
        _reserved11: [u8; 4usize],
        #[doc = "0x4c - display memory"]
        pub ram_com7: RAM_COM7,
    }
    #[doc = "control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MUX_SEG`"]
        pub type MUX_SEG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MUX_SEG`"]
        pub struct MUX_SEG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MUX_SEG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `BIAS`"]
        pub type BIAS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BIAS`"]
        pub struct BIAS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIAS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DUTY`"]
        pub type DUTY_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DUTY`"]
        pub struct DUTY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DUTY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 2)) | (((value as u32) & 0x07) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `VSEL`"]
        pub type VSEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VSEL`"]
        pub struct VSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `LCDEN`"]
        pub type LCDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCDEN`"]
        pub struct LCDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - Mux segment enable"]
            #[inline(always)]
            pub fn mux_seg(&self) -> MUX_SEG_R {
                MUX_SEG_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - Bias selector"]
            #[inline(always)]
            pub fn bias(&self) -> BIAS_R {
                BIAS_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bits 2:4 - Duty selection"]
            #[inline(always)]
            pub fn duty(&self) -> DUTY_R {
                DUTY_R::new(((self.bits >> 2) & 0x07) as u8)
            }
            #[doc = "Bit 1 - Voltage source selection"]
            #[inline(always)]
            pub fn vsel(&self) -> VSEL_R {
                VSEL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - LCD controller enable"]
            #[inline(always)]
            pub fn lcden(&self) -> LCDEN_R {
                LCDEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - Mux segment enable"]
            #[inline(always)]
            pub fn mux_seg(&mut self) -> MUX_SEG_W {
                MUX_SEG_W { w: self }
            }
            #[doc = "Bits 5:6 - Bias selector"]
            #[inline(always)]
            pub fn bias(&mut self) -> BIAS_W {
                BIAS_W { w: self }
            }
            #[doc = "Bits 2:4 - Duty selection"]
            #[inline(always)]
            pub fn duty(&mut self) -> DUTY_W {
                DUTY_W { w: self }
            }
            #[doc = "Bit 1 - Voltage source selection"]
            #[inline(always)]
            pub fn vsel(&mut self) -> VSEL_W {
                VSEL_W { w: self }
            }
            #[doc = "Bit 0 - LCD controller enable"]
            #[inline(always)]
            pub fn lcden(&mut self) -> LCDEN_W {
                LCDEN_W { w: self }
            }
        }
    }
    #[doc = "frame control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcr](fcr) module"]
    pub type FCR = crate::Reg<u32, _FCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCR;
    #[doc = "`read()` method returns [fcr::R](fcr::R) reader structure"]
    impl crate::Readable for FCR {}
    #[doc = "`write(|w| ..)` method takes [fcr::W](fcr::W) writer structure"]
    impl crate::Writable for FCR {}
    #[doc = "frame control register"]
    pub mod fcr {
        #[doc = "Reader of register FCR"]
        pub type R = crate::R<u32, super::FCR>;
        #[doc = "Writer for register FCR"]
        pub type W = crate::W<u32, super::FCR>;
        #[doc = "Register FCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::FCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PS`"]
        pub type PS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PS`"]
        pub struct PS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 22)) | (((value as u32) & 0x0f) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `DIV`"]
        pub type DIV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DIV`"]
        pub struct DIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 18)) | (((value as u32) & 0x0f) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `BLINK`"]
        pub type BLINK_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BLINK`"]
        pub struct BLINK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BLINK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `BLINKF`"]
        pub type BLINKF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BLINKF`"]
        pub struct BLINKF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BLINKF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `CC`"]
        pub type CC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC`"]
        pub struct CC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 10)) | (((value as u32) & 0x07) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `DEAD`"]
        pub type DEAD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DEAD`"]
        pub struct DEAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEAD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 7)) | (((value as u32) & 0x07) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PON`"]
        pub type PON_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PON`"]
        pub struct PON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PON_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `UDDIE`"]
        pub type UDDIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UDDIE`"]
        pub struct UDDIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDDIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `SOFIE`"]
        pub type SOFIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SOFIE`"]
        pub struct SOFIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOFIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `HD`"]
        pub type HD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HD`"]
        pub struct HD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 22:25 - PS 16-bit prescaler"]
            #[inline(always)]
            pub fn ps(&self) -> PS_R {
                PS_R::new(((self.bits >> 22) & 0x0f) as u8)
            }
            #[doc = "Bits 18:21 - DIV clock divider"]
            #[inline(always)]
            pub fn div(&self) -> DIV_R {
                DIV_R::new(((self.bits >> 18) & 0x0f) as u8)
            }
            #[doc = "Bits 16:17 - Blink mode selection"]
            #[inline(always)]
            pub fn blink(&self) -> BLINK_R {
                BLINK_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:15 - Blink frequency selection"]
            #[inline(always)]
            pub fn blinkf(&self) -> BLINKF_R {
                BLINKF_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bits 10:12 - Contrast control"]
            #[inline(always)]
            pub fn cc(&self) -> CC_R {
                CC_R::new(((self.bits >> 10) & 0x07) as u8)
            }
            #[doc = "Bits 7:9 - Dead time duration"]
            #[inline(always)]
            pub fn dead(&self) -> DEAD_R {
                DEAD_R::new(((self.bits >> 7) & 0x07) as u8)
            }
            #[doc = "Bits 4:6 - Pulse ON duration"]
            #[inline(always)]
            pub fn pon(&self) -> PON_R {
                PON_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Update display done interrupt enable"]
            #[inline(always)]
            pub fn uddie(&self) -> UDDIE_R {
                UDDIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Start of frame interrupt enable"]
            #[inline(always)]
            pub fn sofie(&self) -> SOFIE_R {
                SOFIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - High drive enable"]
            #[inline(always)]
            pub fn hd(&self) -> HD_R {
                HD_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 22:25 - PS 16-bit prescaler"]
            #[inline(always)]
            pub fn ps(&mut self) -> PS_W {
                PS_W { w: self }
            }
            #[doc = "Bits 18:21 - DIV clock divider"]
            #[inline(always)]
            pub fn div(&mut self) -> DIV_W {
                DIV_W { w: self }
            }
            #[doc = "Bits 16:17 - Blink mode selection"]
            #[inline(always)]
            pub fn blink(&mut self) -> BLINK_W {
                BLINK_W { w: self }
            }
            #[doc = "Bits 13:15 - Blink frequency selection"]
            #[inline(always)]
            pub fn blinkf(&mut self) -> BLINKF_W {
                BLINKF_W { w: self }
            }
            #[doc = "Bits 10:12 - Contrast control"]
            #[inline(always)]
            pub fn cc(&mut self) -> CC_W {
                CC_W { w: self }
            }
            #[doc = "Bits 7:9 - Dead time duration"]
            #[inline(always)]
            pub fn dead(&mut self) -> DEAD_W {
                DEAD_W { w: self }
            }
            #[doc = "Bits 4:6 - Pulse ON duration"]
            #[inline(always)]
            pub fn pon(&mut self) -> PON_W {
                PON_W { w: self }
            }
            #[doc = "Bit 3 - Update display done interrupt enable"]
            #[inline(always)]
            pub fn uddie(&mut self) -> UDDIE_W {
                UDDIE_W { w: self }
            }
            #[doc = "Bit 1 - Start of frame interrupt enable"]
            #[inline(always)]
            pub fn sofie(&mut self) -> SOFIE_W {
                SOFIE_W { w: self }
            }
            #[doc = "Bit 0 - High drive enable"]
            #[inline(always)]
            pub fn hd(&mut self) -> HD_W {
                HD_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0x20"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x20
            }
        }
        #[doc = "Reader of field `FCRSF`"]
        pub type FCRSF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RDY`"]
        pub type RDY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `UDD`"]
        pub type UDD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `UDR`"]
        pub type UDR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UDR`"]
        pub struct UDR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SOF`"]
        pub type SOF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ENS`"]
        pub type ENS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 5 - LCD Frame Control Register Synchronization flag"]
            #[inline(always)]
            pub fn fcrsf(&self) -> FCRSF_R {
                FCRSF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Ready flag"]
            #[inline(always)]
            pub fn rdy(&self) -> RDY_R {
                RDY_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Update Display Done"]
            #[inline(always)]
            pub fn udd(&self) -> UDD_R {
                UDD_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update display request"]
            #[inline(always)]
            pub fn udr(&self) -> UDR_R {
                UDR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Start of frame flag"]
            #[inline(always)]
            pub fn sof(&self) -> SOF_R {
                SOF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - LCD enabled status"]
            #[inline(always)]
            pub fn ens(&self) -> ENS_R {
                ENS_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - Update display request"]
            #[inline(always)]
            pub fn udr(&mut self) -> UDR_W {
                UDR_W { w: self }
            }
        }
    }
    #[doc = "clear register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clr](clr) module"]
    pub type CLR = crate::Reg<u32, _CLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CLR;
    #[doc = "`write(|w| ..)` method takes [clr::W](clr::W) writer structure"]
    impl crate::Writable for CLR {}
    #[doc = "clear register"]
    pub mod clr {
        #[doc = "Writer for register CLR"]
        pub type W = crate::W<u32, super::CLR>;
        #[doc = "Register CLR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `UDDC`"]
        pub struct UDDC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDDC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `SOFC`"]
        pub struct SOFC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOFC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 3 - Update display done clear"]
            #[inline(always)]
            pub fn uddc(&mut self) -> UDDC_W {
                UDDC_W { w: self }
            }
            #[doc = "Bit 1 - Start of frame flag clear"]
            #[inline(always)]
            pub fn sofc(&mut self) -> SOFC_W {
                SOFC_W { w: self }
            }
        }
    }
    #[doc = "display memory\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ram_com0](ram_com0) module"]
    pub type RAM_COM0 = crate::Reg<u32, _RAM_COM0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RAM_COM0;
    #[doc = "`read()` method returns [ram_com0::R](ram_com0::R) reader structure"]
    impl crate::Readable for RAM_COM0 {}
    #[doc = "`write(|w| ..)` method takes [ram_com0::W](ram_com0::W) writer structure"]
    impl crate::Writable for RAM_COM0 {}
    #[doc = "display memory"]
    pub mod ram_com0 {
        #[doc = "Reader of register RAM_COM0"]
        pub type R = crate::R<u32, super::RAM_COM0>;
        #[doc = "Writer for register RAM_COM0"]
        pub type W = crate::W<u32, super::RAM_COM0>;
        #[doc = "Register RAM_COM0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::RAM_COM0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `S31`"]
        pub type S31_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S31`"]
        pub struct S31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `S30`"]
        pub type S30_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S30`"]
        pub struct S30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `S29`"]
        pub type S29_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S29`"]
        pub struct S29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `S28`"]
        pub type S28_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S28`"]
        pub struct S28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `S27`"]
        pub type S27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S27`"]
        pub struct S27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `S26`"]
        pub type S26_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S26`"]
        pub struct S26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `S25`"]
        pub type S25_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S25`"]
        pub struct S25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `S24`"]
        pub type S24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S24`"]
        pub struct S24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `S23`"]
        pub type S23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S23`"]
        pub struct S23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `S22`"]
        pub type S22_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S22`"]
        pub struct S22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `S21`"]
        pub type S21_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S21`"]
        pub struct S21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `S20`"]
        pub type S20_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S20`"]
        pub struct S20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `S19`"]
        pub type S19_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S19`"]
        pub struct S19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `S18`"]
        pub type S18_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S18`"]
        pub struct S18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `S17`"]
        pub type S17_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S17`"]
        pub struct S17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `S16`"]
        pub type S16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S16`"]
        pub struct S16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `S15`"]
        pub type S15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S15`"]
        pub struct S15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `S14`"]
        pub type S14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S14`"]
        pub struct S14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `S13`"]
        pub type S13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S13`"]
        pub struct S13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `S12`"]
        pub type S12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S12`"]
        pub struct S12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `S11`"]
        pub type S11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S11`"]
        pub struct S11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `S10`"]
        pub type S10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S10`"]
        pub struct S10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `S09`"]
        pub type S09_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S09`"]
        pub struct S09_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S09_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `S08`"]
        pub type S08_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S08`"]
        pub struct S08_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S08_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `S07`"]
        pub type S07_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S07`"]
        pub struct S07_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S07_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `S06`"]
        pub type S06_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S06`"]
        pub struct S06_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S06_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `S05`"]
        pub type S05_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S05`"]
        pub struct S05_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S05_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `S04`"]
        pub type S04_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S04`"]
        pub struct S04_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S04_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `S03`"]
        pub type S03_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S03`"]
        pub struct S03_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S03_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `S02`"]
        pub type S02_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S02`"]
        pub struct S02_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S02_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `S01`"]
        pub type S01_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S01`"]
        pub struct S01_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S01_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `S00`"]
        pub type S00_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S00`"]
        pub struct S00_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S00_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&self) -> S31_R {
                S31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&self) -> S30_R {
                S30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&self) -> S29_R {
                S29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&self) -> S28_R {
                S28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&self) -> S27_R {
                S27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&self) -> S26_R {
                S26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&self) -> S25_R {
                S25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&self) -> S24_R {
                S24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&self) -> S23_R {
                S23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&self) -> S22_R {
                S22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&self) -> S21_R {
                S21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&self) -> S20_R {
                S20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&self) -> S19_R {
                S19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&self) -> S18_R {
                S18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&self) -> S17_R {
                S17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&self) -> S16_R {
                S16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&self) -> S15_R {
                S15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&self) -> S14_R {
                S14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&self) -> S13_R {
                S13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&self) -> S12_R {
                S12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&self) -> S11_R {
                S11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&self) -> S10_R {
                S10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&self) -> S09_R {
                S09_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&self) -> S08_R {
                S08_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&self) -> S07_R {
                S07_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&self) -> S06_R {
                S06_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&self) -> S05_R {
                S05_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&self) -> S04_R {
                S04_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&self) -> S03_R {
                S03_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&self) -> S02_R {
                S02_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&self) -> S01_R {
                S01_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&self) -> S00_R {
                S00_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&mut self) -> S31_W {
                S31_W { w: self }
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&mut self) -> S30_W {
                S30_W { w: self }
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&mut self) -> S29_W {
                S29_W { w: self }
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&mut self) -> S28_W {
                S28_W { w: self }
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&mut self) -> S27_W {
                S27_W { w: self }
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&mut self) -> S26_W {
                S26_W { w: self }
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&mut self) -> S25_W {
                S25_W { w: self }
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&mut self) -> S24_W {
                S24_W { w: self }
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&mut self) -> S23_W {
                S23_W { w: self }
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&mut self) -> S22_W {
                S22_W { w: self }
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&mut self) -> S21_W {
                S21_W { w: self }
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&mut self) -> S20_W {
                S20_W { w: self }
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&mut self) -> S19_W {
                S19_W { w: self }
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&mut self) -> S18_W {
                S18_W { w: self }
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&mut self) -> S17_W {
                S17_W { w: self }
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&mut self) -> S16_W {
                S16_W { w: self }
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&mut self) -> S15_W {
                S15_W { w: self }
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&mut self) -> S14_W {
                S14_W { w: self }
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&mut self) -> S13_W {
                S13_W { w: self }
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&mut self) -> S12_W {
                S12_W { w: self }
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&mut self) -> S11_W {
                S11_W { w: self }
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&mut self) -> S10_W {
                S10_W { w: self }
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&mut self) -> S09_W {
                S09_W { w: self }
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&mut self) -> S08_W {
                S08_W { w: self }
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&mut self) -> S07_W {
                S07_W { w: self }
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&mut self) -> S06_W {
                S06_W { w: self }
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&mut self) -> S05_W {
                S05_W { w: self }
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&mut self) -> S04_W {
                S04_W { w: self }
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&mut self) -> S03_W {
                S03_W { w: self }
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&mut self) -> S02_W {
                S02_W { w: self }
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&mut self) -> S01_W {
                S01_W { w: self }
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&mut self) -> S00_W {
                S00_W { w: self }
            }
        }
    }
    #[doc = "display memory\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ram_com1](ram_com1) module"]
    pub type RAM_COM1 = crate::Reg<u32, _RAM_COM1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RAM_COM1;
    #[doc = "`read()` method returns [ram_com1::R](ram_com1::R) reader structure"]
    impl crate::Readable for RAM_COM1 {}
    #[doc = "`write(|w| ..)` method takes [ram_com1::W](ram_com1::W) writer structure"]
    impl crate::Writable for RAM_COM1 {}
    #[doc = "display memory"]
    pub mod ram_com1 {
        #[doc = "Reader of register RAM_COM1"]
        pub type R = crate::R<u32, super::RAM_COM1>;
        #[doc = "Writer for register RAM_COM1"]
        pub type W = crate::W<u32, super::RAM_COM1>;
        #[doc = "Register RAM_COM1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::RAM_COM1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `S31`"]
        pub type S31_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S31`"]
        pub struct S31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `S30`"]
        pub type S30_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S30`"]
        pub struct S30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `S29`"]
        pub type S29_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S29`"]
        pub struct S29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `S28`"]
        pub type S28_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S28`"]
        pub struct S28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `S27`"]
        pub type S27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S27`"]
        pub struct S27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `S26`"]
        pub type S26_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S26`"]
        pub struct S26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `S25`"]
        pub type S25_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S25`"]
        pub struct S25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `S24`"]
        pub type S24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S24`"]
        pub struct S24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `S23`"]
        pub type S23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S23`"]
        pub struct S23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `S22`"]
        pub type S22_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S22`"]
        pub struct S22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `S21`"]
        pub type S21_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S21`"]
        pub struct S21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `S20`"]
        pub type S20_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S20`"]
        pub struct S20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `S19`"]
        pub type S19_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S19`"]
        pub struct S19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `S18`"]
        pub type S18_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S18`"]
        pub struct S18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `S17`"]
        pub type S17_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S17`"]
        pub struct S17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `S16`"]
        pub type S16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S16`"]
        pub struct S16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `S15`"]
        pub type S15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S15`"]
        pub struct S15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `S14`"]
        pub type S14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S14`"]
        pub struct S14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `S13`"]
        pub type S13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S13`"]
        pub struct S13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `S12`"]
        pub type S12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S12`"]
        pub struct S12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `S11`"]
        pub type S11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S11`"]
        pub struct S11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `S10`"]
        pub type S10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S10`"]
        pub struct S10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `S09`"]
        pub type S09_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S09`"]
        pub struct S09_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S09_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `S08`"]
        pub type S08_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S08`"]
        pub struct S08_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S08_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `S07`"]
        pub type S07_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S07`"]
        pub struct S07_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S07_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `S06`"]
        pub type S06_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S06`"]
        pub struct S06_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S06_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `S05`"]
        pub type S05_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S05`"]
        pub struct S05_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S05_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `S04`"]
        pub type S04_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S04`"]
        pub struct S04_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S04_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `S03`"]
        pub type S03_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S03`"]
        pub struct S03_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S03_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `S02`"]
        pub type S02_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S02`"]
        pub struct S02_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S02_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `S01`"]
        pub type S01_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S01`"]
        pub struct S01_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S01_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `S00`"]
        pub type S00_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S00`"]
        pub struct S00_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S00_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&self) -> S31_R {
                S31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&self) -> S30_R {
                S30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&self) -> S29_R {
                S29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&self) -> S28_R {
                S28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&self) -> S27_R {
                S27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&self) -> S26_R {
                S26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&self) -> S25_R {
                S25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&self) -> S24_R {
                S24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&self) -> S23_R {
                S23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&self) -> S22_R {
                S22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&self) -> S21_R {
                S21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&self) -> S20_R {
                S20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&self) -> S19_R {
                S19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&self) -> S18_R {
                S18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&self) -> S17_R {
                S17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&self) -> S16_R {
                S16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&self) -> S15_R {
                S15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&self) -> S14_R {
                S14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&self) -> S13_R {
                S13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&self) -> S12_R {
                S12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&self) -> S11_R {
                S11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&self) -> S10_R {
                S10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&self) -> S09_R {
                S09_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&self) -> S08_R {
                S08_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&self) -> S07_R {
                S07_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&self) -> S06_R {
                S06_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&self) -> S05_R {
                S05_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&self) -> S04_R {
                S04_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&self) -> S03_R {
                S03_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&self) -> S02_R {
                S02_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&self) -> S01_R {
                S01_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&self) -> S00_R {
                S00_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&mut self) -> S31_W {
                S31_W { w: self }
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&mut self) -> S30_W {
                S30_W { w: self }
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&mut self) -> S29_W {
                S29_W { w: self }
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&mut self) -> S28_W {
                S28_W { w: self }
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&mut self) -> S27_W {
                S27_W { w: self }
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&mut self) -> S26_W {
                S26_W { w: self }
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&mut self) -> S25_W {
                S25_W { w: self }
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&mut self) -> S24_W {
                S24_W { w: self }
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&mut self) -> S23_W {
                S23_W { w: self }
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&mut self) -> S22_W {
                S22_W { w: self }
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&mut self) -> S21_W {
                S21_W { w: self }
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&mut self) -> S20_W {
                S20_W { w: self }
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&mut self) -> S19_W {
                S19_W { w: self }
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&mut self) -> S18_W {
                S18_W { w: self }
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&mut self) -> S17_W {
                S17_W { w: self }
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&mut self) -> S16_W {
                S16_W { w: self }
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&mut self) -> S15_W {
                S15_W { w: self }
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&mut self) -> S14_W {
                S14_W { w: self }
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&mut self) -> S13_W {
                S13_W { w: self }
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&mut self) -> S12_W {
                S12_W { w: self }
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&mut self) -> S11_W {
                S11_W { w: self }
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&mut self) -> S10_W {
                S10_W { w: self }
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&mut self) -> S09_W {
                S09_W { w: self }
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&mut self) -> S08_W {
                S08_W { w: self }
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&mut self) -> S07_W {
                S07_W { w: self }
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&mut self) -> S06_W {
                S06_W { w: self }
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&mut self) -> S05_W {
                S05_W { w: self }
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&mut self) -> S04_W {
                S04_W { w: self }
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&mut self) -> S03_W {
                S03_W { w: self }
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&mut self) -> S02_W {
                S02_W { w: self }
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&mut self) -> S01_W {
                S01_W { w: self }
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&mut self) -> S00_W {
                S00_W { w: self }
            }
        }
    }
    #[doc = "display memory\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ram_com2](ram_com2) module"]
    pub type RAM_COM2 = crate::Reg<u32, _RAM_COM2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RAM_COM2;
    #[doc = "`read()` method returns [ram_com2::R](ram_com2::R) reader structure"]
    impl crate::Readable for RAM_COM2 {}
    #[doc = "`write(|w| ..)` method takes [ram_com2::W](ram_com2::W) writer structure"]
    impl crate::Writable for RAM_COM2 {}
    #[doc = "display memory"]
    pub mod ram_com2 {
        #[doc = "Reader of register RAM_COM2"]
        pub type R = crate::R<u32, super::RAM_COM2>;
        #[doc = "Writer for register RAM_COM2"]
        pub type W = crate::W<u32, super::RAM_COM2>;
        #[doc = "Register RAM_COM2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::RAM_COM2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `S31`"]
        pub type S31_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S31`"]
        pub struct S31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `S30`"]
        pub type S30_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S30`"]
        pub struct S30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `S29`"]
        pub type S29_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S29`"]
        pub struct S29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `S28`"]
        pub type S28_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S28`"]
        pub struct S28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `S27`"]
        pub type S27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S27`"]
        pub struct S27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `S26`"]
        pub type S26_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S26`"]
        pub struct S26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `S25`"]
        pub type S25_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S25`"]
        pub struct S25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `S24`"]
        pub type S24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S24`"]
        pub struct S24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `S23`"]
        pub type S23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S23`"]
        pub struct S23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `S22`"]
        pub type S22_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S22`"]
        pub struct S22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `S21`"]
        pub type S21_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S21`"]
        pub struct S21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `S20`"]
        pub type S20_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S20`"]
        pub struct S20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `S19`"]
        pub type S19_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S19`"]
        pub struct S19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `S18`"]
        pub type S18_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S18`"]
        pub struct S18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `S17`"]
        pub type S17_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S17`"]
        pub struct S17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `S16`"]
        pub type S16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S16`"]
        pub struct S16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `S15`"]
        pub type S15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S15`"]
        pub struct S15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `S14`"]
        pub type S14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S14`"]
        pub struct S14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `S13`"]
        pub type S13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S13`"]
        pub struct S13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `S12`"]
        pub type S12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S12`"]
        pub struct S12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `S11`"]
        pub type S11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S11`"]
        pub struct S11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `S10`"]
        pub type S10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S10`"]
        pub struct S10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `S09`"]
        pub type S09_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S09`"]
        pub struct S09_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S09_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `S08`"]
        pub type S08_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S08`"]
        pub struct S08_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S08_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `S07`"]
        pub type S07_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S07`"]
        pub struct S07_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S07_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `S06`"]
        pub type S06_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S06`"]
        pub struct S06_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S06_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `S05`"]
        pub type S05_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S05`"]
        pub struct S05_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S05_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `S04`"]
        pub type S04_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S04`"]
        pub struct S04_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S04_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `S03`"]
        pub type S03_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S03`"]
        pub struct S03_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S03_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `S02`"]
        pub type S02_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S02`"]
        pub struct S02_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S02_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `S01`"]
        pub type S01_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S01`"]
        pub struct S01_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S01_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `S00`"]
        pub type S00_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S00`"]
        pub struct S00_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S00_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&self) -> S31_R {
                S31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&self) -> S30_R {
                S30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&self) -> S29_R {
                S29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&self) -> S28_R {
                S28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&self) -> S27_R {
                S27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&self) -> S26_R {
                S26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&self) -> S25_R {
                S25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&self) -> S24_R {
                S24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&self) -> S23_R {
                S23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&self) -> S22_R {
                S22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&self) -> S21_R {
                S21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&self) -> S20_R {
                S20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&self) -> S19_R {
                S19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&self) -> S18_R {
                S18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&self) -> S17_R {
                S17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&self) -> S16_R {
                S16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&self) -> S15_R {
                S15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&self) -> S14_R {
                S14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&self) -> S13_R {
                S13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&self) -> S12_R {
                S12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&self) -> S11_R {
                S11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&self) -> S10_R {
                S10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&self) -> S09_R {
                S09_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&self) -> S08_R {
                S08_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&self) -> S07_R {
                S07_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&self) -> S06_R {
                S06_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&self) -> S05_R {
                S05_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&self) -> S04_R {
                S04_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&self) -> S03_R {
                S03_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&self) -> S02_R {
                S02_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&self) -> S01_R {
                S01_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&self) -> S00_R {
                S00_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&mut self) -> S31_W {
                S31_W { w: self }
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&mut self) -> S30_W {
                S30_W { w: self }
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&mut self) -> S29_W {
                S29_W { w: self }
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&mut self) -> S28_W {
                S28_W { w: self }
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&mut self) -> S27_W {
                S27_W { w: self }
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&mut self) -> S26_W {
                S26_W { w: self }
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&mut self) -> S25_W {
                S25_W { w: self }
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&mut self) -> S24_W {
                S24_W { w: self }
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&mut self) -> S23_W {
                S23_W { w: self }
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&mut self) -> S22_W {
                S22_W { w: self }
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&mut self) -> S21_W {
                S21_W { w: self }
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&mut self) -> S20_W {
                S20_W { w: self }
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&mut self) -> S19_W {
                S19_W { w: self }
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&mut self) -> S18_W {
                S18_W { w: self }
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&mut self) -> S17_W {
                S17_W { w: self }
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&mut self) -> S16_W {
                S16_W { w: self }
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&mut self) -> S15_W {
                S15_W { w: self }
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&mut self) -> S14_W {
                S14_W { w: self }
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&mut self) -> S13_W {
                S13_W { w: self }
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&mut self) -> S12_W {
                S12_W { w: self }
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&mut self) -> S11_W {
                S11_W { w: self }
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&mut self) -> S10_W {
                S10_W { w: self }
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&mut self) -> S09_W {
                S09_W { w: self }
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&mut self) -> S08_W {
                S08_W { w: self }
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&mut self) -> S07_W {
                S07_W { w: self }
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&mut self) -> S06_W {
                S06_W { w: self }
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&mut self) -> S05_W {
                S05_W { w: self }
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&mut self) -> S04_W {
                S04_W { w: self }
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&mut self) -> S03_W {
                S03_W { w: self }
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&mut self) -> S02_W {
                S02_W { w: self }
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&mut self) -> S01_W {
                S01_W { w: self }
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&mut self) -> S00_W {
                S00_W { w: self }
            }
        }
    }
    #[doc = "display memory\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ram_com3](ram_com3) module"]
    pub type RAM_COM3 = crate::Reg<u32, _RAM_COM3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RAM_COM3;
    #[doc = "`read()` method returns [ram_com3::R](ram_com3::R) reader structure"]
    impl crate::Readable for RAM_COM3 {}
    #[doc = "`write(|w| ..)` method takes [ram_com3::W](ram_com3::W) writer structure"]
    impl crate::Writable for RAM_COM3 {}
    #[doc = "display memory"]
    pub mod ram_com3 {
        #[doc = "Reader of register RAM_COM3"]
        pub type R = crate::R<u32, super::RAM_COM3>;
        #[doc = "Writer for register RAM_COM3"]
        pub type W = crate::W<u32, super::RAM_COM3>;
        #[doc = "Register RAM_COM3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::RAM_COM3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `S31`"]
        pub type S31_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S31`"]
        pub struct S31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `S30`"]
        pub type S30_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S30`"]
        pub struct S30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `S29`"]
        pub type S29_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S29`"]
        pub struct S29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `S28`"]
        pub type S28_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S28`"]
        pub struct S28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `S27`"]
        pub type S27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S27`"]
        pub struct S27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `S26`"]
        pub type S26_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S26`"]
        pub struct S26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `S25`"]
        pub type S25_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S25`"]
        pub struct S25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `S24`"]
        pub type S24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S24`"]
        pub struct S24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `S23`"]
        pub type S23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S23`"]
        pub struct S23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `S22`"]
        pub type S22_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S22`"]
        pub struct S22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `S21`"]
        pub type S21_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S21`"]
        pub struct S21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `S20`"]
        pub type S20_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S20`"]
        pub struct S20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `S19`"]
        pub type S19_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S19`"]
        pub struct S19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `S18`"]
        pub type S18_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S18`"]
        pub struct S18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `S17`"]
        pub type S17_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S17`"]
        pub struct S17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `S16`"]
        pub type S16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S16`"]
        pub struct S16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `S15`"]
        pub type S15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S15`"]
        pub struct S15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `S14`"]
        pub type S14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S14`"]
        pub struct S14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `S13`"]
        pub type S13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S13`"]
        pub struct S13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `S12`"]
        pub type S12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S12`"]
        pub struct S12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `S11`"]
        pub type S11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S11`"]
        pub struct S11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `S10`"]
        pub type S10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S10`"]
        pub struct S10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `S09`"]
        pub type S09_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S09`"]
        pub struct S09_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S09_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `S08`"]
        pub type S08_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S08`"]
        pub struct S08_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S08_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `S07`"]
        pub type S07_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S07`"]
        pub struct S07_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S07_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `S06`"]
        pub type S06_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S06`"]
        pub struct S06_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S06_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `S05`"]
        pub type S05_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S05`"]
        pub struct S05_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S05_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `S04`"]
        pub type S04_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S04`"]
        pub struct S04_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S04_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `S03`"]
        pub type S03_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S03`"]
        pub struct S03_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S03_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `S02`"]
        pub type S02_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S02`"]
        pub struct S02_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S02_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `S01`"]
        pub type S01_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S01`"]
        pub struct S01_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S01_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `S00`"]
        pub type S00_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S00`"]
        pub struct S00_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S00_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&self) -> S31_R {
                S31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&self) -> S30_R {
                S30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&self) -> S29_R {
                S29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&self) -> S28_R {
                S28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&self) -> S27_R {
                S27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&self) -> S26_R {
                S26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&self) -> S25_R {
                S25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&self) -> S24_R {
                S24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&self) -> S23_R {
                S23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&self) -> S22_R {
                S22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&self) -> S21_R {
                S21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&self) -> S20_R {
                S20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&self) -> S19_R {
                S19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&self) -> S18_R {
                S18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&self) -> S17_R {
                S17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&self) -> S16_R {
                S16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&self) -> S15_R {
                S15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&self) -> S14_R {
                S14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&self) -> S13_R {
                S13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&self) -> S12_R {
                S12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&self) -> S11_R {
                S11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&self) -> S10_R {
                S10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&self) -> S09_R {
                S09_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&self) -> S08_R {
                S08_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&self) -> S07_R {
                S07_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&self) -> S06_R {
                S06_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&self) -> S05_R {
                S05_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&self) -> S04_R {
                S04_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&self) -> S03_R {
                S03_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&self) -> S02_R {
                S02_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&self) -> S01_R {
                S01_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&self) -> S00_R {
                S00_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&mut self) -> S31_W {
                S31_W { w: self }
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&mut self) -> S30_W {
                S30_W { w: self }
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&mut self) -> S29_W {
                S29_W { w: self }
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&mut self) -> S28_W {
                S28_W { w: self }
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&mut self) -> S27_W {
                S27_W { w: self }
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&mut self) -> S26_W {
                S26_W { w: self }
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&mut self) -> S25_W {
                S25_W { w: self }
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&mut self) -> S24_W {
                S24_W { w: self }
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&mut self) -> S23_W {
                S23_W { w: self }
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&mut self) -> S22_W {
                S22_W { w: self }
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&mut self) -> S21_W {
                S21_W { w: self }
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&mut self) -> S20_W {
                S20_W { w: self }
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&mut self) -> S19_W {
                S19_W { w: self }
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&mut self) -> S18_W {
                S18_W { w: self }
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&mut self) -> S17_W {
                S17_W { w: self }
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&mut self) -> S16_W {
                S16_W { w: self }
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&mut self) -> S15_W {
                S15_W { w: self }
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&mut self) -> S14_W {
                S14_W { w: self }
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&mut self) -> S13_W {
                S13_W { w: self }
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&mut self) -> S12_W {
                S12_W { w: self }
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&mut self) -> S11_W {
                S11_W { w: self }
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&mut self) -> S10_W {
                S10_W { w: self }
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&mut self) -> S09_W {
                S09_W { w: self }
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&mut self) -> S08_W {
                S08_W { w: self }
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&mut self) -> S07_W {
                S07_W { w: self }
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&mut self) -> S06_W {
                S06_W { w: self }
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&mut self) -> S05_W {
                S05_W { w: self }
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&mut self) -> S04_W {
                S04_W { w: self }
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&mut self) -> S03_W {
                S03_W { w: self }
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&mut self) -> S02_W {
                S02_W { w: self }
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&mut self) -> S01_W {
                S01_W { w: self }
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&mut self) -> S00_W {
                S00_W { w: self }
            }
        }
    }
    #[doc = "display memory\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ram_com4](ram_com4) module"]
    pub type RAM_COM4 = crate::Reg<u32, _RAM_COM4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RAM_COM4;
    #[doc = "`read()` method returns [ram_com4::R](ram_com4::R) reader structure"]
    impl crate::Readable for RAM_COM4 {}
    #[doc = "`write(|w| ..)` method takes [ram_com4::W](ram_com4::W) writer structure"]
    impl crate::Writable for RAM_COM4 {}
    #[doc = "display memory"]
    pub mod ram_com4 {
        #[doc = "Reader of register RAM_COM4"]
        pub type R = crate::R<u32, super::RAM_COM4>;
        #[doc = "Writer for register RAM_COM4"]
        pub type W = crate::W<u32, super::RAM_COM4>;
        #[doc = "Register RAM_COM4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::RAM_COM4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `S31`"]
        pub type S31_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S31`"]
        pub struct S31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `S30`"]
        pub type S30_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S30`"]
        pub struct S30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `S29`"]
        pub type S29_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S29`"]
        pub struct S29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `S28`"]
        pub type S28_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S28`"]
        pub struct S28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `S27`"]
        pub type S27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S27`"]
        pub struct S27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `S26`"]
        pub type S26_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S26`"]
        pub struct S26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `S25`"]
        pub type S25_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S25`"]
        pub struct S25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `S24`"]
        pub type S24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S24`"]
        pub struct S24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `S23`"]
        pub type S23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S23`"]
        pub struct S23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `S22`"]
        pub type S22_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S22`"]
        pub struct S22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `S21`"]
        pub type S21_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S21`"]
        pub struct S21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `S20`"]
        pub type S20_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S20`"]
        pub struct S20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `S19`"]
        pub type S19_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S19`"]
        pub struct S19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `S18`"]
        pub type S18_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S18`"]
        pub struct S18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `S17`"]
        pub type S17_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S17`"]
        pub struct S17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `S16`"]
        pub type S16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S16`"]
        pub struct S16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `S15`"]
        pub type S15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S15`"]
        pub struct S15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `S14`"]
        pub type S14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S14`"]
        pub struct S14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `S13`"]
        pub type S13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S13`"]
        pub struct S13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `S12`"]
        pub type S12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S12`"]
        pub struct S12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `S11`"]
        pub type S11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S11`"]
        pub struct S11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `S10`"]
        pub type S10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S10`"]
        pub struct S10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `S09`"]
        pub type S09_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S09`"]
        pub struct S09_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S09_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `S08`"]
        pub type S08_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S08`"]
        pub struct S08_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S08_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `S07`"]
        pub type S07_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S07`"]
        pub struct S07_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S07_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `S06`"]
        pub type S06_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S06`"]
        pub struct S06_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S06_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `S05`"]
        pub type S05_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S05`"]
        pub struct S05_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S05_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `S04`"]
        pub type S04_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S04`"]
        pub struct S04_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S04_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `S03`"]
        pub type S03_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S03`"]
        pub struct S03_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S03_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `S02`"]
        pub type S02_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S02`"]
        pub struct S02_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S02_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `S01`"]
        pub type S01_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S01`"]
        pub struct S01_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S01_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `S00`"]
        pub type S00_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S00`"]
        pub struct S00_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S00_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&self) -> S31_R {
                S31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&self) -> S30_R {
                S30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&self) -> S29_R {
                S29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&self) -> S28_R {
                S28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&self) -> S27_R {
                S27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&self) -> S26_R {
                S26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&self) -> S25_R {
                S25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&self) -> S24_R {
                S24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&self) -> S23_R {
                S23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&self) -> S22_R {
                S22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&self) -> S21_R {
                S21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&self) -> S20_R {
                S20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&self) -> S19_R {
                S19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&self) -> S18_R {
                S18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&self) -> S17_R {
                S17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&self) -> S16_R {
                S16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&self) -> S15_R {
                S15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&self) -> S14_R {
                S14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&self) -> S13_R {
                S13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&self) -> S12_R {
                S12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&self) -> S11_R {
                S11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&self) -> S10_R {
                S10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&self) -> S09_R {
                S09_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&self) -> S08_R {
                S08_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&self) -> S07_R {
                S07_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&self) -> S06_R {
                S06_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&self) -> S05_R {
                S05_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&self) -> S04_R {
                S04_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&self) -> S03_R {
                S03_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&self) -> S02_R {
                S02_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&self) -> S01_R {
                S01_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&self) -> S00_R {
                S00_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&mut self) -> S31_W {
                S31_W { w: self }
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&mut self) -> S30_W {
                S30_W { w: self }
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&mut self) -> S29_W {
                S29_W { w: self }
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&mut self) -> S28_W {
                S28_W { w: self }
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&mut self) -> S27_W {
                S27_W { w: self }
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&mut self) -> S26_W {
                S26_W { w: self }
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&mut self) -> S25_W {
                S25_W { w: self }
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&mut self) -> S24_W {
                S24_W { w: self }
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&mut self) -> S23_W {
                S23_W { w: self }
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&mut self) -> S22_W {
                S22_W { w: self }
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&mut self) -> S21_W {
                S21_W { w: self }
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&mut self) -> S20_W {
                S20_W { w: self }
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&mut self) -> S19_W {
                S19_W { w: self }
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&mut self) -> S18_W {
                S18_W { w: self }
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&mut self) -> S17_W {
                S17_W { w: self }
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&mut self) -> S16_W {
                S16_W { w: self }
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&mut self) -> S15_W {
                S15_W { w: self }
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&mut self) -> S14_W {
                S14_W { w: self }
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&mut self) -> S13_W {
                S13_W { w: self }
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&mut self) -> S12_W {
                S12_W { w: self }
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&mut self) -> S11_W {
                S11_W { w: self }
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&mut self) -> S10_W {
                S10_W { w: self }
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&mut self) -> S09_W {
                S09_W { w: self }
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&mut self) -> S08_W {
                S08_W { w: self }
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&mut self) -> S07_W {
                S07_W { w: self }
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&mut self) -> S06_W {
                S06_W { w: self }
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&mut self) -> S05_W {
                S05_W { w: self }
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&mut self) -> S04_W {
                S04_W { w: self }
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&mut self) -> S03_W {
                S03_W { w: self }
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&mut self) -> S02_W {
                S02_W { w: self }
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&mut self) -> S01_W {
                S01_W { w: self }
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&mut self) -> S00_W {
                S00_W { w: self }
            }
        }
    }
    #[doc = "display memory\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ram_com5](ram_com5) module"]
    pub type RAM_COM5 = crate::Reg<u32, _RAM_COM5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RAM_COM5;
    #[doc = "`read()` method returns [ram_com5::R](ram_com5::R) reader structure"]
    impl crate::Readable for RAM_COM5 {}
    #[doc = "`write(|w| ..)` method takes [ram_com5::W](ram_com5::W) writer structure"]
    impl crate::Writable for RAM_COM5 {}
    #[doc = "display memory"]
    pub mod ram_com5 {
        #[doc = "Reader of register RAM_COM5"]
        pub type R = crate::R<u32, super::RAM_COM5>;
        #[doc = "Writer for register RAM_COM5"]
        pub type W = crate::W<u32, super::RAM_COM5>;
        #[doc = "Register RAM_COM5 `reset()`'s with value 0"]
        impl crate::ResetValue for super::RAM_COM5 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `S31`"]
        pub type S31_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S31`"]
        pub struct S31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `S30`"]
        pub type S30_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S30`"]
        pub struct S30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `S29`"]
        pub type S29_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S29`"]
        pub struct S29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `S28`"]
        pub type S28_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S28`"]
        pub struct S28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `S27`"]
        pub type S27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S27`"]
        pub struct S27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `S26`"]
        pub type S26_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S26`"]
        pub struct S26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `S25`"]
        pub type S25_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S25`"]
        pub struct S25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `S24`"]
        pub type S24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S24`"]
        pub struct S24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `S23`"]
        pub type S23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S23`"]
        pub struct S23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `S22`"]
        pub type S22_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S22`"]
        pub struct S22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `S21`"]
        pub type S21_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S21`"]
        pub struct S21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `S20`"]
        pub type S20_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S20`"]
        pub struct S20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `S19`"]
        pub type S19_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S19`"]
        pub struct S19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `S18`"]
        pub type S18_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S18`"]
        pub struct S18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `S17`"]
        pub type S17_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S17`"]
        pub struct S17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `S16`"]
        pub type S16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S16`"]
        pub struct S16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `S15`"]
        pub type S15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S15`"]
        pub struct S15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `S14`"]
        pub type S14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S14`"]
        pub struct S14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `S13`"]
        pub type S13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S13`"]
        pub struct S13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `S12`"]
        pub type S12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S12`"]
        pub struct S12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `S11`"]
        pub type S11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S11`"]
        pub struct S11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `S10`"]
        pub type S10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S10`"]
        pub struct S10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `S09`"]
        pub type S09_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S09`"]
        pub struct S09_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S09_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `S08`"]
        pub type S08_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S08`"]
        pub struct S08_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S08_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `S07`"]
        pub type S07_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S07`"]
        pub struct S07_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S07_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `S06`"]
        pub type S06_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S06`"]
        pub struct S06_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S06_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `S05`"]
        pub type S05_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S05`"]
        pub struct S05_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S05_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `S04`"]
        pub type S04_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S04`"]
        pub struct S04_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S04_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `S03`"]
        pub type S03_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S03`"]
        pub struct S03_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S03_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `S02`"]
        pub type S02_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S02`"]
        pub struct S02_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S02_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `S01`"]
        pub type S01_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S01`"]
        pub struct S01_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S01_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `S00`"]
        pub type S00_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S00`"]
        pub struct S00_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S00_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&self) -> S31_R {
                S31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&self) -> S30_R {
                S30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&self) -> S29_R {
                S29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&self) -> S28_R {
                S28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&self) -> S27_R {
                S27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&self) -> S26_R {
                S26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&self) -> S25_R {
                S25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&self) -> S24_R {
                S24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&self) -> S23_R {
                S23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&self) -> S22_R {
                S22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&self) -> S21_R {
                S21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&self) -> S20_R {
                S20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&self) -> S19_R {
                S19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&self) -> S18_R {
                S18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&self) -> S17_R {
                S17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&self) -> S16_R {
                S16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&self) -> S15_R {
                S15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&self) -> S14_R {
                S14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&self) -> S13_R {
                S13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&self) -> S12_R {
                S12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&self) -> S11_R {
                S11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&self) -> S10_R {
                S10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&self) -> S09_R {
                S09_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&self) -> S08_R {
                S08_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&self) -> S07_R {
                S07_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&self) -> S06_R {
                S06_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&self) -> S05_R {
                S05_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&self) -> S04_R {
                S04_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&self) -> S03_R {
                S03_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&self) -> S02_R {
                S02_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&self) -> S01_R {
                S01_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&self) -> S00_R {
                S00_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&mut self) -> S31_W {
                S31_W { w: self }
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&mut self) -> S30_W {
                S30_W { w: self }
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&mut self) -> S29_W {
                S29_W { w: self }
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&mut self) -> S28_W {
                S28_W { w: self }
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&mut self) -> S27_W {
                S27_W { w: self }
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&mut self) -> S26_W {
                S26_W { w: self }
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&mut self) -> S25_W {
                S25_W { w: self }
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&mut self) -> S24_W {
                S24_W { w: self }
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&mut self) -> S23_W {
                S23_W { w: self }
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&mut self) -> S22_W {
                S22_W { w: self }
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&mut self) -> S21_W {
                S21_W { w: self }
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&mut self) -> S20_W {
                S20_W { w: self }
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&mut self) -> S19_W {
                S19_W { w: self }
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&mut self) -> S18_W {
                S18_W { w: self }
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&mut self) -> S17_W {
                S17_W { w: self }
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&mut self) -> S16_W {
                S16_W { w: self }
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&mut self) -> S15_W {
                S15_W { w: self }
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&mut self) -> S14_W {
                S14_W { w: self }
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&mut self) -> S13_W {
                S13_W { w: self }
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&mut self) -> S12_W {
                S12_W { w: self }
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&mut self) -> S11_W {
                S11_W { w: self }
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&mut self) -> S10_W {
                S10_W { w: self }
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&mut self) -> S09_W {
                S09_W { w: self }
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&mut self) -> S08_W {
                S08_W { w: self }
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&mut self) -> S07_W {
                S07_W { w: self }
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&mut self) -> S06_W {
                S06_W { w: self }
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&mut self) -> S05_W {
                S05_W { w: self }
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&mut self) -> S04_W {
                S04_W { w: self }
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&mut self) -> S03_W {
                S03_W { w: self }
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&mut self) -> S02_W {
                S02_W { w: self }
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&mut self) -> S01_W {
                S01_W { w: self }
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&mut self) -> S00_W {
                S00_W { w: self }
            }
        }
    }
    #[doc = "display memory\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ram_com6](ram_com6) module"]
    pub type RAM_COM6 = crate::Reg<u32, _RAM_COM6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RAM_COM6;
    #[doc = "`read()` method returns [ram_com6::R](ram_com6::R) reader structure"]
    impl crate::Readable for RAM_COM6 {}
    #[doc = "`write(|w| ..)` method takes [ram_com6::W](ram_com6::W) writer structure"]
    impl crate::Writable for RAM_COM6 {}
    #[doc = "display memory"]
    pub mod ram_com6 {
        #[doc = "Reader of register RAM_COM6"]
        pub type R = crate::R<u32, super::RAM_COM6>;
        #[doc = "Writer for register RAM_COM6"]
        pub type W = crate::W<u32, super::RAM_COM6>;
        #[doc = "Register RAM_COM6 `reset()`'s with value 0"]
        impl crate::ResetValue for super::RAM_COM6 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `S31`"]
        pub type S31_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S31`"]
        pub struct S31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `S30`"]
        pub type S30_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S30`"]
        pub struct S30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `S29`"]
        pub type S29_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S29`"]
        pub struct S29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `S28`"]
        pub type S28_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S28`"]
        pub struct S28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `S27`"]
        pub type S27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S27`"]
        pub struct S27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `S26`"]
        pub type S26_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S26`"]
        pub struct S26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `S25`"]
        pub type S25_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S25`"]
        pub struct S25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `S24`"]
        pub type S24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S24`"]
        pub struct S24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `S23`"]
        pub type S23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S23`"]
        pub struct S23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `S22`"]
        pub type S22_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S22`"]
        pub struct S22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `S21`"]
        pub type S21_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S21`"]
        pub struct S21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `S20`"]
        pub type S20_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S20`"]
        pub struct S20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `S19`"]
        pub type S19_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S19`"]
        pub struct S19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `S18`"]
        pub type S18_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S18`"]
        pub struct S18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `S17`"]
        pub type S17_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S17`"]
        pub struct S17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `S16`"]
        pub type S16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S16`"]
        pub struct S16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `S15`"]
        pub type S15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S15`"]
        pub struct S15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `S14`"]
        pub type S14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S14`"]
        pub struct S14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `S13`"]
        pub type S13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S13`"]
        pub struct S13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `S12`"]
        pub type S12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S12`"]
        pub struct S12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `S11`"]
        pub type S11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S11`"]
        pub struct S11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `S10`"]
        pub type S10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S10`"]
        pub struct S10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `S09`"]
        pub type S09_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S09`"]
        pub struct S09_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S09_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `S08`"]
        pub type S08_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S08`"]
        pub struct S08_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S08_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `S07`"]
        pub type S07_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S07`"]
        pub struct S07_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S07_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `S06`"]
        pub type S06_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S06`"]
        pub struct S06_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S06_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `S05`"]
        pub type S05_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S05`"]
        pub struct S05_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S05_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `S04`"]
        pub type S04_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S04`"]
        pub struct S04_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S04_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `S03`"]
        pub type S03_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S03`"]
        pub struct S03_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S03_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `S02`"]
        pub type S02_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S02`"]
        pub struct S02_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S02_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `S01`"]
        pub type S01_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S01`"]
        pub struct S01_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S01_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `S00`"]
        pub type S00_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S00`"]
        pub struct S00_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S00_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&self) -> S31_R {
                S31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&self) -> S30_R {
                S30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&self) -> S29_R {
                S29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&self) -> S28_R {
                S28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&self) -> S27_R {
                S27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&self) -> S26_R {
                S26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&self) -> S25_R {
                S25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&self) -> S24_R {
                S24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&self) -> S23_R {
                S23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&self) -> S22_R {
                S22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&self) -> S21_R {
                S21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&self) -> S20_R {
                S20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&self) -> S19_R {
                S19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&self) -> S18_R {
                S18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&self) -> S17_R {
                S17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&self) -> S16_R {
                S16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&self) -> S15_R {
                S15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&self) -> S14_R {
                S14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&self) -> S13_R {
                S13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&self) -> S12_R {
                S12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&self) -> S11_R {
                S11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&self) -> S10_R {
                S10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&self) -> S09_R {
                S09_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&self) -> S08_R {
                S08_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&self) -> S07_R {
                S07_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&self) -> S06_R {
                S06_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&self) -> S05_R {
                S05_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&self) -> S04_R {
                S04_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&self) -> S03_R {
                S03_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&self) -> S02_R {
                S02_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&self) -> S01_R {
                S01_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&self) -> S00_R {
                S00_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&mut self) -> S31_W {
                S31_W { w: self }
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&mut self) -> S30_W {
                S30_W { w: self }
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&mut self) -> S29_W {
                S29_W { w: self }
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&mut self) -> S28_W {
                S28_W { w: self }
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&mut self) -> S27_W {
                S27_W { w: self }
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&mut self) -> S26_W {
                S26_W { w: self }
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&mut self) -> S25_W {
                S25_W { w: self }
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&mut self) -> S24_W {
                S24_W { w: self }
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&mut self) -> S23_W {
                S23_W { w: self }
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&mut self) -> S22_W {
                S22_W { w: self }
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&mut self) -> S21_W {
                S21_W { w: self }
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&mut self) -> S20_W {
                S20_W { w: self }
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&mut self) -> S19_W {
                S19_W { w: self }
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&mut self) -> S18_W {
                S18_W { w: self }
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&mut self) -> S17_W {
                S17_W { w: self }
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&mut self) -> S16_W {
                S16_W { w: self }
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&mut self) -> S15_W {
                S15_W { w: self }
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&mut self) -> S14_W {
                S14_W { w: self }
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&mut self) -> S13_W {
                S13_W { w: self }
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&mut self) -> S12_W {
                S12_W { w: self }
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&mut self) -> S11_W {
                S11_W { w: self }
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&mut self) -> S10_W {
                S10_W { w: self }
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&mut self) -> S09_W {
                S09_W { w: self }
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&mut self) -> S08_W {
                S08_W { w: self }
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&mut self) -> S07_W {
                S07_W { w: self }
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&mut self) -> S06_W {
                S06_W { w: self }
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&mut self) -> S05_W {
                S05_W { w: self }
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&mut self) -> S04_W {
                S04_W { w: self }
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&mut self) -> S03_W {
                S03_W { w: self }
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&mut self) -> S02_W {
                S02_W { w: self }
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&mut self) -> S01_W {
                S01_W { w: self }
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&mut self) -> S00_W {
                S00_W { w: self }
            }
        }
    }
    #[doc = "display memory\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ram_com7](ram_com7) module"]
    pub type RAM_COM7 = crate::Reg<u32, _RAM_COM7>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RAM_COM7;
    #[doc = "`read()` method returns [ram_com7::R](ram_com7::R) reader structure"]
    impl crate::Readable for RAM_COM7 {}
    #[doc = "`write(|w| ..)` method takes [ram_com7::W](ram_com7::W) writer structure"]
    impl crate::Writable for RAM_COM7 {}
    #[doc = "display memory"]
    pub mod ram_com7 {
        #[doc = "Reader of register RAM_COM7"]
        pub type R = crate::R<u32, super::RAM_COM7>;
        #[doc = "Writer for register RAM_COM7"]
        pub type W = crate::W<u32, super::RAM_COM7>;
        #[doc = "Register RAM_COM7 `reset()`'s with value 0"]
        impl crate::ResetValue for super::RAM_COM7 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `S31`"]
        pub type S31_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S31`"]
        pub struct S31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `S30`"]
        pub type S30_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S30`"]
        pub struct S30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `S29`"]
        pub type S29_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S29`"]
        pub struct S29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `S28`"]
        pub type S28_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S28`"]
        pub struct S28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `S27`"]
        pub type S27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S27`"]
        pub struct S27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `S26`"]
        pub type S26_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S26`"]
        pub struct S26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `S25`"]
        pub type S25_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S25`"]
        pub struct S25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `S24`"]
        pub type S24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S24`"]
        pub struct S24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `S23`"]
        pub type S23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S23`"]
        pub struct S23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `S22`"]
        pub type S22_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S22`"]
        pub struct S22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `S21`"]
        pub type S21_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S21`"]
        pub struct S21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `S20`"]
        pub type S20_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S20`"]
        pub struct S20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `S19`"]
        pub type S19_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S19`"]
        pub struct S19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `S18`"]
        pub type S18_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S18`"]
        pub struct S18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `S17`"]
        pub type S17_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S17`"]
        pub struct S17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `S16`"]
        pub type S16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S16`"]
        pub struct S16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `S15`"]
        pub type S15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S15`"]
        pub struct S15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `S14`"]
        pub type S14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S14`"]
        pub struct S14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `S13`"]
        pub type S13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S13`"]
        pub struct S13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `S12`"]
        pub type S12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S12`"]
        pub struct S12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `S11`"]
        pub type S11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S11`"]
        pub struct S11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `S10`"]
        pub type S10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S10`"]
        pub struct S10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `S09`"]
        pub type S09_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S09`"]
        pub struct S09_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S09_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `S08`"]
        pub type S08_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S08`"]
        pub struct S08_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S08_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `S07`"]
        pub type S07_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S07`"]
        pub struct S07_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S07_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `S06`"]
        pub type S06_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S06`"]
        pub struct S06_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S06_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `S05`"]
        pub type S05_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S05`"]
        pub struct S05_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S05_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `S04`"]
        pub type S04_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S04`"]
        pub struct S04_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S04_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `S03`"]
        pub type S03_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S03`"]
        pub struct S03_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S03_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `S02`"]
        pub type S02_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S02`"]
        pub struct S02_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S02_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `S01`"]
        pub type S01_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S01`"]
        pub struct S01_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S01_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `S00`"]
        pub type S00_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S00`"]
        pub struct S00_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S00_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&self) -> S31_R {
                S31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&self) -> S30_R {
                S30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&self) -> S29_R {
                S29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&self) -> S28_R {
                S28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&self) -> S27_R {
                S27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&self) -> S26_R {
                S26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&self) -> S25_R {
                S25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&self) -> S24_R {
                S24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&self) -> S23_R {
                S23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&self) -> S22_R {
                S22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&self) -> S21_R {
                S21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&self) -> S20_R {
                S20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&self) -> S19_R {
                S19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&self) -> S18_R {
                S18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&self) -> S17_R {
                S17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&self) -> S16_R {
                S16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&self) -> S15_R {
                S15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&self) -> S14_R {
                S14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&self) -> S13_R {
                S13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&self) -> S12_R {
                S12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&self) -> S11_R {
                S11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&self) -> S10_R {
                S10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&self) -> S09_R {
                S09_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&self) -> S08_R {
                S08_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&self) -> S07_R {
                S07_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&self) -> S06_R {
                S06_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&self) -> S05_R {
                S05_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&self) -> S04_R {
                S04_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&self) -> S03_R {
                S03_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&self) -> S02_R {
                S02_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&self) -> S01_R {
                S01_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&self) -> S00_R {
                S00_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - S31"]
            #[inline(always)]
            pub fn s31(&mut self) -> S31_W {
                S31_W { w: self }
            }
            #[doc = "Bit 30 - S30"]
            #[inline(always)]
            pub fn s30(&mut self) -> S30_W {
                S30_W { w: self }
            }
            #[doc = "Bit 29 - S29"]
            #[inline(always)]
            pub fn s29(&mut self) -> S29_W {
                S29_W { w: self }
            }
            #[doc = "Bit 28 - S28"]
            #[inline(always)]
            pub fn s28(&mut self) -> S28_W {
                S28_W { w: self }
            }
            #[doc = "Bit 27 - S27"]
            #[inline(always)]
            pub fn s27(&mut self) -> S27_W {
                S27_W { w: self }
            }
            #[doc = "Bit 26 - S26"]
            #[inline(always)]
            pub fn s26(&mut self) -> S26_W {
                S26_W { w: self }
            }
            #[doc = "Bit 25 - S25"]
            #[inline(always)]
            pub fn s25(&mut self) -> S25_W {
                S25_W { w: self }
            }
            #[doc = "Bit 24 - S24"]
            #[inline(always)]
            pub fn s24(&mut self) -> S24_W {
                S24_W { w: self }
            }
            #[doc = "Bit 23 - S23"]
            #[inline(always)]
            pub fn s23(&mut self) -> S23_W {
                S23_W { w: self }
            }
            #[doc = "Bit 22 - S22"]
            #[inline(always)]
            pub fn s22(&mut self) -> S22_W {
                S22_W { w: self }
            }
            #[doc = "Bit 21 - S21"]
            #[inline(always)]
            pub fn s21(&mut self) -> S21_W {
                S21_W { w: self }
            }
            #[doc = "Bit 20 - S20"]
            #[inline(always)]
            pub fn s20(&mut self) -> S20_W {
                S20_W { w: self }
            }
            #[doc = "Bit 19 - S19"]
            #[inline(always)]
            pub fn s19(&mut self) -> S19_W {
                S19_W { w: self }
            }
            #[doc = "Bit 18 - S18"]
            #[inline(always)]
            pub fn s18(&mut self) -> S18_W {
                S18_W { w: self }
            }
            #[doc = "Bit 17 - S17"]
            #[inline(always)]
            pub fn s17(&mut self) -> S17_W {
                S17_W { w: self }
            }
            #[doc = "Bit 16 - S16"]
            #[inline(always)]
            pub fn s16(&mut self) -> S16_W {
                S16_W { w: self }
            }
            #[doc = "Bit 15 - S15"]
            #[inline(always)]
            pub fn s15(&mut self) -> S15_W {
                S15_W { w: self }
            }
            #[doc = "Bit 14 - S14"]
            #[inline(always)]
            pub fn s14(&mut self) -> S14_W {
                S14_W { w: self }
            }
            #[doc = "Bit 13 - S13"]
            #[inline(always)]
            pub fn s13(&mut self) -> S13_W {
                S13_W { w: self }
            }
            #[doc = "Bit 12 - S12"]
            #[inline(always)]
            pub fn s12(&mut self) -> S12_W {
                S12_W { w: self }
            }
            #[doc = "Bit 11 - S11"]
            #[inline(always)]
            pub fn s11(&mut self) -> S11_W {
                S11_W { w: self }
            }
            #[doc = "Bit 10 - S10"]
            #[inline(always)]
            pub fn s10(&mut self) -> S10_W {
                S10_W { w: self }
            }
            #[doc = "Bit 9 - S09"]
            #[inline(always)]
            pub fn s09(&mut self) -> S09_W {
                S09_W { w: self }
            }
            #[doc = "Bit 8 - S08"]
            #[inline(always)]
            pub fn s08(&mut self) -> S08_W {
                S08_W { w: self }
            }
            #[doc = "Bit 7 - S07"]
            #[inline(always)]
            pub fn s07(&mut self) -> S07_W {
                S07_W { w: self }
            }
            #[doc = "Bit 6 - S06"]
            #[inline(always)]
            pub fn s06(&mut self) -> S06_W {
                S06_W { w: self }
            }
            #[doc = "Bit 5 - S05"]
            #[inline(always)]
            pub fn s05(&mut self) -> S05_W {
                S05_W { w: self }
            }
            #[doc = "Bit 4 - S04"]
            #[inline(always)]
            pub fn s04(&mut self) -> S04_W {
                S04_W { w: self }
            }
            #[doc = "Bit 3 - S03"]
            #[inline(always)]
            pub fn s03(&mut self) -> S03_W {
                S03_W { w: self }
            }
            #[doc = "Bit 2 - S02"]
            #[inline(always)]
            pub fn s02(&mut self) -> S02_W {
                S02_W { w: self }
            }
            #[doc = "Bit 1 - S01"]
            #[inline(always)]
            pub fn s01(&mut self) -> S01_W {
                S01_W { w: self }
            }
            #[doc = "Bit 0 - S00"]
            #[inline(always)]
            pub fn s00(&mut self) -> S00_W {
                S00_W { w: self }
            }
        }
    }
}
#[doc = "Operational amplifiers"]
pub struct OPAMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OPAMP {}
impl OPAMP {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const opamp::RegisterBlock {
        0x4000_7c5c as *const _
    }
}
impl Deref for OPAMP {
    type Target = opamp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*OPAMP::ptr() }
    }
}
#[doc = "Operational amplifiers"]
pub mod opamp {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control/status register"]
        pub csr: CSR,
        #[doc = "0x04 - offset trimming register for normal mode"]
        pub otr: OTR,
        #[doc = "0x08 - OPAMP offset trimming register for low power mode"]
        pub lpotr: LPOTR,
    }
    #[doc = "control/status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr](csr) module"]
    pub type CSR = crate::Reg<u32, _CSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CSR;
    #[doc = "`read()` method returns [csr::R](csr::R) reader structure"]
    impl crate::Readable for CSR {}
    #[doc = "`write(|w| ..)` method takes [csr::W](csr::W) writer structure"]
    impl crate::Writable for CSR {}
    #[doc = "control/status register"]
    pub mod csr {
        #[doc = "Reader of register CSR"]
        pub type R = crate::R<u32, super::CSR>;
        #[doc = "Writer for register CSR"]
        pub type W = crate::W<u32, super::CSR>;
        #[doc = "Register CSR `reset()`'s with value 0x0001_0101"]
        impl crate::ResetValue for super::CSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0001_0101
            }
        }
        #[doc = "Reader of field `OPA3CALOUT`"]
        pub type OPA3CALOUT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA3CALOUT`"]
        pub struct OPA3CALOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA3CALOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `OPA2CALOUT`"]
        pub type OPA2CALOUT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA2CALOUT`"]
        pub struct OPA2CALOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA2CALOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `OPA1CALOUT`"]
        pub type OPA1CALOUT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA1CALOUT`"]
        pub struct OPA1CALOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA1CALOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `AOP_RANGE`"]
        pub type AOP_RANGE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AOP_RANGE`"]
        pub struct AOP_RANGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AOP_RANGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `S7SEL2`"]
        pub type S7SEL2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S7SEL2`"]
        pub struct S7SEL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S7SEL2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `ANAWSEL3`"]
        pub type ANAWSEL3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ANAWSEL3`"]
        pub struct ANAWSEL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ANAWSEL3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `ANAWSEL2`"]
        pub type ANAWSEL2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ANAWSEL2`"]
        pub struct ANAWSEL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ANAWSEL2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `ANAWSEL1`"]
        pub type ANAWSEL1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ANAWSEL1`"]
        pub struct ANAWSEL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ANAWSEL1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `OPA3LPM`"]
        pub type OPA3LPM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA3LPM`"]
        pub struct OPA3LPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA3LPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `OPA3CAL_H`"]
        pub type OPA3CAL_H_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA3CAL_H`"]
        pub struct OPA3CAL_H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA3CAL_H_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `OPA3CAL_L`"]
        pub type OPA3CAL_L_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA3CAL_L`"]
        pub struct OPA3CAL_L_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA3CAL_L_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `S6SEL3`"]
        pub type S6SEL3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S6SEL3`"]
        pub struct S6SEL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S6SEL3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `S5SEL3`"]
        pub type S5SEL3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S5SEL3`"]
        pub struct S5SEL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S5SEL3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `S4SEL3`"]
        pub type S4SEL3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S4SEL3`"]
        pub struct S4SEL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S4SEL3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `S3SEL3`"]
        pub type S3SEL3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S3SEL3`"]
        pub struct S3SEL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S3SEL3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `OPA3PD`"]
        pub type OPA3PD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA3PD`"]
        pub struct OPA3PD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA3PD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `OPA2LPM`"]
        pub type OPA2LPM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA2LPM`"]
        pub struct OPA2LPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA2LPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `OPA2CAL_H`"]
        pub type OPA2CAL_H_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA2CAL_H`"]
        pub struct OPA2CAL_H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA2CAL_H_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `OPA2CAL_L`"]
        pub type OPA2CAL_L_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA2CAL_L`"]
        pub struct OPA2CAL_L_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA2CAL_L_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `S6SEL2`"]
        pub type S6SEL2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S6SEL2`"]
        pub struct S6SEL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S6SEL2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `S5SEL2`"]
        pub type S5SEL2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S5SEL2`"]
        pub struct S5SEL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S5SEL2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `S4SEL2`"]
        pub type S4SEL2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S4SEL2`"]
        pub struct S4SEL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S4SEL2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `S3SEL2`"]
        pub type S3SEL2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S3SEL2`"]
        pub struct S3SEL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S3SEL2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `OPA2PD`"]
        pub type OPA2PD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA2PD`"]
        pub struct OPA2PD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA2PD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OPA1LPM`"]
        pub type OPA1LPM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA1LPM`"]
        pub struct OPA1LPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA1LPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `OPA1CAL_H`"]
        pub type OPA1CAL_H_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA1CAL_H`"]
        pub struct OPA1CAL_H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA1CAL_H_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `OPA1CAL_L`"]
        pub type OPA1CAL_L_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA1CAL_L`"]
        pub struct OPA1CAL_L_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA1CAL_L_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `S6SEL1`"]
        pub type S6SEL1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S6SEL1`"]
        pub struct S6SEL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S6SEL1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `S5SEL1`"]
        pub type S5SEL1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S5SEL1`"]
        pub struct S5SEL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S5SEL1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `S4SEL1`"]
        pub type S4SEL1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S4SEL1`"]
        pub struct S4SEL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S4SEL1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `S3SEL1`"]
        pub type S3SEL1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `S3SEL1`"]
        pub struct S3SEL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> S3SEL1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `OPA1PD`"]
        pub type OPA1PD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPA1PD`"]
        pub struct OPA1PD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPA1PD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - OPAMP3 calibration output"]
            #[inline(always)]
            pub fn opa3calout(&self) -> OPA3CALOUT_R {
                OPA3CALOUT_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - OPAMP2 calibration output"]
            #[inline(always)]
            pub fn opa2calout(&self) -> OPA2CALOUT_R {
                OPA2CALOUT_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - OPAMP1 calibration output"]
            #[inline(always)]
            pub fn opa1calout(&self) -> OPA1CALOUT_R {
                OPA1CALOUT_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Power range selection"]
            #[inline(always)]
            pub fn aop_range(&self) -> AOP_RANGE_R {
                AOP_RANGE_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Switch 7 for OPAMP2 enable"]
            #[inline(always)]
            pub fn s7sel2(&self) -> S7SEL2_R {
                S7SEL2_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Switch SanA enable for OPAMP3"]
            #[inline(always)]
            pub fn anawsel3(&self) -> ANAWSEL3_R {
                ANAWSEL3_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Switch SanA enable for OPAMP2"]
            #[inline(always)]
            pub fn anawsel2(&self) -> ANAWSEL2_R {
                ANAWSEL2_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Switch SanA enable for OPAMP1"]
            #[inline(always)]
            pub fn anawsel1(&self) -> ANAWSEL1_R {
                ANAWSEL1_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - OPAMP3 low power mode"]
            #[inline(always)]
            pub fn opa3lpm(&self) -> OPA3LPM_R {
                OPA3LPM_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - OPAMP3 offset calibration for N differential pair"]
            #[inline(always)]
            pub fn opa3cal_h(&self) -> OPA3CAL_H_R {
                OPA3CAL_H_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - OPAMP3 offset Calibration for P differential pair"]
            #[inline(always)]
            pub fn opa3cal_l(&self) -> OPA3CAL_L_R {
                OPA3CAL_L_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Switch 6 for OPAMP3 enable"]
            #[inline(always)]
            pub fn s6sel3(&self) -> S6SEL3_R {
                S6SEL3_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Switch 5 for OPAMP3 enable"]
            #[inline(always)]
            pub fn s5sel3(&self) -> S5SEL3_R {
                S5SEL3_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Switch 4 for OPAMP3 enable"]
            #[inline(always)]
            pub fn s4sel3(&self) -> S4SEL3_R {
                S4SEL3_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Switch 3 for OPAMP3 Enable"]
            #[inline(always)]
            pub fn s3sel3(&self) -> S3SEL3_R {
                S3SEL3_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - OPAMP3 power down"]
            #[inline(always)]
            pub fn opa3pd(&self) -> OPA3PD_R {
                OPA3PD_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - OPAMP2 low power mode"]
            #[inline(always)]
            pub fn opa2lpm(&self) -> OPA2LPM_R {
                OPA2LPM_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - OPAMP2 offset calibration for N differential pair"]
            #[inline(always)]
            pub fn opa2cal_h(&self) -> OPA2CAL_H_R {
                OPA2CAL_H_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - OPAMP2 offset Calibration for P differential pair"]
            #[inline(always)]
            pub fn opa2cal_l(&self) -> OPA2CAL_L_R {
                OPA2CAL_L_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Switch 6 for OPAMP2 enable"]
            #[inline(always)]
            pub fn s6sel2(&self) -> S6SEL2_R {
                S6SEL2_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Switch 5 for OPAMP2 enable"]
            #[inline(always)]
            pub fn s5sel2(&self) -> S5SEL2_R {
                S5SEL2_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Switch 4 for OPAMP2 enable"]
            #[inline(always)]
            pub fn s4sel2(&self) -> S4SEL2_R {
                S4SEL2_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Switch 3 for OPAMP2 enable"]
            #[inline(always)]
            pub fn s3sel2(&self) -> S3SEL2_R {
                S3SEL2_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - OPAMP2 power down"]
            #[inline(always)]
            pub fn opa2pd(&self) -> OPA2PD_R {
                OPA2PD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - OPAMP1 low power mode"]
            #[inline(always)]
            pub fn opa1lpm(&self) -> OPA1LPM_R {
                OPA1LPM_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - OPAMP1 offset calibration for N differential pair"]
            #[inline(always)]
            pub fn opa1cal_h(&self) -> OPA1CAL_H_R {
                OPA1CAL_H_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - OPAMP1 offset calibration for P differential pair"]
            #[inline(always)]
            pub fn opa1cal_l(&self) -> OPA1CAL_L_R {
                OPA1CAL_L_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Switch 6 for OPAMP1 enable"]
            #[inline(always)]
            pub fn s6sel1(&self) -> S6SEL1_R {
                S6SEL1_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Switch 5 for OPAMP1 enable"]
            #[inline(always)]
            pub fn s5sel1(&self) -> S5SEL1_R {
                S5SEL1_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Switch 4 for OPAMP1 enable"]
            #[inline(always)]
            pub fn s4sel1(&self) -> S4SEL1_R {
                S4SEL1_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Switch 3 for OPAMP1 enable"]
            #[inline(always)]
            pub fn s3sel1(&self) -> S3SEL1_R {
                S3SEL1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - OPAMP1 power down"]
            #[inline(always)]
            pub fn opa1pd(&self) -> OPA1PD_R {
                OPA1PD_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - OPAMP3 calibration output"]
            #[inline(always)]
            pub fn opa3calout(&mut self) -> OPA3CALOUT_W {
                OPA3CALOUT_W { w: self }
            }
            #[doc = "Bit 30 - OPAMP2 calibration output"]
            #[inline(always)]
            pub fn opa2calout(&mut self) -> OPA2CALOUT_W {
                OPA2CALOUT_W { w: self }
            }
            #[doc = "Bit 29 - OPAMP1 calibration output"]
            #[inline(always)]
            pub fn opa1calout(&mut self) -> OPA1CALOUT_W {
                OPA1CALOUT_W { w: self }
            }
            #[doc = "Bit 28 - Power range selection"]
            #[inline(always)]
            pub fn aop_range(&mut self) -> AOP_RANGE_W {
                AOP_RANGE_W { w: self }
            }
            #[doc = "Bit 27 - Switch 7 for OPAMP2 enable"]
            #[inline(always)]
            pub fn s7sel2(&mut self) -> S7SEL2_W {
                S7SEL2_W { w: self }
            }
            #[doc = "Bit 26 - Switch SanA enable for OPAMP3"]
            #[inline(always)]
            pub fn anawsel3(&mut self) -> ANAWSEL3_W {
                ANAWSEL3_W { w: self }
            }
            #[doc = "Bit 25 - Switch SanA enable for OPAMP2"]
            #[inline(always)]
            pub fn anawsel2(&mut self) -> ANAWSEL2_W {
                ANAWSEL2_W { w: self }
            }
            #[doc = "Bit 24 - Switch SanA enable for OPAMP1"]
            #[inline(always)]
            pub fn anawsel1(&mut self) -> ANAWSEL1_W {
                ANAWSEL1_W { w: self }
            }
            #[doc = "Bit 23 - OPAMP3 low power mode"]
            #[inline(always)]
            pub fn opa3lpm(&mut self) -> OPA3LPM_W {
                OPA3LPM_W { w: self }
            }
            #[doc = "Bit 22 - OPAMP3 offset calibration for N differential pair"]
            #[inline(always)]
            pub fn opa3cal_h(&mut self) -> OPA3CAL_H_W {
                OPA3CAL_H_W { w: self }
            }
            #[doc = "Bit 21 - OPAMP3 offset Calibration for P differential pair"]
            #[inline(always)]
            pub fn opa3cal_l(&mut self) -> OPA3CAL_L_W {
                OPA3CAL_L_W { w: self }
            }
            #[doc = "Bit 20 - Switch 6 for OPAMP3 enable"]
            #[inline(always)]
            pub fn s6sel3(&mut self) -> S6SEL3_W {
                S6SEL3_W { w: self }
            }
            #[doc = "Bit 19 - Switch 5 for OPAMP3 enable"]
            #[inline(always)]
            pub fn s5sel3(&mut self) -> S5SEL3_W {
                S5SEL3_W { w: self }
            }
            #[doc = "Bit 18 - Switch 4 for OPAMP3 enable"]
            #[inline(always)]
            pub fn s4sel3(&mut self) -> S4SEL3_W {
                S4SEL3_W { w: self }
            }
            #[doc = "Bit 17 - Switch 3 for OPAMP3 Enable"]
            #[inline(always)]
            pub fn s3sel3(&mut self) -> S3SEL3_W {
                S3SEL3_W { w: self }
            }
            #[doc = "Bit 16 - OPAMP3 power down"]
            #[inline(always)]
            pub fn opa3pd(&mut self) -> OPA3PD_W {
                OPA3PD_W { w: self }
            }
            #[doc = "Bit 15 - OPAMP2 low power mode"]
            #[inline(always)]
            pub fn opa2lpm(&mut self) -> OPA2LPM_W {
                OPA2LPM_W { w: self }
            }
            #[doc = "Bit 14 - OPAMP2 offset calibration for N differential pair"]
            #[inline(always)]
            pub fn opa2cal_h(&mut self) -> OPA2CAL_H_W {
                OPA2CAL_H_W { w: self }
            }
            #[doc = "Bit 13 - OPAMP2 offset Calibration for P differential pair"]
            #[inline(always)]
            pub fn opa2cal_l(&mut self) -> OPA2CAL_L_W {
                OPA2CAL_L_W { w: self }
            }
            #[doc = "Bit 12 - Switch 6 for OPAMP2 enable"]
            #[inline(always)]
            pub fn s6sel2(&mut self) -> S6SEL2_W {
                S6SEL2_W { w: self }
            }
            #[doc = "Bit 11 - Switch 5 for OPAMP2 enable"]
            #[inline(always)]
            pub fn s5sel2(&mut self) -> S5SEL2_W {
                S5SEL2_W { w: self }
            }
            #[doc = "Bit 10 - Switch 4 for OPAMP2 enable"]
            #[inline(always)]
            pub fn s4sel2(&mut self) -> S4SEL2_W {
                S4SEL2_W { w: self }
            }
            #[doc = "Bit 9 - Switch 3 for OPAMP2 enable"]
            #[inline(always)]
            pub fn s3sel2(&mut self) -> S3SEL2_W {
                S3SEL2_W { w: self }
            }
            #[doc = "Bit 8 - OPAMP2 power down"]
            #[inline(always)]
            pub fn opa2pd(&mut self) -> OPA2PD_W {
                OPA2PD_W { w: self }
            }
            #[doc = "Bit 7 - OPAMP1 low power mode"]
            #[inline(always)]
            pub fn opa1lpm(&mut self) -> OPA1LPM_W {
                OPA1LPM_W { w: self }
            }
            #[doc = "Bit 6 - OPAMP1 offset calibration for N differential pair"]
            #[inline(always)]
            pub fn opa1cal_h(&mut self) -> OPA1CAL_H_W {
                OPA1CAL_H_W { w: self }
            }
            #[doc = "Bit 5 - OPAMP1 offset calibration for P differential pair"]
            #[inline(always)]
            pub fn opa1cal_l(&mut self) -> OPA1CAL_L_W {
                OPA1CAL_L_W { w: self }
            }
            #[doc = "Bit 4 - Switch 6 for OPAMP1 enable"]
            #[inline(always)]
            pub fn s6sel1(&mut self) -> S6SEL1_W {
                S6SEL1_W { w: self }
            }
            #[doc = "Bit 3 - Switch 5 for OPAMP1 enable"]
            #[inline(always)]
            pub fn s5sel1(&mut self) -> S5SEL1_W {
                S5SEL1_W { w: self }
            }
            #[doc = "Bit 2 - Switch 4 for OPAMP1 enable"]
            #[inline(always)]
            pub fn s4sel1(&mut self) -> S4SEL1_W {
                S4SEL1_W { w: self }
            }
            #[doc = "Bit 1 - Switch 3 for OPAMP1 enable"]
            #[inline(always)]
            pub fn s3sel1(&mut self) -> S3SEL1_W {
                S3SEL1_W { w: self }
            }
            #[doc = "Bit 0 - OPAMP1 power down"]
            #[inline(always)]
            pub fn opa1pd(&mut self) -> OPA1PD_W {
                OPA1PD_W { w: self }
            }
        }
    }
    #[doc = "offset trimming register for normal mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [otr](otr) module"]
    pub type OTR = crate::Reg<u32, _OTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OTR;
    #[doc = "`read()` method returns [otr::R](otr::R) reader structure"]
    impl crate::Readable for OTR {}
    #[doc = "`write(|w| ..)` method takes [otr::W](otr::W) writer structure"]
    impl crate::Writable for OTR {}
    #[doc = "offset trimming register for normal mode"]
    pub mod otr {
        #[doc = "Reader of register OTR"]
        pub type R = crate::R<u32, super::OTR>;
        #[doc = "Writer for register OTR"]
        pub type W = crate::W<u32, super::OTR>;
        #[doc = "Register OTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::OTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OT_USER`"]
        pub type OT_USER_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT_USER`"]
        pub struct OT_USER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT_USER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `AO3_OPT_OFFSET_TRIM`"]
        pub type AO3_OPT_OFFSET_TRIM_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `AO3_OPT_OFFSET_TRIM`"]
        pub struct AO3_OPT_OFFSET_TRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AO3_OPT_OFFSET_TRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03ff << 20)) | (((value as u32) & 0x03ff) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `AO2_OPT_OFFSET_TRIM`"]
        pub type AO2_OPT_OFFSET_TRIM_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `AO2_OPT_OFFSET_TRIM`"]
        pub struct AO2_OPT_OFFSET_TRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AO2_OPT_OFFSET_TRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03ff << 10)) | (((value as u32) & 0x03ff) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `AO1_OPT_OFFSET_TRIM`"]
        pub type AO1_OPT_OFFSET_TRIM_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `AO1_OPT_OFFSET_TRIM`"]
        pub struct AO1_OPT_OFFSET_TRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AO1_OPT_OFFSET_TRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03ff) | ((value as u32) & 0x03ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - Select user or factory trimming value"]
            #[inline(always)]
            pub fn ot_user(&self) -> OT_USER_R {
                OT_USER_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bits 20:29 - OPAMP3, 10-bit offset trim value for normal mode"]
            #[inline(always)]
            pub fn ao3_opt_offset_trim(&self) -> AO3_OPT_OFFSET_TRIM_R {
                AO3_OPT_OFFSET_TRIM_R::new(((self.bits >> 20) & 0x03ff) as u16)
            }
            #[doc = "Bits 10:19 - OPAMP2, 10-bit offset trim value for normal mode"]
            #[inline(always)]
            pub fn ao2_opt_offset_trim(&self) -> AO2_OPT_OFFSET_TRIM_R {
                AO2_OPT_OFFSET_TRIM_R::new(((self.bits >> 10) & 0x03ff) as u16)
            }
            #[doc = "Bits 0:9 - OPAMP1, 10-bit offset trim value for normal mode"]
            #[inline(always)]
            pub fn ao1_opt_offset_trim(&self) -> AO1_OPT_OFFSET_TRIM_R {
                AO1_OPT_OFFSET_TRIM_R::new((self.bits & 0x03ff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 31 - Select user or factory trimming value"]
            #[inline(always)]
            pub fn ot_user(&mut self) -> OT_USER_W {
                OT_USER_W { w: self }
            }
            #[doc = "Bits 20:29 - OPAMP3, 10-bit offset trim value for normal mode"]
            #[inline(always)]
            pub fn ao3_opt_offset_trim(&mut self) -> AO3_OPT_OFFSET_TRIM_W {
                AO3_OPT_OFFSET_TRIM_W { w: self }
            }
            #[doc = "Bits 10:19 - OPAMP2, 10-bit offset trim value for normal mode"]
            #[inline(always)]
            pub fn ao2_opt_offset_trim(&mut self) -> AO2_OPT_OFFSET_TRIM_W {
                AO2_OPT_OFFSET_TRIM_W { w: self }
            }
            #[doc = "Bits 0:9 - OPAMP1, 10-bit offset trim value for normal mode"]
            #[inline(always)]
            pub fn ao1_opt_offset_trim(&mut self) -> AO1_OPT_OFFSET_TRIM_W {
                AO1_OPT_OFFSET_TRIM_W { w: self }
            }
        }
    }
    #[doc = "OPAMP offset trimming register for low power mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lpotr](lpotr) module"]
    pub type LPOTR = crate::Reg<u32, _LPOTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LPOTR;
    #[doc = "`read()` method returns [lpotr::R](lpotr::R) reader structure"]
    impl crate::Readable for LPOTR {}
    #[doc = "`write(|w| ..)` method takes [lpotr::W](lpotr::W) writer structure"]
    impl crate::Writable for LPOTR {}
    #[doc = "OPAMP offset trimming register for low power mode"]
    pub mod lpotr {
        #[doc = "Reader of register LPOTR"]
        pub type R = crate::R<u32, super::LPOTR>;
        #[doc = "Writer for register LPOTR"]
        pub type W = crate::W<u32, super::LPOTR>;
        #[doc = "Register LPOTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::LPOTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AO3_OPT_OFFSET_TRIM_LP`"]
        pub type AO3_OPT_OFFSET_TRIM_LP_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `AO3_OPT_OFFSET_TRIM_LP`"]
        pub struct AO3_OPT_OFFSET_TRIM_LP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AO3_OPT_OFFSET_TRIM_LP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03ff << 20)) | (((value as u32) & 0x03ff) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `AO2_OPT_OFFSET_TRIM_LP`"]
        pub type AO2_OPT_OFFSET_TRIM_LP_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `AO2_OPT_OFFSET_TRIM_LP`"]
        pub struct AO2_OPT_OFFSET_TRIM_LP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AO2_OPT_OFFSET_TRIM_LP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03ff << 10)) | (((value as u32) & 0x03ff) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `AO1_OPT_OFFSET_TRIM_LP`"]
        pub type AO1_OPT_OFFSET_TRIM_LP_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `AO1_OPT_OFFSET_TRIM_LP`"]
        pub struct AO1_OPT_OFFSET_TRIM_LP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AO1_OPT_OFFSET_TRIM_LP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03ff) | ((value as u32) & 0x03ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:29 - OPAMP3, 10-bit offset trim value for low power mode"]
            #[inline(always)]
            pub fn ao3_opt_offset_trim_lp(&self) -> AO3_OPT_OFFSET_TRIM_LP_R {
                AO3_OPT_OFFSET_TRIM_LP_R::new(((self.bits >> 20) & 0x03ff) as u16)
            }
            #[doc = "Bits 10:19 - OPAMP2, 10-bit offset trim value for low power mode"]
            #[inline(always)]
            pub fn ao2_opt_offset_trim_lp(&self) -> AO2_OPT_OFFSET_TRIM_LP_R {
                AO2_OPT_OFFSET_TRIM_LP_R::new(((self.bits >> 10) & 0x03ff) as u16)
            }
            #[doc = "Bits 0:9 - OPAMP1, 10-bit offset trim value for low power mode"]
            #[inline(always)]
            pub fn ao1_opt_offset_trim_lp(&self) -> AO1_OPT_OFFSET_TRIM_LP_R {
                AO1_OPT_OFFSET_TRIM_LP_R::new((self.bits & 0x03ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 20:29 - OPAMP3, 10-bit offset trim value for low power mode"]
            #[inline(always)]
            pub fn ao3_opt_offset_trim_lp(&mut self) -> AO3_OPT_OFFSET_TRIM_LP_W {
                AO3_OPT_OFFSET_TRIM_LP_W { w: self }
            }
            #[doc = "Bits 10:19 - OPAMP2, 10-bit offset trim value for low power mode"]
            #[inline(always)]
            pub fn ao2_opt_offset_trim_lp(&mut self) -> AO2_OPT_OFFSET_TRIM_LP_W {
                AO2_OPT_OFFSET_TRIM_LP_W { w: self }
            }
            #[doc = "Bits 0:9 - OPAMP1, 10-bit offset trim value for low power mode"]
            #[inline(always)]
            pub fn ao1_opt_offset_trim_lp(&mut self) -> AO1_OPT_OFFSET_TRIM_LP_W {
                AO1_OPT_OFFSET_TRIM_LP_W { w: self }
            }
        }
    }
}
#[doc = "Power control"]
pub struct PWR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWR {}
impl PWR {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwr::RegisterBlock {
        0x4000_7000 as *const _
    }
}
impl Deref for PWR {
    type Target = pwr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*PWR::ptr() }
    }
}
#[doc = "Power control"]
pub mod pwr {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - power control register"]
        pub cr: CR,
        #[doc = "0x04 - power control/status register"]
        pub csr: CSR,
    }
    #[doc = "power control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "power control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0x1000"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x1000
            }
        }
        #[doc = "Reader of field `LPRUN`"]
        pub type LPRUN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPRUN`"]
        pub struct LPRUN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPRUN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `VOS`"]
        pub type VOS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VOS`"]
        pub struct VOS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VOS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 11)) | (((value as u32) & 0x03) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `FWU`"]
        pub type FWU_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FWU`"]
        pub struct FWU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FWU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `ULP`"]
        pub type ULP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ULP`"]
        pub struct ULP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ULP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `DBP`"]
        pub type DBP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBP`"]
        pub struct DBP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PLS`"]
        pub type PLS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PLS`"]
        pub struct PLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 5)) | (((value as u32) & 0x07) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `PVDE`"]
        pub type PVDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PVDE`"]
        pub struct PVDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PVDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CSBF`"]
        pub type CSBF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CSBF`"]
        pub struct CSBF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSBF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CWUF`"]
        pub type CWUF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CWUF`"]
        pub struct CWUF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CWUF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Power down deepsleep\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDDS_A {
            #[doc = "0: Enter Stop mode when the CPU enters deepsleep"]
            STOP_MODE = 0,
            #[doc = "1: Enter Standby mode when the CPU enters deepsleep"]
            STANDBY_MODE = 1,
        }
        impl From<PDDS_A> for bool {
            #[inline(always)]
            fn from(variant: PDDS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDDS`"]
        pub type PDDS_R = crate::R<bool, PDDS_A>;
        impl PDDS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDDS_A {
                match self.bits {
                    false => PDDS_A::STOP_MODE,
                    true => PDDS_A::STANDBY_MODE,
                }
            }
            #[doc = "Checks if the value of the field is `STOP_MODE`"]
            #[inline(always)]
            pub fn is_stop_mode(&self) -> bool {
                *self == PDDS_A::STOP_MODE
            }
            #[doc = "Checks if the value of the field is `STANDBY_MODE`"]
            #[inline(always)]
            pub fn is_standby_mode(&self) -> bool {
                *self == PDDS_A::STANDBY_MODE
            }
        }
        #[doc = "Write proxy for field `PDDS`"]
        pub struct PDDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDDS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDDS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Enter Stop mode when the CPU enters deepsleep"]
            #[inline(always)]
            pub fn stop_mode(self) -> &'a mut W {
                self.variant(PDDS_A::STOP_MODE)
            }
            #[doc = "Enter Standby mode when the CPU enters deepsleep"]
            #[inline(always)]
            pub fn standby_mode(self) -> &'a mut W {
                self.variant(PDDS_A::STANDBY_MODE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `LPSDSR`"]
        pub type LPSDSR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPSDSR`"]
        pub struct LPSDSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPSDSR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Low power run mode"]
            #[inline(always)]
            pub fn lprun(&self) -> LPRUN_R {
                LPRUN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 11:12 - Voltage scaling range selection"]
            #[inline(always)]
            pub fn vos(&self) -> VOS_R {
                VOS_R::new(((self.bits >> 11) & 0x03) as u8)
            }
            #[doc = "Bit 10 - Fast wakeup"]
            #[inline(always)]
            pub fn fwu(&self) -> FWU_R {
                FWU_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Ultralow power mode"]
            #[inline(always)]
            pub fn ulp(&self) -> ULP_R {
                ULP_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Disable backup domain write protection"]
            #[inline(always)]
            pub fn dbp(&self) -> DBP_R {
                DBP_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 5:7 - PVD level selection"]
            #[inline(always)]
            pub fn pls(&self) -> PLS_R {
                PLS_R::new(((self.bits >> 5) & 0x07) as u8)
            }
            #[doc = "Bit 4 - Power voltage detector enable"]
            #[inline(always)]
            pub fn pvde(&self) -> PVDE_R {
                PVDE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Clear standby flag"]
            #[inline(always)]
            pub fn csbf(&self) -> CSBF_R {
                CSBF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Clear wakeup flag"]
            #[inline(always)]
            pub fn cwuf(&self) -> CWUF_R {
                CWUF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Power down deepsleep"]
            #[inline(always)]
            pub fn pdds(&self) -> PDDS_R {
                PDDS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Low-power deep sleep"]
            #[inline(always)]
            pub fn lpsdsr(&self) -> LPSDSR_R {
                LPSDSR_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Low power run mode"]
            #[inline(always)]
            pub fn lprun(&mut self) -> LPRUN_W {
                LPRUN_W { w: self }
            }
            #[doc = "Bits 11:12 - Voltage scaling range selection"]
            #[inline(always)]
            pub fn vos(&mut self) -> VOS_W {
                VOS_W { w: self }
            }
            #[doc = "Bit 10 - Fast wakeup"]
            #[inline(always)]
            pub fn fwu(&mut self) -> FWU_W {
                FWU_W { w: self }
            }
            #[doc = "Bit 9 - Ultralow power mode"]
            #[inline(always)]
            pub fn ulp(&mut self) -> ULP_W {
                ULP_W { w: self }
            }
            #[doc = "Bit 8 - Disable backup domain write protection"]
            #[inline(always)]
            pub fn dbp(&mut self) -> DBP_W {
                DBP_W { w: self }
            }
            #[doc = "Bits 5:7 - PVD level selection"]
            #[inline(always)]
            pub fn pls(&mut self) -> PLS_W {
                PLS_W { w: self }
            }
            #[doc = "Bit 4 - Power voltage detector enable"]
            #[inline(always)]
            pub fn pvde(&mut self) -> PVDE_W {
                PVDE_W { w: self }
            }
            #[doc = "Bit 3 - Clear standby flag"]
            #[inline(always)]
            pub fn csbf(&mut self) -> CSBF_W {
                CSBF_W { w: self }
            }
            #[doc = "Bit 2 - Clear wakeup flag"]
            #[inline(always)]
            pub fn cwuf(&mut self) -> CWUF_W {
                CWUF_W { w: self }
            }
            #[doc = "Bit 1 - Power down deepsleep"]
            #[inline(always)]
            pub fn pdds(&mut self) -> PDDS_W {
                PDDS_W { w: self }
            }
            #[doc = "Bit 0 - Low-power deep sleep"]
            #[inline(always)]
            pub fn lpsdsr(&mut self) -> LPSDSR_W {
                LPSDSR_W { w: self }
            }
        }
    }
    #[doc = "power control/status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr](csr) module"]
    pub type CSR = crate::Reg<u32, _CSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CSR;
    #[doc = "`read()` method returns [csr::R](csr::R) reader structure"]
    impl crate::Readable for CSR {}
    #[doc = "`write(|w| ..)` method takes [csr::W](csr::W) writer structure"]
    impl crate::Writable for CSR {}
    #[doc = "power control/status register"]
    pub mod csr {
        #[doc = "Reader of register CSR"]
        pub type R = crate::R<u32, super::CSR>;
        #[doc = "Writer for register CSR"]
        pub type W = crate::W<u32, super::CSR>;
        #[doc = "Register CSR `reset()`'s with value 0x08"]
        impl crate::ResetValue for super::CSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x08
            }
        }
        #[doc = "Reader of field `EWUP3`"]
        pub type EWUP3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWUP3`"]
        pub struct EWUP3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `EWUP2`"]
        pub type EWUP2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWUP2`"]
        pub struct EWUP2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `EWUP1`"]
        pub type EWUP1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWUP1`"]
        pub struct EWUP1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `REGLPF`"]
        pub type REGLPF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `VOSF`"]
        pub type VOSF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `VREFINTRDYF`"]
        pub type VREFINTRDYF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PVDO`"]
        pub type PVDO_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SBF`"]
        pub type SBF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WUF`"]
        pub type WUF_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 10 - Enable WKUP pin 3"]
            #[inline(always)]
            pub fn ewup3(&self) -> EWUP3_R {
                EWUP3_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Enable WKUP pin 2"]
            #[inline(always)]
            pub fn ewup2(&self) -> EWUP2_R {
                EWUP2_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Enable WKUP pin 1"]
            #[inline(always)]
            pub fn ewup1(&self) -> EWUP1_R {
                EWUP1_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Regulator LP flag"]
            #[inline(always)]
            pub fn reglpf(&self) -> REGLPF_R {
                REGLPF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Voltage Scaling select flag"]
            #[inline(always)]
            pub fn vosf(&self) -> VOSF_R {
                VOSF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Internal voltage reference (VREFINT) ready flag"]
            #[inline(always)]
            pub fn vrefintrdyf(&self) -> VREFINTRDYF_R {
                VREFINTRDYF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - PVD output"]
            #[inline(always)]
            pub fn pvdo(&self) -> PVDO_R {
                PVDO_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Standby flag"]
            #[inline(always)]
            pub fn sbf(&self) -> SBF_R {
                SBF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Wakeup flag"]
            #[inline(always)]
            pub fn wuf(&self) -> WUF_R {
                WUF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 10 - Enable WKUP pin 3"]
            #[inline(always)]
            pub fn ewup3(&mut self) -> EWUP3_W {
                EWUP3_W { w: self }
            }
            #[doc = "Bit 9 - Enable WKUP pin 2"]
            #[inline(always)]
            pub fn ewup2(&mut self) -> EWUP2_W {
                EWUP2_W { w: self }
            }
            #[doc = "Bit 8 - Enable WKUP pin 1"]
            #[inline(always)]
            pub fn ewup1(&mut self) -> EWUP1_W {
                EWUP1_W { w: self }
            }
        }
    }
}
#[doc = "Reset and clock control"]
pub struct RCC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RCC {}
impl RCC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rcc::RegisterBlock {
        0x4002_3800 as *const _
    }
}
impl Deref for RCC {
    type Target = rcc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*RCC::ptr() }
    }
}
#[doc = "Reset and clock control"]
pub mod rcc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Clock control register"]
        pub cr: CR,
        #[doc = "0x04 - Internal clock sources calibration register"]
        pub icscr: ICSCR,
        #[doc = "0x08 - Clock configuration register"]
        pub cfgr: CFGR,
        #[doc = "0x0c - Clock interrupt register"]
        pub cir: CIR,
        #[doc = "0x10 - AHB peripheral reset register"]
        pub ahbrstr: AHBRSTR,
        #[doc = "0x14 - APB2 peripheral reset register"]
        pub apb2rstr: APB2RSTR,
        #[doc = "0x18 - APB1 peripheral reset register"]
        pub apb1rstr: APB1RSTR,
        #[doc = "0x1c - AHB peripheral clock enable register"]
        pub ahbenr: AHBENR,
        #[doc = "0x20 - APB2 peripheral clock enable register"]
        pub apb2enr: APB2ENR,
        #[doc = "0x24 - APB1 peripheral clock enable register"]
        pub apb1enr: APB1ENR,
        #[doc = "0x28 - AHB peripheral clock enable in low power mode register"]
        pub ahblpenr: AHBLPENR,
        #[doc = "0x2c - APB2 peripheral clock enable in low power mode register"]
        pub apb2lpenr: APB2LPENR,
        #[doc = "0x30 - APB1 peripheral clock enable in low power mode register"]
        pub apb1lpenr: APB1LPENR,
        #[doc = "0x34 - Control/status register"]
        pub csr: CSR,
    }
    #[doc = "Clock control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Clock control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0x0300"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0300
            }
        }
        #[doc = "Reader of field `RTCPRE1`"]
        pub type RTCPRE1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCPRE1`"]
        pub struct RTCPRE1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCPRE1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `RTCPRE0`"]
        pub type RTCPRE0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCPRE0`"]
        pub struct RTCPRE0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCPRE0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `CSSON`"]
        pub type CSSON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CSSON`"]
        pub struct CSSON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSSON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `PLLRDY`"]
        pub type PLLRDY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PLLON`"]
        pub type PLLON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PLLON`"]
        pub struct PLLON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `HSEBYP`"]
        pub type HSEBYP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HSEBYP`"]
        pub struct HSEBYP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSEBYP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `HSERDY`"]
        pub type HSERDY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HSEON`"]
        pub type HSEON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HSEON`"]
        pub struct HSEON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSEON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MSIRDY`"]
        pub type MSIRDY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `MSION`"]
        pub type MSION_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSION`"]
        pub struct MSION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSION_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `HSIRDY`"]
        pub type HSIRDY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HSION`"]
        pub type HSION_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HSION`"]
        pub struct HSION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSION_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - TC/LCD prescaler"]
            #[inline(always)]
            pub fn rtcpre1(&self) -> RTCPRE1_R {
                RTCPRE1_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - RTCPRE0"]
            #[inline(always)]
            pub fn rtcpre0(&self) -> RTCPRE0_R {
                RTCPRE0_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Clock security system enable"]
            #[inline(always)]
            pub fn csson(&self) -> CSSON_R {
                CSSON_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 25 - PLL clock ready flag"]
            #[inline(always)]
            pub fn pllrdy(&self) -> PLLRDY_R {
                PLLRDY_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - PLL enable"]
            #[inline(always)]
            pub fn pllon(&self) -> PLLON_R {
                PLLON_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 18 - HSE clock bypass"]
            #[inline(always)]
            pub fn hsebyp(&self) -> HSEBYP_R {
                HSEBYP_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - HSE clock ready flag"]
            #[inline(always)]
            pub fn hserdy(&self) -> HSERDY_R {
                HSERDY_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - HSE clock enable"]
            #[inline(always)]
            pub fn hseon(&self) -> HSEON_R {
                HSEON_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 9 - MSI clock ready flag"]
            #[inline(always)]
            pub fn msirdy(&self) -> MSIRDY_R {
                MSIRDY_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - MSI clock enable"]
            #[inline(always)]
            pub fn msion(&self) -> MSION_R {
                MSION_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Internal high-speed clock ready flag"]
            #[inline(always)]
            pub fn hsirdy(&self) -> HSIRDY_R {
                HSIRDY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Internal high-speed clock enable"]
            #[inline(always)]
            pub fn hsion(&self) -> HSION_R {
                HSION_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 30 - TC/LCD prescaler"]
            #[inline(always)]
            pub fn rtcpre1(&mut self) -> RTCPRE1_W {
                RTCPRE1_W { w: self }
            }
            #[doc = "Bit 29 - RTCPRE0"]
            #[inline(always)]
            pub fn rtcpre0(&mut self) -> RTCPRE0_W {
                RTCPRE0_W { w: self }
            }
            #[doc = "Bit 28 - Clock security system enable"]
            #[inline(always)]
            pub fn csson(&mut self) -> CSSON_W {
                CSSON_W { w: self }
            }
            #[doc = "Bit 24 - PLL enable"]
            #[inline(always)]
            pub fn pllon(&mut self) -> PLLON_W {
                PLLON_W { w: self }
            }
            #[doc = "Bit 18 - HSE clock bypass"]
            #[inline(always)]
            pub fn hsebyp(&mut self) -> HSEBYP_W {
                HSEBYP_W { w: self }
            }
            #[doc = "Bit 16 - HSE clock enable"]
            #[inline(always)]
            pub fn hseon(&mut self) -> HSEON_W {
                HSEON_W { w: self }
            }
            #[doc = "Bit 8 - MSI clock enable"]
            #[inline(always)]
            pub fn msion(&mut self) -> MSION_W {
                MSION_W { w: self }
            }
            #[doc = "Bit 0 - Internal high-speed clock enable"]
            #[inline(always)]
            pub fn hsion(&mut self) -> HSION_W {
                HSION_W { w: self }
            }
        }
    }
    #[doc = "Internal clock sources calibration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icscr](icscr) module"]
    pub type ICSCR = crate::Reg<u32, _ICSCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICSCR;
    #[doc = "`read()` method returns [icscr::R](icscr::R) reader structure"]
    impl crate::Readable for ICSCR {}
    #[doc = "`write(|w| ..)` method takes [icscr::W](icscr::W) writer structure"]
    impl crate::Writable for ICSCR {}
    #[doc = "Internal clock sources calibration register"]
    pub mod icscr {
        #[doc = "Reader of register ICSCR"]
        pub type R = crate::R<u32, super::ICSCR>;
        #[doc = "Writer for register ICSCR"]
        pub type W = crate::W<u32, super::ICSCR>;
        #[doc = "Register ICSCR `reset()`'s with value 0xb000"]
        impl crate::ResetValue for super::ICSCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xb000
            }
        }
        #[doc = "Reader of field `MSITRIM`"]
        pub type MSITRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MSITRIM`"]
        pub struct MSITRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSITRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | (((value as u32) & 0xff) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `MSICAL`"]
        pub type MSICAL_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MSIRANGE`"]
        pub type MSIRANGE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MSIRANGE`"]
        pub struct MSIRANGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIRANGE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `HSITRIM`"]
        pub type HSITRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HSITRIM`"]
        pub struct HSITRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSITRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `HSICAL`"]
        pub type HSICAL_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - MSI clock trimming"]
            #[inline(always)]
            pub fn msitrim(&self) -> MSITRIM_R {
                MSITRIM_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - MSI clock calibration"]
            #[inline(always)]
            pub fn msical(&self) -> MSICAL_R {
                MSICAL_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 13:15 - MSI clock ranges"]
            #[inline(always)]
            pub fn msirange(&self) -> MSIRANGE_R {
                MSIRANGE_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bits 8:12 - High speed internal clock trimming"]
            #[inline(always)]
            pub fn hsitrim(&self) -> HSITRIM_R {
                HSITRIM_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 0:7 - nternal high speed clock calibration"]
            #[inline(always)]
            pub fn hsical(&self) -> HSICAL_R {
                HSICAL_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 24:31 - MSI clock trimming"]
            #[inline(always)]
            pub fn msitrim(&mut self) -> MSITRIM_W {
                MSITRIM_W { w: self }
            }
            #[doc = "Bits 13:15 - MSI clock ranges"]
            #[inline(always)]
            pub fn msirange(&mut self) -> MSIRANGE_W {
                MSIRANGE_W { w: self }
            }
            #[doc = "Bits 8:12 - High speed internal clock trimming"]
            #[inline(always)]
            pub fn hsitrim(&mut self) -> HSITRIM_W {
                HSITRIM_W { w: self }
            }
        }
    }
    #[doc = "Clock configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr](cfgr) module"]
    pub type CFGR = crate::Reg<u32, _CFGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR;
    #[doc = "`read()` method returns [cfgr::R](cfgr::R) reader structure"]
    impl crate::Readable for CFGR {}
    #[doc = "`write(|w| ..)` method takes [cfgr::W](cfgr::W) writer structure"]
    impl crate::Writable for CFGR {}
    #[doc = "Clock configuration register"]
    pub mod cfgr {
        #[doc = "Reader of register CFGR"]
        pub type R = crate::R<u32, super::CFGR>;
        #[doc = "Writer for register CFGR"]
        pub type W = crate::W<u32, super::CFGR>;
        #[doc = "Register CFGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MCOPRE`"]
        pub type MCOPRE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MCOPRE`"]
        pub struct MCOPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCOPRE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 28)) | (((value as u32) & 0x07) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `MCOSEL`"]
        pub type MCOSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MCOSEL`"]
        pub struct MCOSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCOSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `PLLDIV`"]
        pub type PLLDIV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PLLDIV`"]
        pub struct PLLDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `PLLMUL`"]
        pub type PLLMUL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PLLMUL`"]
        pub struct PLLMUL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLMUL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 18)) | (((value as u32) & 0x0f) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `PLLSRC`"]
        pub type PLLSRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PLLSRC`"]
        pub struct PLLSRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLSRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PPRE2`"]
        pub type PPRE2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PPRE2`"]
        pub struct PPRE2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PPRE2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 11)) | (((value as u32) & 0x07) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `PPRE1`"]
        pub type PPRE1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PPRE1`"]
        pub struct PPRE1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PPRE1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 8)) | (((value as u32) & 0x07) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `HPRE`"]
        pub type HPRE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HPRE`"]
        pub struct HPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HPRE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SWS`"]
        pub type SWS_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SW`"]
        pub type SW_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SW`"]
        pub struct SW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:30 - Microcontroller clock output prescaler"]
            #[inline(always)]
            pub fn mcopre(&self) -> MCOPRE_R {
                MCOPRE_R::new(((self.bits >> 28) & 0x07) as u8)
            }
            #[doc = "Bits 24:26 - Microcontroller clock output selection"]
            #[inline(always)]
            pub fn mcosel(&self) -> MCOSEL_R {
                MCOSEL_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bits 22:23 - PLL output division"]
            #[inline(always)]
            pub fn plldiv(&self) -> PLLDIV_R {
                PLLDIV_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 18:21 - PLL multiplication factor"]
            #[inline(always)]
            pub fn pllmul(&self) -> PLLMUL_R {
                PLLMUL_R::new(((self.bits >> 18) & 0x0f) as u8)
            }
            #[doc = "Bit 16 - PLL entry clock source"]
            #[inline(always)]
            pub fn pllsrc(&self) -> PLLSRC_R {
                PLLSRC_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 11:13 - APB high-speed prescaler (APB2)"]
            #[inline(always)]
            pub fn ppre2(&self) -> PPRE2_R {
                PPRE2_R::new(((self.bits >> 11) & 0x07) as u8)
            }
            #[doc = "Bits 8:10 - APB low-speed prescaler (APB1)"]
            #[inline(always)]
            pub fn ppre1(&self) -> PPRE1_R {
                PPRE1_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bits 4:7 - AHB prescaler"]
            #[inline(always)]
            pub fn hpre(&self) -> HPRE_R {
                HPRE_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - System clock switch status"]
            #[inline(always)]
            pub fn sws(&self) -> SWS_R {
                SWS_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - System clock switch"]
            #[inline(always)]
            pub fn sw(&self) -> SW_R {
                SW_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:30 - Microcontroller clock output prescaler"]
            #[inline(always)]
            pub fn mcopre(&mut self) -> MCOPRE_W {
                MCOPRE_W { w: self }
            }
            #[doc = "Bits 24:26 - Microcontroller clock output selection"]
            #[inline(always)]
            pub fn mcosel(&mut self) -> MCOSEL_W {
                MCOSEL_W { w: self }
            }
            #[doc = "Bits 22:23 - PLL output division"]
            #[inline(always)]
            pub fn plldiv(&mut self) -> PLLDIV_W {
                PLLDIV_W { w: self }
            }
            #[doc = "Bits 18:21 - PLL multiplication factor"]
            #[inline(always)]
            pub fn pllmul(&mut self) -> PLLMUL_W {
                PLLMUL_W { w: self }
            }
            #[doc = "Bit 16 - PLL entry clock source"]
            #[inline(always)]
            pub fn pllsrc(&mut self) -> PLLSRC_W {
                PLLSRC_W { w: self }
            }
            #[doc = "Bits 11:13 - APB high-speed prescaler (APB2)"]
            #[inline(always)]
            pub fn ppre2(&mut self) -> PPRE2_W {
                PPRE2_W { w: self }
            }
            #[doc = "Bits 8:10 - APB low-speed prescaler (APB1)"]
            #[inline(always)]
            pub fn ppre1(&mut self) -> PPRE1_W {
                PPRE1_W { w: self }
            }
            #[doc = "Bits 4:7 - AHB prescaler"]
            #[inline(always)]
            pub fn hpre(&mut self) -> HPRE_W {
                HPRE_W { w: self }
            }
            #[doc = "Bits 0:1 - System clock switch"]
            #[inline(always)]
            pub fn sw(&mut self) -> SW_W {
                SW_W { w: self }
            }
        }
    }
    #[doc = "Clock interrupt register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cir](cir) module"]
    pub type CIR = crate::Reg<u32, _CIR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CIR;
    #[doc = "`read()` method returns [cir::R](cir::R) reader structure"]
    impl crate::Readable for CIR {}
    #[doc = "`write(|w| ..)` method takes [cir::W](cir::W) writer structure"]
    impl crate::Writable for CIR {}
    #[doc = "Clock interrupt register"]
    pub mod cir {
        #[doc = "Reader of register CIR"]
        pub type R = crate::R<u32, super::CIR>;
        #[doc = "Writer for register CIR"]
        pub type W = crate::W<u32, super::CIR>;
        #[doc = "Register CIR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CIR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CSSC`"]
        pub struct CSSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSSC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Write proxy for field `MSIRDYC`"]
        pub struct MSIRDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIRDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Write proxy for field `PLLRDYC`"]
        pub struct PLLRDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLRDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Write proxy for field `HSERDYC`"]
        pub struct HSERDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSERDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Write proxy for field `HSIRDYC`"]
        pub struct HSIRDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSIRDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Write proxy for field `LSERDYC`"]
        pub struct LSERDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSERDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Write proxy for field `LSIRDYC`"]
        pub struct LSIRDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSIRDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MSIRDYIE`"]
        pub type MSIRDYIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSIRDYIE`"]
        pub struct MSIRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSIRDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `PLLRDYIE`"]
        pub type PLLRDYIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PLLRDYIE`"]
        pub struct PLLRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLRDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `HSERDYIE`"]
        pub type HSERDYIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HSERDYIE`"]
        pub struct HSERDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSERDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `HSIRDYIE`"]
        pub type HSIRDYIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HSIRDYIE`"]
        pub struct HSIRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSIRDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `LSERDYIE`"]
        pub type LSERDYIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSERDYIE`"]
        pub struct LSERDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSERDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `LSIRDYIE`"]
        pub type LSIRDYIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSIRDYIE`"]
        pub struct LSIRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSIRDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CSSF`"]
        pub type CSSF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `MSIRDYF`"]
        pub type MSIRDYF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PLLRDYF`"]
        pub type PLLRDYF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HSERDYF`"]
        pub type HSERDYF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HSIRDYF`"]
        pub type HSIRDYF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `LSERDYF`"]
        pub type LSERDYF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `LSIRDYF`"]
        pub type LSIRDYF_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 13 - MSI ready interrupt enable"]
            #[inline(always)]
            pub fn msirdyie(&self) -> MSIRDYIE_R {
                MSIRDYIE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - PLL ready interrupt enable"]
            #[inline(always)]
            pub fn pllrdyie(&self) -> PLLRDYIE_R {
                PLLRDYIE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - HSE ready interrupt enable"]
            #[inline(always)]
            pub fn hserdyie(&self) -> HSERDYIE_R {
                HSERDYIE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - HSI ready interrupt enable"]
            #[inline(always)]
            pub fn hsirdyie(&self) -> HSIRDYIE_R {
                HSIRDYIE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - LSE ready interrupt enable"]
            #[inline(always)]
            pub fn lserdyie(&self) -> LSERDYIE_R {
                LSERDYIE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - LSI ready interrupt enable"]
            #[inline(always)]
            pub fn lsirdyie(&self) -> LSIRDYIE_R {
                LSIRDYIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Clock security system interrupt flag"]
            #[inline(always)]
            pub fn cssf(&self) -> CSSF_R {
                CSSF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 5 - MSI ready interrupt flag"]
            #[inline(always)]
            pub fn msirdyf(&self) -> MSIRDYF_R {
                MSIRDYF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - PLL ready interrupt flag"]
            #[inline(always)]
            pub fn pllrdyf(&self) -> PLLRDYF_R {
                PLLRDYF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - HSE ready interrupt flag"]
            #[inline(always)]
            pub fn hserdyf(&self) -> HSERDYF_R {
                HSERDYF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - HSI ready interrupt flag"]
            #[inline(always)]
            pub fn hsirdyf(&self) -> HSIRDYF_R {
                HSIRDYF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - LSE ready interrupt flag"]
            #[inline(always)]
            pub fn lserdyf(&self) -> LSERDYF_R {
                LSERDYF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - LSI ready interrupt flag"]
            #[inline(always)]
            pub fn lsirdyf(&self) -> LSIRDYF_R {
                LSIRDYF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 23 - Clock security system interrupt clear"]
            #[inline(always)]
            pub fn cssc(&mut self) -> CSSC_W {
                CSSC_W { w: self }
            }
            #[doc = "Bit 21 - MSI ready interrupt clear"]
            #[inline(always)]
            pub fn msirdyc(&mut self) -> MSIRDYC_W {
                MSIRDYC_W { w: self }
            }
            #[doc = "Bit 20 - PLL ready interrupt clear"]
            #[inline(always)]
            pub fn pllrdyc(&mut self) -> PLLRDYC_W {
                PLLRDYC_W { w: self }
            }
            #[doc = "Bit 19 - HSE ready interrupt clear"]
            #[inline(always)]
            pub fn hserdyc(&mut self) -> HSERDYC_W {
                HSERDYC_W { w: self }
            }
            #[doc = "Bit 18 - HSI ready interrupt clear"]
            #[inline(always)]
            pub fn hsirdyc(&mut self) -> HSIRDYC_W {
                HSIRDYC_W { w: self }
            }
            #[doc = "Bit 17 - LSE ready interrupt clear"]
            #[inline(always)]
            pub fn lserdyc(&mut self) -> LSERDYC_W {
                LSERDYC_W { w: self }
            }
            #[doc = "Bit 16 - LSI ready interrupt clear"]
            #[inline(always)]
            pub fn lsirdyc(&mut self) -> LSIRDYC_W {
                LSIRDYC_W { w: self }
            }
            #[doc = "Bit 13 - MSI ready interrupt enable"]
            #[inline(always)]
            pub fn msirdyie(&mut self) -> MSIRDYIE_W {
                MSIRDYIE_W { w: self }
            }
            #[doc = "Bit 12 - PLL ready interrupt enable"]
            #[inline(always)]
            pub fn pllrdyie(&mut self) -> PLLRDYIE_W {
                PLLRDYIE_W { w: self }
            }
            #[doc = "Bit 11 - HSE ready interrupt enable"]
            #[inline(always)]
            pub fn hserdyie(&mut self) -> HSERDYIE_W {
                HSERDYIE_W { w: self }
            }
            #[doc = "Bit 10 - HSI ready interrupt enable"]
            #[inline(always)]
            pub fn hsirdyie(&mut self) -> HSIRDYIE_W {
                HSIRDYIE_W { w: self }
            }
            #[doc = "Bit 9 - LSE ready interrupt enable"]
            #[inline(always)]
            pub fn lserdyie(&mut self) -> LSERDYIE_W {
                LSERDYIE_W { w: self }
            }
            #[doc = "Bit 8 - LSI ready interrupt enable"]
            #[inline(always)]
            pub fn lsirdyie(&mut self) -> LSIRDYIE_W {
                LSIRDYIE_W { w: self }
            }
        }
    }
    #[doc = "AHB peripheral reset register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ahbrstr](ahbrstr) module"]
    pub type AHBRSTR = crate::Reg<u32, _AHBRSTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AHBRSTR;
    #[doc = "`read()` method returns [ahbrstr::R](ahbrstr::R) reader structure"]
    impl crate::Readable for AHBRSTR {}
    #[doc = "`write(|w| ..)` method takes [ahbrstr::W](ahbrstr::W) writer structure"]
    impl crate::Writable for AHBRSTR {}
    #[doc = "AHB peripheral reset register"]
    pub mod ahbrstr {
        #[doc = "Reader of register AHBRSTR"]
        pub type R = crate::R<u32, super::AHBRSTR>;
        #[doc = "Writer for register AHBRSTR"]
        pub type W = crate::W<u32, super::AHBRSTR>;
        #[doc = "Register AHBRSTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::AHBRSTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FSMCRST`"]
        pub type FSMCRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FSMCRST`"]
        pub struct FSMCRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSMCRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `DMA2RST`"]
        pub type DMA2RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMA2RST`"]
        pub struct DMA2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA2RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `DMA1RST`"]
        pub type DMA1RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMA1RST`"]
        pub struct DMA1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `FLITFRST`"]
        pub type FLITFRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FLITFRST`"]
        pub struct FLITFRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLITFRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `CRCRST`"]
        pub type CRCRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRCRST`"]
        pub struct CRCRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOGRST`"]
        pub type GPIOGRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOGRST`"]
        pub struct GPIOGRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOGRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOFRST`"]
        pub type GPIOFRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOFRST`"]
        pub struct GPIOFRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOFRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOHRST`"]
        pub type GPIOHRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOHRST`"]
        pub struct GPIOHRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOHRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOERST`"]
        pub type GPIOERST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOERST`"]
        pub struct GPIOERST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOERST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `GPIODRST`"]
        pub type GPIODRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIODRST`"]
        pub struct GPIODRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIODRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOCRST`"]
        pub type GPIOCRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOCRST`"]
        pub struct GPIOCRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOCRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOBRST`"]
        pub type GPIOBRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOBRST`"]
        pub struct GPIOBRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOBRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOARST`"]
        pub type GPIOARST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOARST`"]
        pub struct GPIOARST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOARST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - FSMC reset"]
            #[inline(always)]
            pub fn fsmcrst(&self) -> FSMCRST_R {
                FSMCRST_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 25 - DMA2 reset"]
            #[inline(always)]
            pub fn dma2rst(&self) -> DMA2RST_R {
                DMA2RST_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - DMA1 reset"]
            #[inline(always)]
            pub fn dma1rst(&self) -> DMA1RST_R {
                DMA1RST_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 15 - FLITF reset"]
            #[inline(always)]
            pub fn flitfrst(&self) -> FLITFRST_R {
                FLITFRST_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 12 - CRC reset"]
            #[inline(always)]
            pub fn crcrst(&self) -> CRCRST_R {
                CRCRST_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 7 - IO port G reset"]
            #[inline(always)]
            pub fn gpiogrst(&self) -> GPIOGRST_R {
                GPIOGRST_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - IO port F reset"]
            #[inline(always)]
            pub fn gpiofrst(&self) -> GPIOFRST_R {
                GPIOFRST_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - IO port H reset"]
            #[inline(always)]
            pub fn gpiohrst(&self) -> GPIOHRST_R {
                GPIOHRST_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - IO port E reset"]
            #[inline(always)]
            pub fn gpioerst(&self) -> GPIOERST_R {
                GPIOERST_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - IO port D reset"]
            #[inline(always)]
            pub fn gpiodrst(&self) -> GPIODRST_R {
                GPIODRST_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - IO port C reset"]
            #[inline(always)]
            pub fn gpiocrst(&self) -> GPIOCRST_R {
                GPIOCRST_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - IO port B reset"]
            #[inline(always)]
            pub fn gpiobrst(&self) -> GPIOBRST_R {
                GPIOBRST_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - IO port A reset"]
            #[inline(always)]
            pub fn gpioarst(&self) -> GPIOARST_R {
                GPIOARST_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 30 - FSMC reset"]
            #[inline(always)]
            pub fn fsmcrst(&mut self) -> FSMCRST_W {
                FSMCRST_W { w: self }
            }
            #[doc = "Bit 25 - DMA2 reset"]
            #[inline(always)]
            pub fn dma2rst(&mut self) -> DMA2RST_W {
                DMA2RST_W { w: self }
            }
            #[doc = "Bit 24 - DMA1 reset"]
            #[inline(always)]
            pub fn dma1rst(&mut self) -> DMA1RST_W {
                DMA1RST_W { w: self }
            }
            #[doc = "Bit 15 - FLITF reset"]
            #[inline(always)]
            pub fn flitfrst(&mut self) -> FLITFRST_W {
                FLITFRST_W { w: self }
            }
            #[doc = "Bit 12 - CRC reset"]
            #[inline(always)]
            pub fn crcrst(&mut self) -> CRCRST_W {
                CRCRST_W { w: self }
            }
            #[doc = "Bit 7 - IO port G reset"]
            #[inline(always)]
            pub fn gpiogrst(&mut self) -> GPIOGRST_W {
                GPIOGRST_W { w: self }
            }
            #[doc = "Bit 6 - IO port F reset"]
            #[inline(always)]
            pub fn gpiofrst(&mut self) -> GPIOFRST_W {
                GPIOFRST_W { w: self }
            }
            #[doc = "Bit 5 - IO port H reset"]
            #[inline(always)]
            pub fn gpiohrst(&mut self) -> GPIOHRST_W {
                GPIOHRST_W { w: self }
            }
            #[doc = "Bit 4 - IO port E reset"]
            #[inline(always)]
            pub fn gpioerst(&mut self) -> GPIOERST_W {
                GPIOERST_W { w: self }
            }
            #[doc = "Bit 3 - IO port D reset"]
            #[inline(always)]
            pub fn gpiodrst(&mut self) -> GPIODRST_W {
                GPIODRST_W { w: self }
            }
            #[doc = "Bit 2 - IO port C reset"]
            #[inline(always)]
            pub fn gpiocrst(&mut self) -> GPIOCRST_W {
                GPIOCRST_W { w: self }
            }
            #[doc = "Bit 1 - IO port B reset"]
            #[inline(always)]
            pub fn gpiobrst(&mut self) -> GPIOBRST_W {
                GPIOBRST_W { w: self }
            }
            #[doc = "Bit 0 - IO port A reset"]
            #[inline(always)]
            pub fn gpioarst(&mut self) -> GPIOARST_W {
                GPIOARST_W { w: self }
            }
        }
    }
    #[doc = "APB2 peripheral reset register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb2rstr](apb2rstr) module"]
    pub type APB2RSTR = crate::Reg<u32, _APB2RSTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB2RSTR;
    #[doc = "`read()` method returns [apb2rstr::R](apb2rstr::R) reader structure"]
    impl crate::Readable for APB2RSTR {}
    #[doc = "`write(|w| ..)` method takes [apb2rstr::W](apb2rstr::W) writer structure"]
    impl crate::Writable for APB2RSTR {}
    #[doc = "APB2 peripheral reset register"]
    pub mod apb2rstr {
        #[doc = "Reader of register APB2RSTR"]
        pub type R = crate::R<u32, super::APB2RSTR>;
        #[doc = "Writer for register APB2RSTR"]
        pub type W = crate::W<u32, super::APB2RSTR>;
        #[doc = "Register APB2RSTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB2RSTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `USART1RST`"]
        pub type USART1RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART1RST`"]
        pub struct USART1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `SPI1RST`"]
        pub type SPI1RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPI1RST`"]
        pub struct SPI1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `SDIORST`"]
        pub type SDIORST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SDIORST`"]
        pub struct SDIORST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDIORST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `ADC1RST`"]
        pub type ADC1RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC1RST`"]
        pub struct ADC1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TM11RST`"]
        pub type TM11RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TM11RST`"]
        pub struct TM11RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TM11RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TM10RST`"]
        pub type TM10RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TM10RST`"]
        pub struct TM10RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TM10RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TIM9RST`"]
        pub type TIM9RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM9RST`"]
        pub struct TIM9RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM9RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SYSCFGRST`"]
        pub type SYSCFGRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SYSCFGRST`"]
        pub struct SYSCFGRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYSCFGRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - USART1RST"]
            #[inline(always)]
            pub fn usart1rst(&self) -> USART1RST_R {
                USART1RST_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 12 - SPI1RST"]
            #[inline(always)]
            pub fn spi1rst(&self) -> SPI1RST_R {
                SPI1RST_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - SDIORST"]
            #[inline(always)]
            pub fn sdiorst(&self) -> SDIORST_R {
                SDIORST_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 9 - ADC1RST"]
            #[inline(always)]
            pub fn adc1rst(&self) -> ADC1RST_R {
                ADC1RST_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TM11RST"]
            #[inline(always)]
            pub fn tm11rst(&self) -> TM11RST_R {
                TM11RST_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TM10RST"]
            #[inline(always)]
            pub fn tm10rst(&self) -> TM10RST_R {
                TM10RST_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - TIM9RST"]
            #[inline(always)]
            pub fn tim9rst(&self) -> TIM9RST_R {
                TIM9RST_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 0 - SYSCFGRST"]
            #[inline(always)]
            pub fn syscfgrst(&self) -> SYSCFGRST_R {
                SYSCFGRST_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - USART1RST"]
            #[inline(always)]
            pub fn usart1rst(&mut self) -> USART1RST_W {
                USART1RST_W { w: self }
            }
            #[doc = "Bit 12 - SPI1RST"]
            #[inline(always)]
            pub fn spi1rst(&mut self) -> SPI1RST_W {
                SPI1RST_W { w: self }
            }
            #[doc = "Bit 11 - SDIORST"]
            #[inline(always)]
            pub fn sdiorst(&mut self) -> SDIORST_W {
                SDIORST_W { w: self }
            }
            #[doc = "Bit 9 - ADC1RST"]
            #[inline(always)]
            pub fn adc1rst(&mut self) -> ADC1RST_W {
                ADC1RST_W { w: self }
            }
            #[doc = "Bit 4 - TM11RST"]
            #[inline(always)]
            pub fn tm11rst(&mut self) -> TM11RST_W {
                TM11RST_W { w: self }
            }
            #[doc = "Bit 3 - TM10RST"]
            #[inline(always)]
            pub fn tm10rst(&mut self) -> TM10RST_W {
                TM10RST_W { w: self }
            }
            #[doc = "Bit 2 - TIM9RST"]
            #[inline(always)]
            pub fn tim9rst(&mut self) -> TIM9RST_W {
                TIM9RST_W { w: self }
            }
            #[doc = "Bit 0 - SYSCFGRST"]
            #[inline(always)]
            pub fn syscfgrst(&mut self) -> SYSCFGRST_W {
                SYSCFGRST_W { w: self }
            }
        }
    }
    #[doc = "APB1 peripheral reset register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb1rstr](apb1rstr) module"]
    pub type APB1RSTR = crate::Reg<u32, _APB1RSTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB1RSTR;
    #[doc = "`read()` method returns [apb1rstr::R](apb1rstr::R) reader structure"]
    impl crate::Readable for APB1RSTR {}
    #[doc = "`write(|w| ..)` method takes [apb1rstr::W](apb1rstr::W) writer structure"]
    impl crate::Writable for APB1RSTR {}
    #[doc = "APB1 peripheral reset register"]
    pub mod apb1rstr {
        #[doc = "Reader of register APB1RSTR"]
        pub type R = crate::R<u32, super::APB1RSTR>;
        #[doc = "Writer for register APB1RSTR"]
        pub type W = crate::W<u32, super::APB1RSTR>;
        #[doc = "Register APB1RSTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB1RSTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `COMPRST`"]
        pub type COMPRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMPRST`"]
        pub struct COMPRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMPRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `DACRST`"]
        pub type DACRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DACRST`"]
        pub struct DACRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `PWRRST`"]
        pub type PWRRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PWRRST`"]
        pub struct PWRRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWRRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `USBRST`"]
        pub type USBRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USBRST`"]
        pub struct USBRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `I2C2RST`"]
        pub type I2C2RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2C2RST`"]
        pub struct I2C2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C2RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `I2C1RST`"]
        pub type I2C1RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2C1RST`"]
        pub struct I2C1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `UART5RST`"]
        pub type UART5RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UART5RST`"]
        pub struct UART5RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UART5RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `UART4RST`"]
        pub type UART4RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UART4RST`"]
        pub struct UART4RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UART4RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `USART3RST`"]
        pub type USART3RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART3RST`"]
        pub struct USART3RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART3RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `USART2RST`"]
        pub type USART2RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART2RST`"]
        pub struct USART2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART2RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `SPI3RST`"]
        pub type SPI3RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPI3RST`"]
        pub struct SPI3RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI3RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `SPI2RST`"]
        pub type SPI2RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPI2RST`"]
        pub struct SPI2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI2RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `WWDRST`"]
        pub type WWDRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WWDRST`"]
        pub struct WWDRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WWDRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `LCDRST`"]
        pub type LCDRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCDRST`"]
        pub struct LCDRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCDRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TIM7RST`"]
        pub type TIM7RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM7RST`"]
        pub struct TIM7RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM7RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TIM6RST`"]
        pub type TIM6RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM6RST`"]
        pub struct TIM6RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM6RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TIM5RST`"]
        pub type TIM5RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM5RST`"]
        pub struct TIM5RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM5RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TIM4RST`"]
        pub type TIM4RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM4RST`"]
        pub struct TIM4RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM4RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TIM3RST`"]
        pub type TIM3RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM3RST`"]
        pub struct TIM3RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM3RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TIM2RST`"]
        pub type TIM2RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM2RST`"]
        pub struct TIM2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM2RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - COMP interface reset"]
            #[inline(always)]
            pub fn comprst(&self) -> COMPRST_R {
                COMPRST_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 29 - DAC interface reset"]
            #[inline(always)]
            pub fn dacrst(&self) -> DACRST_R {
                DACRST_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Power interface reset"]
            #[inline(always)]
            pub fn pwrrst(&self) -> PWRRST_R {
                PWRRST_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 23 - USB reset"]
            #[inline(always)]
            pub fn usbrst(&self) -> USBRST_R {
                USBRST_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - I2C 2 reset"]
            #[inline(always)]
            pub fn i2c2rst(&self) -> I2C2RST_R {
                I2C2RST_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - I2C 1 reset"]
            #[inline(always)]
            pub fn i2c1rst(&self) -> I2C1RST_R {
                I2C1RST_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - UART 5 reset"]
            #[inline(always)]
            pub fn uart5rst(&self) -> UART5RST_R {
                UART5RST_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - UART 4 reset"]
            #[inline(always)]
            pub fn uart4rst(&self) -> UART4RST_R {
                UART4RST_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - USART 3 reset"]
            #[inline(always)]
            pub fn usart3rst(&self) -> USART3RST_R {
                USART3RST_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - USART 2 reset"]
            #[inline(always)]
            pub fn usart2rst(&self) -> USART2RST_R {
                USART2RST_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 15 - SPI 3 reset"]
            #[inline(always)]
            pub fn spi3rst(&self) -> SPI3RST_R {
                SPI3RST_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - SPI 2 reset"]
            #[inline(always)]
            pub fn spi2rst(&self) -> SPI2RST_R {
                SPI2RST_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Window watchdog reset"]
            #[inline(always)]
            pub fn wwdrst(&self) -> WWDRST_R {
                WWDRST_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 9 - LCD reset"]
            #[inline(always)]
            pub fn lcdrst(&self) -> LCDRST_R {
                LCDRST_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Timer 7 reset"]
            #[inline(always)]
            pub fn tim7rst(&self) -> TIM7RST_R {
                TIM7RST_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Timer 6reset"]
            #[inline(always)]
            pub fn tim6rst(&self) -> TIM6RST_R {
                TIM6RST_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Timer 5 reset"]
            #[inline(always)]
            pub fn tim5rst(&self) -> TIM5RST_R {
                TIM5RST_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Timer 4 reset"]
            #[inline(always)]
            pub fn tim4rst(&self) -> TIM4RST_R {
                TIM4RST_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Timer 3 reset"]
            #[inline(always)]
            pub fn tim3rst(&self) -> TIM3RST_R {
                TIM3RST_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Timer 2 reset"]
            #[inline(always)]
            pub fn tim2rst(&self) -> TIM2RST_R {
                TIM2RST_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - COMP interface reset"]
            #[inline(always)]
            pub fn comprst(&mut self) -> COMPRST_W {
                COMPRST_W { w: self }
            }
            #[doc = "Bit 29 - DAC interface reset"]
            #[inline(always)]
            pub fn dacrst(&mut self) -> DACRST_W {
                DACRST_W { w: self }
            }
            #[doc = "Bit 28 - Power interface reset"]
            #[inline(always)]
            pub fn pwrrst(&mut self) -> PWRRST_W {
                PWRRST_W { w: self }
            }
            #[doc = "Bit 23 - USB reset"]
            #[inline(always)]
            pub fn usbrst(&mut self) -> USBRST_W {
                USBRST_W { w: self }
            }
            #[doc = "Bit 22 - I2C 2 reset"]
            #[inline(always)]
            pub fn i2c2rst(&mut self) -> I2C2RST_W {
                I2C2RST_W { w: self }
            }
            #[doc = "Bit 21 - I2C 1 reset"]
            #[inline(always)]
            pub fn i2c1rst(&mut self) -> I2C1RST_W {
                I2C1RST_W { w: self }
            }
            #[doc = "Bit 20 - UART 5 reset"]
            #[inline(always)]
            pub fn uart5rst(&mut self) -> UART5RST_W {
                UART5RST_W { w: self }
            }
            #[doc = "Bit 19 - UART 4 reset"]
            #[inline(always)]
            pub fn uart4rst(&mut self) -> UART4RST_W {
                UART4RST_W { w: self }
            }
            #[doc = "Bit 18 - USART 3 reset"]
            #[inline(always)]
            pub fn usart3rst(&mut self) -> USART3RST_W {
                USART3RST_W { w: self }
            }
            #[doc = "Bit 17 - USART 2 reset"]
            #[inline(always)]
            pub fn usart2rst(&mut self) -> USART2RST_W {
                USART2RST_W { w: self }
            }
            #[doc = "Bit 15 - SPI 3 reset"]
            #[inline(always)]
            pub fn spi3rst(&mut self) -> SPI3RST_W {
                SPI3RST_W { w: self }
            }
            #[doc = "Bit 14 - SPI 2 reset"]
            #[inline(always)]
            pub fn spi2rst(&mut self) -> SPI2RST_W {
                SPI2RST_W { w: self }
            }
            #[doc = "Bit 11 - Window watchdog reset"]
            #[inline(always)]
            pub fn wwdrst(&mut self) -> WWDRST_W {
                WWDRST_W { w: self }
            }
            #[doc = "Bit 9 - LCD reset"]
            #[inline(always)]
            pub fn lcdrst(&mut self) -> LCDRST_W {
                LCDRST_W { w: self }
            }
            #[doc = "Bit 5 - Timer 7 reset"]
            #[inline(always)]
            pub fn tim7rst(&mut self) -> TIM7RST_W {
                TIM7RST_W { w: self }
            }
            #[doc = "Bit 4 - Timer 6reset"]
            #[inline(always)]
            pub fn tim6rst(&mut self) -> TIM6RST_W {
                TIM6RST_W { w: self }
            }
            #[doc = "Bit 3 - Timer 5 reset"]
            #[inline(always)]
            pub fn tim5rst(&mut self) -> TIM5RST_W {
                TIM5RST_W { w: self }
            }
            #[doc = "Bit 2 - Timer 4 reset"]
            #[inline(always)]
            pub fn tim4rst(&mut self) -> TIM4RST_W {
                TIM4RST_W { w: self }
            }
            #[doc = "Bit 1 - Timer 3 reset"]
            #[inline(always)]
            pub fn tim3rst(&mut self) -> TIM3RST_W {
                TIM3RST_W { w: self }
            }
            #[doc = "Bit 0 - Timer 2 reset"]
            #[inline(always)]
            pub fn tim2rst(&mut self) -> TIM2RST_W {
                TIM2RST_W { w: self }
            }
        }
    }
    #[doc = "AHB peripheral clock enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ahbenr](ahbenr) module"]
    pub type AHBENR = crate::Reg<u32, _AHBENR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AHBENR;
    #[doc = "`read()` method returns [ahbenr::R](ahbenr::R) reader structure"]
    impl crate::Readable for AHBENR {}
    #[doc = "`write(|w| ..)` method takes [ahbenr::W](ahbenr::W) writer structure"]
    impl crate::Writable for AHBENR {}
    #[doc = "AHB peripheral clock enable register"]
    pub mod ahbenr {
        #[doc = "Reader of register AHBENR"]
        pub type R = crate::R<u32, super::AHBENR>;
        #[doc = "Writer for register AHBENR"]
        pub type W = crate::W<u32, super::AHBENR>;
        #[doc = "Register AHBENR `reset()`'s with value 0x8000"]
        impl crate::ResetValue for super::AHBENR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x8000
            }
        }
        #[doc = "Reader of field `FSMCEN`"]
        pub type FSMCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FSMCEN`"]
        pub struct FSMCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSMCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `DMA2EN`"]
        pub type DMA2EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMA2EN`"]
        pub struct DMA2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `DMA1EN`"]
        pub type DMA1EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMA1EN`"]
        pub struct DMA1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `FLITFEN`"]
        pub type FLITFEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FLITFEN`"]
        pub struct FLITFEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLITFEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `CRCEN`"]
        pub type CRCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRCEN`"]
        pub struct CRCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOPGEN`"]
        pub type GPIOPGEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOPGEN`"]
        pub struct GPIOPGEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOPGEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOPFEN`"]
        pub type GPIOPFEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOPFEN`"]
        pub struct GPIOPFEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOPFEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOPHEN`"]
        pub type GPIOPHEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOPHEN`"]
        pub struct GPIOPHEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOPHEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOPEEN`"]
        pub type GPIOPEEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOPEEN`"]
        pub struct GPIOPEEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOPEEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOPDEN`"]
        pub type GPIOPDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOPDEN`"]
        pub struct GPIOPDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOPDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOPCEN`"]
        pub type GPIOPCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOPCEN`"]
        pub struct GPIOPCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOPCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOPBEN`"]
        pub type GPIOPBEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOPBEN`"]
        pub struct GPIOPBEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOPBEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOPAEN`"]
        pub type GPIOPAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOPAEN`"]
        pub struct GPIOPAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOPAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - FSMCEN"]
            #[inline(always)]
            pub fn fsmcen(&self) -> FSMCEN_R {
                FSMCEN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 25 - DMA2 clock enable"]
            #[inline(always)]
            pub fn dma2en(&self) -> DMA2EN_R {
                DMA2EN_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - DMA1 clock enable"]
            #[inline(always)]
            pub fn dma1en(&self) -> DMA1EN_R {
                DMA1EN_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 15 - FLITF clock enable"]
            #[inline(always)]
            pub fn flitfen(&self) -> FLITFEN_R {
                FLITFEN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 12 - CRC clock enable"]
            #[inline(always)]
            pub fn crcen(&self) -> CRCEN_R {
                CRCEN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 7 - IO port G clock enable"]
            #[inline(always)]
            pub fn gpiopgen(&self) -> GPIOPGEN_R {
                GPIOPGEN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - IO port F clock enable"]
            #[inline(always)]
            pub fn gpiopfen(&self) -> GPIOPFEN_R {
                GPIOPFEN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - IO port H clock enable"]
            #[inline(always)]
            pub fn gpiophen(&self) -> GPIOPHEN_R {
                GPIOPHEN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - IO port E clock enable"]
            #[inline(always)]
            pub fn gpiopeen(&self) -> GPIOPEEN_R {
                GPIOPEEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - IO port D clock enable"]
            #[inline(always)]
            pub fn gpiopden(&self) -> GPIOPDEN_R {
                GPIOPDEN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - IO port C clock enable"]
            #[inline(always)]
            pub fn gpiopcen(&self) -> GPIOPCEN_R {
                GPIOPCEN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - IO port B clock enable"]
            #[inline(always)]
            pub fn gpiopben(&self) -> GPIOPBEN_R {
                GPIOPBEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - IO port A clock enable"]
            #[inline(always)]
            pub fn gpiopaen(&self) -> GPIOPAEN_R {
                GPIOPAEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 30 - FSMCEN"]
            #[inline(always)]
            pub fn fsmcen(&mut self) -> FSMCEN_W {
                FSMCEN_W { w: self }
            }
            #[doc = "Bit 25 - DMA2 clock enable"]
            #[inline(always)]
            pub fn dma2en(&mut self) -> DMA2EN_W {
                DMA2EN_W { w: self }
            }
            #[doc = "Bit 24 - DMA1 clock enable"]
            #[inline(always)]
            pub fn dma1en(&mut self) -> DMA1EN_W {
                DMA1EN_W { w: self }
            }
            #[doc = "Bit 15 - FLITF clock enable"]
            #[inline(always)]
            pub fn flitfen(&mut self) -> FLITFEN_W {
                FLITFEN_W { w: self }
            }
            #[doc = "Bit 12 - CRC clock enable"]
            #[inline(always)]
            pub fn crcen(&mut self) -> CRCEN_W {
                CRCEN_W { w: self }
            }
            #[doc = "Bit 7 - IO port G clock enable"]
            #[inline(always)]
            pub fn gpiopgen(&mut self) -> GPIOPGEN_W {
                GPIOPGEN_W { w: self }
            }
            #[doc = "Bit 6 - IO port F clock enable"]
            #[inline(always)]
            pub fn gpiopfen(&mut self) -> GPIOPFEN_W {
                GPIOPFEN_W { w: self }
            }
            #[doc = "Bit 5 - IO port H clock enable"]
            #[inline(always)]
            pub fn gpiophen(&mut self) -> GPIOPHEN_W {
                GPIOPHEN_W { w: self }
            }
            #[doc = "Bit 4 - IO port E clock enable"]
            #[inline(always)]
            pub fn gpiopeen(&mut self) -> GPIOPEEN_W {
                GPIOPEEN_W { w: self }
            }
            #[doc = "Bit 3 - IO port D clock enable"]
            #[inline(always)]
            pub fn gpiopden(&mut self) -> GPIOPDEN_W {
                GPIOPDEN_W { w: self }
            }
            #[doc = "Bit 2 - IO port C clock enable"]
            #[inline(always)]
            pub fn gpiopcen(&mut self) -> GPIOPCEN_W {
                GPIOPCEN_W { w: self }
            }
            #[doc = "Bit 1 - IO port B clock enable"]
            #[inline(always)]
            pub fn gpiopben(&mut self) -> GPIOPBEN_W {
                GPIOPBEN_W { w: self }
            }
            #[doc = "Bit 0 - IO port A clock enable"]
            #[inline(always)]
            pub fn gpiopaen(&mut self) -> GPIOPAEN_W {
                GPIOPAEN_W { w: self }
            }
        }
    }
    #[doc = "APB2 peripheral clock enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb2enr](apb2enr) module"]
    pub type APB2ENR = crate::Reg<u32, _APB2ENR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB2ENR;
    #[doc = "`read()` method returns [apb2enr::R](apb2enr::R) reader structure"]
    impl crate::Readable for APB2ENR {}
    #[doc = "`write(|w| ..)` method takes [apb2enr::W](apb2enr::W) writer structure"]
    impl crate::Writable for APB2ENR {}
    #[doc = "APB2 peripheral clock enable register"]
    pub mod apb2enr {
        #[doc = "Reader of register APB2ENR"]
        pub type R = crate::R<u32, super::APB2ENR>;
        #[doc = "Writer for register APB2ENR"]
        pub type W = crate::W<u32, super::APB2ENR>;
        #[doc = "Register APB2ENR `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB2ENR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `USART1EN`"]
        pub type USART1EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART1EN`"]
        pub struct USART1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `SPI1EN`"]
        pub type SPI1EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPI1EN`"]
        pub struct SPI1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `SDIOEN`"]
        pub type SDIOEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SDIOEN`"]
        pub struct SDIOEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDIOEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `ADC1EN`"]
        pub type ADC1EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC1EN`"]
        pub struct ADC1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TIM11EN`"]
        pub type TIM11EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM11EN`"]
        pub struct TIM11EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM11EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TIM10EN`"]
        pub type TIM10EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM10EN`"]
        pub struct TIM10EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM10EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TIM9EN`"]
        pub type TIM9EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM9EN`"]
        pub struct TIM9EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM9EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SYSCFGEN`"]
        pub type SYSCFGEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SYSCFGEN`"]
        pub struct SYSCFGEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYSCFGEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - USART1 clock enable"]
            #[inline(always)]
            pub fn usart1en(&self) -> USART1EN_R {
                USART1EN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 12 - SPI 1 clock enable"]
            #[inline(always)]
            pub fn spi1en(&self) -> SPI1EN_R {
                SPI1EN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - SDIO clock enable"]
            #[inline(always)]
            pub fn sdioen(&self) -> SDIOEN_R {
                SDIOEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 9 - ADC1 interface clock enable"]
            #[inline(always)]
            pub fn adc1en(&self) -> ADC1EN_R {
                ADC1EN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TIM11 timer clock enable"]
            #[inline(always)]
            pub fn tim11en(&self) -> TIM11EN_R {
                TIM11EN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TIM10 timer clock enable"]
            #[inline(always)]
            pub fn tim10en(&self) -> TIM10EN_R {
                TIM10EN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - TIM9 timer clock enable"]
            #[inline(always)]
            pub fn tim9en(&self) -> TIM9EN_R {
                TIM9EN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 0 - System configuration controller clock enable"]
            #[inline(always)]
            pub fn syscfgen(&self) -> SYSCFGEN_R {
                SYSCFGEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - USART1 clock enable"]
            #[inline(always)]
            pub fn usart1en(&mut self) -> USART1EN_W {
                USART1EN_W { w: self }
            }
            #[doc = "Bit 12 - SPI 1 clock enable"]
            #[inline(always)]
            pub fn spi1en(&mut self) -> SPI1EN_W {
                SPI1EN_W { w: self }
            }
            #[doc = "Bit 11 - SDIO clock enable"]
            #[inline(always)]
            pub fn sdioen(&mut self) -> SDIOEN_W {
                SDIOEN_W { w: self }
            }
            #[doc = "Bit 9 - ADC1 interface clock enable"]
            #[inline(always)]
            pub fn adc1en(&mut self) -> ADC1EN_W {
                ADC1EN_W { w: self }
            }
            #[doc = "Bit 4 - TIM11 timer clock enable"]
            #[inline(always)]
            pub fn tim11en(&mut self) -> TIM11EN_W {
                TIM11EN_W { w: self }
            }
            #[doc = "Bit 3 - TIM10 timer clock enable"]
            #[inline(always)]
            pub fn tim10en(&mut self) -> TIM10EN_W {
                TIM10EN_W { w: self }
            }
            #[doc = "Bit 2 - TIM9 timer clock enable"]
            #[inline(always)]
            pub fn tim9en(&mut self) -> TIM9EN_W {
                TIM9EN_W { w: self }
            }
            #[doc = "Bit 0 - System configuration controller clock enable"]
            #[inline(always)]
            pub fn syscfgen(&mut self) -> SYSCFGEN_W {
                SYSCFGEN_W { w: self }
            }
        }
    }
    #[doc = "APB1 peripheral clock enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb1enr](apb1enr) module"]
    pub type APB1ENR = crate::Reg<u32, _APB1ENR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB1ENR;
    #[doc = "`read()` method returns [apb1enr::R](apb1enr::R) reader structure"]
    impl crate::Readable for APB1ENR {}
    #[doc = "`write(|w| ..)` method takes [apb1enr::W](apb1enr::W) writer structure"]
    impl crate::Writable for APB1ENR {}
    #[doc = "APB1 peripheral clock enable register"]
    pub mod apb1enr {
        #[doc = "Reader of register APB1ENR"]
        pub type R = crate::R<u32, super::APB1ENR>;
        #[doc = "Writer for register APB1ENR"]
        pub type W = crate::W<u32, super::APB1ENR>;
        #[doc = "Register APB1ENR `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB1ENR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `COMPEN`"]
        pub type COMPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMPEN`"]
        pub struct COMPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `DACEN`"]
        pub type DACEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DACEN`"]
        pub struct DACEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `PWREN`"]
        pub type PWREN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PWREN`"]
        pub struct PWREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWREN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `USBEN`"]
        pub type USBEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USBEN`"]
        pub struct USBEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `I2C2EN`"]
        pub type I2C2EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2C2EN`"]
        pub struct I2C2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `I2C1EN`"]
        pub type I2C1EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2C1EN`"]
        pub struct I2C1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `USART5EN`"]
        pub type USART5EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART5EN`"]
        pub struct USART5EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART5EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `USART4EN`"]
        pub type USART4EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART4EN`"]
        pub struct USART4EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART4EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `USART3EN`"]
        pub type USART3EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART3EN`"]
        pub struct USART3EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART3EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `USART2EN`"]
        pub type USART2EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART2EN`"]
        pub struct USART2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `SPI3EN`"]
        pub type SPI3EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPI3EN`"]
        pub struct SPI3EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI3EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `SPI2EN`"]
        pub type SPI2EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPI2EN`"]
        pub struct SPI2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `WWDGEN`"]
        pub type WWDGEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WWDGEN`"]
        pub struct WWDGEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WWDGEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `LCDEN`"]
        pub type LCDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCDEN`"]
        pub struct LCDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TIM7EN`"]
        pub type TIM7EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM7EN`"]
        pub struct TIM7EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM7EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TIM6EN`"]
        pub type TIM6EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM6EN`"]
        pub struct TIM6EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM6EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TIM5EN`"]
        pub type TIM5EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM5EN`"]
        pub struct TIM5EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM5EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TIM4EN`"]
        pub type TIM4EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM4EN`"]
        pub struct TIM4EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM4EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TIM3EN`"]
        pub type TIM3EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM3EN`"]
        pub struct TIM3EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM3EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TIM2EN`"]
        pub type TIM2EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM2EN`"]
        pub struct TIM2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - COMP interface clock enable"]
            #[inline(always)]
            pub fn compen(&self) -> COMPEN_R {
                COMPEN_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 29 - DAC interface clock enable"]
            #[inline(always)]
            pub fn dacen(&self) -> DACEN_R {
                DACEN_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Power interface clock enable"]
            #[inline(always)]
            pub fn pwren(&self) -> PWREN_R {
                PWREN_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 23 - USB clock enable"]
            #[inline(always)]
            pub fn usben(&self) -> USBEN_R {
                USBEN_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - I2C 2 clock enable"]
            #[inline(always)]
            pub fn i2c2en(&self) -> I2C2EN_R {
                I2C2EN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - I2C 1 clock enable"]
            #[inline(always)]
            pub fn i2c1en(&self) -> I2C1EN_R {
                I2C1EN_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - UART 5 clock enable"]
            #[inline(always)]
            pub fn usart5en(&self) -> USART5EN_R {
                USART5EN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - UART 4 clock enable"]
            #[inline(always)]
            pub fn usart4en(&self) -> USART4EN_R {
                USART4EN_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - USART 3 clock enable"]
            #[inline(always)]
            pub fn usart3en(&self) -> USART3EN_R {
                USART3EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - USART 2 clock enable"]
            #[inline(always)]
            pub fn usart2en(&self) -> USART2EN_R {
                USART2EN_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 15 - SPI 3 clock enable"]
            #[inline(always)]
            pub fn spi3en(&self) -> SPI3EN_R {
                SPI3EN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - SPI 2 clock enable"]
            #[inline(always)]
            pub fn spi2en(&self) -> SPI2EN_R {
                SPI2EN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Window watchdog clock enable"]
            #[inline(always)]
            pub fn wwdgen(&self) -> WWDGEN_R {
                WWDGEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 9 - LCD clock enable"]
            #[inline(always)]
            pub fn lcden(&self) -> LCDEN_R {
                LCDEN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Timer 7 clock enable"]
            #[inline(always)]
            pub fn tim7en(&self) -> TIM7EN_R {
                TIM7EN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Timer 6 clock enable"]
            #[inline(always)]
            pub fn tim6en(&self) -> TIM6EN_R {
                TIM6EN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Timer 5 clock enable"]
            #[inline(always)]
            pub fn tim5en(&self) -> TIM5EN_R {
                TIM5EN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Timer 4 clock enable"]
            #[inline(always)]
            pub fn tim4en(&self) -> TIM4EN_R {
                TIM4EN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Timer 3 clock enable"]
            #[inline(always)]
            pub fn tim3en(&self) -> TIM3EN_R {
                TIM3EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Timer 2 clock enable"]
            #[inline(always)]
            pub fn tim2en(&self) -> TIM2EN_R {
                TIM2EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - COMP interface clock enable"]
            #[inline(always)]
            pub fn compen(&mut self) -> COMPEN_W {
                COMPEN_W { w: self }
            }
            #[doc = "Bit 29 - DAC interface clock enable"]
            #[inline(always)]
            pub fn dacen(&mut self) -> DACEN_W {
                DACEN_W { w: self }
            }
            #[doc = "Bit 28 - Power interface clock enable"]
            #[inline(always)]
            pub fn pwren(&mut self) -> PWREN_W {
                PWREN_W { w: self }
            }
            #[doc = "Bit 23 - USB clock enable"]
            #[inline(always)]
            pub fn usben(&mut self) -> USBEN_W {
                USBEN_W { w: self }
            }
            #[doc = "Bit 22 - I2C 2 clock enable"]
            #[inline(always)]
            pub fn i2c2en(&mut self) -> I2C2EN_W {
                I2C2EN_W { w: self }
            }
            #[doc = "Bit 21 - I2C 1 clock enable"]
            #[inline(always)]
            pub fn i2c1en(&mut self) -> I2C1EN_W {
                I2C1EN_W { w: self }
            }
            #[doc = "Bit 20 - UART 5 clock enable"]
            #[inline(always)]
            pub fn usart5en(&mut self) -> USART5EN_W {
                USART5EN_W { w: self }
            }
            #[doc = "Bit 19 - UART 4 clock enable"]
            #[inline(always)]
            pub fn usart4en(&mut self) -> USART4EN_W {
                USART4EN_W { w: self }
            }
            #[doc = "Bit 18 - USART 3 clock enable"]
            #[inline(always)]
            pub fn usart3en(&mut self) -> USART3EN_W {
                USART3EN_W { w: self }
            }
            #[doc = "Bit 17 - USART 2 clock enable"]
            #[inline(always)]
            pub fn usart2en(&mut self) -> USART2EN_W {
                USART2EN_W { w: self }
            }
            #[doc = "Bit 15 - SPI 3 clock enable"]
            #[inline(always)]
            pub fn spi3en(&mut self) -> SPI3EN_W {
                SPI3EN_W { w: self }
            }
            #[doc = "Bit 14 - SPI 2 clock enable"]
            #[inline(always)]
            pub fn spi2en(&mut self) -> SPI2EN_W {
                SPI2EN_W { w: self }
            }
            #[doc = "Bit 11 - Window watchdog clock enable"]
            #[inline(always)]
            pub fn wwdgen(&mut self) -> WWDGEN_W {
                WWDGEN_W { w: self }
            }
            #[doc = "Bit 9 - LCD clock enable"]
            #[inline(always)]
            pub fn lcden(&mut self) -> LCDEN_W {
                LCDEN_W { w: self }
            }
            #[doc = "Bit 5 - Timer 7 clock enable"]
            #[inline(always)]
            pub fn tim7en(&mut self) -> TIM7EN_W {
                TIM7EN_W { w: self }
            }
            #[doc = "Bit 4 - Timer 6 clock enable"]
            #[inline(always)]
            pub fn tim6en(&mut self) -> TIM6EN_W {
                TIM6EN_W { w: self }
            }
            #[doc = "Bit 3 - Timer 5 clock enable"]
            #[inline(always)]
            pub fn tim5en(&mut self) -> TIM5EN_W {
                TIM5EN_W { w: self }
            }
            #[doc = "Bit 2 - Timer 4 clock enable"]
            #[inline(always)]
            pub fn tim4en(&mut self) -> TIM4EN_W {
                TIM4EN_W { w: self }
            }
            #[doc = "Bit 1 - Timer 3 clock enable"]
            #[inline(always)]
            pub fn tim3en(&mut self) -> TIM3EN_W {
                TIM3EN_W { w: self }
            }
            #[doc = "Bit 0 - Timer 2 clock enable"]
            #[inline(always)]
            pub fn tim2en(&mut self) -> TIM2EN_W {
                TIM2EN_W { w: self }
            }
        }
    }
    #[doc = "AHB peripheral clock enable in low power mode register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ahblpenr](ahblpenr) module"]
    pub type AHBLPENR = crate::Reg<u32, _AHBLPENR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AHBLPENR;
    #[doc = "`read()` method returns [ahblpenr::R](ahblpenr::R) reader structure"]
    impl crate::Readable for AHBLPENR {}
    #[doc = "`write(|w| ..)` method takes [ahblpenr::W](ahblpenr::W) writer structure"]
    impl crate::Writable for AHBLPENR {}
    #[doc = "AHB peripheral clock enable in low power mode register"]
    pub mod ahblpenr {
        #[doc = "Reader of register AHBLPENR"]
        pub type R = crate::R<u32, super::AHBLPENR>;
        #[doc = "Writer for register AHBLPENR"]
        pub type W = crate::W<u32, super::AHBLPENR>;
        #[doc = "Register AHBLPENR `reset()`'s with value 0x0101_903f"]
        impl crate::ResetValue for super::AHBLPENR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0101_903f
            }
        }
        #[doc = "Reader of field `DMA2LPEN`"]
        pub type DMA2LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMA2LPEN`"]
        pub struct DMA2LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA2LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `DMA1LPEN`"]
        pub type DMA1LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMA1LPEN`"]
        pub struct DMA1LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA1LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `SRAMLPEN`"]
        pub type SRAMLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SRAMLPEN`"]
        pub struct SRAMLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRAMLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `FLITFLPEN`"]
        pub type FLITFLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FLITFLPEN`"]
        pub struct FLITFLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLITFLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `CRCLPEN`"]
        pub type CRCLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRCLPEN`"]
        pub struct CRCLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOGLPEN`"]
        pub type GPIOGLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOGLPEN`"]
        pub struct GPIOGLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOGLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOFLPEN`"]
        pub type GPIOFLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOFLPEN`"]
        pub struct GPIOFLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOFLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOHLPEN`"]
        pub type GPIOHLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOHLPEN`"]
        pub struct GPIOHLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOHLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOELPEN`"]
        pub type GPIOELPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOELPEN`"]
        pub struct GPIOELPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOELPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `GPIODLPEN`"]
        pub type GPIODLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIODLPEN`"]
        pub struct GPIODLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIODLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOCLPEN`"]
        pub type GPIOCLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOCLPEN`"]
        pub struct GPIOCLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOCLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOBLPEN`"]
        pub type GPIOBLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOBLPEN`"]
        pub struct GPIOBLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOBLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `GPIOALPEN`"]
        pub type GPIOALPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIOALPEN`"]
        pub struct GPIOALPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIOALPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 25 - DMA2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn dma2lpen(&self) -> DMA2LPEN_R {
                DMA2LPEN_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - DMA1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn dma1lpen(&self) -> DMA1LPEN_R {
                DMA1LPEN_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 16 - SRAM clock enable during Sleep mode"]
            #[inline(always)]
            pub fn sramlpen(&self) -> SRAMLPEN_R {
                SRAMLPEN_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - FLITF clock enable during Sleep mode"]
            #[inline(always)]
            pub fn flitflpen(&self) -> FLITFLPEN_R {
                FLITFLPEN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 12 - CRC clock enable during Sleep mode"]
            #[inline(always)]
            pub fn crclpen(&self) -> CRCLPEN_R {
                CRCLPEN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 7 - IO port G clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpioglpen(&self) -> GPIOGLPEN_R {
                GPIOGLPEN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - IO port F clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpioflpen(&self) -> GPIOFLPEN_R {
                GPIOFLPEN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - IO port H clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpiohlpen(&self) -> GPIOHLPEN_R {
                GPIOHLPEN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - IO port E clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpioelpen(&self) -> GPIOELPEN_R {
                GPIOELPEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - IO port D clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpiodlpen(&self) -> GPIODLPEN_R {
                GPIODLPEN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - IO port C clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpioclpen(&self) -> GPIOCLPEN_R {
                GPIOCLPEN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - IO port B clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpioblpen(&self) -> GPIOBLPEN_R {
                GPIOBLPEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - IO port A clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpioalpen(&self) -> GPIOALPEN_R {
                GPIOALPEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 25 - DMA2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn dma2lpen(&mut self) -> DMA2LPEN_W {
                DMA2LPEN_W { w: self }
            }
            #[doc = "Bit 24 - DMA1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn dma1lpen(&mut self) -> DMA1LPEN_W {
                DMA1LPEN_W { w: self }
            }
            #[doc = "Bit 16 - SRAM clock enable during Sleep mode"]
            #[inline(always)]
            pub fn sramlpen(&mut self) -> SRAMLPEN_W {
                SRAMLPEN_W { w: self }
            }
            #[doc = "Bit 15 - FLITF clock enable during Sleep mode"]
            #[inline(always)]
            pub fn flitflpen(&mut self) -> FLITFLPEN_W {
                FLITFLPEN_W { w: self }
            }
            #[doc = "Bit 12 - CRC clock enable during Sleep mode"]
            #[inline(always)]
            pub fn crclpen(&mut self) -> CRCLPEN_W {
                CRCLPEN_W { w: self }
            }
            #[doc = "Bit 7 - IO port G clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpioglpen(&mut self) -> GPIOGLPEN_W {
                GPIOGLPEN_W { w: self }
            }
            #[doc = "Bit 6 - IO port F clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpioflpen(&mut self) -> GPIOFLPEN_W {
                GPIOFLPEN_W { w: self }
            }
            #[doc = "Bit 5 - IO port H clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpiohlpen(&mut self) -> GPIOHLPEN_W {
                GPIOHLPEN_W { w: self }
            }
            #[doc = "Bit 4 - IO port E clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpioelpen(&mut self) -> GPIOELPEN_W {
                GPIOELPEN_W { w: self }
            }
            #[doc = "Bit 3 - IO port D clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpiodlpen(&mut self) -> GPIODLPEN_W {
                GPIODLPEN_W { w: self }
            }
            #[doc = "Bit 2 - IO port C clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpioclpen(&mut self) -> GPIOCLPEN_W {
                GPIOCLPEN_W { w: self }
            }
            #[doc = "Bit 1 - IO port B clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpioblpen(&mut self) -> GPIOBLPEN_W {
                GPIOBLPEN_W { w: self }
            }
            #[doc = "Bit 0 - IO port A clock enable during Sleep mode"]
            #[inline(always)]
            pub fn gpioalpen(&mut self) -> GPIOALPEN_W {
                GPIOALPEN_W { w: self }
            }
        }
    }
    #[doc = "APB2 peripheral clock enable in low power mode register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb2lpenr](apb2lpenr) module"]
    pub type APB2LPENR = crate::Reg<u32, _APB2LPENR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB2LPENR;
    #[doc = "`read()` method returns [apb2lpenr::R](apb2lpenr::R) reader structure"]
    impl crate::Readable for APB2LPENR {}
    #[doc = "`write(|w| ..)` method takes [apb2lpenr::W](apb2lpenr::W) writer structure"]
    impl crate::Writable for APB2LPENR {}
    #[doc = "APB2 peripheral clock enable in low power mode register"]
    pub mod apb2lpenr {
        #[doc = "Reader of register APB2LPENR"]
        pub type R = crate::R<u32, super::APB2LPENR>;
        #[doc = "Writer for register APB2LPENR"]
        pub type W = crate::W<u32, super::APB2LPENR>;
        #[doc = "Register APB2LPENR `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB2LPENR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `USART1LPEN`"]
        pub type USART1LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART1LPEN`"]
        pub struct USART1LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `SPI1LPEN`"]
        pub type SPI1LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPI1LPEN`"]
        pub struct SPI1LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI1LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `SDIOLPEN`"]
        pub type SDIOLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SDIOLPEN`"]
        pub struct SDIOLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDIOLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `ADC1LPEN`"]
        pub type ADC1LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC1LPEN`"]
        pub struct ADC1LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC1LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TIM11LPEN`"]
        pub type TIM11LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM11LPEN`"]
        pub struct TIM11LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM11LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TIM10LPEN`"]
        pub type TIM10LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM10LPEN`"]
        pub struct TIM10LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM10LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TIM9LPEN`"]
        pub type TIM9LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM9LPEN`"]
        pub struct TIM9LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM9LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SYSCFGLPEN`"]
        pub type SYSCFGLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SYSCFGLPEN`"]
        pub struct SYSCFGLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYSCFGLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - USART1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn usart1lpen(&self) -> USART1LPEN_R {
                USART1LPEN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 12 - SPI 1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn spi1lpen(&self) -> SPI1LPEN_R {
                SPI1LPEN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - SDIO clock enable during Sleep mode"]
            #[inline(always)]
            pub fn sdiolpen(&self) -> SDIOLPEN_R {
                SDIOLPEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 9 - ADC1 interface clock enable during Sleep mode"]
            #[inline(always)]
            pub fn adc1lpen(&self) -> ADC1LPEN_R {
                ADC1LPEN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TIM11 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim11lpen(&self) -> TIM11LPEN_R {
                TIM11LPEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TIM10 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim10lpen(&self) -> TIM10LPEN_R {
                TIM10LPEN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - TIM9 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim9lpen(&self) -> TIM9LPEN_R {
                TIM9LPEN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 0 - System configuration controller clock enable during Sleep mode"]
            #[inline(always)]
            pub fn syscfglpen(&self) -> SYSCFGLPEN_R {
                SYSCFGLPEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - USART1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn usart1lpen(&mut self) -> USART1LPEN_W {
                USART1LPEN_W { w: self }
            }
            #[doc = "Bit 12 - SPI 1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn spi1lpen(&mut self) -> SPI1LPEN_W {
                SPI1LPEN_W { w: self }
            }
            #[doc = "Bit 11 - SDIO clock enable during Sleep mode"]
            #[inline(always)]
            pub fn sdiolpen(&mut self) -> SDIOLPEN_W {
                SDIOLPEN_W { w: self }
            }
            #[doc = "Bit 9 - ADC1 interface clock enable during Sleep mode"]
            #[inline(always)]
            pub fn adc1lpen(&mut self) -> ADC1LPEN_W {
                ADC1LPEN_W { w: self }
            }
            #[doc = "Bit 4 - TIM11 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim11lpen(&mut self) -> TIM11LPEN_W {
                TIM11LPEN_W { w: self }
            }
            #[doc = "Bit 3 - TIM10 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim10lpen(&mut self) -> TIM10LPEN_W {
                TIM10LPEN_W { w: self }
            }
            #[doc = "Bit 2 - TIM9 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim9lpen(&mut self) -> TIM9LPEN_W {
                TIM9LPEN_W { w: self }
            }
            #[doc = "Bit 0 - System configuration controller clock enable during Sleep mode"]
            #[inline(always)]
            pub fn syscfglpen(&mut self) -> SYSCFGLPEN_W {
                SYSCFGLPEN_W { w: self }
            }
        }
    }
    #[doc = "APB1 peripheral clock enable in low power mode register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb1lpenr](apb1lpenr) module"]
    pub type APB1LPENR = crate::Reg<u32, _APB1LPENR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB1LPENR;
    #[doc = "`read()` method returns [apb1lpenr::R](apb1lpenr::R) reader structure"]
    impl crate::Readable for APB1LPENR {}
    #[doc = "`write(|w| ..)` method takes [apb1lpenr::W](apb1lpenr::W) writer structure"]
    impl crate::Writable for APB1LPENR {}
    #[doc = "APB1 peripheral clock enable in low power mode register"]
    pub mod apb1lpenr {
        #[doc = "Reader of register APB1LPENR"]
        pub type R = crate::R<u32, super::APB1LPENR>;
        #[doc = "Writer for register APB1LPENR"]
        pub type W = crate::W<u32, super::APB1LPENR>;
        #[doc = "Register APB1LPENR `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB1LPENR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `COMPLPEN`"]
        pub type COMPLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMPLPEN`"]
        pub struct COMPLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMPLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `DACLPEN`"]
        pub type DACLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DACLPEN`"]
        pub struct DACLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `PWRLPEN`"]
        pub type PWRLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PWRLPEN`"]
        pub struct PWRLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWRLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `USBLPEN`"]
        pub type USBLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USBLPEN`"]
        pub struct USBLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `I2C2LPEN`"]
        pub type I2C2LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2C2LPEN`"]
        pub struct I2C2LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C2LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `I2C1LPEN`"]
        pub type I2C1LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2C1LPEN`"]
        pub struct I2C1LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `USART3LPEN`"]
        pub type USART3LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART3LPEN`"]
        pub struct USART3LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART3LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `USART2LPEN`"]
        pub type USART2LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART2LPEN`"]
        pub struct USART2LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART2LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `SPI2LPEN`"]
        pub type SPI2LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPI2LPEN`"]
        pub struct SPI2LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI2LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `WWDGLPEN`"]
        pub type WWDGLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WWDGLPEN`"]
        pub struct WWDGLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WWDGLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `LCDLPEN`"]
        pub type LCDLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCDLPEN`"]
        pub struct LCDLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCDLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TIM7LPEN`"]
        pub type TIM7LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM7LPEN`"]
        pub struct TIM7LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM7LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TIM6LPEN`"]
        pub type TIM6LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM6LPEN`"]
        pub struct TIM6LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM6LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TIM4LPEN`"]
        pub type TIM4LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM4LPEN`"]
        pub struct TIM4LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM4LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TIM3LPEN`"]
        pub type TIM3LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM3LPEN`"]
        pub struct TIM3LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM3LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TIM2LPEN`"]
        pub type TIM2LPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM2LPEN`"]
        pub struct TIM2LPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM2LPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - COMP interface clock enable during Sleep mode"]
            #[inline(always)]
            pub fn complpen(&self) -> COMPLPEN_R {
                COMPLPEN_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 29 - DAC interface clock enable during Sleep mode"]
            #[inline(always)]
            pub fn daclpen(&self) -> DACLPEN_R {
                DACLPEN_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Power interface clock enable during Sleep mode"]
            #[inline(always)]
            pub fn pwrlpen(&self) -> PWRLPEN_R {
                PWRLPEN_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 23 - USB clock enable during Sleep mode"]
            #[inline(always)]
            pub fn usblpen(&self) -> USBLPEN_R {
                USBLPEN_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - I2C 2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn i2c2lpen(&self) -> I2C2LPEN_R {
                I2C2LPEN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - I2C 1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn i2c1lpen(&self) -> I2C1LPEN_R {
                I2C1LPEN_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 18 - USART 3 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn usart3lpen(&self) -> USART3LPEN_R {
                USART3LPEN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - USART 2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn usart2lpen(&self) -> USART2LPEN_R {
                USART2LPEN_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 14 - SPI 2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn spi2lpen(&self) -> SPI2LPEN_R {
                SPI2LPEN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Window watchdog clock enable during Sleep mode"]
            #[inline(always)]
            pub fn wwdglpen(&self) -> WWDGLPEN_R {
                WWDGLPEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 9 - LCD clock enable during Sleep mode"]
            #[inline(always)]
            pub fn lcdlpen(&self) -> LCDLPEN_R {
                LCDLPEN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Timer 7 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim7lpen(&self) -> TIM7LPEN_R {
                TIM7LPEN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Timer 6 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim6lpen(&self) -> TIM6LPEN_R {
                TIM6LPEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Timer 4 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim4lpen(&self) -> TIM4LPEN_R {
                TIM4LPEN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Timer 3 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim3lpen(&self) -> TIM3LPEN_R {
                TIM3LPEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Timer 2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim2lpen(&self) -> TIM2LPEN_R {
                TIM2LPEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - COMP interface clock enable during Sleep mode"]
            #[inline(always)]
            pub fn complpen(&mut self) -> COMPLPEN_W {
                COMPLPEN_W { w: self }
            }
            #[doc = "Bit 29 - DAC interface clock enable during Sleep mode"]
            #[inline(always)]
            pub fn daclpen(&mut self) -> DACLPEN_W {
                DACLPEN_W { w: self }
            }
            #[doc = "Bit 28 - Power interface clock enable during Sleep mode"]
            #[inline(always)]
            pub fn pwrlpen(&mut self) -> PWRLPEN_W {
                PWRLPEN_W { w: self }
            }
            #[doc = "Bit 23 - USB clock enable during Sleep mode"]
            #[inline(always)]
            pub fn usblpen(&mut self) -> USBLPEN_W {
                USBLPEN_W { w: self }
            }
            #[doc = "Bit 22 - I2C 2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn i2c2lpen(&mut self) -> I2C2LPEN_W {
                I2C2LPEN_W { w: self }
            }
            #[doc = "Bit 21 - I2C 1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn i2c1lpen(&mut self) -> I2C1LPEN_W {
                I2C1LPEN_W { w: self }
            }
            #[doc = "Bit 18 - USART 3 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn usart3lpen(&mut self) -> USART3LPEN_W {
                USART3LPEN_W { w: self }
            }
            #[doc = "Bit 17 - USART 2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn usart2lpen(&mut self) -> USART2LPEN_W {
                USART2LPEN_W { w: self }
            }
            #[doc = "Bit 14 - SPI 2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn spi2lpen(&mut self) -> SPI2LPEN_W {
                SPI2LPEN_W { w: self }
            }
            #[doc = "Bit 11 - Window watchdog clock enable during Sleep mode"]
            #[inline(always)]
            pub fn wwdglpen(&mut self) -> WWDGLPEN_W {
                WWDGLPEN_W { w: self }
            }
            #[doc = "Bit 9 - LCD clock enable during Sleep mode"]
            #[inline(always)]
            pub fn lcdlpen(&mut self) -> LCDLPEN_W {
                LCDLPEN_W { w: self }
            }
            #[doc = "Bit 5 - Timer 7 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim7lpen(&mut self) -> TIM7LPEN_W {
                TIM7LPEN_W { w: self }
            }
            #[doc = "Bit 4 - Timer 6 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim6lpen(&mut self) -> TIM6LPEN_W {
                TIM6LPEN_W { w: self }
            }
            #[doc = "Bit 2 - Timer 4 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim4lpen(&mut self) -> TIM4LPEN_W {
                TIM4LPEN_W { w: self }
            }
            #[doc = "Bit 1 - Timer 3 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim3lpen(&mut self) -> TIM3LPEN_W {
                TIM3LPEN_W { w: self }
            }
            #[doc = "Bit 0 - Timer 2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim2lpen(&mut self) -> TIM2LPEN_W {
                TIM2LPEN_W { w: self }
            }
        }
    }
    #[doc = "Control/status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr](csr) module"]
    pub type CSR = crate::Reg<u32, _CSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CSR;
    #[doc = "`read()` method returns [csr::R](csr::R) reader structure"]
    impl crate::Readable for CSR {}
    #[doc = "`write(|w| ..)` method takes [csr::W](csr::W) writer structure"]
    impl crate::Writable for CSR {}
    #[doc = "Control/status register"]
    pub mod csr {
        #[doc = "Reader of register CSR"]
        pub type R = crate::R<u32, super::CSR>;
        #[doc = "Writer for register CSR"]
        pub type W = crate::W<u32, super::CSR>;
        #[doc = "Register CSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LPWRSTF`"]
        pub type LPWRSTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPWRSTF`"]
        pub struct LPWRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPWRSTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `WWDGRSTF`"]
        pub type WWDGRSTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WWDGRSTF`"]
        pub struct WWDGRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WWDGRSTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IWDGRSTF`"]
        pub type IWDGRSTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IWDGRSTF`"]
        pub struct IWDGRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IWDGRSTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `SFTRSTF`"]
        pub type SFTRSTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SFTRSTF`"]
        pub struct SFTRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SFTRSTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `PORRSTF`"]
        pub type PORRSTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PORRSTF`"]
        pub struct PORRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORRSTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `PINRSTF`"]
        pub type PINRSTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PINRSTF`"]
        pub struct PINRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINRSTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `RMVF`"]
        pub type RMVF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RMVF`"]
        pub struct RMVF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RMVF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `RTCRST`"]
        pub type RTCRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCRST`"]
        pub struct RTCRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `RTCEN`"]
        pub type RTCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCEN`"]
        pub struct RTCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `RTCSEL`"]
        pub type RTCSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RTCSEL`"]
        pub struct RTCSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `LSEBYP`"]
        pub type LSEBYP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSEBYP`"]
        pub struct LSEBYP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSEBYP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `LSERDY`"]
        pub type LSERDY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `LSEON`"]
        pub type LSEON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSEON`"]
        pub struct LSEON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSEON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `LSIRDY`"]
        pub type LSIRDY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `LSION`"]
        pub type LSION_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSION`"]
        pub struct LSION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSION_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - Low-power reset flag"]
            #[inline(always)]
            pub fn lpwrstf(&self) -> LPWRSTF_R {
                LPWRSTF_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Window watchdog reset flag"]
            #[inline(always)]
            pub fn wwdgrstf(&self) -> WWDGRSTF_R {
                WWDGRSTF_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Independent watchdog reset flag"]
            #[inline(always)]
            pub fn iwdgrstf(&self) -> IWDGRSTF_R {
                IWDGRSTF_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Software reset flag"]
            #[inline(always)]
            pub fn sftrstf(&self) -> SFTRSTF_R {
                SFTRSTF_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - POR/PDR reset flag"]
            #[inline(always)]
            pub fn porrstf(&self) -> PORRSTF_R {
                PORRSTF_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - PIN reset flag"]
            #[inline(always)]
            pub fn pinrstf(&self) -> PINRSTF_R {
                PINRSTF_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Remove reset flag"]
            #[inline(always)]
            pub fn rmvf(&self) -> RMVF_R {
                RMVF_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - RTC software reset"]
            #[inline(always)]
            pub fn rtcrst(&self) -> RTCRST_R {
                RTCRST_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - RTC clock enable"]
            #[inline(always)]
            pub fn rtcen(&self) -> RTCEN_R {
                RTCEN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - RTC and LCD clock source selection"]
            #[inline(always)]
            pub fn rtcsel(&self) -> RTCSEL_R {
                RTCSEL_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bit 10 - External low-speed oscillator bypass"]
            #[inline(always)]
            pub fn lsebyp(&self) -> LSEBYP_R {
                LSEBYP_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - External low-speed oscillator ready"]
            #[inline(always)]
            pub fn lserdy(&self) -> LSERDY_R {
                LSERDY_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - External low-speed oscillator enable"]
            #[inline(always)]
            pub fn lseon(&self) -> LSEON_R {
                LSEON_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Internal low-speed oscillator ready"]
            #[inline(always)]
            pub fn lsirdy(&self) -> LSIRDY_R {
                LSIRDY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Internal low-speed oscillator enable"]
            #[inline(always)]
            pub fn lsion(&self) -> LSION_R {
                LSION_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - Low-power reset flag"]
            #[inline(always)]
            pub fn lpwrstf(&mut self) -> LPWRSTF_W {
                LPWRSTF_W { w: self }
            }
            #[doc = "Bit 30 - Window watchdog reset flag"]
            #[inline(always)]
            pub fn wwdgrstf(&mut self) -> WWDGRSTF_W {
                WWDGRSTF_W { w: self }
            }
            #[doc = "Bit 29 - Independent watchdog reset flag"]
            #[inline(always)]
            pub fn iwdgrstf(&mut self) -> IWDGRSTF_W {
                IWDGRSTF_W { w: self }
            }
            #[doc = "Bit 28 - Software reset flag"]
            #[inline(always)]
            pub fn sftrstf(&mut self) -> SFTRSTF_W {
                SFTRSTF_W { w: self }
            }
            #[doc = "Bit 27 - POR/PDR reset flag"]
            #[inline(always)]
            pub fn porrstf(&mut self) -> PORRSTF_W {
                PORRSTF_W { w: self }
            }
            #[doc = "Bit 26 - PIN reset flag"]
            #[inline(always)]
            pub fn pinrstf(&mut self) -> PINRSTF_W {
                PINRSTF_W { w: self }
            }
            #[doc = "Bit 24 - Remove reset flag"]
            #[inline(always)]
            pub fn rmvf(&mut self) -> RMVF_W {
                RMVF_W { w: self }
            }
            #[doc = "Bit 23 - RTC software reset"]
            #[inline(always)]
            pub fn rtcrst(&mut self) -> RTCRST_W {
                RTCRST_W { w: self }
            }
            #[doc = "Bit 22 - RTC clock enable"]
            #[inline(always)]
            pub fn rtcen(&mut self) -> RTCEN_W {
                RTCEN_W { w: self }
            }
            #[doc = "Bits 16:17 - RTC and LCD clock source selection"]
            #[inline(always)]
            pub fn rtcsel(&mut self) -> RTCSEL_W {
                RTCSEL_W { w: self }
            }
            #[doc = "Bit 10 - External low-speed oscillator bypass"]
            #[inline(always)]
            pub fn lsebyp(&mut self) -> LSEBYP_W {
                LSEBYP_W { w: self }
            }
            #[doc = "Bit 8 - External low-speed oscillator enable"]
            #[inline(always)]
            pub fn lseon(&mut self) -> LSEON_W {
                LSEON_W { w: self }
            }
            #[doc = "Bit 0 - Internal low-speed oscillator enable"]
            #[inline(always)]
            pub fn lsion(&mut self) -> LSION_W {
                LSION_W { w: self }
            }
        }
    }
}
#[doc = "Routing interface"]
pub struct RI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RI {}
impl RI {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ri::RegisterBlock {
        0x4000_7c04 as *const _
    }
}
impl Deref for RI {
    type Target = ri::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*RI::ptr() }
    }
}
#[doc = "Routing interface"]
pub mod ri {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved0: [u8; 4usize],
        #[doc = "0x04 - RI input capture register"]
        pub icr: ICR,
        #[doc = "0x08 - RI analog switches control register 1"]
        pub ascr1: ASCR1,
        #[doc = "0x0c - RI analog switches control register 2"]
        pub ascr2: ASCR2,
        #[doc = "0x10 - RI hysteresis control register 1"]
        pub hyscr1: HYSCR1,
        #[doc = "0x14 - RI hysteresis control register 2"]
        pub hyscr2: HYSCR2,
        #[doc = "0x18 - RI hysteresis control register 3"]
        pub hyscr3: HYSCR3,
        #[doc = "0x1c - Hysteresis control register"]
        pub hyscr4: HYSCR4,
    }
    #[doc = "RI input capture register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](icr) module"]
    pub type ICR = crate::Reg<u32, _ICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICR;
    #[doc = "`read()` method returns [icr::R](icr::R) reader structure"]
    impl crate::Readable for ICR {}
    #[doc = "`write(|w| ..)` method takes [icr::W](icr::W) writer structure"]
    impl crate::Writable for ICR {}
    #[doc = "RI input capture register"]
    pub mod icr {
        #[doc = "Reader of register ICR"]
        pub type R = crate::R<u32, super::ICR>;
        #[doc = "Writer for register ICR"]
        pub type W = crate::W<u32, super::ICR>;
        #[doc = "Register ICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC4`"]
        pub type IC4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IC4`"]
        pub struct IC4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `IC3`"]
        pub type IC3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IC3`"]
        pub struct IC3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `IC2`"]
        pub type IC2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IC2`"]
        pub struct IC2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `IC1`"]
        pub type IC1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IC1`"]
        pub struct IC1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `TIM`"]
        pub type TIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TIM`"]
        pub struct TIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `IC4IOS`"]
        pub type IC4IOS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC4IOS`"]
        pub struct IC4IOS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC4IOS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IC3IOS`"]
        pub type IC3IOS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC3IOS`"]
        pub struct IC3IOS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC3IOS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `IC2IOS`"]
        pub type IC2IOS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC2IOS`"]
        pub struct IC2IOS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2IOS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC1IOS`"]
        pub type IC1IOS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1IOS`"]
        pub struct IC1IOS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1IOS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 21 - IC4"]
            #[inline(always)]
            pub fn ic4(&self) -> IC4_R {
                IC4_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - IC3"]
            #[inline(always)]
            pub fn ic3(&self) -> IC3_R {
                IC3_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - IC2"]
            #[inline(always)]
            pub fn ic2(&self) -> IC2_R {
                IC2_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - IC1"]
            #[inline(always)]
            pub fn ic1(&self) -> IC1_R {
                IC1_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - Timer select bits"]
            #[inline(always)]
            pub fn tim(&self) -> TIM_R {
                TIM_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 12:15 - Input capture 4 select bits"]
            #[inline(always)]
            pub fn ic4ios(&self) -> IC4IOS_R {
                IC4IOS_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Input capture 3 select bits"]
            #[inline(always)]
            pub fn ic3ios(&self) -> IC3IOS_R {
                IC3IOS_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 2 select bits"]
            #[inline(always)]
            pub fn ic2ios(&self) -> IC2IOS_R {
                IC2IOS_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Input capture 1 select bits"]
            #[inline(always)]
            pub fn ic1ios(&self) -> IC1IOS_R {
                IC1IOS_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 21 - IC4"]
            #[inline(always)]
            pub fn ic4(&mut self) -> IC4_W {
                IC4_W { w: self }
            }
            #[doc = "Bit 20 - IC3"]
            #[inline(always)]
            pub fn ic3(&mut self) -> IC3_W {
                IC3_W { w: self }
            }
            #[doc = "Bit 19 - IC2"]
            #[inline(always)]
            pub fn ic2(&mut self) -> IC2_W {
                IC2_W { w: self }
            }
            #[doc = "Bit 18 - IC1"]
            #[inline(always)]
            pub fn ic1(&mut self) -> IC1_W {
                IC1_W { w: self }
            }
            #[doc = "Bits 16:17 - Timer select bits"]
            #[inline(always)]
            pub fn tim(&mut self) -> TIM_W {
                TIM_W { w: self }
            }
            #[doc = "Bits 12:15 - Input capture 4 select bits"]
            #[inline(always)]
            pub fn ic4ios(&mut self) -> IC4IOS_W {
                IC4IOS_W { w: self }
            }
            #[doc = "Bits 8:11 - Input capture 3 select bits"]
            #[inline(always)]
            pub fn ic3ios(&mut self) -> IC3IOS_W {
                IC3IOS_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 2 select bits"]
            #[inline(always)]
            pub fn ic2ios(&mut self) -> IC2IOS_W {
                IC2IOS_W { w: self }
            }
            #[doc = "Bits 0:3 - Input capture 1 select bits"]
            #[inline(always)]
            pub fn ic1ios(&mut self) -> IC1IOS_W {
                IC1IOS_W { w: self }
            }
        }
    }
    #[doc = "RI analog switches control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ascr1](ascr1) module"]
    pub type ASCR1 = crate::Reg<u32, _ASCR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ASCR1;
    #[doc = "`read()` method returns [ascr1::R](ascr1::R) reader structure"]
    impl crate::Readable for ASCR1 {}
    #[doc = "`write(|w| ..)` method takes [ascr1::W](ascr1::W) writer structure"]
    impl crate::Writable for ASCR1 {}
    #[doc = "RI analog switches control register 1"]
    pub mod ascr1 {
        #[doc = "Reader of register ASCR1"]
        pub type R = crate::R<u32, super::ASCR1>;
        #[doc = "Writer for register ASCR1"]
        pub type W = crate::W<u32, super::ASCR1>;
        #[doc = "Register ASCR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::ASCR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SCM`"]
        pub type SCM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SCM`"]
        pub struct SCM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `CH30GR11_4`"]
        pub type CH30GR11_4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH30GR11_4`"]
        pub struct CH30GR11_4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH30GR11_4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `CH29GR11_3`"]
        pub type CH29GR11_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH29GR11_3`"]
        pub struct CH29GR11_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH29GR11_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `CH28GR11_2`"]
        pub type CH28GR11_2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH28GR11_2`"]
        pub struct CH28GR11_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH28GR11_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `CH27GR11_1`"]
        pub type CH27GR11_1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH27GR11_1`"]
        pub struct CH27GR11_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH27GR11_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `VCOMP`"]
        pub type VCOMP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VCOMP`"]
        pub struct VCOMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VCOMP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `CH25`"]
        pub type CH25_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH25`"]
        pub struct CH25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `CH24`"]
        pub type CH24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH24`"]
        pub struct CH24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `CH23`"]
        pub type CH23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH23`"]
        pub struct CH23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `CH22`"]
        pub type CH22_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH22`"]
        pub struct CH22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `CH21GR7_4`"]
        pub type CH21GR7_4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH21GR7_4`"]
        pub struct CH21GR7_4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH21GR7_4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `CH20GR7_3`"]
        pub type CH20GR7_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH20GR7_3`"]
        pub struct CH20GR7_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH20GR7_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `CH19GR7_2`"]
        pub type CH19GR7_2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH19GR7_2`"]
        pub struct CH19GR7_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH19GR7_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `CH18GR7_1`"]
        pub type CH18GR7_1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH18GR7_1`"]
        pub struct CH18GR7_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH18GR7_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `CH31GR7_1`"]
        pub type CH31GR7_1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH31GR7_1`"]
        pub struct CH31GR7_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH31GR7_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CH15GR9_2`"]
        pub type CH15GR9_2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH15GR9_2`"]
        pub struct CH15GR9_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH15GR9_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `CH14GR9_1`"]
        pub type CH14GR9_1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH14GR9_1`"]
        pub struct CH14GR9_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH14GR9_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CH13GR8_4`"]
        pub type CH13GR8_4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH13GR8_4`"]
        pub struct CH13GR8_4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH13GR8_4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `CH12GR8_3`"]
        pub type CH12GR8_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH12GR8_3`"]
        pub struct CH12GR8_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH12GR8_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `CH11GR8_2`"]
        pub type CH11GR8_2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH11GR8_2`"]
        pub struct CH11GR8_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH11GR8_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CH10GR8_1`"]
        pub type CH10GR8_1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH10GR8_1`"]
        pub struct CH10GR8_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH10GR8_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CH9GR3_2`"]
        pub type CH9GR3_2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH9GR3_2`"]
        pub struct CH9GR3_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH9GR3_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `CH8GR3_1`"]
        pub type CH8GR3_1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH8GR3_1`"]
        pub struct CH8GR3_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH8GR3_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CH7GR2_2`"]
        pub type CH7GR2_2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH7GR2_2`"]
        pub struct CH7GR2_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH7GR2_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CH6GR2_1`"]
        pub type CH6GR2_1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH6GR2_1`"]
        pub struct CH6GR2_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH6GR2_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `COMP1_SW1`"]
        pub type COMP1_SW1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMP1_SW1`"]
        pub struct COMP1_SW1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMP1_SW1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `CH31GR11_5`"]
        pub type CH31GR11_5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH31GR11_5`"]
        pub struct CH31GR11_5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH31GR11_5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CH3GR1_4`"]
        pub type CH3GR1_4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH3GR1_4`"]
        pub struct CH3GR1_4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3GR1_4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CH2GR1_3`"]
        pub type CH2GR1_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH2GR1_3`"]
        pub struct CH2GR1_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2GR1_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CH1GR1_2`"]
        pub type CH1GR1_2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH1GR1_2`"]
        pub struct CH1GR1_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1GR1_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CH0GR1_1`"]
        pub type CH0GR1_1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH0GR1_1`"]
        pub struct CH0GR1_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0GR1_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - Switch control mode"]
            #[inline(always)]
            pub fn scm(&self) -> SCM_R {
                SCM_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Analog switch control"]
            #[inline(always)]
            pub fn ch30gr11_4(&self) -> CH30GR11_4_R {
                CH30GR11_4_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Analog switch control"]
            #[inline(always)]
            pub fn ch29gr11_3(&self) -> CH29GR11_3_R {
                CH29GR11_3_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Analog switch control"]
            #[inline(always)]
            pub fn ch28gr11_2(&self) -> CH28GR11_2_R {
                CH28GR11_2_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Analog switch control"]
            #[inline(always)]
            pub fn ch27gr11_1(&self) -> CH27GR11_1_R {
                CH27GR11_1_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - ADC analog switch selection for internal node to comparator 1"]
            #[inline(always)]
            pub fn vcomp(&self) -> VCOMP_R {
                VCOMP_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Analog I/O switch control of channel CH25"]
            #[inline(always)]
            pub fn ch25(&self) -> CH25_R {
                CH25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Analog I/O switch control of channel CH24"]
            #[inline(always)]
            pub fn ch24(&self) -> CH24_R {
                CH24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Analog I/O switch control of channel CH23"]
            #[inline(always)]
            pub fn ch23(&self) -> CH23_R {
                CH23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Analog I/O switch control of channel CH22"]
            #[inline(always)]
            pub fn ch22(&self) -> CH22_R {
                CH22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Analog switch control"]
            #[inline(always)]
            pub fn ch21gr7_4(&self) -> CH21GR7_4_R {
                CH21GR7_4_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Analog switch control"]
            #[inline(always)]
            pub fn ch20gr7_3(&self) -> CH20GR7_3_R {
                CH20GR7_3_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Analog switch control"]
            #[inline(always)]
            pub fn ch19gr7_2(&self) -> CH19GR7_2_R {
                CH19GR7_2_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Analog switch control"]
            #[inline(always)]
            pub fn ch18gr7_1(&self) -> CH18GR7_1_R {
                CH18GR7_1_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Analog switch control"]
            #[inline(always)]
            pub fn ch31gr7_1(&self) -> CH31GR7_1_R {
                CH31GR7_1_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Analog switch control"]
            #[inline(always)]
            pub fn ch15gr9_2(&self) -> CH15GR9_2_R {
                CH15GR9_2_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Analog switch control"]
            #[inline(always)]
            pub fn ch14gr9_1(&self) -> CH14GR9_1_R {
                CH14GR9_1_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Analog switch control"]
            #[inline(always)]
            pub fn ch13gr8_4(&self) -> CH13GR8_4_R {
                CH13GR8_4_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Analog switch control"]
            #[inline(always)]
            pub fn ch12gr8_3(&self) -> CH12GR8_3_R {
                CH12GR8_3_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Analog switch control"]
            #[inline(always)]
            pub fn ch11gr8_2(&self) -> CH11GR8_2_R {
                CH11GR8_2_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Analog switch control"]
            #[inline(always)]
            pub fn ch10gr8_1(&self) -> CH10GR8_1_R {
                CH10GR8_1_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Analog switch control"]
            #[inline(always)]
            pub fn ch9gr3_2(&self) -> CH9GR3_2_R {
                CH9GR3_2_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Analog switch control"]
            #[inline(always)]
            pub fn ch8gr3_1(&self) -> CH8GR3_1_R {
                CH8GR3_1_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Analog switch control"]
            #[inline(always)]
            pub fn ch7gr2_2(&self) -> CH7GR2_2_R {
                CH7GR2_2_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Analog switch control"]
            #[inline(always)]
            pub fn ch6gr2_1(&self) -> CH6GR2_1_R {
                CH6GR2_1_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Comparator 1 analog switch"]
            #[inline(always)]
            pub fn comp1_sw1(&self) -> COMP1_SW1_R {
                COMP1_SW1_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Analog switch control"]
            #[inline(always)]
            pub fn ch31gr11_5(&self) -> CH31GR11_5_R {
                CH31GR11_5_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Analog switch control"]
            #[inline(always)]
            pub fn ch3gr1_4(&self) -> CH3GR1_4_R {
                CH3GR1_4_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Analog switch control"]
            #[inline(always)]
            pub fn ch2gr1_3(&self) -> CH2GR1_3_R {
                CH2GR1_3_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Analog switch control"]
            #[inline(always)]
            pub fn ch1gr1_2(&self) -> CH1GR1_2_R {
                CH1GR1_2_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Analog switch control"]
            #[inline(always)]
            pub fn ch0gr1_1(&self) -> CH0GR1_1_R {
                CH0GR1_1_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - Switch control mode"]
            #[inline(always)]
            pub fn scm(&mut self) -> SCM_W {
                SCM_W { w: self }
            }
            #[doc = "Bit 30 - Analog switch control"]
            #[inline(always)]
            pub fn ch30gr11_4(&mut self) -> CH30GR11_4_W {
                CH30GR11_4_W { w: self }
            }
            #[doc = "Bit 29 - Analog switch control"]
            #[inline(always)]
            pub fn ch29gr11_3(&mut self) -> CH29GR11_3_W {
                CH29GR11_3_W { w: self }
            }
            #[doc = "Bit 28 - Analog switch control"]
            #[inline(always)]
            pub fn ch28gr11_2(&mut self) -> CH28GR11_2_W {
                CH28GR11_2_W { w: self }
            }
            #[doc = "Bit 27 - Analog switch control"]
            #[inline(always)]
            pub fn ch27gr11_1(&mut self) -> CH27GR11_1_W {
                CH27GR11_1_W { w: self }
            }
            #[doc = "Bit 26 - ADC analog switch selection for internal node to comparator 1"]
            #[inline(always)]
            pub fn vcomp(&mut self) -> VCOMP_W {
                VCOMP_W { w: self }
            }
            #[doc = "Bit 25 - Analog I/O switch control of channel CH25"]
            #[inline(always)]
            pub fn ch25(&mut self) -> CH25_W {
                CH25_W { w: self }
            }
            #[doc = "Bit 24 - Analog I/O switch control of channel CH24"]
            #[inline(always)]
            pub fn ch24(&mut self) -> CH24_W {
                CH24_W { w: self }
            }
            #[doc = "Bit 23 - Analog I/O switch control of channel CH23"]
            #[inline(always)]
            pub fn ch23(&mut self) -> CH23_W {
                CH23_W { w: self }
            }
            #[doc = "Bit 22 - Analog I/O switch control of channel CH22"]
            #[inline(always)]
            pub fn ch22(&mut self) -> CH22_W {
                CH22_W { w: self }
            }
            #[doc = "Bit 21 - Analog switch control"]
            #[inline(always)]
            pub fn ch21gr7_4(&mut self) -> CH21GR7_4_W {
                CH21GR7_4_W { w: self }
            }
            #[doc = "Bit 20 - Analog switch control"]
            #[inline(always)]
            pub fn ch20gr7_3(&mut self) -> CH20GR7_3_W {
                CH20GR7_3_W { w: self }
            }
            #[doc = "Bit 19 - Analog switch control"]
            #[inline(always)]
            pub fn ch19gr7_2(&mut self) -> CH19GR7_2_W {
                CH19GR7_2_W { w: self }
            }
            #[doc = "Bit 18 - Analog switch control"]
            #[inline(always)]
            pub fn ch18gr7_1(&mut self) -> CH18GR7_1_W {
                CH18GR7_1_W { w: self }
            }
            #[doc = "Bit 16 - Analog switch control"]
            #[inline(always)]
            pub fn ch31gr7_1(&mut self) -> CH31GR7_1_W {
                CH31GR7_1_W { w: self }
            }
            #[doc = "Bit 15 - Analog switch control"]
            #[inline(always)]
            pub fn ch15gr9_2(&mut self) -> CH15GR9_2_W {
                CH15GR9_2_W { w: self }
            }
            #[doc = "Bit 14 - Analog switch control"]
            #[inline(always)]
            pub fn ch14gr9_1(&mut self) -> CH14GR9_1_W {
                CH14GR9_1_W { w: self }
            }
            #[doc = "Bit 13 - Analog switch control"]
            #[inline(always)]
            pub fn ch13gr8_4(&mut self) -> CH13GR8_4_W {
                CH13GR8_4_W { w: self }
            }
            #[doc = "Bit 12 - Analog switch control"]
            #[inline(always)]
            pub fn ch12gr8_3(&mut self) -> CH12GR8_3_W {
                CH12GR8_3_W { w: self }
            }
            #[doc = "Bit 11 - Analog switch control"]
            #[inline(always)]
            pub fn ch11gr8_2(&mut self) -> CH11GR8_2_W {
                CH11GR8_2_W { w: self }
            }
            #[doc = "Bit 10 - Analog switch control"]
            #[inline(always)]
            pub fn ch10gr8_1(&mut self) -> CH10GR8_1_W {
                CH10GR8_1_W { w: self }
            }
            #[doc = "Bit 9 - Analog switch control"]
            #[inline(always)]
            pub fn ch9gr3_2(&mut self) -> CH9GR3_2_W {
                CH9GR3_2_W { w: self }
            }
            #[doc = "Bit 8 - Analog switch control"]
            #[inline(always)]
            pub fn ch8gr3_1(&mut self) -> CH8GR3_1_W {
                CH8GR3_1_W { w: self }
            }
            #[doc = "Bit 7 - Analog switch control"]
            #[inline(always)]
            pub fn ch7gr2_2(&mut self) -> CH7GR2_2_W {
                CH7GR2_2_W { w: self }
            }
            #[doc = "Bit 6 - Analog switch control"]
            #[inline(always)]
            pub fn ch6gr2_1(&mut self) -> CH6GR2_1_W {
                CH6GR2_1_W { w: self }
            }
            #[doc = "Bit 5 - Comparator 1 analog switch"]
            #[inline(always)]
            pub fn comp1_sw1(&mut self) -> COMP1_SW1_W {
                COMP1_SW1_W { w: self }
            }
            #[doc = "Bit 4 - Analog switch control"]
            #[inline(always)]
            pub fn ch31gr11_5(&mut self) -> CH31GR11_5_W {
                CH31GR11_5_W { w: self }
            }
            #[doc = "Bit 3 - Analog switch control"]
            #[inline(always)]
            pub fn ch3gr1_4(&mut self) -> CH3GR1_4_W {
                CH3GR1_4_W { w: self }
            }
            #[doc = "Bit 2 - Analog switch control"]
            #[inline(always)]
            pub fn ch2gr1_3(&mut self) -> CH2GR1_3_W {
                CH2GR1_3_W { w: self }
            }
            #[doc = "Bit 1 - Analog switch control"]
            #[inline(always)]
            pub fn ch1gr1_2(&mut self) -> CH1GR1_2_W {
                CH1GR1_2_W { w: self }
            }
            #[doc = "Bit 0 - Analog switch control"]
            #[inline(always)]
            pub fn ch0gr1_1(&mut self) -> CH0GR1_1_W {
                CH0GR1_1_W { w: self }
            }
        }
    }
    #[doc = "RI analog switches control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ascr2](ascr2) module"]
    pub type ASCR2 = crate::Reg<u32, _ASCR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ASCR2;
    #[doc = "`read()` method returns [ascr2::R](ascr2::R) reader structure"]
    impl crate::Readable for ASCR2 {}
    #[doc = "`write(|w| ..)` method takes [ascr2::W](ascr2::W) writer structure"]
    impl crate::Writable for ASCR2 {}
    #[doc = "RI analog switches control register 2"]
    pub mod ascr2 {
        #[doc = "Reader of register ASCR2"]
        pub type R = crate::R<u32, super::ASCR2>;
        #[doc = "Writer for register ASCR2"]
        pub type W = crate::W<u32, super::ASCR2>;
        #[doc = "Register ASCR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::ASCR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `GR5_4`"]
        pub type GR5_4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR5_4`"]
        pub struct GR5_4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR5_4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `GR6_4`"]
        pub type GR6_4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR6_4`"]
        pub struct GR6_4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR6_4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `GR6_3`"]
        pub type GR6_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR6_3`"]
        pub struct GR6_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR6_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `GR7_7`"]
        pub type GR7_7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR7_7`"]
        pub struct GR7_7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR7_7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `GR7_6`"]
        pub type GR7_6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR7_6`"]
        pub struct GR7_6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR7_6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `GR7_5`"]
        pub type GR7_5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR7_5`"]
        pub struct GR7_5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR7_5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `GR2_5`"]
        pub type GR2_5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR2_5`"]
        pub struct GR2_5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR2_5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `GR2_4`"]
        pub type GR2_4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR2_4`"]
        pub struct GR2_4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR2_4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `GR2_3`"]
        pub type GR2_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR2_3`"]
        pub struct GR2_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR2_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `GR9_4`"]
        pub type GR9_4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR9_4`"]
        pub struct GR9_4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR9_4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `GR9_3`"]
        pub type GR9_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR9_3`"]
        pub struct GR9_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR9_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `GR3_5`"]
        pub type GR3_5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR3_5`"]
        pub struct GR3_5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR3_5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `GR3_4`"]
        pub type GR3_4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR3_4`"]
        pub struct GR3_4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR3_4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `GR3_3`"]
        pub type GR3_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR3_3`"]
        pub struct GR3_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR3_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `GR4_3`"]
        pub type GR4_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR4_3`"]
        pub struct GR4_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR4_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `GR4_2`"]
        pub type GR4_2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR4_2`"]
        pub struct GR4_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR4_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `GR4_1`"]
        pub type GR4_1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR4_1`"]
        pub struct GR4_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR4_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `GR5_3`"]
        pub type GR5_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR5_3`"]
        pub struct GR5_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR5_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `GR5_2`"]
        pub type GR5_2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR5_2`"]
        pub struct GR5_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR5_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `GR5_1`"]
        pub type GR5_1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR5_1`"]
        pub struct GR5_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR5_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `GR6_2`"]
        pub type GR6_2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR6_2`"]
        pub struct GR6_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR6_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `GR6_1`"]
        pub type GR6_1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR6_1`"]
        pub struct GR6_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR6_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `GR10_4`"]
        pub type GR10_4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR10_4`"]
        pub struct GR10_4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR10_4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `GR10_3`"]
        pub type GR10_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR10_3`"]
        pub struct GR10_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR10_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `GR10_2`"]
        pub type GR10_2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR10_2`"]
        pub struct GR10_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR10_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `GR10_1`"]
        pub type GR10_1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GR10_1`"]
        pub struct GR10_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GR10_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 29 - GR5_4 analog switch control"]
            #[inline(always)]
            pub fn gr5_4(&self) -> GR5_4_R {
                GR5_4_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - GR6_4 analog switch control"]
            #[inline(always)]
            pub fn gr6_4(&self) -> GR6_4_R {
                GR6_4_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - GR6_3 analog switch control"]
            #[inline(always)]
            pub fn gr6_3(&self) -> GR6_3_R {
                GR6_3_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - GR7_7 analog switch control"]
            #[inline(always)]
            pub fn gr7_7(&self) -> GR7_7_R {
                GR7_7_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - GR7_6 analog switch control"]
            #[inline(always)]
            pub fn gr7_6(&self) -> GR7_6_R {
                GR7_6_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - GR7_5 analog switch control"]
            #[inline(always)]
            pub fn gr7_5(&self) -> GR7_5_R {
                GR7_5_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - GR2_5 analog switch control"]
            #[inline(always)]
            pub fn gr2_5(&self) -> GR2_5_R {
                GR2_5_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - GR2_4 analog switch control"]
            #[inline(always)]
            pub fn gr2_4(&self) -> GR2_4_R {
                GR2_4_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - GR2_3 analog switch control"]
            #[inline(always)]
            pub fn gr2_3(&self) -> GR2_3_R {
                GR2_3_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - GR9_4 analog switch control"]
            #[inline(always)]
            pub fn gr9_4(&self) -> GR9_4_R {
                GR9_4_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - GR9_3 analog switch control"]
            #[inline(always)]
            pub fn gr9_3(&self) -> GR9_3_R {
                GR9_3_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - GR3_5 analog switch control"]
            #[inline(always)]
            pub fn gr3_5(&self) -> GR3_5_R {
                GR3_5_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - GR3_4 analog switch control"]
            #[inline(always)]
            pub fn gr3_4(&self) -> GR3_4_R {
                GR3_4_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - GR3_3 analog switch control"]
            #[inline(always)]
            pub fn gr3_3(&self) -> GR3_3_R {
                GR3_3_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 11 - GR4_3 analog switch control"]
            #[inline(always)]
            pub fn gr4_3(&self) -> GR4_3_R {
                GR4_3_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - GR4_2 analog switch control"]
            #[inline(always)]
            pub fn gr4_2(&self) -> GR4_2_R {
                GR4_2_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - GR4_1 analog switch control"]
            #[inline(always)]
            pub fn gr4_1(&self) -> GR4_1_R {
                GR4_1_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - GR5_3 analog switch control"]
            #[inline(always)]
            pub fn gr5_3(&self) -> GR5_3_R {
                GR5_3_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - GR5_2 analog switch control"]
            #[inline(always)]
            pub fn gr5_2(&self) -> GR5_2_R {
                GR5_2_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - GR5_1 analog switch control"]
            #[inline(always)]
            pub fn gr5_1(&self) -> GR5_1_R {
                GR5_1_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - GR6_2 analog switch control"]
            #[inline(always)]
            pub fn gr6_2(&self) -> GR6_2_R {
                GR6_2_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - GR6_1 analog switch control"]
            #[inline(always)]
            pub fn gr6_1(&self) -> GR6_1_R {
                GR6_1_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - GR10_4 analog switch control"]
            #[inline(always)]
            pub fn gr10_4(&self) -> GR10_4_R {
                GR10_4_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - GR10_3 analog switch control"]
            #[inline(always)]
            pub fn gr10_3(&self) -> GR10_3_R {
                GR10_3_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - GR10_2 analog switch control"]
            #[inline(always)]
            pub fn gr10_2(&self) -> GR10_2_R {
                GR10_2_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - GR10_1 analog switch control"]
            #[inline(always)]
            pub fn gr10_1(&self) -> GR10_1_R {
                GR10_1_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 29 - GR5_4 analog switch control"]
            #[inline(always)]
            pub fn gr5_4(&mut self) -> GR5_4_W {
                GR5_4_W { w: self }
            }
            #[doc = "Bit 28 - GR6_4 analog switch control"]
            #[inline(always)]
            pub fn gr6_4(&mut self) -> GR6_4_W {
                GR6_4_W { w: self }
            }
            #[doc = "Bit 27 - GR6_3 analog switch control"]
            #[inline(always)]
            pub fn gr6_3(&mut self) -> GR6_3_W {
                GR6_3_W { w: self }
            }
            #[doc = "Bit 26 - GR7_7 analog switch control"]
            #[inline(always)]
            pub fn gr7_7(&mut self) -> GR7_7_W {
                GR7_7_W { w: self }
            }
            #[doc = "Bit 25 - GR7_6 analog switch control"]
            #[inline(always)]
            pub fn gr7_6(&mut self) -> GR7_6_W {
                GR7_6_W { w: self }
            }
            #[doc = "Bit 24 - GR7_5 analog switch control"]
            #[inline(always)]
            pub fn gr7_5(&mut self) -> GR7_5_W {
                GR7_5_W { w: self }
            }
            #[doc = "Bit 23 - GR2_5 analog switch control"]
            #[inline(always)]
            pub fn gr2_5(&mut self) -> GR2_5_W {
                GR2_5_W { w: self }
            }
            #[doc = "Bit 22 - GR2_4 analog switch control"]
            #[inline(always)]
            pub fn gr2_4(&mut self) -> GR2_4_W {
                GR2_4_W { w: self }
            }
            #[doc = "Bit 21 - GR2_3 analog switch control"]
            #[inline(always)]
            pub fn gr2_3(&mut self) -> GR2_3_W {
                GR2_3_W { w: self }
            }
            #[doc = "Bit 20 - GR9_4 analog switch control"]
            #[inline(always)]
            pub fn gr9_4(&mut self) -> GR9_4_W {
                GR9_4_W { w: self }
            }
            #[doc = "Bit 19 - GR9_3 analog switch control"]
            #[inline(always)]
            pub fn gr9_3(&mut self) -> GR9_3_W {
                GR9_3_W { w: self }
            }
            #[doc = "Bit 18 - GR3_5 analog switch control"]
            #[inline(always)]
            pub fn gr3_5(&mut self) -> GR3_5_W {
                GR3_5_W { w: self }
            }
            #[doc = "Bit 17 - GR3_4 analog switch control"]
            #[inline(always)]
            pub fn gr3_4(&mut self) -> GR3_4_W {
                GR3_4_W { w: self }
            }
            #[doc = "Bit 16 - GR3_3 analog switch control"]
            #[inline(always)]
            pub fn gr3_3(&mut self) -> GR3_3_W {
                GR3_3_W { w: self }
            }
            #[doc = "Bit 11 - GR4_3 analog switch control"]
            #[inline(always)]
            pub fn gr4_3(&mut self) -> GR4_3_W {
                GR4_3_W { w: self }
            }
            #[doc = "Bit 10 - GR4_2 analog switch control"]
            #[inline(always)]
            pub fn gr4_2(&mut self) -> GR4_2_W {
                GR4_2_W { w: self }
            }
            #[doc = "Bit 9 - GR4_1 analog switch control"]
            #[inline(always)]
            pub fn gr4_1(&mut self) -> GR4_1_W {
                GR4_1_W { w: self }
            }
            #[doc = "Bit 8 - GR5_3 analog switch control"]
            #[inline(always)]
            pub fn gr5_3(&mut self) -> GR5_3_W {
                GR5_3_W { w: self }
            }
            #[doc = "Bit 7 - GR5_2 analog switch control"]
            #[inline(always)]
            pub fn gr5_2(&mut self) -> GR5_2_W {
                GR5_2_W { w: self }
            }
            #[doc = "Bit 6 - GR5_1 analog switch control"]
            #[inline(always)]
            pub fn gr5_1(&mut self) -> GR5_1_W {
                GR5_1_W { w: self }
            }
            #[doc = "Bit 5 - GR6_2 analog switch control"]
            #[inline(always)]
            pub fn gr6_2(&mut self) -> GR6_2_W {
                GR6_2_W { w: self }
            }
            #[doc = "Bit 4 - GR6_1 analog switch control"]
            #[inline(always)]
            pub fn gr6_1(&mut self) -> GR6_1_W {
                GR6_1_W { w: self }
            }
            #[doc = "Bit 3 - GR10_4 analog switch control"]
            #[inline(always)]
            pub fn gr10_4(&mut self) -> GR10_4_W {
                GR10_4_W { w: self }
            }
            #[doc = "Bit 2 - GR10_3 analog switch control"]
            #[inline(always)]
            pub fn gr10_3(&mut self) -> GR10_3_W {
                GR10_3_W { w: self }
            }
            #[doc = "Bit 1 - GR10_2 analog switch control"]
            #[inline(always)]
            pub fn gr10_2(&mut self) -> GR10_2_W {
                GR10_2_W { w: self }
            }
            #[doc = "Bit 0 - GR10_1 analog switch control"]
            #[inline(always)]
            pub fn gr10_1(&mut self) -> GR10_1_W {
                GR10_1_W { w: self }
            }
        }
    }
    #[doc = "RI hysteresis control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hyscr1](hyscr1) module"]
    pub type HYSCR1 = crate::Reg<u32, _HYSCR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _HYSCR1;
    #[doc = "`read()` method returns [hyscr1::R](hyscr1::R) reader structure"]
    impl crate::Readable for HYSCR1 {}
    #[doc = "`write(|w| ..)` method takes [hyscr1::W](hyscr1::W) writer structure"]
    impl crate::Writable for HYSCR1 {}
    #[doc = "RI hysteresis control register 1"]
    pub mod hyscr1 {
        #[doc = "Reader of register HYSCR1"]
        pub type R = crate::R<u32, super::HYSCR1>;
        #[doc = "Writer for register HYSCR1"]
        pub type W = crate::W<u32, super::HYSCR1>;
        #[doc = "Register HYSCR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::HYSCR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PB`"]
        pub type PB_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PB`"]
        pub struct PB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PA`"]
        pub type PA_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PA`"]
        pub struct PA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - Port B hysteresis control on/off"]
            #[inline(always)]
            pub fn pb(&self) -> PB_R {
                PB_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - Port A hysteresis control on/off"]
            #[inline(always)]
            pub fn pa(&self) -> PA_R {
                PA_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - Port B hysteresis control on/off"]
            #[inline(always)]
            pub fn pb(&mut self) -> PB_W {
                PB_W { w: self }
            }
            #[doc = "Bits 0:15 - Port A hysteresis control on/off"]
            #[inline(always)]
            pub fn pa(&mut self) -> PA_W {
                PA_W { w: self }
            }
        }
    }
    #[doc = "RI hysteresis control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hyscr2](hyscr2) module"]
    pub type HYSCR2 = crate::Reg<u32, _HYSCR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _HYSCR2;
    #[doc = "`read()` method returns [hyscr2::R](hyscr2::R) reader structure"]
    impl crate::Readable for HYSCR2 {}
    #[doc = "`write(|w| ..)` method takes [hyscr2::W](hyscr2::W) writer structure"]
    impl crate::Writable for HYSCR2 {}
    #[doc = "RI hysteresis control register 2"]
    pub mod hyscr2 {
        #[doc = "Reader of register HYSCR2"]
        pub type R = crate::R<u32, super::HYSCR2>;
        #[doc = "Writer for register HYSCR2"]
        pub type W = crate::W<u32, super::HYSCR2>;
        #[doc = "Register HYSCR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::HYSCR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PD`"]
        pub type PD_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PD`"]
        pub struct PD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PC`"]
        pub type PC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PC`"]
        pub struct PC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - Port D hysteresis control on/off"]
            #[inline(always)]
            pub fn pd(&self) -> PD_R {
                PD_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - Port C hysteresis control on/off"]
            #[inline(always)]
            pub fn pc(&self) -> PC_R {
                PC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - Port D hysteresis control on/off"]
            #[inline(always)]
            pub fn pd(&mut self) -> PD_W {
                PD_W { w: self }
            }
            #[doc = "Bits 0:15 - Port C hysteresis control on/off"]
            #[inline(always)]
            pub fn pc(&mut self) -> PC_W {
                PC_W { w: self }
            }
        }
    }
    #[doc = "RI hysteresis control register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hyscr3](hyscr3) module"]
    pub type HYSCR3 = crate::Reg<u32, _HYSCR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _HYSCR3;
    #[doc = "`read()` method returns [hyscr3::R](hyscr3::R) reader structure"]
    impl crate::Readable for HYSCR3 {}
    #[doc = "`write(|w| ..)` method takes [hyscr3::W](hyscr3::W) writer structure"]
    impl crate::Writable for HYSCR3 {}
    #[doc = "RI hysteresis control register 3"]
    pub mod hyscr3 {
        #[doc = "Reader of register HYSCR3"]
        pub type R = crate::R<u32, super::HYSCR3>;
        #[doc = "Writer for register HYSCR3"]
        pub type W = crate::W<u32, super::HYSCR3>;
        #[doc = "Register HYSCR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::HYSCR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PF`"]
        pub type PF_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PF`"]
        pub struct PF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PE`"]
        pub type PE_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PE`"]
        pub struct PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - Port F hysteresis control on/off"]
            #[inline(always)]
            pub fn pf(&self) -> PF_R {
                PF_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - Port E hysteresis control on/off"]
            #[inline(always)]
            pub fn pe(&self) -> PE_R {
                PE_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - Port F hysteresis control on/off"]
            #[inline(always)]
            pub fn pf(&mut self) -> PF_W {
                PF_W { w: self }
            }
            #[doc = "Bits 0:15 - Port E hysteresis control on/off"]
            #[inline(always)]
            pub fn pe(&mut self) -> PE_W {
                PE_W { w: self }
            }
        }
    }
    #[doc = "Hysteresis control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hyscr4](hyscr4) module"]
    pub type HYSCR4 = crate::Reg<u32, _HYSCR4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _HYSCR4;
    #[doc = "`read()` method returns [hyscr4::R](hyscr4::R) reader structure"]
    impl crate::Readable for HYSCR4 {}
    #[doc = "`write(|w| ..)` method takes [hyscr4::W](hyscr4::W) writer structure"]
    impl crate::Writable for HYSCR4 {}
    #[doc = "Hysteresis control register"]
    pub mod hyscr4 {
        #[doc = "Reader of register HYSCR4"]
        pub type R = crate::R<u32, super::HYSCR4>;
        #[doc = "Writer for register HYSCR4"]
        pub type W = crate::W<u32, super::HYSCR4>;
        #[doc = "Register HYSCR4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::HYSCR4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PG`"]
        pub type PG_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PG`"]
        pub struct PG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Port G hysteresis control on/off"]
            #[inline(always)]
            pub fn pg(&self) -> PG_R {
                PG_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Port G hysteresis control on/off"]
            #[inline(always)]
            pub fn pg(&mut self) -> PG_W {
                PG_W { w: self }
            }
        }
    }
}
#[doc = "Real-time clock"]
pub struct RTC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RTC {}
impl RTC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rtc::RegisterBlock {
        0x4000_2800 as *const _
    }
}
impl Deref for RTC {
    type Target = rtc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*RTC::ptr() }
    }
}
#[doc = "Real-time clock"]
pub mod rtc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - time register"]
        pub tr: TR,
        #[doc = "0x04 - date register"]
        pub dr: DR,
        #[doc = "0x08 - control register"]
        pub cr: CR,
        #[doc = "0x0c - initialization and status register"]
        pub isr: ISR,
        #[doc = "0x10 - prescaler register"]
        pub prer: PRER,
        #[doc = "0x14 - wakeup timer register"]
        pub wutr: WUTR,
        #[doc = "0x18 - calibration register"]
        pub calibr: CALIBR,
        #[doc = "0x1c - alarm A register"]
        pub alrmar: ALRMAR,
        #[doc = "0x20 - alarm B register"]
        pub alrmbr: ALRMBR,
        #[doc = "0x24 - write protection register"]
        pub wpr: WPR,
        #[doc = "0x28 - sub second register"]
        pub ssr: SSR,
        #[doc = "0x2c - shift control register"]
        pub shiftr: SHIFTR,
        #[doc = "0x30 - TSTR"]
        pub tstr: TSTR,
        #[doc = "0x34 - time stamp date register"]
        pub tsdr: TSDR,
        #[doc = "0x38 - timestamp sub second register"]
        pub tsssr: TSSSR,
        #[doc = "0x3c - calibration register"]
        pub calr: CALR,
        #[doc = "0x40 - tamper and alternate function configuration register"]
        pub tafcr: TAFCR,
        #[doc = "0x44 - alarm A sub second register"]
        pub alrmassr: ALRMASSR,
        #[doc = "0x48 - alarm B sub second register"]
        pub alrmbssr: ALRMBSSR,
        _reserved19: [u8; 4usize],
        #[doc = "0x50 - backup register"]
        pub bkpr: [BKPR; 32],
    }
    #[doc = "time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tr](tr) module"]
    pub type TR = crate::Reg<u32, _TR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TR;
    #[doc = "`read()` method returns [tr::R](tr::R) reader structure"]
    impl crate::Readable for TR {}
    #[doc = "`write(|w| ..)` method takes [tr::W](tr::W) writer structure"]
    impl crate::Writable for TR {}
    #[doc = "time register"]
    pub mod tr {
        #[doc = "Reader of register TR"]
        pub type R = crate::R<u32, super::TR>;
        #[doc = "Writer for register TR"]
        pub type W = crate::W<u32, super::TR>;
        #[doc = "Register TR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PM`"]
        pub type PM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PM`"]
        pub struct PM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `HT`"]
        pub type HT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HT`"]
        pub struct HT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `HU`"]
        pub type HU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HU`"]
        pub struct HU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MNT`"]
        pub type MNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNT`"]
        pub struct MNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MNU`"]
        pub type MNU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNU`"]
        pub struct MNU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ST`"]
        pub type ST_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ST`"]
        pub struct ST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ST_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SU`"]
        pub type SU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SU`"]
        pub struct SU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&self) -> PM_R {
                PM_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format"]
            #[inline(always)]
            pub fn ht(&self) -> HT_R {
                HT_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 16:19 - Hour units in BCD format"]
            #[inline(always)]
            pub fn hu(&self) -> HU_R {
                HU_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format"]
            #[inline(always)]
            pub fn mnt(&self) -> MNT_R {
                MNT_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 8:11 - Minute units in BCD format"]
            #[inline(always)]
            pub fn mnu(&self) -> MNU_R {
                MNU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:6 - Second tens in BCD format"]
            #[inline(always)]
            pub fn st(&self) -> ST_R {
                ST_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 0:3 - Second units in BCD format"]
            #[inline(always)]
            pub fn su(&self) -> SU_R {
                SU_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&mut self) -> PM_W {
                PM_W { w: self }
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format"]
            #[inline(always)]
            pub fn ht(&mut self) -> HT_W {
                HT_W { w: self }
            }
            #[doc = "Bits 16:19 - Hour units in BCD format"]
            #[inline(always)]
            pub fn hu(&mut self) -> HU_W {
                HU_W { w: self }
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format"]
            #[inline(always)]
            pub fn mnt(&mut self) -> MNT_W {
                MNT_W { w: self }
            }
            #[doc = "Bits 8:11 - Minute units in BCD format"]
            #[inline(always)]
            pub fn mnu(&mut self) -> MNU_W {
                MNU_W { w: self }
            }
            #[doc = "Bits 4:6 - Second tens in BCD format"]
            #[inline(always)]
            pub fn st(&mut self) -> ST_W {
                ST_W { w: self }
            }
            #[doc = "Bits 0:3 - Second units in BCD format"]
            #[inline(always)]
            pub fn su(&mut self) -> SU_W {
                SU_W { w: self }
            }
        }
    }
    #[doc = "date register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "`write(|w| ..)` method takes [dr::W](dr::W) writer structure"]
    impl crate::Writable for DR {}
    #[doc = "date register"]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Writer for register DR"]
        pub type W = crate::W<u32, super::DR>;
        #[doc = "Register DR `reset()`'s with value 0x2101"]
        impl crate::ResetValue for super::DR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x2101
            }
        }
        #[doc = "Reader of field `YT`"]
        pub type YT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `YT`"]
        pub struct YT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> YT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `YU`"]
        pub type YU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `YU`"]
        pub struct YU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> YU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `WDU`"]
        pub type WDU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WDU`"]
        pub struct WDU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `MT`"]
        pub type MT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MT`"]
        pub struct MT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MU`"]
        pub type MU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MU`"]
        pub struct MU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DT`"]
        pub type DT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DT`"]
        pub struct DT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DU`"]
        pub type DU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DU`"]
        pub struct DU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:23 - Year tens in BCD format"]
            #[inline(always)]
            pub fn yt(&self) -> YT_R {
                YT_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Year units in BCD format"]
            #[inline(always)]
            pub fn yu(&self) -> YU_R {
                YU_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 13:15 - Week day units"]
            #[inline(always)]
            pub fn wdu(&self) -> WDU_R {
                WDU_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - Month tens in BCD format"]
            #[inline(always)]
            pub fn mt(&self) -> MT_R {
                MT_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 8:11 - Month units in BCD format"]
            #[inline(always)]
            pub fn mu(&self) -> MU_R {
                MU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&self) -> DT_R {
                DT_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 0:3 - Date units in BCD format"]
            #[inline(always)]
            pub fn du(&self) -> DU_R {
                DU_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 20:23 - Year tens in BCD format"]
            #[inline(always)]
            pub fn yt(&mut self) -> YT_W {
                YT_W { w: self }
            }
            #[doc = "Bits 16:19 - Year units in BCD format"]
            #[inline(always)]
            pub fn yu(&mut self) -> YU_W {
                YU_W { w: self }
            }
            #[doc = "Bits 13:15 - Week day units"]
            #[inline(always)]
            pub fn wdu(&mut self) -> WDU_W {
                WDU_W { w: self }
            }
            #[doc = "Bit 12 - Month tens in BCD format"]
            #[inline(always)]
            pub fn mt(&mut self) -> MT_W {
                MT_W { w: self }
            }
            #[doc = "Bits 8:11 - Month units in BCD format"]
            #[inline(always)]
            pub fn mu(&mut self) -> MU_W {
                MU_W { w: self }
            }
            #[doc = "Bits 4:5 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&mut self) -> DT_W {
                DT_W { w: self }
            }
            #[doc = "Bits 0:3 - Date units in BCD format"]
            #[inline(always)]
            pub fn du(&mut self) -> DU_W {
                DU_W { w: self }
            }
        }
    }
    #[doc = "control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `COE`"]
        pub type COE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COE`"]
        pub struct COE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `OSEL`"]
        pub type OSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSEL`"]
        pub struct OSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 21)) | (((value as u32) & 0x03) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `POL`"]
        pub type POL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `POL`"]
        pub struct POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `COSEL`"]
        pub type COSEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COSEL`"]
        pub struct COSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `SUB1H`"]
        pub type SUB1H_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SUB1H`"]
        pub struct SUB1H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SUB1H_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `ADD1H`"]
        pub type ADD1H_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADD1H`"]
        pub struct ADD1H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD1H_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `TSIE`"]
        pub type TSIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSIE`"]
        pub struct TSIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `WUTIE`"]
        pub type WUTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUTIE`"]
        pub struct WUTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `ALRBIE`"]
        pub type ALRBIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALRBIE`"]
        pub struct ALRBIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRBIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `ALRAIE`"]
        pub type ALRAIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALRAIE`"]
        pub struct ALRAIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRAIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TSE`"]
        pub type TSE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSE`"]
        pub struct TSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `WUTE`"]
        pub type WUTE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUTE`"]
        pub struct WUTE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUTE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `ALRBE`"]
        pub type ALRBE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALRBE`"]
        pub struct ALRBE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRBE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `ALRAE`"]
        pub type ALRAE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALRAE`"]
        pub struct ALRAE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRAE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DCE`"]
        pub type DCE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DCE`"]
        pub struct DCE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `FMT`"]
        pub type FMT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FMT`"]
        pub struct FMT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FMT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `BYPSHAD`"]
        pub type BYPSHAD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BYPSHAD`"]
        pub struct BYPSHAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BYPSHAD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `REFCKON`"]
        pub type REFCKON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `REFCKON`"]
        pub struct REFCKON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REFCKON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TSEDGE`"]
        pub type TSEDGE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSEDGE`"]
        pub struct TSEDGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSEDGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `WCKSEL`"]
        pub type WCKSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WCKSEL`"]
        pub struct WCKSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WCKSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 23 - Calibration output enable"]
            #[inline(always)]
            pub fn coe(&self) -> COE_R {
                COE_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bits 21:22 - Output selection"]
            #[inline(always)]
            pub fn osel(&self) -> OSEL_R {
                OSEL_R::new(((self.bits >> 21) & 0x03) as u8)
            }
            #[doc = "Bit 20 - Output polarity"]
            #[inline(always)]
            pub fn pol(&self) -> POL_R {
                POL_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Calibration output selection"]
            #[inline(always)]
            pub fn cosel(&self) -> COSEL_R {
                COSEL_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Backup"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Subtract 1 hour"]
            #[inline(always)]
            pub fn sub1h(&self) -> SUB1H_R {
                SUB1H_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Add 1 hour"]
            #[inline(always)]
            pub fn add1h(&self) -> ADD1H_R {
                ADD1H_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Time-stamp interrupt enable"]
            #[inline(always)]
            pub fn tsie(&self) -> TSIE_R {
                TSIE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Wakeup timer interrupt enable"]
            #[inline(always)]
            pub fn wutie(&self) -> WUTIE_R {
                WUTIE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Alarm B interrupt enable"]
            #[inline(always)]
            pub fn alrbie(&self) -> ALRBIE_R {
                ALRBIE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Alarm A interrupt enable"]
            #[inline(always)]
            pub fn alraie(&self) -> ALRAIE_R {
                ALRAIE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Time stamp enable"]
            #[inline(always)]
            pub fn tse(&self) -> TSE_R {
                TSE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Wakeup timer enable"]
            #[inline(always)]
            pub fn wute(&self) -> WUTE_R {
                WUTE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Alarm B enable"]
            #[inline(always)]
            pub fn alrbe(&self) -> ALRBE_R {
                ALRBE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Alarm A enable"]
            #[inline(always)]
            pub fn alrae(&self) -> ALRAE_R {
                ALRAE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Coarse digital calibration enable"]
            #[inline(always)]
            pub fn dce(&self) -> DCE_R {
                DCE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Hour format"]
            #[inline(always)]
            pub fn fmt(&self) -> FMT_R {
                FMT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Bypass the shadow registers"]
            #[inline(always)]
            pub fn bypshad(&self) -> BYPSHAD_R {
                BYPSHAD_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Reference clock detection enable"]
            #[inline(always)]
            pub fn refckon(&self) -> REFCKON_R {
                REFCKON_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Time-stamp event active edge"]
            #[inline(always)]
            pub fn tsedge(&self) -> TSEDGE_R {
                TSEDGE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 0:2 - WCKSEL"]
            #[inline(always)]
            pub fn wcksel(&self) -> WCKSEL_R {
                WCKSEL_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 23 - Calibration output enable"]
            #[inline(always)]
            pub fn coe(&mut self) -> COE_W {
                COE_W { w: self }
            }
            #[doc = "Bits 21:22 - Output selection"]
            #[inline(always)]
            pub fn osel(&mut self) -> OSEL_W {
                OSEL_W { w: self }
            }
            #[doc = "Bit 20 - Output polarity"]
            #[inline(always)]
            pub fn pol(&mut self) -> POL_W {
                POL_W { w: self }
            }
            #[doc = "Bit 19 - Calibration output selection"]
            #[inline(always)]
            pub fn cosel(&mut self) -> COSEL_W {
                COSEL_W { w: self }
            }
            #[doc = "Bit 18 - Backup"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
            #[doc = "Bit 17 - Subtract 1 hour"]
            #[inline(always)]
            pub fn sub1h(&mut self) -> SUB1H_W {
                SUB1H_W { w: self }
            }
            #[doc = "Bit 16 - Add 1 hour"]
            #[inline(always)]
            pub fn add1h(&mut self) -> ADD1H_W {
                ADD1H_W { w: self }
            }
            #[doc = "Bit 15 - Time-stamp interrupt enable"]
            #[inline(always)]
            pub fn tsie(&mut self) -> TSIE_W {
                TSIE_W { w: self }
            }
            #[doc = "Bit 14 - Wakeup timer interrupt enable"]
            #[inline(always)]
            pub fn wutie(&mut self) -> WUTIE_W {
                WUTIE_W { w: self }
            }
            #[doc = "Bit 13 - Alarm B interrupt enable"]
            #[inline(always)]
            pub fn alrbie(&mut self) -> ALRBIE_W {
                ALRBIE_W { w: self }
            }
            #[doc = "Bit 12 - Alarm A interrupt enable"]
            #[inline(always)]
            pub fn alraie(&mut self) -> ALRAIE_W {
                ALRAIE_W { w: self }
            }
            #[doc = "Bit 11 - Time stamp enable"]
            #[inline(always)]
            pub fn tse(&mut self) -> TSE_W {
                TSE_W { w: self }
            }
            #[doc = "Bit 10 - Wakeup timer enable"]
            #[inline(always)]
            pub fn wute(&mut self) -> WUTE_W {
                WUTE_W { w: self }
            }
            #[doc = "Bit 9 - Alarm B enable"]
            #[inline(always)]
            pub fn alrbe(&mut self) -> ALRBE_W {
                ALRBE_W { w: self }
            }
            #[doc = "Bit 8 - Alarm A enable"]
            #[inline(always)]
            pub fn alrae(&mut self) -> ALRAE_W {
                ALRAE_W { w: self }
            }
            #[doc = "Bit 7 - Coarse digital calibration enable"]
            #[inline(always)]
            pub fn dce(&mut self) -> DCE_W {
                DCE_W { w: self }
            }
            #[doc = "Bit 6 - Hour format"]
            #[inline(always)]
            pub fn fmt(&mut self) -> FMT_W {
                FMT_W { w: self }
            }
            #[doc = "Bit 5 - Bypass the shadow registers"]
            #[inline(always)]
            pub fn bypshad(&mut self) -> BYPSHAD_W {
                BYPSHAD_W { w: self }
            }
            #[doc = "Bit 4 - Reference clock detection enable"]
            #[inline(always)]
            pub fn refckon(&mut self) -> REFCKON_W {
                REFCKON_W { w: self }
            }
            #[doc = "Bit 3 - Time-stamp event active edge"]
            #[inline(always)]
            pub fn tsedge(&mut self) -> TSEDGE_W {
                TSEDGE_W { w: self }
            }
            #[doc = "Bits 0:2 - WCKSEL"]
            #[inline(always)]
            pub fn wcksel(&mut self) -> WCKSEL_W {
                WCKSEL_W { w: self }
            }
        }
    }
    #[doc = "initialization and status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr](isr) module"]
    pub type ISR = crate::Reg<u32, _ISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISR;
    #[doc = "`read()` method returns [isr::R](isr::R) reader structure"]
    impl crate::Readable for ISR {}
    #[doc = "`write(|w| ..)` method takes [isr::W](isr::W) writer structure"]
    impl crate::Writable for ISR {}
    #[doc = "initialization and status register"]
    pub mod isr {
        #[doc = "Reader of register ISR"]
        pub type R = crate::R<u32, super::ISR>;
        #[doc = "Writer for register ISR"]
        pub type W = crate::W<u32, super::ISR>;
        #[doc = "Register ISR `reset()`'s with value 0x07"]
        impl crate::ResetValue for super::ISR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x07
            }
        }
        #[doc = "Reader of field `RECALPF`"]
        pub type RECALPF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TAMP3F`"]
        pub type TAMP3F_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP3F`"]
        pub struct TAMP3F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP3F_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP2F`"]
        pub type TAMP2F_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP2F`"]
        pub struct TAMP2F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP2F_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP1F`"]
        pub type TAMP1F_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP1F`"]
        pub struct TAMP1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP1F_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TSOVF`"]
        pub type TSOVF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSOVF`"]
        pub struct TSOVF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSOVF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TSF`"]
        pub type TSF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSF`"]
        pub struct TSF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `WUTF`"]
        pub type WUTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUTF`"]
        pub struct WUTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `ALRBF`"]
        pub type ALRBF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALRBF`"]
        pub struct ALRBF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRBF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `ALRAF`"]
        pub type ALRAF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALRAF`"]
        pub struct ALRAF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRAF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `INIT`"]
        pub type INIT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `INIT`"]
        pub struct INIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `INITF`"]
        pub type INITF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `INITF`"]
        pub struct INITF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INITF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RSF`"]
        pub type RSF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RSF`"]
        pub struct RSF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `INITS`"]
        pub type INITS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SHPF`"]
        pub type SHPF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SHPF`"]
        pub struct SHPF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SHPF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `WUTWF`"]
        pub type WUTWF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ALRBWF`"]
        pub type ALRBWF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ALRAWF`"]
        pub type ALRAWF_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 16 - Recalibration pending Flag"]
            #[inline(always)]
            pub fn recalpf(&self) -> RECALPF_R {
                RECALPF_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - TAMPER3 detection flag"]
            #[inline(always)]
            pub fn tamp3f(&self) -> TAMP3F_R {
                TAMP3F_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - TAMPER2 detection flag"]
            #[inline(always)]
            pub fn tamp2f(&self) -> TAMP2F_R {
                TAMP2F_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Tamper detection flag"]
            #[inline(always)]
            pub fn tamp1f(&self) -> TAMP1F_R {
                TAMP1F_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Timestamp overflow flag"]
            #[inline(always)]
            pub fn tsovf(&self) -> TSOVF_R {
                TSOVF_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Timestamp flag"]
            #[inline(always)]
            pub fn tsf(&self) -> TSF_R {
                TSF_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Wakeup timer flag"]
            #[inline(always)]
            pub fn wutf(&self) -> WUTF_R {
                WUTF_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Alarm B flag"]
            #[inline(always)]
            pub fn alrbf(&self) -> ALRBF_R {
                ALRBF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Alarm A flag"]
            #[inline(always)]
            pub fn alraf(&self) -> ALRAF_R {
                ALRAF_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Initialization mode"]
            #[inline(always)]
            pub fn init(&self) -> INIT_R {
                INIT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Initialization flag"]
            #[inline(always)]
            pub fn initf(&self) -> INITF_R {
                INITF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Registers synchronization flag"]
            #[inline(always)]
            pub fn rsf(&self) -> RSF_R {
                RSF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Initialization status flag"]
            #[inline(always)]
            pub fn inits(&self) -> INITS_R {
                INITS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Shift operation pending"]
            #[inline(always)]
            pub fn shpf(&self) -> SHPF_R {
                SHPF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Wakeup timer write flag"]
            #[inline(always)]
            pub fn wutwf(&self) -> WUTWF_R {
                WUTWF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Alarm B write flag"]
            #[inline(always)]
            pub fn alrbwf(&self) -> ALRBWF_R {
                ALRBWF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Alarm A write flag"]
            #[inline(always)]
            pub fn alrawf(&self) -> ALRAWF_R {
                ALRAWF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - TAMPER3 detection flag"]
            #[inline(always)]
            pub fn tamp3f(&mut self) -> TAMP3F_W {
                TAMP3F_W { w: self }
            }
            #[doc = "Bit 14 - TAMPER2 detection flag"]
            #[inline(always)]
            pub fn tamp2f(&mut self) -> TAMP2F_W {
                TAMP2F_W { w: self }
            }
            #[doc = "Bit 13 - Tamper detection flag"]
            #[inline(always)]
            pub fn tamp1f(&mut self) -> TAMP1F_W {
                TAMP1F_W { w: self }
            }
            #[doc = "Bit 12 - Timestamp overflow flag"]
            #[inline(always)]
            pub fn tsovf(&mut self) -> TSOVF_W {
                TSOVF_W { w: self }
            }
            #[doc = "Bit 11 - Timestamp flag"]
            #[inline(always)]
            pub fn tsf(&mut self) -> TSF_W {
                TSF_W { w: self }
            }
            #[doc = "Bit 10 - Wakeup timer flag"]
            #[inline(always)]
            pub fn wutf(&mut self) -> WUTF_W {
                WUTF_W { w: self }
            }
            #[doc = "Bit 9 - Alarm B flag"]
            #[inline(always)]
            pub fn alrbf(&mut self) -> ALRBF_W {
                ALRBF_W { w: self }
            }
            #[doc = "Bit 8 - Alarm A flag"]
            #[inline(always)]
            pub fn alraf(&mut self) -> ALRAF_W {
                ALRAF_W { w: self }
            }
            #[doc = "Bit 7 - Initialization mode"]
            #[inline(always)]
            pub fn init(&mut self) -> INIT_W {
                INIT_W { w: self }
            }
            #[doc = "Bit 6 - Initialization flag"]
            #[inline(always)]
            pub fn initf(&mut self) -> INITF_W {
                INITF_W { w: self }
            }
            #[doc = "Bit 5 - Registers synchronization flag"]
            #[inline(always)]
            pub fn rsf(&mut self) -> RSF_W {
                RSF_W { w: self }
            }
            #[doc = "Bit 3 - Shift operation pending"]
            #[inline(always)]
            pub fn shpf(&mut self) -> SHPF_W {
                SHPF_W { w: self }
            }
        }
    }
    #[doc = "prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [prer](prer) module"]
    pub type PRER = crate::Reg<u32, _PRER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PRER;
    #[doc = "`read()` method returns [prer::R](prer::R) reader structure"]
    impl crate::Readable for PRER {}
    #[doc = "`write(|w| ..)` method takes [prer::W](prer::W) writer structure"]
    impl crate::Writable for PRER {}
    #[doc = "prescaler register"]
    pub mod prer {
        #[doc = "Reader of register PRER"]
        pub type R = crate::R<u32, super::PRER>;
        #[doc = "Writer for register PRER"]
        pub type W = crate::W<u32, super::PRER>;
        #[doc = "Register PRER `reset()`'s with value 0x007f_00ff"]
        impl crate::ResetValue for super::PRER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x007f_00ff
            }
        }
        #[doc = "Reader of field `PREDIV_A`"]
        pub type PREDIV_A_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PREDIV_A`"]
        pub struct PREDIV_A_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PREDIV_A_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 16)) | (((value as u32) & 0x7f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PREDIV_S`"]
        pub type PREDIV_S_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PREDIV_S`"]
        pub struct PREDIV_S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PREDIV_S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7fff) | ((value as u32) & 0x7fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:22 - Asynchronous prescaler factor"]
            #[inline(always)]
            pub fn prediv_a(&self) -> PREDIV_A_R {
                PREDIV_A_R::new(((self.bits >> 16) & 0x7f) as u8)
            }
            #[doc = "Bits 0:14 - Synchronous prescaler factor"]
            #[inline(always)]
            pub fn prediv_s(&self) -> PREDIV_S_R {
                PREDIV_S_R::new((self.bits & 0x7fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:22 - Asynchronous prescaler factor"]
            #[inline(always)]
            pub fn prediv_a(&mut self) -> PREDIV_A_W {
                PREDIV_A_W { w: self }
            }
            #[doc = "Bits 0:14 - Synchronous prescaler factor"]
            #[inline(always)]
            pub fn prediv_s(&mut self) -> PREDIV_S_W {
                PREDIV_S_W { w: self }
            }
        }
    }
    #[doc = "wakeup timer register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wutr](wutr) module"]
    pub type WUTR = crate::Reg<u32, _WUTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WUTR;
    #[doc = "`read()` method returns [wutr::R](wutr::R) reader structure"]
    impl crate::Readable for WUTR {}
    #[doc = "`write(|w| ..)` method takes [wutr::W](wutr::W) writer structure"]
    impl crate::Writable for WUTR {}
    #[doc = "wakeup timer register"]
    pub mod wutr {
        #[doc = "Reader of register WUTR"]
        pub type R = crate::R<u32, super::WUTR>;
        #[doc = "Writer for register WUTR"]
        pub type W = crate::W<u32, super::WUTR>;
        #[doc = "Register WUTR `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::WUTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `WUT`"]
        pub type WUT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `WUT`"]
        pub struct WUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Wakeup auto-reload value bits"]
            #[inline(always)]
            pub fn wut(&self) -> WUT_R {
                WUT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Wakeup auto-reload value bits"]
            #[inline(always)]
            pub fn wut(&mut self) -> WUT_W {
                WUT_W { w: self }
            }
        }
    }
    #[doc = "calibration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [calibr](calibr) module"]
    pub type CALIBR = crate::Reg<u32, _CALIBR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CALIBR;
    #[doc = "`read()` method returns [calibr::R](calibr::R) reader structure"]
    impl crate::Readable for CALIBR {}
    #[doc = "`write(|w| ..)` method takes [calibr::W](calibr::W) writer structure"]
    impl crate::Writable for CALIBR {}
    #[doc = "calibration register"]
    pub mod calibr {
        #[doc = "Reader of register CALIBR"]
        pub type R = crate::R<u32, super::CALIBR>;
        #[doc = "Writer for register CALIBR"]
        pub type W = crate::W<u32, super::CALIBR>;
        #[doc = "Register CALIBR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CALIBR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DCS`"]
        pub type DCS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DCS`"]
        pub struct DCS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `DC`"]
        pub type DC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DC`"]
        pub struct DC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - Digital calibration sign"]
            #[inline(always)]
            pub fn dcs(&self) -> DCS_R {
                DCS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:4 - Digital calibration"]
            #[inline(always)]
            pub fn dc(&self) -> DC_R {
                DC_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 7 - Digital calibration sign"]
            #[inline(always)]
            pub fn dcs(&mut self) -> DCS_W {
                DCS_W { w: self }
            }
            #[doc = "Bits 0:4 - Digital calibration"]
            #[inline(always)]
            pub fn dc(&mut self) -> DC_W {
                DC_W { w: self }
            }
        }
    }
    #[doc = "alarm A register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alrmar](alrmar) module"]
    pub type ALRMAR = crate::Reg<u32, _ALRMAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALRMAR;
    #[doc = "`read()` method returns [alrmar::R](alrmar::R) reader structure"]
    impl crate::Readable for ALRMAR {}
    #[doc = "`write(|w| ..)` method takes [alrmar::W](alrmar::W) writer structure"]
    impl crate::Writable for ALRMAR {}
    #[doc = "alarm A register"]
    pub mod alrmar {
        #[doc = "Reader of register ALRMAR"]
        pub type R = crate::R<u32, super::ALRMAR>;
        #[doc = "Writer for register ALRMAR"]
        pub type W = crate::W<u32, super::ALRMAR>;
        #[doc = "Register ALRMAR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ALRMAR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MSK4`"]
        pub type MSK4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK4`"]
        pub struct MSK4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `WDSEL`"]
        pub type WDSEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WDSEL`"]
        pub struct WDSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `DT`"]
        pub type DT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DT`"]
        pub struct DT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `DU`"]
        pub type DU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DU`"]
        pub struct DU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `MSK3`"]
        pub type MSK3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK3`"]
        pub struct MSK3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `PM`"]
        pub type PM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PM`"]
        pub struct PM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `HT`"]
        pub type HT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HT`"]
        pub struct HT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `HU`"]
        pub type HU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HU`"]
        pub struct HU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MSK2`"]
        pub type MSK2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK2`"]
        pub struct MSK2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `MNT`"]
        pub type MNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNT`"]
        pub struct MNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MNU`"]
        pub type MNU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNU`"]
        pub struct MNU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MSK1`"]
        pub type MSK1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK1`"]
        pub struct MSK1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `ST`"]
        pub type ST_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ST`"]
        pub struct ST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ST_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SU`"]
        pub type SU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SU`"]
        pub struct SU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - Alarm A date mask"]
            #[inline(always)]
            pub fn msk4(&self) -> MSK4_R {
                MSK4_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Week day selection"]
            #[inline(always)]
            pub fn wdsel(&self) -> WDSEL_R {
                WDSEL_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bits 28:29 - Date tens in BCD format."]
            #[inline(always)]
            pub fn dt(&self) -> DT_R {
                DT_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 24:27 - Date units or day in BCD format."]
            #[inline(always)]
            pub fn du(&self) -> DU_R {
                DU_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bit 23 - Alarm A hours mask"]
            #[inline(always)]
            pub fn msk3(&self) -> MSK3_R {
                MSK3_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&self) -> PM_R {
                PM_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format."]
            #[inline(always)]
            pub fn ht(&self) -> HT_R {
                HT_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 16:19 - Hour units in BCD format."]
            #[inline(always)]
            pub fn hu(&self) -> HU_R {
                HU_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bit 15 - Alarm A minutes mask"]
            #[inline(always)]
            pub fn msk2(&self) -> MSK2_R {
                MSK2_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format."]
            #[inline(always)]
            pub fn mnt(&self) -> MNT_R {
                MNT_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 8:11 - Minute units in BCD format."]
            #[inline(always)]
            pub fn mnu(&self) -> MNU_R {
                MNU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 7 - Alarm A seconds mask"]
            #[inline(always)]
            pub fn msk1(&self) -> MSK1_R {
                MSK1_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Second tens in BCD format."]
            #[inline(always)]
            pub fn st(&self) -> ST_R {
                ST_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 0:3 - Second units in BCD format."]
            #[inline(always)]
            pub fn su(&self) -> SU_R {
                SU_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 31 - Alarm A date mask"]
            #[inline(always)]
            pub fn msk4(&mut self) -> MSK4_W {
                MSK4_W { w: self }
            }
            #[doc = "Bit 30 - Week day selection"]
            #[inline(always)]
            pub fn wdsel(&mut self) -> WDSEL_W {
                WDSEL_W { w: self }
            }
            #[doc = "Bits 28:29 - Date tens in BCD format."]
            #[inline(always)]
            pub fn dt(&mut self) -> DT_W {
                DT_W { w: self }
            }
            #[doc = "Bits 24:27 - Date units or day in BCD format."]
            #[inline(always)]
            pub fn du(&mut self) -> DU_W {
                DU_W { w: self }
            }
            #[doc = "Bit 23 - Alarm A hours mask"]
            #[inline(always)]
            pub fn msk3(&mut self) -> MSK3_W {
                MSK3_W { w: self }
            }
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&mut self) -> PM_W {
                PM_W { w: self }
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format."]
            #[inline(always)]
            pub fn ht(&mut self) -> HT_W {
                HT_W { w: self }
            }
            #[doc = "Bits 16:19 - Hour units in BCD format."]
            #[inline(always)]
            pub fn hu(&mut self) -> HU_W {
                HU_W { w: self }
            }
            #[doc = "Bit 15 - Alarm A minutes mask"]
            #[inline(always)]
            pub fn msk2(&mut self) -> MSK2_W {
                MSK2_W { w: self }
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format."]
            #[inline(always)]
            pub fn mnt(&mut self) -> MNT_W {
                MNT_W { w: self }
            }
            #[doc = "Bits 8:11 - Minute units in BCD format."]
            #[inline(always)]
            pub fn mnu(&mut self) -> MNU_W {
                MNU_W { w: self }
            }
            #[doc = "Bit 7 - Alarm A seconds mask"]
            #[inline(always)]
            pub fn msk1(&mut self) -> MSK1_W {
                MSK1_W { w: self }
            }
            #[doc = "Bits 4:6 - Second tens in BCD format."]
            #[inline(always)]
            pub fn st(&mut self) -> ST_W {
                ST_W { w: self }
            }
            #[doc = "Bits 0:3 - Second units in BCD format."]
            #[inline(always)]
            pub fn su(&mut self) -> SU_W {
                SU_W { w: self }
            }
        }
    }
    #[doc = "alarm B register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alrmbr](alrmbr) module"]
    pub type ALRMBR = crate::Reg<u32, _ALRMBR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALRMBR;
    #[doc = "`read()` method returns [alrmbr::R](alrmbr::R) reader structure"]
    impl crate::Readable for ALRMBR {}
    #[doc = "`write(|w| ..)` method takes [alrmbr::W](alrmbr::W) writer structure"]
    impl crate::Writable for ALRMBR {}
    #[doc = "alarm B register"]
    pub mod alrmbr {
        #[doc = "Reader of register ALRMBR"]
        pub type R = crate::R<u32, super::ALRMBR>;
        #[doc = "Writer for register ALRMBR"]
        pub type W = crate::W<u32, super::ALRMBR>;
        #[doc = "Register ALRMBR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ALRMBR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MSK4`"]
        pub type MSK4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK4`"]
        pub struct MSK4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `WDSEL`"]
        pub type WDSEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WDSEL`"]
        pub struct WDSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `DT`"]
        pub type DT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DT`"]
        pub struct DT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `DU`"]
        pub type DU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DU`"]
        pub struct DU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `MSK3`"]
        pub type MSK3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK3`"]
        pub struct MSK3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `PM`"]
        pub type PM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PM`"]
        pub struct PM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `HT`"]
        pub type HT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HT`"]
        pub struct HT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `HU`"]
        pub type HU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HU`"]
        pub struct HU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MSK2`"]
        pub type MSK2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK2`"]
        pub struct MSK2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `MNT`"]
        pub type MNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNT`"]
        pub struct MNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MNU`"]
        pub type MNU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNU`"]
        pub struct MNU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MSK1`"]
        pub type MSK1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK1`"]
        pub struct MSK1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `ST`"]
        pub type ST_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ST`"]
        pub struct ST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ST_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SU`"]
        pub type SU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SU`"]
        pub struct SU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - Alarm B date mask"]
            #[inline(always)]
            pub fn msk4(&self) -> MSK4_R {
                MSK4_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Week day selection"]
            #[inline(always)]
            pub fn wdsel(&self) -> WDSEL_R {
                WDSEL_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bits 28:29 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&self) -> DT_R {
                DT_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 24:27 - Date units or day in BCD format"]
            #[inline(always)]
            pub fn du(&self) -> DU_R {
                DU_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bit 23 - Alarm B hours mask"]
            #[inline(always)]
            pub fn msk3(&self) -> MSK3_R {
                MSK3_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&self) -> PM_R {
                PM_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format"]
            #[inline(always)]
            pub fn ht(&self) -> HT_R {
                HT_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 16:19 - Hour units in BCD format"]
            #[inline(always)]
            pub fn hu(&self) -> HU_R {
                HU_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bit 15 - Alarm B minutes mask"]
            #[inline(always)]
            pub fn msk2(&self) -> MSK2_R {
                MSK2_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format"]
            #[inline(always)]
            pub fn mnt(&self) -> MNT_R {
                MNT_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 8:11 - Minute units in BCD format"]
            #[inline(always)]
            pub fn mnu(&self) -> MNU_R {
                MNU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 7 - Alarm B seconds mask"]
            #[inline(always)]
            pub fn msk1(&self) -> MSK1_R {
                MSK1_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Second tens in BCD format"]
            #[inline(always)]
            pub fn st(&self) -> ST_R {
                ST_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 0:3 - Second units in BCD format"]
            #[inline(always)]
            pub fn su(&self) -> SU_R {
                SU_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 31 - Alarm B date mask"]
            #[inline(always)]
            pub fn msk4(&mut self) -> MSK4_W {
                MSK4_W { w: self }
            }
            #[doc = "Bit 30 - Week day selection"]
            #[inline(always)]
            pub fn wdsel(&mut self) -> WDSEL_W {
                WDSEL_W { w: self }
            }
            #[doc = "Bits 28:29 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&mut self) -> DT_W {
                DT_W { w: self }
            }
            #[doc = "Bits 24:27 - Date units or day in BCD format"]
            #[inline(always)]
            pub fn du(&mut self) -> DU_W {
                DU_W { w: self }
            }
            #[doc = "Bit 23 - Alarm B hours mask"]
            #[inline(always)]
            pub fn msk3(&mut self) -> MSK3_W {
                MSK3_W { w: self }
            }
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&mut self) -> PM_W {
                PM_W { w: self }
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format"]
            #[inline(always)]
            pub fn ht(&mut self) -> HT_W {
                HT_W { w: self }
            }
            #[doc = "Bits 16:19 - Hour units in BCD format"]
            #[inline(always)]
            pub fn hu(&mut self) -> HU_W {
                HU_W { w: self }
            }
            #[doc = "Bit 15 - Alarm B minutes mask"]
            #[inline(always)]
            pub fn msk2(&mut self) -> MSK2_W {
                MSK2_W { w: self }
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format"]
            #[inline(always)]
            pub fn mnt(&mut self) -> MNT_W {
                MNT_W { w: self }
            }
            #[doc = "Bits 8:11 - Minute units in BCD format"]
            #[inline(always)]
            pub fn mnu(&mut self) -> MNU_W {
                MNU_W { w: self }
            }
            #[doc = "Bit 7 - Alarm B seconds mask"]
            #[inline(always)]
            pub fn msk1(&mut self) -> MSK1_W {
                MSK1_W { w: self }
            }
            #[doc = "Bits 4:6 - Second tens in BCD format"]
            #[inline(always)]
            pub fn st(&mut self) -> ST_W {
                ST_W { w: self }
            }
            #[doc = "Bits 0:3 - Second units in BCD format"]
            #[inline(always)]
            pub fn su(&mut self) -> SU_W {
                SU_W { w: self }
            }
        }
    }
    #[doc = "write protection register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wpr](wpr) module"]
    pub type WPR = crate::Reg<u32, _WPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WPR;
    #[doc = "`write(|w| ..)` method takes [wpr::W](wpr::W) writer structure"]
    impl crate::Writable for WPR {}
    #[doc = "write protection register"]
    pub mod wpr {
        #[doc = "Writer for register WPR"]
        pub type W = crate::W<u32, super::WPR>;
        #[doc = "Register WPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::WPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `KEY`"]
        pub struct KEY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Write protection key"]
            #[inline(always)]
            pub fn key(&mut self) -> KEY_W {
                KEY_W { w: self }
            }
        }
    }
    #[doc = "sub second register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ssr](ssr) module"]
    pub type SSR = crate::Reg<u32, _SSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SSR;
    #[doc = "`read()` method returns [ssr::R](ssr::R) reader structure"]
    impl crate::Readable for SSR {}
    #[doc = "sub second register"]
    pub mod ssr {
        #[doc = "Reader of register SSR"]
        pub type R = crate::R<u32, super::SSR>;
        #[doc = "Reader of field `SS`"]
        pub type SS_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Sub second value"]
            #[inline(always)]
            pub fn ss(&self) -> SS_R {
                SS_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "shift control register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [shiftr](shiftr) module"]
    pub type SHIFTR = crate::Reg<u32, _SHIFTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SHIFTR;
    #[doc = "`write(|w| ..)` method takes [shiftr::W](shiftr::W) writer structure"]
    impl crate::Writable for SHIFTR {}
    #[doc = "shift control register"]
    pub mod shiftr {
        #[doc = "Writer for register SHIFTR"]
        pub type W = crate::W<u32, super::SHIFTR>;
        #[doc = "Register SHIFTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SHIFTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `ADD1S`"]
        pub struct ADD1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD1S_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Write proxy for field `SUBFS`"]
        pub struct SUBFS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SUBFS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7fff) | ((value as u32) & 0x7fff);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 31 - ADD1S"]
            #[inline(always)]
            pub fn add1s(&mut self) -> ADD1S_W {
                ADD1S_W { w: self }
            }
            #[doc = "Bits 0:14 - Subtract a fraction of a second"]
            #[inline(always)]
            pub fn subfs(&mut self) -> SUBFS_W {
                SUBFS_W { w: self }
            }
        }
    }
    #[doc = "TSTR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tstr](tstr) module"]
    pub type TSTR = crate::Reg<u32, _TSTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TSTR;
    #[doc = "`read()` method returns [tstr::R](tstr::R) reader structure"]
    impl crate::Readable for TSTR {}
    #[doc = "TSTR"]
    pub mod tstr {
        #[doc = "Reader of register TSTR"]
        pub type R = crate::R<u32, super::TSTR>;
        #[doc = "Reader of field `PM`"]
        pub type PM_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HT`"]
        pub type HT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HU`"]
        pub type HU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MNT`"]
        pub type MNT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MNU`"]
        pub type MNU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `ST`"]
        pub type ST_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SU`"]
        pub type SU_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&self) -> PM_R {
                PM_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format."]
            #[inline(always)]
            pub fn ht(&self) -> HT_R {
                HT_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 16:19 - Hour units in BCD format."]
            #[inline(always)]
            pub fn hu(&self) -> HU_R {
                HU_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format."]
            #[inline(always)]
            pub fn mnt(&self) -> MNT_R {
                MNT_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 8:11 - Minute units in BCD format."]
            #[inline(always)]
            pub fn mnu(&self) -> MNU_R {
                MNU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:6 - Second tens in BCD format."]
            #[inline(always)]
            pub fn st(&self) -> ST_R {
                ST_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 0:3 - Second units in BCD format."]
            #[inline(always)]
            pub fn su(&self) -> SU_R {
                SU_R::new((self.bits & 0x0f) as u8)
            }
        }
    }
    #[doc = "time stamp date register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tsdr](tsdr) module"]
    pub type TSDR = crate::Reg<u32, _TSDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TSDR;
    #[doc = "`read()` method returns [tsdr::R](tsdr::R) reader structure"]
    impl crate::Readable for TSDR {}
    #[doc = "time stamp date register"]
    pub mod tsdr {
        #[doc = "Reader of register TSDR"]
        pub type R = crate::R<u32, super::TSDR>;
        #[doc = "Reader of field `WDU`"]
        pub type WDU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MT`"]
        pub type MT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `MU`"]
        pub type MU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DT`"]
        pub type DT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DU`"]
        pub type DU_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 13:15 - Week day units"]
            #[inline(always)]
            pub fn wdu(&self) -> WDU_R {
                WDU_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - Month tens in BCD format"]
            #[inline(always)]
            pub fn mt(&self) -> MT_R {
                MT_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 8:11 - Month units in BCD format"]
            #[inline(always)]
            pub fn mu(&self) -> MU_R {
                MU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&self) -> DT_R {
                DT_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 0:3 - Date units in BCD format"]
            #[inline(always)]
            pub fn du(&self) -> DU_R {
                DU_R::new((self.bits & 0x0f) as u8)
            }
        }
    }
    #[doc = "timestamp sub second register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tsssr](tsssr) module"]
    pub type TSSSR = crate::Reg<u32, _TSSSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TSSSR;
    #[doc = "`read()` method returns [tsssr::R](tsssr::R) reader structure"]
    impl crate::Readable for TSSSR {}
    #[doc = "timestamp sub second register"]
    pub mod tsssr {
        #[doc = "Reader of register TSSSR"]
        pub type R = crate::R<u32, super::TSSSR>;
        #[doc = "Reader of field `SS`"]
        pub type SS_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - RTC timestamp subsecond field"]
            #[inline(always)]
            pub fn ss(&self) -> SS_R {
                SS_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "calibration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [calr](calr) module"]
    pub type CALR = crate::Reg<u32, _CALR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CALR;
    #[doc = "`read()` method returns [calr::R](calr::R) reader structure"]
    impl crate::Readable for CALR {}
    #[doc = "`write(|w| ..)` method takes [calr::W](calr::W) writer structure"]
    impl crate::Writable for CALR {}
    #[doc = "calibration register"]
    pub mod calr {
        #[doc = "Reader of register CALR"]
        pub type R = crate::R<u32, super::CALR>;
        #[doc = "Writer for register CALR"]
        pub type W = crate::W<u32, super::CALR>;
        #[doc = "Register CALR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CALR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CALP`"]
        pub type CALP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CALP`"]
        pub struct CALP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `CALW8`"]
        pub type CALW8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CALW8`"]
        pub struct CALW8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALW8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CALW16`"]
        pub type CALW16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CALW16`"]
        pub struct CALW16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALW16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `CALM`"]
        pub type CALM_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CALM`"]
        pub struct CALM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01ff) | ((value as u32) & 0x01ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Use an 8-second calibration cycle period"]
            #[inline(always)]
            pub fn calp(&self) -> CALP_R {
                CALP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Use a 16-second calibration cycle period"]
            #[inline(always)]
            pub fn calw8(&self) -> CALW8_R {
                CALW8_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - CALW16"]
            #[inline(always)]
            pub fn calw16(&self) -> CALW16_R {
                CALW16_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bits 0:8 - Calibration minus"]
            #[inline(always)]
            pub fn calm(&self) -> CALM_R {
                CALM_R::new((self.bits & 0x01ff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 15 - Use an 8-second calibration cycle period"]
            #[inline(always)]
            pub fn calp(&mut self) -> CALP_W {
                CALP_W { w: self }
            }
            #[doc = "Bit 14 - Use a 16-second calibration cycle period"]
            #[inline(always)]
            pub fn calw8(&mut self) -> CALW8_W {
                CALW8_W { w: self }
            }
            #[doc = "Bit 13 - CALW16"]
            #[inline(always)]
            pub fn calw16(&mut self) -> CALW16_W {
                CALW16_W { w: self }
            }
            #[doc = "Bits 0:8 - Calibration minus"]
            #[inline(always)]
            pub fn calm(&mut self) -> CALM_W {
                CALM_W { w: self }
            }
        }
    }
    #[doc = "tamper and alternate function configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tafcr](tafcr) module"]
    pub type TAFCR = crate::Reg<u32, _TAFCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAFCR;
    #[doc = "`read()` method returns [tafcr::R](tafcr::R) reader structure"]
    impl crate::Readable for TAFCR {}
    #[doc = "`write(|w| ..)` method takes [tafcr::W](tafcr::W) writer structure"]
    impl crate::Writable for TAFCR {}
    #[doc = "tamper and alternate function configuration register"]
    pub mod tafcr {
        #[doc = "Reader of register TAFCR"]
        pub type R = crate::R<u32, super::TAFCR>;
        #[doc = "Writer for register TAFCR"]
        pub type W = crate::W<u32, super::TAFCR>;
        #[doc = "Register TAFCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TAFCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ALARMOUTTYPE`"]
        pub type ALARMOUTTYPE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALARMOUTTYPE`"]
        pub struct ALARMOUTTYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALARMOUTTYPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPPUDIS`"]
        pub type TAMPPUDIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMPPUDIS`"]
        pub struct TAMPPUDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPPUDIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPPRCH`"]
        pub type TAMPPRCH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAMPPRCH`"]
        pub struct TAMPPRCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPPRCH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPFLT`"]
        pub type TAMPFLT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAMPFLT`"]
        pub struct TAMPFLT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPFLT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 11)) | (((value as u32) & 0x03) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPFREQ`"]
        pub type TAMPFREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAMPFREQ`"]
        pub struct TAMPFREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPFREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 8)) | (((value as u32) & 0x07) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPTS`"]
        pub type TAMPTS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMPTS`"]
        pub struct TAMPTS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPTS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP3TRG`"]
        pub type TAMP3TRG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP3TRG`"]
        pub struct TAMP3TRG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP3TRG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP3E`"]
        pub type TAMP3E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP3E`"]
        pub struct TAMP3E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP3E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP2TRG`"]
        pub type TAMP2TRG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP2TRG`"]
        pub struct TAMP2TRG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP2TRG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP2E`"]
        pub type TAMP2E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP2E`"]
        pub struct TAMP2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPIE`"]
        pub type TAMPIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMPIE`"]
        pub struct TAMPIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP1ETRG`"]
        pub type TAMP1ETRG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP1ETRG`"]
        pub struct TAMP1ETRG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP1ETRG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP1E`"]
        pub type TAMP1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP1E`"]
        pub struct TAMP1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 18 - AFO_ALARM output type"]
            #[inline(always)]
            pub fn alarmouttype(&self) -> ALARMOUTTYPE_R {
                ALARMOUTTYPE_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 15 - TAMPER pull-up disable"]
            #[inline(always)]
            pub fn tamppudis(&self) -> TAMPPUDIS_R {
                TAMPPUDIS_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 13:14 - Tamper precharge duration"]
            #[inline(always)]
            pub fn tampprch(&self) -> TAMPPRCH_R {
                TAMPPRCH_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bits 11:12 - Tamper filter count"]
            #[inline(always)]
            pub fn tampflt(&self) -> TAMPFLT_R {
                TAMPFLT_R::new(((self.bits >> 11) & 0x03) as u8)
            }
            #[doc = "Bits 8:10 - Tamper sampling frequency"]
            #[inline(always)]
            pub fn tampfreq(&self) -> TAMPFREQ_R {
                TAMPFREQ_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bit 7 - Activate timestamp on tamper detection event"]
            #[inline(always)]
            pub fn tampts(&self) -> TAMPTS_R {
                TAMPTS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TAMPER1 mapping"]
            #[inline(always)]
            pub fn tamp3trg(&self) -> TAMP3TRG_R {
                TAMP3TRG_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TIMESTAMP mapping"]
            #[inline(always)]
            pub fn tamp3e(&self) -> TAMP3E_R {
                TAMP3E_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Active level for tamper 2"]
            #[inline(always)]
            pub fn tamp2trg(&self) -> TAMP2TRG_R {
                TAMP2TRG_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Tamper 2 detection enable"]
            #[inline(always)]
            pub fn tamp2e(&self) -> TAMP2E_R {
                TAMP2E_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Tamper interrupt enable"]
            #[inline(always)]
            pub fn tampie(&self) -> TAMPIE_R {
                TAMPIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Active level for tamper 1"]
            #[inline(always)]
            pub fn tamp1etrg(&self) -> TAMP1ETRG_R {
                TAMP1ETRG_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Tamper 1 detection enable"]
            #[inline(always)]
            pub fn tamp1e(&self) -> TAMP1E_R {
                TAMP1E_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 18 - AFO_ALARM output type"]
            #[inline(always)]
            pub fn alarmouttype(&mut self) -> ALARMOUTTYPE_W {
                ALARMOUTTYPE_W { w: self }
            }
            #[doc = "Bit 15 - TAMPER pull-up disable"]
            #[inline(always)]
            pub fn tamppudis(&mut self) -> TAMPPUDIS_W {
                TAMPPUDIS_W { w: self }
            }
            #[doc = "Bits 13:14 - Tamper precharge duration"]
            #[inline(always)]
            pub fn tampprch(&mut self) -> TAMPPRCH_W {
                TAMPPRCH_W { w: self }
            }
            #[doc = "Bits 11:12 - Tamper filter count"]
            #[inline(always)]
            pub fn tampflt(&mut self) -> TAMPFLT_W {
                TAMPFLT_W { w: self }
            }
            #[doc = "Bits 8:10 - Tamper sampling frequency"]
            #[inline(always)]
            pub fn tampfreq(&mut self) -> TAMPFREQ_W {
                TAMPFREQ_W { w: self }
            }
            #[doc = "Bit 7 - Activate timestamp on tamper detection event"]
            #[inline(always)]
            pub fn tampts(&mut self) -> TAMPTS_W {
                TAMPTS_W { w: self }
            }
            #[doc = "Bit 6 - TAMPER1 mapping"]
            #[inline(always)]
            pub fn tamp3trg(&mut self) -> TAMP3TRG_W {
                TAMP3TRG_W { w: self }
            }
            #[doc = "Bit 5 - TIMESTAMP mapping"]
            #[inline(always)]
            pub fn tamp3e(&mut self) -> TAMP3E_W {
                TAMP3E_W { w: self }
            }
            #[doc = "Bit 4 - Active level for tamper 2"]
            #[inline(always)]
            pub fn tamp2trg(&mut self) -> TAMP2TRG_W {
                TAMP2TRG_W { w: self }
            }
            #[doc = "Bit 3 - Tamper 2 detection enable"]
            #[inline(always)]
            pub fn tamp2e(&mut self) -> TAMP2E_W {
                TAMP2E_W { w: self }
            }
            #[doc = "Bit 2 - Tamper interrupt enable"]
            #[inline(always)]
            pub fn tampie(&mut self) -> TAMPIE_W {
                TAMPIE_W { w: self }
            }
            #[doc = "Bit 1 - Active level for tamper 1"]
            #[inline(always)]
            pub fn tamp1etrg(&mut self) -> TAMP1ETRG_W {
                TAMP1ETRG_W { w: self }
            }
            #[doc = "Bit 0 - Tamper 1 detection enable"]
            #[inline(always)]
            pub fn tamp1e(&mut self) -> TAMP1E_W {
                TAMP1E_W { w: self }
            }
        }
    }
    #[doc = "alarm A sub second register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alrmassr](alrmassr) module"]
    pub type ALRMASSR = crate::Reg<u32, _ALRMASSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALRMASSR;
    #[doc = "`read()` method returns [alrmassr::R](alrmassr::R) reader structure"]
    impl crate::Readable for ALRMASSR {}
    #[doc = "`write(|w| ..)` method takes [alrmassr::W](alrmassr::W) writer structure"]
    impl crate::Writable for ALRMASSR {}
    #[doc = "alarm A sub second register"]
    pub mod alrmassr {
        #[doc = "Reader of register ALRMASSR"]
        pub type R = crate::R<u32, super::ALRMASSR>;
        #[doc = "Writer for register ALRMASSR"]
        pub type W = crate::W<u32, super::ALRMASSR>;
        #[doc = "Register ALRMASSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ALRMASSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MASKSS`"]
        pub type MASKSS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MASKSS`"]
        pub struct MASKSS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASKSS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `SS`"]
        pub type SS_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `SS`"]
        pub struct SS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7fff) | ((value as u32) & 0x7fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:27 - Mask the most-significant bits starting at this bit"]
            #[inline(always)]
            pub fn maskss(&self) -> MASKSS_R {
                MASKSS_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 0:14 - Sub seconds value"]
            #[inline(always)]
            pub fn ss(&self) -> SS_R {
                SS_R::new((self.bits & 0x7fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 24:27 - Mask the most-significant bits starting at this bit"]
            #[inline(always)]
            pub fn maskss(&mut self) -> MASKSS_W {
                MASKSS_W { w: self }
            }
            #[doc = "Bits 0:14 - Sub seconds value"]
            #[inline(always)]
            pub fn ss(&mut self) -> SS_W {
                SS_W { w: self }
            }
        }
    }
    #[doc = "alarm B sub second register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alrmbssr](alrmbssr) module"]
    pub type ALRMBSSR = crate::Reg<u32, _ALRMBSSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALRMBSSR;
    #[doc = "`read()` method returns [alrmbssr::R](alrmbssr::R) reader structure"]
    impl crate::Readable for ALRMBSSR {}
    #[doc = "`write(|w| ..)` method takes [alrmbssr::W](alrmbssr::W) writer structure"]
    impl crate::Writable for ALRMBSSR {}
    #[doc = "alarm B sub second register"]
    pub mod alrmbssr {
        #[doc = "Reader of register ALRMBSSR"]
        pub type R = crate::R<u32, super::ALRMBSSR>;
        #[doc = "Writer for register ALRMBSSR"]
        pub type W = crate::W<u32, super::ALRMBSSR>;
        #[doc = "Register ALRMBSSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ALRMBSSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MASKSS`"]
        pub type MASKSS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MASKSS`"]
        pub struct MASKSS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASKSS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `SS`"]
        pub type SS_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `SS`"]
        pub struct SS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7fff) | ((value as u32) & 0x7fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:27 - Mask the most-significant bits starting at this bit"]
            #[inline(always)]
            pub fn maskss(&self) -> MASKSS_R {
                MASKSS_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 0:14 - Sub seconds value"]
            #[inline(always)]
            pub fn ss(&self) -> SS_R {
                SS_R::new((self.bits & 0x7fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 24:27 - Mask the most-significant bits starting at this bit"]
            #[inline(always)]
            pub fn maskss(&mut self) -> MASKSS_W {
                MASKSS_W { w: self }
            }
            #[doc = "Bits 0:14 - Sub seconds value"]
            #[inline(always)]
            pub fn ss(&mut self) -> SS_W {
                SS_W { w: self }
            }
        }
    }
    #[doc = "backup register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bkpr](bkpr) module"]
    pub type BKPR = crate::Reg<u32, _BKPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BKPR;
    #[doc = "`read()` method returns [bkpr::R](bkpr::R) reader structure"]
    impl crate::Readable for BKPR {}
    #[doc = "`write(|w| ..)` method takes [bkpr::W](bkpr::W) writer structure"]
    impl crate::Writable for BKPR {}
    #[doc = "backup register"]
    pub mod bkpr {
        #[doc = "Reader of register BKP%sR"]
        pub type R = crate::R<u32, super::BKPR>;
        #[doc = "Writer for register BKP%sR"]
        pub type W = crate::W<u32, super::BKPR>;
        #[doc = "Register BKP%sR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BKPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - BKP"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - BKP"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
        }
    }
}
#[doc = "Secure digital input/output interface"]
pub struct SDIO {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDIO {}
impl SDIO {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sdio::RegisterBlock {
        0x4001_2c00 as *const _
    }
}
impl Deref for SDIO {
    type Target = sdio::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SDIO::ptr() }
    }
}
#[doc = "Secure digital input/output interface"]
pub mod sdio {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - power control register"]
        pub power: POWER,
        #[doc = "0x04 - SDI clock control register"]
        pub clkcr: CLKCR,
        #[doc = "0x08 - argument register"]
        pub arg: ARG,
        #[doc = "0x0c - command register"]
        pub cmd: CMD,
        #[doc = "0x10 - command response register"]
        pub respcmd: RESPCMD,
        #[doc = "0x14 - response 1..4 register"]
        pub resp1: RESP1,
        #[doc = "0x18 - response 1..4 register"]
        pub resp2: RESP2,
        #[doc = "0x1c - response 1..4 register"]
        pub resp3: RESP3,
        #[doc = "0x20 - response 1..4 register"]
        pub resp4: RESP4,
        #[doc = "0x24 - data timer register"]
        pub dtimer: DTIMER,
        #[doc = "0x28 - data length register"]
        pub dlen: DLEN,
        #[doc = "0x2c - data control register"]
        pub dctrl: DCTRL,
        #[doc = "0x30 - data counter register"]
        pub dcount: DCOUNT,
        #[doc = "0x34 - status register"]
        pub sta: STA,
        #[doc = "0x38 - interrupt clear register"]
        pub icr: ICR,
        #[doc = "0x3c - mask register"]
        pub mask: MASK,
        _reserved16: [u8; 8usize],
        #[doc = "0x48 - FIFO counter register"]
        pub fifocnt: FIFOCNT,
        _reserved17: [u8; 52usize],
        #[doc = "0x80 - data FIFO register"]
        pub fifo: FIFO,
    }
    #[doc = "power control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [power](power) module"]
    pub type POWER = crate::Reg<u32, _POWER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _POWER;
    #[doc = "`read()` method returns [power::R](power::R) reader structure"]
    impl crate::Readable for POWER {}
    #[doc = "`write(|w| ..)` method takes [power::W](power::W) writer structure"]
    impl crate::Writable for POWER {}
    #[doc = "power control register"]
    pub mod power {
        #[doc = "Reader of register POWER"]
        pub type R = crate::R<u32, super::POWER>;
        #[doc = "Writer for register POWER"]
        pub type W = crate::W<u32, super::POWER>;
        #[doc = "Register POWER `reset()`'s with value 0"]
        impl crate::ResetValue for super::POWER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PWRCTRL`"]
        pub type PWRCTRL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PWRCTRL`"]
        pub struct PWRCTRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWRCTRL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Power supply control bits."]
            #[inline(always)]
            pub fn pwrctrl(&self) -> PWRCTRL_R {
                PWRCTRL_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Power supply control bits."]
            #[inline(always)]
            pub fn pwrctrl(&mut self) -> PWRCTRL_W {
                PWRCTRL_W { w: self }
            }
        }
    }
    #[doc = "SDI clock control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clkcr](clkcr) module"]
    pub type CLKCR = crate::Reg<u32, _CLKCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CLKCR;
    #[doc = "`read()` method returns [clkcr::R](clkcr::R) reader structure"]
    impl crate::Readable for CLKCR {}
    #[doc = "`write(|w| ..)` method takes [clkcr::W](clkcr::W) writer structure"]
    impl crate::Writable for CLKCR {}
    #[doc = "SDI clock control register"]
    pub mod clkcr {
        #[doc = "Reader of register CLKCR"]
        pub type R = crate::R<u32, super::CLKCR>;
        #[doc = "Writer for register CLKCR"]
        pub type W = crate::W<u32, super::CLKCR>;
        #[doc = "Register CLKCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CLKCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `HWFC_EN`"]
        pub type HWFC_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HWFC_EN`"]
        pub struct HWFC_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HWFC_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `NEGEDGE`"]
        pub type NEGEDGE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `NEGEDGE`"]
        pub struct NEGEDGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NEGEDGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `WIDBUS`"]
        pub type WIDBUS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WIDBUS`"]
        pub struct WIDBUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WIDBUS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 11)) | (((value as u32) & 0x03) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `BYPASS`"]
        pub type BYPASS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BYPASS`"]
        pub struct BYPASS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BYPASS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PWRSAV`"]
        pub type PWRSAV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PWRSAV`"]
        pub struct PWRSAV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWRSAV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `CLKEN`"]
        pub type CLKEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLKEN`"]
        pub struct CLKEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CLKDIV`"]
        pub type CLKDIV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CLKDIV`"]
        pub struct CLKDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - HW Flow Control enable"]
            #[inline(always)]
            pub fn hwfc_en(&self) -> HWFC_EN_R {
                HWFC_EN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - SDIO_CK dephasing selection bit"]
            #[inline(always)]
            pub fn negedge(&self) -> NEGEDGE_R {
                NEGEDGE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bits 11:12 - Wide bus mode enable bit"]
            #[inline(always)]
            pub fn widbus(&self) -> WIDBUS_R {
                WIDBUS_R::new(((self.bits >> 11) & 0x03) as u8)
            }
            #[doc = "Bit 10 - Clock divider bypass enable bit"]
            #[inline(always)]
            pub fn bypass(&self) -> BYPASS_R {
                BYPASS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Power saving configuration bit"]
            #[inline(always)]
            pub fn pwrsav(&self) -> PWRSAV_R {
                PWRSAV_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Clock enable bit"]
            #[inline(always)]
            pub fn clken(&self) -> CLKEN_R {
                CLKEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Clock divide factor"]
            #[inline(always)]
            pub fn clkdiv(&self) -> CLKDIV_R {
                CLKDIV_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 14 - HW Flow Control enable"]
            #[inline(always)]
            pub fn hwfc_en(&mut self) -> HWFC_EN_W {
                HWFC_EN_W { w: self }
            }
            #[doc = "Bit 13 - SDIO_CK dephasing selection bit"]
            #[inline(always)]
            pub fn negedge(&mut self) -> NEGEDGE_W {
                NEGEDGE_W { w: self }
            }
            #[doc = "Bits 11:12 - Wide bus mode enable bit"]
            #[inline(always)]
            pub fn widbus(&mut self) -> WIDBUS_W {
                WIDBUS_W { w: self }
            }
            #[doc = "Bit 10 - Clock divider bypass enable bit"]
            #[inline(always)]
            pub fn bypass(&mut self) -> BYPASS_W {
                BYPASS_W { w: self }
            }
            #[doc = "Bit 9 - Power saving configuration bit"]
            #[inline(always)]
            pub fn pwrsav(&mut self) -> PWRSAV_W {
                PWRSAV_W { w: self }
            }
            #[doc = "Bit 8 - Clock enable bit"]
            #[inline(always)]
            pub fn clken(&mut self) -> CLKEN_W {
                CLKEN_W { w: self }
            }
            #[doc = "Bits 0:7 - Clock divide factor"]
            #[inline(always)]
            pub fn clkdiv(&mut self) -> CLKDIV_W {
                CLKDIV_W { w: self }
            }
        }
    }
    #[doc = "argument register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arg](arg) module"]
    pub type ARG = crate::Reg<u32, _ARG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARG;
    #[doc = "`read()` method returns [arg::R](arg::R) reader structure"]
    impl crate::Readable for ARG {}
    #[doc = "`write(|w| ..)` method takes [arg::W](arg::W) writer structure"]
    impl crate::Writable for ARG {}
    #[doc = "argument register"]
    pub mod arg {
        #[doc = "Reader of register ARG"]
        pub type R = crate::R<u32, super::ARG>;
        #[doc = "Writer for register ARG"]
        pub type W = crate::W<u32, super::ARG>;
        #[doc = "Register ARG `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CMDARG`"]
        pub type CMDARG_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CMDARG`"]
        pub struct CMDARG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMDARG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Command argument"]
            #[inline(always)]
            pub fn cmdarg(&self) -> CMDARG_R {
                CMDARG_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Command argument"]
            #[inline(always)]
            pub fn cmdarg(&mut self) -> CMDARG_W {
                CMDARG_W { w: self }
            }
        }
    }
    #[doc = "command register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cmd](cmd) module"]
    pub type CMD = crate::Reg<u32, _CMD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CMD;
    #[doc = "`read()` method returns [cmd::R](cmd::R) reader structure"]
    impl crate::Readable for CMD {}
    #[doc = "`write(|w| ..)` method takes [cmd::W](cmd::W) writer structure"]
    impl crate::Writable for CMD {}
    #[doc = "command register"]
    pub mod cmd {
        #[doc = "Reader of register CMD"]
        pub type R = crate::R<u32, super::CMD>;
        #[doc = "Writer for register CMD"]
        pub type W = crate::W<u32, super::CMD>;
        #[doc = "Register CMD `reset()`'s with value 0"]
        impl crate::ResetValue for super::CMD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CE_ATACMD`"]
        pub type CE_ATACMD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CE_ATACMD`"]
        pub struct CE_ATACMD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CE_ATACMD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `nIEN`"]
        pub type NIEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `nIEN`"]
        pub struct NIEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NIEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `ENCMDcompl`"]
        pub type ENCMDCOMPL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ENCMDcompl`"]
        pub struct ENCMDCOMPL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENCMDCOMPL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `SDIOSuspend`"]
        pub type SDIOSUSPEND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SDIOSuspend`"]
        pub struct SDIOSUSPEND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDIOSUSPEND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CPSMEN`"]
        pub type CPSMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CPSMEN`"]
        pub struct CPSMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPSMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `WAITPEND`"]
        pub type WAITPEND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WAITPEND`"]
        pub struct WAITPEND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAITPEND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `WAITINT`"]
        pub type WAITINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WAITINT`"]
        pub struct WAITINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAITINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `WAITRESP`"]
        pub type WAITRESP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WAITRESP`"]
        pub struct WAITRESP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAITRESP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CMDINDEX`"]
        pub type CMDINDEX_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CMDINDEX`"]
        pub struct CMDINDEX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMDINDEX_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - CE-ATA command"]
            #[inline(always)]
            pub fn ce_atacmd(&self) -> CE_ATACMD_R {
                CE_ATACMD_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - not Interrupt Enable"]
            #[inline(always)]
            pub fn n_ien(&self) -> NIEN_R {
                NIEN_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Enable CMD completion"]
            #[inline(always)]
            pub fn encmdcompl(&self) -> ENCMDCOMPL_R {
                ENCMDCOMPL_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - SD I/O suspend command"]
            #[inline(always)]
            pub fn sdiosuspend(&self) -> SDIOSUSPEND_R {
                SDIOSUSPEND_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Command path state machine (CPSM) Enable bit"]
            #[inline(always)]
            pub fn cpsmen(&self) -> CPSMEN_R {
                CPSMEN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CPSM Waits for ends of data transfer (CmdPend internal signal)."]
            #[inline(always)]
            pub fn waitpend(&self) -> WAITPEND_R {
                WAITPEND_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - CPSM waits for interrupt request"]
            #[inline(always)]
            pub fn waitint(&self) -> WAITINT_R {
                WAITINT_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 6:7 - Wait for response bits"]
            #[inline(always)]
            pub fn waitresp(&self) -> WAITRESP_R {
                WAITRESP_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - Command index"]
            #[inline(always)]
            pub fn cmdindex(&self) -> CMDINDEX_R {
                CMDINDEX_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 14 - CE-ATA command"]
            #[inline(always)]
            pub fn ce_atacmd(&mut self) -> CE_ATACMD_W {
                CE_ATACMD_W { w: self }
            }
            #[doc = "Bit 13 - not Interrupt Enable"]
            #[inline(always)]
            pub fn n_ien(&mut self) -> NIEN_W {
                NIEN_W { w: self }
            }
            #[doc = "Bit 12 - Enable CMD completion"]
            #[inline(always)]
            pub fn encmdcompl(&mut self) -> ENCMDCOMPL_W {
                ENCMDCOMPL_W { w: self }
            }
            #[doc = "Bit 11 - SD I/O suspend command"]
            #[inline(always)]
            pub fn sdiosuspend(&mut self) -> SDIOSUSPEND_W {
                SDIOSUSPEND_W { w: self }
            }
            #[doc = "Bit 10 - Command path state machine (CPSM) Enable bit"]
            #[inline(always)]
            pub fn cpsmen(&mut self) -> CPSMEN_W {
                CPSMEN_W { w: self }
            }
            #[doc = "Bit 9 - CPSM Waits for ends of data transfer (CmdPend internal signal)."]
            #[inline(always)]
            pub fn waitpend(&mut self) -> WAITPEND_W {
                WAITPEND_W { w: self }
            }
            #[doc = "Bit 8 - CPSM waits for interrupt request"]
            #[inline(always)]
            pub fn waitint(&mut self) -> WAITINT_W {
                WAITINT_W { w: self }
            }
            #[doc = "Bits 6:7 - Wait for response bits"]
            #[inline(always)]
            pub fn waitresp(&mut self) -> WAITRESP_W {
                WAITRESP_W { w: self }
            }
            #[doc = "Bits 0:5 - Command index"]
            #[inline(always)]
            pub fn cmdindex(&mut self) -> CMDINDEX_W {
                CMDINDEX_W { w: self }
            }
        }
    }
    #[doc = "command response register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [respcmd](respcmd) module"]
    pub type RESPCMD = crate::Reg<u32, _RESPCMD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RESPCMD;
    #[doc = "`read()` method returns [respcmd::R](respcmd::R) reader structure"]
    impl crate::Readable for RESPCMD {}
    #[doc = "command response register"]
    pub mod respcmd {
        #[doc = "Reader of register RESPCMD"]
        pub type R = crate::R<u32, super::RESPCMD>;
        #[doc = "Reader of field `RESPCMD`"]
        pub type RESPCMD_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:5 - Response command index"]
            #[inline(always)]
            pub fn respcmd(&self) -> RESPCMD_R {
                RESPCMD_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "response 1..4 register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [resp1](resp1) module"]
    pub type RESP1 = crate::Reg<u32, _RESP1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RESP1;
    #[doc = "`read()` method returns [resp1::R](resp1::R) reader structure"]
    impl crate::Readable for RESP1 {}
    #[doc = "response 1..4 register"]
    pub mod resp1 {
        #[doc = "Reader of register RESP1"]
        pub type R = crate::R<u32, super::RESP1>;
        #[doc = "Reader of field `CARDSTATUS1`"]
        pub type CARDSTATUS1_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - see Table 133."]
            #[inline(always)]
            pub fn cardstatus1(&self) -> CARDSTATUS1_R {
                CARDSTATUS1_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "response 1..4 register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [resp2](resp2) module"]
    pub type RESP2 = crate::Reg<u32, _RESP2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RESP2;
    #[doc = "`read()` method returns [resp2::R](resp2::R) reader structure"]
    impl crate::Readable for RESP2 {}
    #[doc = "response 1..4 register"]
    pub mod resp2 {
        #[doc = "Reader of register RESP2"]
        pub type R = crate::R<u32, super::RESP2>;
        #[doc = "Reader of field `CARDSTATUS2`"]
        pub type CARDSTATUS2_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - see Table 133."]
            #[inline(always)]
            pub fn cardstatus2(&self) -> CARDSTATUS2_R {
                CARDSTATUS2_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "response 1..4 register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [resp3](resp3) module"]
    pub type RESP3 = crate::Reg<u32, _RESP3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RESP3;
    #[doc = "`read()` method returns [resp3::R](resp3::R) reader structure"]
    impl crate::Readable for RESP3 {}
    #[doc = "response 1..4 register"]
    pub mod resp3 {
        #[doc = "Reader of register RESP3"]
        pub type R = crate::R<u32, super::RESP3>;
        #[doc = "Reader of field `CARDSTATUS3`"]
        pub type CARDSTATUS3_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - see Table 133."]
            #[inline(always)]
            pub fn cardstatus3(&self) -> CARDSTATUS3_R {
                CARDSTATUS3_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "response 1..4 register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [resp4](resp4) module"]
    pub type RESP4 = crate::Reg<u32, _RESP4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RESP4;
    #[doc = "`read()` method returns [resp4::R](resp4::R) reader structure"]
    impl crate::Readable for RESP4 {}
    #[doc = "response 1..4 register"]
    pub mod resp4 {
        #[doc = "Reader of register RESP4"]
        pub type R = crate::R<u32, super::RESP4>;
        #[doc = "Reader of field `CARDSTATUS4`"]
        pub type CARDSTATUS4_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - see Table 133."]
            #[inline(always)]
            pub fn cardstatus4(&self) -> CARDSTATUS4_R {
                CARDSTATUS4_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "data timer register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dtimer](dtimer) module"]
    pub type DTIMER = crate::Reg<u32, _DTIMER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DTIMER;
    #[doc = "`read()` method returns [dtimer::R](dtimer::R) reader structure"]
    impl crate::Readable for DTIMER {}
    #[doc = "`write(|w| ..)` method takes [dtimer::W](dtimer::W) writer structure"]
    impl crate::Writable for DTIMER {}
    #[doc = "data timer register"]
    pub mod dtimer {
        #[doc = "Reader of register DTIMER"]
        pub type R = crate::R<u32, super::DTIMER>;
        #[doc = "Writer for register DTIMER"]
        pub type W = crate::W<u32, super::DTIMER>;
        #[doc = "Register DTIMER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DTIMER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DATATIME`"]
        pub type DATATIME_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `DATATIME`"]
        pub struct DATATIME_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATATIME_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Data timeout period"]
            #[inline(always)]
            pub fn datatime(&self) -> DATATIME_R {
                DATATIME_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Data timeout period"]
            #[inline(always)]
            pub fn datatime(&mut self) -> DATATIME_W {
                DATATIME_W { w: self }
            }
        }
    }
    #[doc = "data length register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dlen](dlen) module"]
    pub type DLEN = crate::Reg<u32, _DLEN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DLEN;
    #[doc = "`read()` method returns [dlen::R](dlen::R) reader structure"]
    impl crate::Readable for DLEN {}
    #[doc = "`write(|w| ..)` method takes [dlen::W](dlen::W) writer structure"]
    impl crate::Writable for DLEN {}
    #[doc = "data length register"]
    pub mod dlen {
        #[doc = "Reader of register DLEN"]
        pub type R = crate::R<u32, super::DLEN>;
        #[doc = "Writer for register DLEN"]
        pub type W = crate::W<u32, super::DLEN>;
        #[doc = "Register DLEN `reset()`'s with value 0"]
        impl crate::ResetValue for super::DLEN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DATALENGTH`"]
        pub type DATALENGTH_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `DATALENGTH`"]
        pub struct DATALENGTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATALENGTH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01ff_ffff) | ((value as u32) & 0x01ff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:24 - Data length value"]
            #[inline(always)]
            pub fn datalength(&self) -> DATALENGTH_R {
                DATALENGTH_R::new((self.bits & 0x01ff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:24 - Data length value"]
            #[inline(always)]
            pub fn datalength(&mut self) -> DATALENGTH_W {
                DATALENGTH_W { w: self }
            }
        }
    }
    #[doc = "data control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dctrl](dctrl) module"]
    pub type DCTRL = crate::Reg<u32, _DCTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DCTRL;
    #[doc = "`read()` method returns [dctrl::R](dctrl::R) reader structure"]
    impl crate::Readable for DCTRL {}
    #[doc = "`write(|w| ..)` method takes [dctrl::W](dctrl::W) writer structure"]
    impl crate::Writable for DCTRL {}
    #[doc = "data control register"]
    pub mod dctrl {
        #[doc = "Reader of register DCTRL"]
        pub type R = crate::R<u32, super::DCTRL>;
        #[doc = "Writer for register DCTRL"]
        pub type W = crate::W<u32, super::DCTRL>;
        #[doc = "Register DCTRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::DCTRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SDIOEN`"]
        pub type SDIOEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SDIOEN`"]
        pub struct SDIOEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDIOEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `RWMOD`"]
        pub type RWMOD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RWMOD`"]
        pub struct RWMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RWMOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `RWSTOP`"]
        pub type RWSTOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RWSTOP`"]
        pub struct RWSTOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RWSTOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `RWSTART`"]
        pub type RWSTART_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RWSTART`"]
        pub struct RWSTART_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RWSTART_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DBLOCKSIZE`"]
        pub type DBLOCKSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBLOCKSIZE`"]
        pub struct DBLOCKSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBLOCKSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DMAEN`"]
        pub type DMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAEN`"]
        pub struct DMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `DTMODE`"]
        pub type DTMODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTMODE`"]
        pub struct DTMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTMODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `DTDIR`"]
        pub type DTDIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTDIR`"]
        pub struct DTDIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTDIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DTEN`"]
        pub type DTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTEN`"]
        pub struct DTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 11 - SD I/O enable functions"]
            #[inline(always)]
            pub fn sdioen(&self) -> SDIOEN_R {
                SDIOEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Read wait mode"]
            #[inline(always)]
            pub fn rwmod(&self) -> RWMOD_R {
                RWMOD_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Read wait stop"]
            #[inline(always)]
            pub fn rwstop(&self) -> RWSTOP_R {
                RWSTOP_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Read wait start"]
            #[inline(always)]
            pub fn rwstart(&self) -> RWSTART_R {
                RWSTART_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 4:7 - Data block size"]
            #[inline(always)]
            pub fn dblocksize(&self) -> DBLOCKSIZE_R {
                DBLOCKSIZE_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bit 3 - DMA enable bit"]
            #[inline(always)]
            pub fn dmaen(&self) -> DMAEN_R {
                DMAEN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Data transfer mode selection 1: Stream or SDIO multibyte data transfer."]
            #[inline(always)]
            pub fn dtmode(&self) -> DTMODE_R {
                DTMODE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Data transfer direction selection"]
            #[inline(always)]
            pub fn dtdir(&self) -> DTDIR_R {
                DTDIR_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Data transfer enabled bit"]
            #[inline(always)]
            pub fn dten(&self) -> DTEN_R {
                DTEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 11 - SD I/O enable functions"]
            #[inline(always)]
            pub fn sdioen(&mut self) -> SDIOEN_W {
                SDIOEN_W { w: self }
            }
            #[doc = "Bit 10 - Read wait mode"]
            #[inline(always)]
            pub fn rwmod(&mut self) -> RWMOD_W {
                RWMOD_W { w: self }
            }
            #[doc = "Bit 9 - Read wait stop"]
            #[inline(always)]
            pub fn rwstop(&mut self) -> RWSTOP_W {
                RWSTOP_W { w: self }
            }
            #[doc = "Bit 8 - Read wait start"]
            #[inline(always)]
            pub fn rwstart(&mut self) -> RWSTART_W {
                RWSTART_W { w: self }
            }
            #[doc = "Bits 4:7 - Data block size"]
            #[inline(always)]
            pub fn dblocksize(&mut self) -> DBLOCKSIZE_W {
                DBLOCKSIZE_W { w: self }
            }
            #[doc = "Bit 3 - DMA enable bit"]
            #[inline(always)]
            pub fn dmaen(&mut self) -> DMAEN_W {
                DMAEN_W { w: self }
            }
            #[doc = "Bit 2 - Data transfer mode selection 1: Stream or SDIO multibyte data transfer."]
            #[inline(always)]
            pub fn dtmode(&mut self) -> DTMODE_W {
                DTMODE_W { w: self }
            }
            #[doc = "Bit 1 - Data transfer direction selection"]
            #[inline(always)]
            pub fn dtdir(&mut self) -> DTDIR_W {
                DTDIR_W { w: self }
            }
            #[doc = "Bit 0 - Data transfer enabled bit"]
            #[inline(always)]
            pub fn dten(&mut self) -> DTEN_W {
                DTEN_W { w: self }
            }
        }
    }
    #[doc = "data counter register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcount](dcount) module"]
    pub type DCOUNT = crate::Reg<u32, _DCOUNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DCOUNT;
    #[doc = "`read()` method returns [dcount::R](dcount::R) reader structure"]
    impl crate::Readable for DCOUNT {}
    #[doc = "data counter register"]
    pub mod dcount {
        #[doc = "Reader of register DCOUNT"]
        pub type R = crate::R<u32, super::DCOUNT>;
        #[doc = "Reader of field `DATACOUNT`"]
        pub type DATACOUNT_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:24 - Data count value"]
            #[inline(always)]
            pub fn datacount(&self) -> DATACOUNT_R {
                DATACOUNT_R::new((self.bits & 0x01ff_ffff) as u32)
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sta](sta) module"]
    pub type STA = crate::Reg<u32, _STA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STA;
    #[doc = "`read()` method returns [sta::R](sta::R) reader structure"]
    impl crate::Readable for STA {}
    #[doc = "status register"]
    pub mod sta {
        #[doc = "Reader of register STA"]
        pub type R = crate::R<u32, super::STA>;
        #[doc = "Reader of field `CEATAEND`"]
        pub type CEATAEND_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SDIOIT`"]
        pub type SDIOIT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXDAVL`"]
        pub type RXDAVL_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXDAVL`"]
        pub type TXDAVL_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXFIFOE`"]
        pub type RXFIFOE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXFIFOE`"]
        pub type TXFIFOE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXFIFOF`"]
        pub type RXFIFOF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXFIFOF`"]
        pub type TXFIFOF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXFIFOHF`"]
        pub type RXFIFOHF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXFIFOHE`"]
        pub type TXFIFOHE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXACT`"]
        pub type RXACT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXACT`"]
        pub type TXACT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CMDACT`"]
        pub type CMDACT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DBCKEND`"]
        pub type DBCKEND_R = crate::R<bool, bool>;
        #[doc = "Reader of field `STBITERR`"]
        pub type STBITERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DATAEND`"]
        pub type DATAEND_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CMDSENT`"]
        pub type CMDSENT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CMDREND`"]
        pub type CMDREND_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXOVERR`"]
        pub type RXOVERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXUNDERR`"]
        pub type TXUNDERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DTIMEOUT`"]
        pub type DTIMEOUT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CTIMEOUT`"]
        pub type CTIMEOUT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DCRCFAIL`"]
        pub type DCRCFAIL_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CCRCFAIL`"]
        pub type CCRCFAIL_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 23 - CE-ATA command completion signal received for CMD61"]
            #[inline(always)]
            pub fn ceataend(&self) -> CEATAEND_R {
                CEATAEND_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - SDIO interrupt received"]
            #[inline(always)]
            pub fn sdioit(&self) -> SDIOIT_R {
                SDIOIT_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Data available in receive FIFO"]
            #[inline(always)]
            pub fn rxdavl(&self) -> RXDAVL_R {
                RXDAVL_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Data available in transmit FIFO"]
            #[inline(always)]
            pub fn txdavl(&self) -> TXDAVL_R {
                TXDAVL_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Receive FIFO empty"]
            #[inline(always)]
            pub fn rxfifoe(&self) -> RXFIFOE_R {
                RXFIFOE_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Transmit FIFO empty"]
            #[inline(always)]
            pub fn txfifoe(&self) -> TXFIFOE_R {
                TXFIFOE_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Receive FIFO full"]
            #[inline(always)]
            pub fn rxfifof(&self) -> RXFIFOF_R {
                RXFIFOF_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Transmit FIFO full"]
            #[inline(always)]
            pub fn txfifof(&self) -> TXFIFOF_R {
                TXFIFOF_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Receive FIFO half full: there are at least 8 words in the FIFO"]
            #[inline(always)]
            pub fn rxfifohf(&self) -> RXFIFOHF_R {
                RXFIFOHF_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Transmit FIFO half empty: at least 8 words can be written into the FIFO"]
            #[inline(always)]
            pub fn txfifohe(&self) -> TXFIFOHE_R {
                TXFIFOHE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Data receive in progress"]
            #[inline(always)]
            pub fn rxact(&self) -> RXACT_R {
                RXACT_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Data transmit in progress"]
            #[inline(always)]
            pub fn txact(&self) -> TXACT_R {
                TXACT_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Command transfer in progress"]
            #[inline(always)]
            pub fn cmdact(&self) -> CMDACT_R {
                CMDACT_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Data block sent/received (CRC check passed)"]
            #[inline(always)]
            pub fn dbckend(&self) -> DBCKEND_R {
                DBCKEND_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Start bit not detected on all data signals in wide bus mode"]
            #[inline(always)]
            pub fn stbiterr(&self) -> STBITERR_R {
                STBITERR_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Data end (data counter, SDIDCOUNT, is zero)"]
            #[inline(always)]
            pub fn dataend(&self) -> DATAEND_R {
                DATAEND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Command sent (no response required)"]
            #[inline(always)]
            pub fn cmdsent(&self) -> CMDSENT_R {
                CMDSENT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Command response received (CRC check passed)"]
            #[inline(always)]
            pub fn cmdrend(&self) -> CMDREND_R {
                CMDREND_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Received FIFO overrun error"]
            #[inline(always)]
            pub fn rxoverr(&self) -> RXOVERR_R {
                RXOVERR_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Transmit FIFO underrun error"]
            #[inline(always)]
            pub fn txunderr(&self) -> TXUNDERR_R {
                TXUNDERR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Data timeout"]
            #[inline(always)]
            pub fn dtimeout(&self) -> DTIMEOUT_R {
                DTIMEOUT_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Command response timeout"]
            #[inline(always)]
            pub fn ctimeout(&self) -> CTIMEOUT_R {
                CTIMEOUT_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Data block sent/received (CRC check failed)"]
            #[inline(always)]
            pub fn dcrcfail(&self) -> DCRCFAIL_R {
                DCRCFAIL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Command response received (CRC check failed)"]
            #[inline(always)]
            pub fn ccrcfail(&self) -> CCRCFAIL_R {
                CCRCFAIL_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt clear register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](icr) module"]
    pub type ICR = crate::Reg<u32, _ICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICR;
    #[doc = "`read()` method returns [icr::R](icr::R) reader structure"]
    impl crate::Readable for ICR {}
    #[doc = "`write(|w| ..)` method takes [icr::W](icr::W) writer structure"]
    impl crate::Writable for ICR {}
    #[doc = "interrupt clear register"]
    pub mod icr {
        #[doc = "Reader of register ICR"]
        pub type R = crate::R<u32, super::ICR>;
        #[doc = "Writer for register ICR"]
        pub type W = crate::W<u32, super::ICR>;
        #[doc = "Register ICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CEATAENDC`"]
        pub type CEATAENDC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CEATAENDC`"]
        pub struct CEATAENDC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEATAENDC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `SDIOITC`"]
        pub type SDIOITC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SDIOITC`"]
        pub struct SDIOITC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDIOITC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `DBCKENDC`"]
        pub type DBCKENDC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBCKENDC`"]
        pub struct DBCKENDC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBCKENDC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `STBITERRC`"]
        pub type STBITERRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STBITERRC`"]
        pub struct STBITERRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STBITERRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `DATAENDC`"]
        pub type DATAENDC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DATAENDC`"]
        pub struct DATAENDC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATAENDC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CMDSENTC`"]
        pub type CMDSENTC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CMDSENTC`"]
        pub struct CMDSENTC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMDSENTC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CMDRENDC`"]
        pub type CMDRENDC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CMDRENDC`"]
        pub struct CMDRENDC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMDRENDC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RXOVERRC`"]
        pub type RXOVERRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXOVERRC`"]
        pub struct RXOVERRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXOVERRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TXUNDERRC`"]
        pub type TXUNDERRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXUNDERRC`"]
        pub struct TXUNDERRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXUNDERRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTIMEOUTC`"]
        pub type DTIMEOUTC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTIMEOUTC`"]
        pub struct DTIMEOUTC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTIMEOUTC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CTIMEOUTC`"]
        pub type CTIMEOUTC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTIMEOUTC`"]
        pub struct CTIMEOUTC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTIMEOUTC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `DCRCFAILC`"]
        pub type DCRCFAILC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DCRCFAILC`"]
        pub struct DCRCFAILC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCRCFAILC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CCRCFAILC`"]
        pub type CCRCFAILC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCRCFAILC`"]
        pub struct CCRCFAILC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCRCFAILC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 23 - CEATAEND flag clear bit"]
            #[inline(always)]
            pub fn ceataendc(&self) -> CEATAENDC_R {
                CEATAENDC_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - SDIOIT flag clear bit"]
            #[inline(always)]
            pub fn sdioitc(&self) -> SDIOITC_R {
                SDIOITC_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 10 - DBCKEND flag clear bit"]
            #[inline(always)]
            pub fn dbckendc(&self) -> DBCKENDC_R {
                DBCKENDC_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - STBITERR flag clear bit"]
            #[inline(always)]
            pub fn stbiterrc(&self) -> STBITERRC_R {
                STBITERRC_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DATAEND flag clear bit"]
            #[inline(always)]
            pub fn dataendc(&self) -> DATAENDC_R {
                DATAENDC_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - CMDSENT flag clear bit"]
            #[inline(always)]
            pub fn cmdsentc(&self) -> CMDSENTC_R {
                CMDSENTC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - CMDREND flag clear bit"]
            #[inline(always)]
            pub fn cmdrendc(&self) -> CMDRENDC_R {
                CMDRENDC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - RXOVERR flag clear bit"]
            #[inline(always)]
            pub fn rxoverrc(&self) -> RXOVERRC_R {
                RXOVERRC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TXUNDERR flag clear bit"]
            #[inline(always)]
            pub fn txunderrc(&self) -> TXUNDERRC_R {
                TXUNDERRC_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - DTIMEOUT flag clear bit"]
            #[inline(always)]
            pub fn dtimeoutc(&self) -> DTIMEOUTC_R {
                DTIMEOUTC_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CTIMEOUT flag clear bit"]
            #[inline(always)]
            pub fn ctimeoutc(&self) -> CTIMEOUTC_R {
                CTIMEOUTC_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - DCRCFAIL flag clear bit"]
            #[inline(always)]
            pub fn dcrcfailc(&self) -> DCRCFAILC_R {
                DCRCFAILC_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - CCRCFAIL flag clear bit"]
            #[inline(always)]
            pub fn ccrcfailc(&self) -> CCRCFAILC_R {
                CCRCFAILC_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 23 - CEATAEND flag clear bit"]
            #[inline(always)]
            pub fn ceataendc(&mut self) -> CEATAENDC_W {
                CEATAENDC_W { w: self }
            }
            #[doc = "Bit 22 - SDIOIT flag clear bit"]
            #[inline(always)]
            pub fn sdioitc(&mut self) -> SDIOITC_W {
                SDIOITC_W { w: self }
            }
            #[doc = "Bit 10 - DBCKEND flag clear bit"]
            #[inline(always)]
            pub fn dbckendc(&mut self) -> DBCKENDC_W {
                DBCKENDC_W { w: self }
            }
            #[doc = "Bit 9 - STBITERR flag clear bit"]
            #[inline(always)]
            pub fn stbiterrc(&mut self) -> STBITERRC_W {
                STBITERRC_W { w: self }
            }
            #[doc = "Bit 8 - DATAEND flag clear bit"]
            #[inline(always)]
            pub fn dataendc(&mut self) -> DATAENDC_W {
                DATAENDC_W { w: self }
            }
            #[doc = "Bit 7 - CMDSENT flag clear bit"]
            #[inline(always)]
            pub fn cmdsentc(&mut self) -> CMDSENTC_W {
                CMDSENTC_W { w: self }
            }
            #[doc = "Bit 6 - CMDREND flag clear bit"]
            #[inline(always)]
            pub fn cmdrendc(&mut self) -> CMDRENDC_W {
                CMDRENDC_W { w: self }
            }
            #[doc = "Bit 5 - RXOVERR flag clear bit"]
            #[inline(always)]
            pub fn rxoverrc(&mut self) -> RXOVERRC_W {
                RXOVERRC_W { w: self }
            }
            #[doc = "Bit 4 - TXUNDERR flag clear bit"]
            #[inline(always)]
            pub fn txunderrc(&mut self) -> TXUNDERRC_W {
                TXUNDERRC_W { w: self }
            }
            #[doc = "Bit 3 - DTIMEOUT flag clear bit"]
            #[inline(always)]
            pub fn dtimeoutc(&mut self) -> DTIMEOUTC_W {
                DTIMEOUTC_W { w: self }
            }
            #[doc = "Bit 2 - CTIMEOUT flag clear bit"]
            #[inline(always)]
            pub fn ctimeoutc(&mut self) -> CTIMEOUTC_W {
                CTIMEOUTC_W { w: self }
            }
            #[doc = "Bit 1 - DCRCFAIL flag clear bit"]
            #[inline(always)]
            pub fn dcrcfailc(&mut self) -> DCRCFAILC_W {
                DCRCFAILC_W { w: self }
            }
            #[doc = "Bit 0 - CCRCFAIL flag clear bit"]
            #[inline(always)]
            pub fn ccrcfailc(&mut self) -> CCRCFAILC_W {
                CCRCFAILC_W { w: self }
            }
        }
    }
    #[doc = "mask register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mask](mask) module"]
    pub type MASK = crate::Reg<u32, _MASK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MASK;
    #[doc = "`read()` method returns [mask::R](mask::R) reader structure"]
    impl crate::Readable for MASK {}
    #[doc = "`write(|w| ..)` method takes [mask::W](mask::W) writer structure"]
    impl crate::Writable for MASK {}
    #[doc = "mask register"]
    pub mod mask {
        #[doc = "Reader of register MASK"]
        pub type R = crate::R<u32, super::MASK>;
        #[doc = "Writer for register MASK"]
        pub type W = crate::W<u32, super::MASK>;
        #[doc = "Register MASK `reset()`'s with value 0"]
        impl crate::ResetValue for super::MASK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CEATAENDIE`"]
        pub type CEATAENDIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CEATAENDIE`"]
        pub struct CEATAENDIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEATAENDIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `SDIOITIE`"]
        pub type SDIOITIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SDIOITIE`"]
        pub struct SDIOITIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDIOITIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `RXDAVLIE`"]
        pub type RXDAVLIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXDAVLIE`"]
        pub struct RXDAVLIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXDAVLIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `TXDAVLIE`"]
        pub type TXDAVLIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXDAVLIE`"]
        pub struct TXDAVLIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDAVLIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `RXFIFOEIE`"]
        pub type RXFIFOEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXFIFOEIE`"]
        pub struct RXFIFOEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFIFOEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `TXFIFOEIE`"]
        pub type TXFIFOEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXFIFOEIE`"]
        pub struct TXFIFOEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFIFOEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `RXFIFOFIE`"]
        pub type RXFIFOFIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXFIFOFIE`"]
        pub struct RXFIFOFIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFIFOFIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `TXFIFOFIE`"]
        pub type TXFIFOFIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXFIFOFIE`"]
        pub struct TXFIFOFIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFIFOFIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `RXFIFOHFIE`"]
        pub type RXFIFOHFIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXFIFOHFIE`"]
        pub struct RXFIFOHFIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFIFOHFIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `TXFIFOHEIE`"]
        pub type TXFIFOHEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXFIFOHEIE`"]
        pub struct TXFIFOHEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFIFOHEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `RXACTIE`"]
        pub type RXACTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXACTIE`"]
        pub struct RXACTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXACTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TXACTIE`"]
        pub type TXACTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXACTIE`"]
        pub struct TXACTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXACTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `CMDACTIE`"]
        pub type CMDACTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CMDACTIE`"]
        pub struct CMDACTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMDACTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `DBCKENDIE`"]
        pub type DBCKENDIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBCKENDIE`"]
        pub struct DBCKENDIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBCKENDIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `STBITERRIE`"]
        pub type STBITERRIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STBITERRIE`"]
        pub struct STBITERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STBITERRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `DATAENDIE`"]
        pub type DATAENDIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DATAENDIE`"]
        pub struct DATAENDIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATAENDIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CMDSENTIE`"]
        pub type CMDSENTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CMDSENTIE`"]
        pub struct CMDSENTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMDSENTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CMDRENDIE`"]
        pub type CMDRENDIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CMDRENDIE`"]
        pub struct CMDRENDIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMDRENDIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RXOVERRIE`"]
        pub type RXOVERRIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXOVERRIE`"]
        pub struct RXOVERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXOVERRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TXUNDERRIE`"]
        pub type TXUNDERRIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXUNDERRIE`"]
        pub struct TXUNDERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXUNDERRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTIMEOUTIE`"]
        pub type DTIMEOUTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTIMEOUTIE`"]
        pub struct DTIMEOUTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTIMEOUTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CTIMEOUTIE`"]
        pub type CTIMEOUTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTIMEOUTIE`"]
        pub struct CTIMEOUTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTIMEOUTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `DCRCFAILIE`"]
        pub type DCRCFAILIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DCRCFAILIE`"]
        pub struct DCRCFAILIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCRCFAILIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CCRCFAILIE`"]
        pub type CCRCFAILIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCRCFAILIE`"]
        pub struct CCRCFAILIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCRCFAILIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 23 - CE-ATA command completion signal received interrupt enable"]
            #[inline(always)]
            pub fn ceataendie(&self) -> CEATAENDIE_R {
                CEATAENDIE_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - SDIO mode interrupt received interrupt enable"]
            #[inline(always)]
            pub fn sdioitie(&self) -> SDIOITIE_R {
                SDIOITIE_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Data available in Rx FIFO interrupt enable"]
            #[inline(always)]
            pub fn rxdavlie(&self) -> RXDAVLIE_R {
                RXDAVLIE_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Data available in Tx FIFO interrupt enable"]
            #[inline(always)]
            pub fn txdavlie(&self) -> TXDAVLIE_R {
                TXDAVLIE_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Rx FIFO empty interrupt enable"]
            #[inline(always)]
            pub fn rxfifoeie(&self) -> RXFIFOEIE_R {
                RXFIFOEIE_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Tx FIFO empty interrupt enable"]
            #[inline(always)]
            pub fn txfifoeie(&self) -> TXFIFOEIE_R {
                TXFIFOEIE_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Rx FIFO full interrupt enable"]
            #[inline(always)]
            pub fn rxfifofie(&self) -> RXFIFOFIE_R {
                RXFIFOFIE_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Tx FIFO full interrupt enable"]
            #[inline(always)]
            pub fn txfifofie(&self) -> TXFIFOFIE_R {
                TXFIFOFIE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Rx FIFO half full interrupt enable"]
            #[inline(always)]
            pub fn rxfifohfie(&self) -> RXFIFOHFIE_R {
                RXFIFOHFIE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Tx FIFO half empty interrupt enable"]
            #[inline(always)]
            pub fn txfifoheie(&self) -> TXFIFOHEIE_R {
                TXFIFOHEIE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Data receive acting interrupt enable"]
            #[inline(always)]
            pub fn rxactie(&self) -> RXACTIE_R {
                RXACTIE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Data transmit acting interrupt enable"]
            #[inline(always)]
            pub fn txactie(&self) -> TXACTIE_R {
                TXACTIE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Command acting interrupt enable"]
            #[inline(always)]
            pub fn cmdactie(&self) -> CMDACTIE_R {
                CMDACTIE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Data block end interrupt enable"]
            #[inline(always)]
            pub fn dbckendie(&self) -> DBCKENDIE_R {
                DBCKENDIE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Start bit error interrupt enable"]
            #[inline(always)]
            pub fn stbiterrie(&self) -> STBITERRIE_R {
                STBITERRIE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Data end interrupt enable"]
            #[inline(always)]
            pub fn dataendie(&self) -> DATAENDIE_R {
                DATAENDIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Command sent interrupt enable"]
            #[inline(always)]
            pub fn cmdsentie(&self) -> CMDSENTIE_R {
                CMDSENTIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Command response received interrupt enable"]
            #[inline(always)]
            pub fn cmdrendie(&self) -> CMDRENDIE_R {
                CMDRENDIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Rx FIFO overrun error interrupt enable"]
            #[inline(always)]
            pub fn rxoverrie(&self) -> RXOVERRIE_R {
                RXOVERRIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Tx FIFO underrun error interrupt enable"]
            #[inline(always)]
            pub fn txunderrie(&self) -> TXUNDERRIE_R {
                TXUNDERRIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Data timeout interrupt enable"]
            #[inline(always)]
            pub fn dtimeoutie(&self) -> DTIMEOUTIE_R {
                DTIMEOUTIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Command timeout interrupt enable"]
            #[inline(always)]
            pub fn ctimeoutie(&self) -> CTIMEOUTIE_R {
                CTIMEOUTIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Data CRC fail interrupt enable"]
            #[inline(always)]
            pub fn dcrcfailie(&self) -> DCRCFAILIE_R {
                DCRCFAILIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Command CRC fail interrupt enable"]
            #[inline(always)]
            pub fn ccrcfailie(&self) -> CCRCFAILIE_R {
                CCRCFAILIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 23 - CE-ATA command completion signal received interrupt enable"]
            #[inline(always)]
            pub fn ceataendie(&mut self) -> CEATAENDIE_W {
                CEATAENDIE_W { w: self }
            }
            #[doc = "Bit 22 - SDIO mode interrupt received interrupt enable"]
            #[inline(always)]
            pub fn sdioitie(&mut self) -> SDIOITIE_W {
                SDIOITIE_W { w: self }
            }
            #[doc = "Bit 21 - Data available in Rx FIFO interrupt enable"]
            #[inline(always)]
            pub fn rxdavlie(&mut self) -> RXDAVLIE_W {
                RXDAVLIE_W { w: self }
            }
            #[doc = "Bit 20 - Data available in Tx FIFO interrupt enable"]
            #[inline(always)]
            pub fn txdavlie(&mut self) -> TXDAVLIE_W {
                TXDAVLIE_W { w: self }
            }
            #[doc = "Bit 19 - Rx FIFO empty interrupt enable"]
            #[inline(always)]
            pub fn rxfifoeie(&mut self) -> RXFIFOEIE_W {
                RXFIFOEIE_W { w: self }
            }
            #[doc = "Bit 18 - Tx FIFO empty interrupt enable"]
            #[inline(always)]
            pub fn txfifoeie(&mut self) -> TXFIFOEIE_W {
                TXFIFOEIE_W { w: self }
            }
            #[doc = "Bit 17 - Rx FIFO full interrupt enable"]
            #[inline(always)]
            pub fn rxfifofie(&mut self) -> RXFIFOFIE_W {
                RXFIFOFIE_W { w: self }
            }
            #[doc = "Bit 16 - Tx FIFO full interrupt enable"]
            #[inline(always)]
            pub fn txfifofie(&mut self) -> TXFIFOFIE_W {
                TXFIFOFIE_W { w: self }
            }
            #[doc = "Bit 15 - Rx FIFO half full interrupt enable"]
            #[inline(always)]
            pub fn rxfifohfie(&mut self) -> RXFIFOHFIE_W {
                RXFIFOHFIE_W { w: self }
            }
            #[doc = "Bit 14 - Tx FIFO half empty interrupt enable"]
            #[inline(always)]
            pub fn txfifoheie(&mut self) -> TXFIFOHEIE_W {
                TXFIFOHEIE_W { w: self }
            }
            #[doc = "Bit 13 - Data receive acting interrupt enable"]
            #[inline(always)]
            pub fn rxactie(&mut self) -> RXACTIE_W {
                RXACTIE_W { w: self }
            }
            #[doc = "Bit 12 - Data transmit acting interrupt enable"]
            #[inline(always)]
            pub fn txactie(&mut self) -> TXACTIE_W {
                TXACTIE_W { w: self }
            }
            #[doc = "Bit 11 - Command acting interrupt enable"]
            #[inline(always)]
            pub fn cmdactie(&mut self) -> CMDACTIE_W {
                CMDACTIE_W { w: self }
            }
            #[doc = "Bit 10 - Data block end interrupt enable"]
            #[inline(always)]
            pub fn dbckendie(&mut self) -> DBCKENDIE_W {
                DBCKENDIE_W { w: self }
            }
            #[doc = "Bit 9 - Start bit error interrupt enable"]
            #[inline(always)]
            pub fn stbiterrie(&mut self) -> STBITERRIE_W {
                STBITERRIE_W { w: self }
            }
            #[doc = "Bit 8 - Data end interrupt enable"]
            #[inline(always)]
            pub fn dataendie(&mut self) -> DATAENDIE_W {
                DATAENDIE_W { w: self }
            }
            #[doc = "Bit 7 - Command sent interrupt enable"]
            #[inline(always)]
            pub fn cmdsentie(&mut self) -> CMDSENTIE_W {
                CMDSENTIE_W { w: self }
            }
            #[doc = "Bit 6 - Command response received interrupt enable"]
            #[inline(always)]
            pub fn cmdrendie(&mut self) -> CMDRENDIE_W {
                CMDRENDIE_W { w: self }
            }
            #[doc = "Bit 5 - Rx FIFO overrun error interrupt enable"]
            #[inline(always)]
            pub fn rxoverrie(&mut self) -> RXOVERRIE_W {
                RXOVERRIE_W { w: self }
            }
            #[doc = "Bit 4 - Tx FIFO underrun error interrupt enable"]
            #[inline(always)]
            pub fn txunderrie(&mut self) -> TXUNDERRIE_W {
                TXUNDERRIE_W { w: self }
            }
            #[doc = "Bit 3 - Data timeout interrupt enable"]
            #[inline(always)]
            pub fn dtimeoutie(&mut self) -> DTIMEOUTIE_W {
                DTIMEOUTIE_W { w: self }
            }
            #[doc = "Bit 2 - Command timeout interrupt enable"]
            #[inline(always)]
            pub fn ctimeoutie(&mut self) -> CTIMEOUTIE_W {
                CTIMEOUTIE_W { w: self }
            }
            #[doc = "Bit 1 - Data CRC fail interrupt enable"]
            #[inline(always)]
            pub fn dcrcfailie(&mut self) -> DCRCFAILIE_W {
                DCRCFAILIE_W { w: self }
            }
            #[doc = "Bit 0 - Command CRC fail interrupt enable"]
            #[inline(always)]
            pub fn ccrcfailie(&mut self) -> CCRCFAILIE_W {
                CCRCFAILIE_W { w: self }
            }
        }
    }
    #[doc = "FIFO counter register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fifocnt](fifocnt) module"]
    pub type FIFOCNT = crate::Reg<u32, _FIFOCNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FIFOCNT;
    #[doc = "`read()` method returns [fifocnt::R](fifocnt::R) reader structure"]
    impl crate::Readable for FIFOCNT {}
    #[doc = "FIFO counter register"]
    pub mod fifocnt {
        #[doc = "Reader of register FIFOCNT"]
        pub type R = crate::R<u32, super::FIFOCNT>;
        #[doc = "Reader of field `FIFOCOUNT`"]
        pub type FIFOCOUNT_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:23 - Remaining number of words to be written to or read from the FIFO."]
            #[inline(always)]
            pub fn fifocount(&self) -> FIFOCOUNT_R {
                FIFOCOUNT_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
    }
    #[doc = "data FIFO register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fifo](fifo) module"]
    pub type FIFO = crate::Reg<u32, _FIFO>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FIFO;
    #[doc = "`read()` method returns [fifo::R](fifo::R) reader structure"]
    impl crate::Readable for FIFO {}
    #[doc = "`write(|w| ..)` method takes [fifo::W](fifo::W) writer structure"]
    impl crate::Writable for FIFO {}
    #[doc = "data FIFO register"]
    pub mod fifo {
        #[doc = "Reader of register FIFO"]
        pub type R = crate::R<u32, super::FIFO>;
        #[doc = "Writer for register FIFO"]
        pub type W = crate::W<u32, super::FIFO>;
        #[doc = "Register FIFO `reset()`'s with value 0"]
        impl crate::ResetValue for super::FIFO {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FIF0Data`"]
        pub type FIF0DATA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FIF0Data`"]
        pub struct FIF0DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FIF0DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FIF0Data"]
            #[inline(always)]
            pub fn fif0data(&self) -> FIF0DATA_R {
                FIF0DATA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FIF0Data"]
            #[inline(always)]
            pub fn fif0data(&mut self) -> FIF0DATA_W {
                FIF0DATA_W { w: self }
            }
        }
    }
}
#[doc = "Serial peripheral interface"]
pub struct SPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI1 {}
impl SPI1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        0x4001_3000 as *const _
    }
}
impl Deref for SPI1 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SPI1::ptr() }
    }
}
#[doc = "Serial peripheral interface"]
pub mod spi1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - status register"]
        pub sr: SR,
        #[doc = "0x0c - data register"]
        pub dr: DR,
        #[doc = "0x10 - CRC polynomial register"]
        pub crcpr: CRCPR,
        #[doc = "0x14 - RX CRC register"]
        pub rxcrcr: RXCRCR,
        #[doc = "0x18 - TX CRC register"]
        pub txcrcr: TXCRCR,
        #[doc = "0x1c - I2S configuration register"]
        pub i2scfgr: I2SCFGR,
        #[doc = "0x20 - I2S prescaler register"]
        pub i2spr: I2SPR,
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BIDIMODE`"]
        pub type BIDIMODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BIDIMODE`"]
        pub struct BIDIMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIDIMODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `BIDIOE`"]
        pub type BIDIOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BIDIOE`"]
        pub struct BIDIOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIDIOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CRCEN`"]
        pub type CRCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRCEN`"]
        pub struct CRCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `CRCNEXT`"]
        pub type CRCNEXT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRCNEXT`"]
        pub struct CRCNEXT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCNEXT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DFF`"]
        pub type DFF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DFF`"]
        pub struct DFF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DFF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `RXONLY`"]
        pub type RXONLY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXONLY`"]
        pub struct RXONLY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXONLY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `SSM`"]
        pub type SSM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SSM`"]
        pub struct SSM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SSI`"]
        pub type SSI_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SSI`"]
        pub struct SSI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `LSBFIRST`"]
        pub type LSBFIRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSBFIRST`"]
        pub struct LSBFIRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSBFIRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `SPE`"]
        pub type SPE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPE`"]
        pub struct SPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `BR`"]
        pub type BR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BR`"]
        pub struct BR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 3)) | (((value as u32) & 0x07) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `MSTR`"]
        pub type MSTR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSTR`"]
        pub struct MSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSTR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CPOL`"]
        pub type CPOL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CPOL`"]
        pub struct CPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPOL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CPHA`"]
        pub type CPHA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CPHA`"]
        pub struct CPHA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPHA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Bidirectional data mode enable"]
            #[inline(always)]
            pub fn bidimode(&self) -> BIDIMODE_R {
                BIDIMODE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Output enable in bidirectional mode"]
            #[inline(always)]
            pub fn bidioe(&self) -> BIDIOE_R {
                BIDIOE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Hardware CRC calculation enable"]
            #[inline(always)]
            pub fn crcen(&self) -> CRCEN_R {
                CRCEN_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - CRC transfer next"]
            #[inline(always)]
            pub fn crcnext(&self) -> CRCNEXT_R {
                CRCNEXT_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Data frame format"]
            #[inline(always)]
            pub fn dff(&self) -> DFF_R {
                DFF_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Receive only"]
            #[inline(always)]
            pub fn rxonly(&self) -> RXONLY_R {
                RXONLY_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Software slave management"]
            #[inline(always)]
            pub fn ssm(&self) -> SSM_R {
                SSM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Internal slave select"]
            #[inline(always)]
            pub fn ssi(&self) -> SSI_R {
                SSI_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Frame format"]
            #[inline(always)]
            pub fn lsbfirst(&self) -> LSBFIRST_R {
                LSBFIRST_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SPI enable"]
            #[inline(always)]
            pub fn spe(&self) -> SPE_R {
                SPE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 3:5 - Baud rate control"]
            #[inline(always)]
            pub fn br(&self) -> BR_R {
                BR_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bit 2 - Master selection"]
            #[inline(always)]
            pub fn mstr(&self) -> MSTR_R {
                MSTR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&self) -> CPOL_R {
                CPOL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&self) -> CPHA_R {
                CPHA_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Bidirectional data mode enable"]
            #[inline(always)]
            pub fn bidimode(&mut self) -> BIDIMODE_W {
                BIDIMODE_W { w: self }
            }
            #[doc = "Bit 14 - Output enable in bidirectional mode"]
            #[inline(always)]
            pub fn bidioe(&mut self) -> BIDIOE_W {
                BIDIOE_W { w: self }
            }
            #[doc = "Bit 13 - Hardware CRC calculation enable"]
            #[inline(always)]
            pub fn crcen(&mut self) -> CRCEN_W {
                CRCEN_W { w: self }
            }
            #[doc = "Bit 12 - CRC transfer next"]
            #[inline(always)]
            pub fn crcnext(&mut self) -> CRCNEXT_W {
                CRCNEXT_W { w: self }
            }
            #[doc = "Bit 11 - Data frame format"]
            #[inline(always)]
            pub fn dff(&mut self) -> DFF_W {
                DFF_W { w: self }
            }
            #[doc = "Bit 10 - Receive only"]
            #[inline(always)]
            pub fn rxonly(&mut self) -> RXONLY_W {
                RXONLY_W { w: self }
            }
            #[doc = "Bit 9 - Software slave management"]
            #[inline(always)]
            pub fn ssm(&mut self) -> SSM_W {
                SSM_W { w: self }
            }
            #[doc = "Bit 8 - Internal slave select"]
            #[inline(always)]
            pub fn ssi(&mut self) -> SSI_W {
                SSI_W { w: self }
            }
            #[doc = "Bit 7 - Frame format"]
            #[inline(always)]
            pub fn lsbfirst(&mut self) -> LSBFIRST_W {
                LSBFIRST_W { w: self }
            }
            #[doc = "Bit 6 - SPI enable"]
            #[inline(always)]
            pub fn spe(&mut self) -> SPE_W {
                SPE_W { w: self }
            }
            #[doc = "Bits 3:5 - Baud rate control"]
            #[inline(always)]
            pub fn br(&mut self) -> BR_W {
                BR_W { w: self }
            }
            #[doc = "Bit 2 - Master selection"]
            #[inline(always)]
            pub fn mstr(&mut self) -> MSTR_W {
                MSTR_W { w: self }
            }
            #[doc = "Bit 1 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&mut self) -> CPOL_W {
                CPOL_W { w: self }
            }
            #[doc = "Bit 0 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&mut self) -> CPHA_W {
                CPHA_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TXEIE`"]
        pub type TXEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXEIE`"]
        pub struct TXEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `RXNEIE`"]
        pub type RXNEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXNEIE`"]
        pub struct RXNEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXNEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `ERRIE`"]
        pub type ERRIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ERRIE`"]
        pub struct ERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `FRF`"]
        pub type FRF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FRF`"]
        pub struct FRF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SSOE`"]
        pub type SSOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SSOE`"]
        pub struct SSOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TXDMAEN`"]
        pub type TXDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXDMAEN`"]
        pub struct TXDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RXDMAEN`"]
        pub type RXDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXDMAEN`"]
        pub struct RXDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - Tx buffer empty interrupt enable"]
            #[inline(always)]
            pub fn txeie(&self) -> TXEIE_R {
                TXEIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RX buffer not empty interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&self) -> RXNEIE_R {
                RXNEIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&self) -> ERRIE_R {
                ERRIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Frame format"]
            #[inline(always)]
            pub fn frf(&self) -> FRF_R {
                FRF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 2 - SS output enable"]
            #[inline(always)]
            pub fn ssoe(&self) -> SSOE_R {
                SSOE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Tx buffer DMA enable"]
            #[inline(always)]
            pub fn txdmaen(&self) -> TXDMAEN_R {
                TXDMAEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Rx buffer DMA enable"]
            #[inline(always)]
            pub fn rxdmaen(&self) -> RXDMAEN_R {
                RXDMAEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - Tx buffer empty interrupt enable"]
            #[inline(always)]
            pub fn txeie(&mut self) -> TXEIE_W {
                TXEIE_W { w: self }
            }
            #[doc = "Bit 6 - RX buffer not empty interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&mut self) -> RXNEIE_W {
                RXNEIE_W { w: self }
            }
            #[doc = "Bit 5 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&mut self) -> ERRIE_W {
                ERRIE_W { w: self }
            }
            #[doc = "Bit 4 - Frame format"]
            #[inline(always)]
            pub fn frf(&mut self) -> FRF_W {
                FRF_W { w: self }
            }
            #[doc = "Bit 2 - SS output enable"]
            #[inline(always)]
            pub fn ssoe(&mut self) -> SSOE_W {
                SSOE_W { w: self }
            }
            #[doc = "Bit 1 - Tx buffer DMA enable"]
            #[inline(always)]
            pub fn txdmaen(&mut self) -> TXDMAEN_W {
                TXDMAEN_W { w: self }
            }
            #[doc = "Bit 0 - Rx buffer DMA enable"]
            #[inline(always)]
            pub fn rxdmaen(&mut self) -> RXDMAEN_W {
                RXDMAEN_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0x02"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x02
            }
        }
        #[doc = "Reader of field `TIFRFE`"]
        pub type TIFRFE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BSY`"]
        pub type BSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `OVR`"]
        pub type OVR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `MODF`"]
        pub type MODF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CRCERR`"]
        pub type CRCERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRCERR`"]
        pub struct CRCERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `UDR`"]
        pub type UDR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CHSIDE`"]
        pub type CHSIDE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXE`"]
        pub type TXE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXNE`"]
        pub type RXNE_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 8 - TI frame format error"]
            #[inline(always)]
            pub fn tifrfe(&self) -> TIFRFE_R {
                TIFRFE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Busy flag"]
            #[inline(always)]
            pub fn bsy(&self) -> BSY_R {
                BSY_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Overrun flag"]
            #[inline(always)]
            pub fn ovr(&self) -> OVR_R {
                OVR_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Mode fault"]
            #[inline(always)]
            pub fn modf(&self) -> MODF_R {
                MODF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - CRC error flag"]
            #[inline(always)]
            pub fn crcerr(&self) -> CRCERR_R {
                CRCERR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Underrun flag"]
            #[inline(always)]
            pub fn udr(&self) -> UDR_R {
                UDR_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel side"]
            #[inline(always)]
            pub fn chside(&self) -> CHSIDE_R {
                CHSIDE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Transmit buffer empty"]
            #[inline(always)]
            pub fn txe(&self) -> TXE_R {
                TXE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Receive buffer not empty"]
            #[inline(always)]
            pub fn rxne(&self) -> RXNE_R {
                RXNE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 4 - CRC error flag"]
            #[inline(always)]
            pub fn crcerr(&mut self) -> CRCERR_W {
                CRCERR_W { w: self }
            }
        }
    }
    #[doc = "data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "`write(|w| ..)` method takes [dr::W](dr::W) writer structure"]
    impl crate::Writable for DR {}
    #[doc = "data register"]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Writer for register DR"]
        pub type W = crate::W<u32, super::DR>;
        #[doc = "Register DR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DR`"]
        pub type DR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DR`"]
        pub struct DR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Data register"]
            #[inline(always)]
            pub fn dr(&self) -> DR_R {
                DR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Data register"]
            #[inline(always)]
            pub fn dr(&mut self) -> DR_W {
                DR_W { w: self }
            }
        }
    }
    #[doc = "CRC polynomial register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [crcpr](crcpr) module"]
    pub type CRCPR = crate::Reg<u32, _CRCPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CRCPR;
    #[doc = "`read()` method returns [crcpr::R](crcpr::R) reader structure"]
    impl crate::Readable for CRCPR {}
    #[doc = "`write(|w| ..)` method takes [crcpr::W](crcpr::W) writer structure"]
    impl crate::Writable for CRCPR {}
    #[doc = "CRC polynomial register"]
    pub mod crcpr {
        #[doc = "Reader of register CRCPR"]
        pub type R = crate::R<u32, super::CRCPR>;
        #[doc = "Writer for register CRCPR"]
        pub type W = crate::W<u32, super::CRCPR>;
        #[doc = "Register CRCPR `reset()`'s with value 0x07"]
        impl crate::ResetValue for super::CRCPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x07
            }
        }
        #[doc = "Reader of field `CRCPOLY`"]
        pub type CRCPOLY_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CRCPOLY`"]
        pub struct CRCPOLY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCPOLY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - CRC polynomial register"]
            #[inline(always)]
            pub fn crcpoly(&self) -> CRCPOLY_R {
                CRCPOLY_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - CRC polynomial register"]
            #[inline(always)]
            pub fn crcpoly(&mut self) -> CRCPOLY_W {
                CRCPOLY_W { w: self }
            }
        }
    }
    #[doc = "RX CRC register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxcrcr](rxcrcr) module"]
    pub type RXCRCR = crate::Reg<u32, _RXCRCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RXCRCR;
    #[doc = "`read()` method returns [rxcrcr::R](rxcrcr::R) reader structure"]
    impl crate::Readable for RXCRCR {}
    #[doc = "RX CRC register"]
    pub mod rxcrcr {
        #[doc = "Reader of register RXCRCR"]
        pub type R = crate::R<u32, super::RXCRCR>;
        #[doc = "Reader of field `RxCRC`"]
        pub type RXCRC_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Rx CRC register"]
            #[inline(always)]
            pub fn rx_crc(&self) -> RXCRC_R {
                RXCRC_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "TX CRC register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [txcrcr](txcrcr) module"]
    pub type TXCRCR = crate::Reg<u32, _TXCRCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TXCRCR;
    #[doc = "`read()` method returns [txcrcr::R](txcrcr::R) reader structure"]
    impl crate::Readable for TXCRCR {}
    #[doc = "TX CRC register"]
    pub mod txcrcr {
        #[doc = "Reader of register TXCRCR"]
        pub type R = crate::R<u32, super::TXCRCR>;
        #[doc = "Reader of field `TxCRC`"]
        pub type TXCRC_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Tx CRC register"]
            #[inline(always)]
            pub fn tx_crc(&self) -> TXCRC_R {
                TXCRC_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "I2S configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2scfgr](i2scfgr) module"]
    pub type I2SCFGR = crate::Reg<u32, _I2SCFGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SCFGR;
    #[doc = "`read()` method returns [i2scfgr::R](i2scfgr::R) reader structure"]
    impl crate::Readable for I2SCFGR {}
    #[doc = "`write(|w| ..)` method takes [i2scfgr::W](i2scfgr::W) writer structure"]
    impl crate::Writable for I2SCFGR {}
    #[doc = "I2S configuration register"]
    pub mod i2scfgr {
        #[doc = "Reader of register I2SCFGR"]
        pub type R = crate::R<u32, super::I2SCFGR>;
        #[doc = "Writer for register I2SCFGR"]
        pub type W = crate::W<u32, super::I2SCFGR>;
        #[doc = "Register I2SCFGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2SCFGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `I2SMOD`"]
        pub type I2SMOD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2SMOD`"]
        pub struct I2SMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2SMOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `I2SE`"]
        pub type I2SE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2SE`"]
        pub struct I2SE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2SE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `I2SCFG`"]
        pub type I2SCFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `I2SCFG`"]
        pub struct I2SCFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2SCFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PCMSYNC`"]
        pub type PCMSYNC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PCMSYNC`"]
        pub struct PCMSYNC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PCMSYNC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `I2SSTD`"]
        pub type I2SSTD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `I2SSTD`"]
        pub struct I2SSTD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2SSTD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CKPOL`"]
        pub type CKPOL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CKPOL`"]
        pub struct CKPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKPOL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `DATLEN`"]
        pub type DATLEN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATLEN`"]
        pub struct DATLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATLEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 1)) | (((value as u32) & 0x03) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CHLEN`"]
        pub type CHLEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CHLEN`"]
        pub struct CHLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHLEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 11 - I2S mode selection"]
            #[inline(always)]
            pub fn i2smod(&self) -> I2SMOD_R {
                I2SMOD_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - I2S Enable"]
            #[inline(always)]
            pub fn i2se(&self) -> I2SE_R {
                I2SE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - I2S configuration mode"]
            #[inline(always)]
            pub fn i2scfg(&self) -> I2SCFG_R {
                I2SCFG_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - PCM frame synchronization"]
            #[inline(always)]
            pub fn pcmsync(&self) -> PCMSYNC_R {
                PCMSYNC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:5 - I2S standard selection"]
            #[inline(always)]
            pub fn i2sstd(&self) -> I2SSTD_R {
                I2SSTD_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 3 - Steady state clock polarity"]
            #[inline(always)]
            pub fn ckpol(&self) -> CKPOL_R {
                CKPOL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 1:2 - Data length to be transferred"]
            #[inline(always)]
            pub fn datlen(&self) -> DATLEN_R {
                DATLEN_R::new(((self.bits >> 1) & 0x03) as u8)
            }
            #[doc = "Bit 0 - Channel length (number of bits per audio channel)"]
            #[inline(always)]
            pub fn chlen(&self) -> CHLEN_R {
                CHLEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 11 - I2S mode selection"]
            #[inline(always)]
            pub fn i2smod(&mut self) -> I2SMOD_W {
                I2SMOD_W { w: self }
            }
            #[doc = "Bit 10 - I2S Enable"]
            #[inline(always)]
            pub fn i2se(&mut self) -> I2SE_W {
                I2SE_W { w: self }
            }
            #[doc = "Bits 8:9 - I2S configuration mode"]
            #[inline(always)]
            pub fn i2scfg(&mut self) -> I2SCFG_W {
                I2SCFG_W { w: self }
            }
            #[doc = "Bit 7 - PCM frame synchronization"]
            #[inline(always)]
            pub fn pcmsync(&mut self) -> PCMSYNC_W {
                PCMSYNC_W { w: self }
            }
            #[doc = "Bits 4:5 - I2S standard selection"]
            #[inline(always)]
            pub fn i2sstd(&mut self) -> I2SSTD_W {
                I2SSTD_W { w: self }
            }
            #[doc = "Bit 3 - Steady state clock polarity"]
            #[inline(always)]
            pub fn ckpol(&mut self) -> CKPOL_W {
                CKPOL_W { w: self }
            }
            #[doc = "Bits 1:2 - Data length to be transferred"]
            #[inline(always)]
            pub fn datlen(&mut self) -> DATLEN_W {
                DATLEN_W { w: self }
            }
            #[doc = "Bit 0 - Channel length (number of bits per audio channel)"]
            #[inline(always)]
            pub fn chlen(&mut self) -> CHLEN_W {
                CHLEN_W { w: self }
            }
        }
    }
    #[doc = "I2S prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2spr](i2spr) module"]
    pub type I2SPR = crate::Reg<u32, _I2SPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SPR;
    #[doc = "`read()` method returns [i2spr::R](i2spr::R) reader structure"]
    impl crate::Readable for I2SPR {}
    #[doc = "`write(|w| ..)` method takes [i2spr::W](i2spr::W) writer structure"]
    impl crate::Writable for I2SPR {}
    #[doc = "I2S prescaler register"]
    pub mod i2spr {
        #[doc = "Reader of register I2SPR"]
        pub type R = crate::R<u32, super::I2SPR>;
        #[doc = "Writer for register I2SPR"]
        pub type W = crate::W<u32, super::I2SPR>;
        #[doc = "Register I2SPR `reset()`'s with value 0x02"]
        impl crate::ResetValue for super::I2SPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x02
            }
        }
        #[doc = "Reader of field `MCKOE`"]
        pub type MCKOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MCKOE`"]
        pub struct MCKOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCKOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `ODD`"]
        pub type ODD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODD`"]
        pub struct ODD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `I2SDIV`"]
        pub type I2SDIV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `I2SDIV`"]
        pub struct I2SDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2SDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 9 - Master clock output enable"]
            #[inline(always)]
            pub fn mckoe(&self) -> MCKOE_R {
                MCKOE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Odd factor for the prescaler"]
            #[inline(always)]
            pub fn odd(&self) -> ODD_R {
                ODD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - I2S Linear prescaler"]
            #[inline(always)]
            pub fn i2sdiv(&self) -> I2SDIV_R {
                I2SDIV_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 9 - Master clock output enable"]
            #[inline(always)]
            pub fn mckoe(&mut self) -> MCKOE_W {
                MCKOE_W { w: self }
            }
            #[doc = "Bit 8 - Odd factor for the prescaler"]
            #[inline(always)]
            pub fn odd(&mut self) -> ODD_W {
                ODD_W { w: self }
            }
            #[doc = "Bits 0:7 - I2S Linear prescaler"]
            #[inline(always)]
            pub fn i2sdiv(&mut self) -> I2SDIV_W {
                I2SDIV_W { w: self }
            }
        }
    }
}
#[doc = "Serial peripheral interface"]
pub struct SPI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI2 {}
impl SPI2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        0x4000_3800 as *const _
    }
}
impl Deref for SPI2 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SPI2::ptr() }
    }
}
#[doc = "Serial peripheral interface"]
pub struct SPI3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI3 {}
impl SPI3 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        0x4000_3c00 as *const _
    }
}
impl Deref for SPI3 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SPI3::ptr() }
    }
}
#[doc = "System configuration controller"]
pub struct SYSCFG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSCFG {}
impl SYSCFG {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const syscfg::RegisterBlock {
        0x4001_0000 as *const _
    }
}
impl Deref for SYSCFG {
    type Target = syscfg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SYSCFG::ptr() }
    }
}
#[doc = "System configuration controller"]
pub mod syscfg {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - memory remap register"]
        pub memrmp: MEMRMP,
        #[doc = "0x04 - peripheral mode configuration register"]
        pub pmc: PMC,
        #[doc = "0x08 - external interrupt configuration register 1"]
        pub exticr1: EXTICR1,
        #[doc = "0x0c - external interrupt configuration register 2"]
        pub exticr2: EXTICR2,
        #[doc = "0x10 - external interrupt configuration register 3"]
        pub exticr3: EXTICR3,
        #[doc = "0x14 - external interrupt configuration register 4"]
        pub exticr4: EXTICR4,
    }
    #[doc = "memory remap register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [memrmp](memrmp) module"]
    pub type MEMRMP = crate::Reg<u32, _MEMRMP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MEMRMP;
    #[doc = "`read()` method returns [memrmp::R](memrmp::R) reader structure"]
    impl crate::Readable for MEMRMP {}
    #[doc = "`write(|w| ..)` method takes [memrmp::W](memrmp::W) writer structure"]
    impl crate::Writable for MEMRMP {}
    #[doc = "memory remap register"]
    pub mod memrmp {
        #[doc = "Reader of register MEMRMP"]
        pub type R = crate::R<u32, super::MEMRMP>;
        #[doc = "Writer for register MEMRMP"]
        pub type W = crate::W<u32, super::MEMRMP>;
        #[doc = "Register MEMRMP `reset()`'s with value 0"]
        impl crate::ResetValue for super::MEMRMP {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MEM_MODE`"]
        pub type MEM_MODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MEM_MODE`"]
        pub struct MEM_MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM_MODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Reader of field `BOOT_MODE`"]
        pub type BOOT_MODE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:1 - MEM_MODE"]
            #[inline(always)]
            pub fn mem_mode(&self) -> MEM_MODE_R {
                MEM_MODE_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - BOOT_MODE"]
            #[inline(always)]
            pub fn boot_mode(&self) -> BOOT_MODE_R {
                BOOT_MODE_R::new(((self.bits >> 8) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - MEM_MODE"]
            #[inline(always)]
            pub fn mem_mode(&mut self) -> MEM_MODE_W {
                MEM_MODE_W { w: self }
            }
        }
    }
    #[doc = "peripheral mode configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pmc](pmc) module"]
    pub type PMC = crate::Reg<u32, _PMC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PMC;
    #[doc = "`read()` method returns [pmc::R](pmc::R) reader structure"]
    impl crate::Readable for PMC {}
    #[doc = "`write(|w| ..)` method takes [pmc::W](pmc::W) writer structure"]
    impl crate::Writable for PMC {}
    #[doc = "peripheral mode configuration register"]
    pub mod pmc {
        #[doc = "Reader of register PMC"]
        pub type R = crate::R<u32, super::PMC>;
        #[doc = "Writer for register PMC"]
        pub type W = crate::W<u32, super::PMC>;
        #[doc = "Register PMC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PMC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `USB_PU`"]
        pub type USB_PU_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USB_PU`"]
        pub struct USB_PU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USB_PU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `LCD_CAPA`"]
        pub type LCD_CAPA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LCD_CAPA`"]
        pub struct LCD_CAPA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCD_CAPA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 1)) | (((value as u32) & 0x1f) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - USB pull-up"]
            #[inline(always)]
            pub fn usb_pu(&self) -> USB_PU_R {
                USB_PU_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bits 1:5 - USB pull-up enable on DP line"]
            #[inline(always)]
            pub fn lcd_capa(&self) -> LCD_CAPA_R {
                LCD_CAPA_R::new(((self.bits >> 1) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - USB pull-up"]
            #[inline(always)]
            pub fn usb_pu(&mut self) -> USB_PU_W {
                USB_PU_W { w: self }
            }
            #[doc = "Bits 1:5 - USB pull-up enable on DP line"]
            #[inline(always)]
            pub fn lcd_capa(&mut self) -> LCD_CAPA_W {
                LCD_CAPA_W { w: self }
            }
        }
    }
    #[doc = "external interrupt configuration register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr1](exticr1) module"]
    pub type EXTICR1 = crate::Reg<u32, _EXTICR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXTICR1;
    #[doc = "`read()` method returns [exticr1::R](exticr1::R) reader structure"]
    impl crate::Readable for EXTICR1 {}
    #[doc = "`write(|w| ..)` method takes [exticr1::W](exticr1::W) writer structure"]
    impl crate::Writable for EXTICR1 {}
    #[doc = "external interrupt configuration register 1"]
    pub mod exticr1 {
        #[doc = "Reader of register EXTICR1"]
        pub type R = crate::R<u32, super::EXTICR1>;
        #[doc = "Writer for register EXTICR1"]
        pub type W = crate::W<u32, super::EXTICR1>;
        #[doc = "Register EXTICR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::EXTICR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EXTI3`"]
        pub type EXTI3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI3`"]
        pub struct EXTI3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `EXTI2`"]
        pub type EXTI2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI2`"]
        pub struct EXTI2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `EXTI1`"]
        pub type EXTI1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI1`"]
        pub struct EXTI1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `EXTI0`"]
        pub type EXTI0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI0`"]
        pub struct EXTI0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - EXTI x configuration (x = 0 to 3)"]
            #[inline(always)]
            pub fn exti3(&self) -> EXTI3_R {
                EXTI3_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI x configuration (x = 0 to 3)"]
            #[inline(always)]
            pub fn exti2(&self) -> EXTI2_R {
                EXTI2_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI x configuration (x = 0 to 3)"]
            #[inline(always)]
            pub fn exti1(&self) -> EXTI1_R {
                EXTI1_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - EXTI x configuration (x = 0 to 3)"]
            #[inline(always)]
            pub fn exti0(&self) -> EXTI0_R {
                EXTI0_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - EXTI x configuration (x = 0 to 3)"]
            #[inline(always)]
            pub fn exti3(&mut self) -> EXTI3_W {
                EXTI3_W { w: self }
            }
            #[doc = "Bits 8:11 - EXTI x configuration (x = 0 to 3)"]
            #[inline(always)]
            pub fn exti2(&mut self) -> EXTI2_W {
                EXTI2_W { w: self }
            }
            #[doc = "Bits 4:7 - EXTI x configuration (x = 0 to 3)"]
            #[inline(always)]
            pub fn exti1(&mut self) -> EXTI1_W {
                EXTI1_W { w: self }
            }
            #[doc = "Bits 0:3 - EXTI x configuration (x = 0 to 3)"]
            #[inline(always)]
            pub fn exti0(&mut self) -> EXTI0_W {
                EXTI0_W { w: self }
            }
        }
    }
    #[doc = "external interrupt configuration register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr2](exticr2) module"]
    pub type EXTICR2 = crate::Reg<u32, _EXTICR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXTICR2;
    #[doc = "`read()` method returns [exticr2::R](exticr2::R) reader structure"]
    impl crate::Readable for EXTICR2 {}
    #[doc = "`write(|w| ..)` method takes [exticr2::W](exticr2::W) writer structure"]
    impl crate::Writable for EXTICR2 {}
    #[doc = "external interrupt configuration register 2"]
    pub mod exticr2 {
        #[doc = "Reader of register EXTICR2"]
        pub type R = crate::R<u32, super::EXTICR2>;
        #[doc = "Writer for register EXTICR2"]
        pub type W = crate::W<u32, super::EXTICR2>;
        #[doc = "Register EXTICR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::EXTICR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EXTI7`"]
        pub type EXTI7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI7`"]
        pub struct EXTI7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `EXTI6`"]
        pub type EXTI6_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI6`"]
        pub struct EXTI6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `EXTI5`"]
        pub type EXTI5_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI5`"]
        pub struct EXTI5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `EXTI4`"]
        pub type EXTI4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI4`"]
        pub struct EXTI4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - EXTI x configuration (x = 4 to 7)"]
            #[inline(always)]
            pub fn exti7(&self) -> EXTI7_R {
                EXTI7_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI x configuration (x = 4 to 7)"]
            #[inline(always)]
            pub fn exti6(&self) -> EXTI6_R {
                EXTI6_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI x configuration (x = 4 to 7)"]
            #[inline(always)]
            pub fn exti5(&self) -> EXTI5_R {
                EXTI5_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - EXTI x configuration (x = 4 to 7)"]
            #[inline(always)]
            pub fn exti4(&self) -> EXTI4_R {
                EXTI4_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - EXTI x configuration (x = 4 to 7)"]
            #[inline(always)]
            pub fn exti7(&mut self) -> EXTI7_W {
                EXTI7_W { w: self }
            }
            #[doc = "Bits 8:11 - EXTI x configuration (x = 4 to 7)"]
            #[inline(always)]
            pub fn exti6(&mut self) -> EXTI6_W {
                EXTI6_W { w: self }
            }
            #[doc = "Bits 4:7 - EXTI x configuration (x = 4 to 7)"]
            #[inline(always)]
            pub fn exti5(&mut self) -> EXTI5_W {
                EXTI5_W { w: self }
            }
            #[doc = "Bits 0:3 - EXTI x configuration (x = 4 to 7)"]
            #[inline(always)]
            pub fn exti4(&mut self) -> EXTI4_W {
                EXTI4_W { w: self }
            }
        }
    }
    #[doc = "external interrupt configuration register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr3](exticr3) module"]
    pub type EXTICR3 = crate::Reg<u32, _EXTICR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXTICR3;
    #[doc = "`read()` method returns [exticr3::R](exticr3::R) reader structure"]
    impl crate::Readable for EXTICR3 {}
    #[doc = "`write(|w| ..)` method takes [exticr3::W](exticr3::W) writer structure"]
    impl crate::Writable for EXTICR3 {}
    #[doc = "external interrupt configuration register 3"]
    pub mod exticr3 {
        #[doc = "Reader of register EXTICR3"]
        pub type R = crate::R<u32, super::EXTICR3>;
        #[doc = "Writer for register EXTICR3"]
        pub type W = crate::W<u32, super::EXTICR3>;
        #[doc = "Register EXTICR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::EXTICR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EXTI11`"]
        pub type EXTI11_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI11`"]
        pub struct EXTI11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `EXTI10`"]
        pub type EXTI10_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI10`"]
        pub struct EXTI10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `EXTI9`"]
        pub type EXTI9_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI9`"]
        pub struct EXTI9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `EXTI8`"]
        pub type EXTI8_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI8`"]
        pub struct EXTI8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - EXTI x configuration (x = 8 to 11)"]
            #[inline(always)]
            pub fn exti11(&self) -> EXTI11_R {
                EXTI11_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI10"]
            #[inline(always)]
            pub fn exti10(&self) -> EXTI10_R {
                EXTI10_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI x configuration (x = 8 to 11)"]
            #[inline(always)]
            pub fn exti9(&self) -> EXTI9_R {
                EXTI9_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - EXTI x configuration (x = 8 to 11)"]
            #[inline(always)]
            pub fn exti8(&self) -> EXTI8_R {
                EXTI8_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - EXTI x configuration (x = 8 to 11)"]
            #[inline(always)]
            pub fn exti11(&mut self) -> EXTI11_W {
                EXTI11_W { w: self }
            }
            #[doc = "Bits 8:11 - EXTI10"]
            #[inline(always)]
            pub fn exti10(&mut self) -> EXTI10_W {
                EXTI10_W { w: self }
            }
            #[doc = "Bits 4:7 - EXTI x configuration (x = 8 to 11)"]
            #[inline(always)]
            pub fn exti9(&mut self) -> EXTI9_W {
                EXTI9_W { w: self }
            }
            #[doc = "Bits 0:3 - EXTI x configuration (x = 8 to 11)"]
            #[inline(always)]
            pub fn exti8(&mut self) -> EXTI8_W {
                EXTI8_W { w: self }
            }
        }
    }
    #[doc = "external interrupt configuration register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr4](exticr4) module"]
    pub type EXTICR4 = crate::Reg<u32, _EXTICR4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXTICR4;
    #[doc = "`read()` method returns [exticr4::R](exticr4::R) reader structure"]
    impl crate::Readable for EXTICR4 {}
    #[doc = "`write(|w| ..)` method takes [exticr4::W](exticr4::W) writer structure"]
    impl crate::Writable for EXTICR4 {}
    #[doc = "external interrupt configuration register 4"]
    pub mod exticr4 {
        #[doc = "Reader of register EXTICR4"]
        pub type R = crate::R<u32, super::EXTICR4>;
        #[doc = "Writer for register EXTICR4"]
        pub type W = crate::W<u32, super::EXTICR4>;
        #[doc = "Register EXTICR4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::EXTICR4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EXTI15`"]
        pub type EXTI15_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI15`"]
        pub struct EXTI15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `EXTI14`"]
        pub type EXTI14_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI14`"]
        pub struct EXTI14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `EXTI13`"]
        pub type EXTI13_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI13`"]
        pub struct EXTI13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `EXTI12`"]
        pub type EXTI12_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTI12`"]
        pub struct EXTI12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - EXTI x configuration (x = 12 to 15)"]
            #[inline(always)]
            pub fn exti15(&self) -> EXTI15_R {
                EXTI15_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI14"]
            #[inline(always)]
            pub fn exti14(&self) -> EXTI14_R {
                EXTI14_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI13"]
            #[inline(always)]
            pub fn exti13(&self) -> EXTI13_R {
                EXTI13_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - EXTI12"]
            #[inline(always)]
            pub fn exti12(&self) -> EXTI12_R {
                EXTI12_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - EXTI x configuration (x = 12 to 15)"]
            #[inline(always)]
            pub fn exti15(&mut self) -> EXTI15_W {
                EXTI15_W { w: self }
            }
            #[doc = "Bits 8:11 - EXTI14"]
            #[inline(always)]
            pub fn exti14(&mut self) -> EXTI14_W {
                EXTI14_W { w: self }
            }
            #[doc = "Bits 4:7 - EXTI13"]
            #[inline(always)]
            pub fn exti13(&mut self) -> EXTI13_W {
                EXTI13_W { w: self }
            }
            #[doc = "Bits 0:3 - EXTI12"]
            #[inline(always)]
            pub fn exti12(&mut self) -> EXTI12_W {
                EXTI12_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose timers"]
pub struct TIM10 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM10 {}
impl TIM10 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim10::RegisterBlock {
        0x4001_0c00 as *const _
    }
}
impl Deref for TIM10 {
    type Target = tim10::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM10::ptr() }
    }
}
#[doc = "General-purpose timers"]
pub mod tim10 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - TIM10 control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - TIM10 slave mode control register"]
        pub smcr: SMCR,
        #[doc = "0x0c - Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - status register"]
        pub sr: SR,
        #[doc = "0x14 - event generation register"]
        pub egr: EGR,
        _reserved_6_ccmr1: [u8; 4usize],
        _reserved7: [u8; 4usize],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: CCER,
        #[doc = "0x24 - counter"]
        pub cnt: CNT,
        #[doc = "0x28 - prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - auto-reload register"]
        pub arr: ARR,
        _reserved11: [u8; 4usize],
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: CCR,
        #[doc = "0x38 - capture/compare register 1"]
        pub ccr2: CCR,
        _reserved13: [u8; 20usize],
        #[doc = "0x50 - option register"]
        pub or: OR,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &CCMR1_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input_mut(&self) -> &mut CCMR1_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &CCMR1_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_OUTPUT) }
        }
        #[doc = "0x18 - capture/compare mode register"]
        #[inline(always)]
        pub fn ccmr1_output_mut(&self) -> &mut CCMR1_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_OUTPUT) }
        }
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Counter enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CEN_A {
            #[doc = "0: Counter disabled"]
            DISABLED = 0,
            #[doc = "1: Counter enabled"]
            ENABLED = 1,
        }
        impl From<CEN_A> for bool {
            #[inline(always)]
            fn from(variant: CEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, CEN_A>;
        impl CEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CEN_A {
                match self.bits {
                    false => CEN_A::DISABLED,
                    true => CEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CEN_A::DISABLED)
            }
            #[doc = "Counter enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Update disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDIS_A {
            #[doc = "0: Update event enabled"]
            ENABLED = 0,
            #[doc = "1: Update event disabled"]
            DISABLED = 1,
        }
        impl From<UDIS_A> for bool {
            #[inline(always)]
            fn from(variant: UDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, UDIS_A>;
        impl UDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDIS_A {
                match self.bits {
                    false => UDIS_A::ENABLED,
                    true => UDIS_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDIS_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDIS_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update event enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDIS_A::ENABLED)
            }
            #[doc = "Update event disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDIS_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update request source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum URS_A {
            #[doc = "0: Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            ANYEVENT = 0,
            #[doc = "1: Only counter overflow/underflow generates an update interrupt or DMA request"]
            COUNTERONLY = 1,
        }
        impl From<URS_A> for bool {
            #[inline(always)]
            fn from(variant: URS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, URS_A>;
        impl URS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> URS_A {
                match self.bits {
                    false => URS_A::ANYEVENT,
                    true => URS_A::COUNTERONLY,
                }
            }
            #[doc = "Checks if the value of the field is `ANYEVENT`"]
            #[inline(always)]
            pub fn is_any_event(&self) -> bool {
                *self == URS_A::ANYEVENT
            }
            #[doc = "Checks if the value of the field is `COUNTERONLY`"]
            #[inline(always)]
            pub fn is_counter_only(&self) -> bool {
                *self == URS_A::COUNTERONLY
            }
        }
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: URS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn any_event(self) -> &'a mut W {
                self.variant(URS_A::ANYEVENT)
            }
            #[doc = "Only counter overflow/underflow generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn counter_only(self) -> &'a mut W {
                self.variant(URS_A::COUNTERONLY)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OPM`"]
        pub type OPM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPM`"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Auto-reload preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARPE_A {
            #[doc = "0: TIMx_APRR register is not buffered"]
            DISABLED = 0,
            #[doc = "1: TIMx_APRR register is buffered"]
            ENABLED = 1,
        }
        impl From<ARPE_A> for bool {
            #[inline(always)]
            fn from(variant: ARPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, ARPE_A>;
        impl ARPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ARPE_A {
                match self.bits {
                    false => ARPE_A::DISABLED,
                    true => ARPE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ARPE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ARPE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ARPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIMx_APRR register is not buffered"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ARPE_A::DISABLED)
            }
            #[doc = "TIMx_APRR register is buffered"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ARPE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Clock division\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CKD_A {
            #[doc = "0: t_DTS = t_CK_INT"]
            DIV1 = 0,
            #[doc = "1: t_DTS = 2 × t_CK_INT"]
            DIV2 = 1,
            #[doc = "2: t_DTS = 4 × t_CK_INT"]
            DIV4 = 2,
        }
        impl From<CKD_A> for u8 {
            #[inline(always)]
            fn from(variant: CKD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CKD`"]
        pub type CKD_R = crate::R<u8, CKD_A>;
        impl CKD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CKD_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CKD_A::DIV1),
                    1 => Val(CKD_A::DIV2),
                    2 => Val(CKD_A::DIV4),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == CKD_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == CKD_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == CKD_A::DIV4
            }
        }
        #[doc = "Write proxy for field `CKD`"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CKD_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "t_DTS = t_CK_INT"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(CKD_A::DIV1)
            }
            #[doc = "t_DTS = 2 × t_CK_INT"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(CKD_A::DIV2)
            }
            #[doc = "t_DTS = 4 × t_CK_INT"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(CKD_A::DIV4)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
        }
    }
    #[doc = "Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Update interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIE_A {
            #[doc = "0: Update interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Update interrupt enabled"]
            ENABLED = 1,
        }
        impl From<UIE_A> for bool {
            #[inline(always)]
            fn from(variant: UIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, UIE_A>;
        impl UIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIE_A {
                match self.bits {
                    false => UIE_A::DISABLED,
                    true => UIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UIE_A::DISABLED)
            }
            #[doc = "Update interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IE`"]
        pub type CC1IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IE`"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Update interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIF_A {
            #[doc = "0: No update occurred"]
            CLEAR = 0,
            #[doc = "1: Update interrupt pending."]
            UPDATEPENDING = 1,
        }
        impl From<UIF_A> for bool {
            #[inline(always)]
            fn from(variant: UIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, UIF_A>;
        impl UIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIF_A {
                match self.bits {
                    false => UIF_A::CLEAR,
                    true => UIF_A::UPDATEPENDING,
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == UIF_A::CLEAR
            }
            #[doc = "Checks if the value of the field is `UPDATEPENDING`"]
            #[inline(always)]
            pub fn is_update_pending(&self) -> bool {
                *self == UIF_A::UPDATEPENDING
            }
        }
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No update occurred"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(UIF_A::CLEAR)
            }
            #[doc = "Update interrupt pending."]
            #[inline(always)]
            pub fn update_pending(self) -> &'a mut W {
                self.variant(UIF_A::UPDATEPENDING)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IF`"]
        pub type CC1IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IF`"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC1OF`"]
        pub type CC1OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1OF`"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 9 - Capture/compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
        }
    }
    #[doc = "event generation register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Update generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UG_AW {
            #[doc = "1: Re-initializes the timer counter and generates an update of the registers."]
            UPDATE = 1,
        }
        impl From<UG_AW> for bool {
            #[inline(always)]
            fn from(variant: UG_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UG_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Re-initializes the timer counter and generates an update of the registers."]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(UG_AW::UPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Write proxy for field `CC1G`"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](ccmr1_output) module"]
    pub type CCMR1_OUTPUT = crate::Reg<u32, _CCMR1_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_OUTPUT;
    #[doc = "`read()` method returns [ccmr1_output::R](ccmr1_output::R) reader structure"]
    impl crate::Readable for CCMR1_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](ccmr1_output::W) writer structure"]
    impl crate::Writable for CCMR1_OUTPUT {}
    #[doc = "capture/compare mode register"]
    pub mod ccmr1_output {
        #[doc = "Reader of register CCMR1_Output"]
        pub type R = crate::R<u32, super::CCMR1_OUTPUT>;
        #[doc = "Writer for register CCMR1_Output"]
        pub type W = crate::W<u32, super::CCMR1_OUTPUT>;
        #[doc = "Register CCMR1_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Reader of field `OC1FE`"]
        pub type OC1FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1FE`"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OC1PE`"]
        pub type OC1PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1PE`"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC1M`"]
        pub type OC1M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC1M`"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OC1CE`"]
        pub type OC1CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1CE`"]
        pub struct OC1CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Output compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 7 - Output compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&self) -> OC1CE_R {
                OC1CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&mut self) -> OC1CE_W {
                OC1CE_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](ccmr1_input) module"]
    pub type CCMR1_INPUT = crate::Reg<u32, _CCMR1_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_INPUT;
    #[doc = "`read()` method returns [ccmr1_input::R](ccmr1_input::R) reader structure"]
    impl crate::Readable for CCMR1_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](ccmr1_input::W) writer structure"]
    impl crate::Writable for CCMR1_INPUT {}
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Reader of register CCMR1_Input"]
        pub type R = crate::R<u32, super::CCMR1_INPUT>;
        #[doc = "Writer for register CCMR1_Input"]
        pub type W = crate::W<u32, super::CCMR1_INPUT>;
        #[doc = "Register CCMR1_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Reader of field `IC1PSC`"]
        pub type IC1PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1PSC`"]
        pub struct IC1PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `IC1F`"]
        pub type IC1F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1F`"]
        pub struct IC1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&self) -> IC1PSC_R {
                IC1PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&self) -> IC1F_R {
                IC1F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&mut self) -> IC1PSC_W {
                IC1PSC_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&mut self) -> IC1F_W {
                IC1F_W { w: self }
            }
        }
    }
    #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](ccer) module"]
    pub type CCER = crate::Reg<u32, _CCER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCER;
    #[doc = "`read()` method returns [ccer::R](ccer::R) reader structure"]
    impl crate::Readable for CCER {}
    #[doc = "`write(|w| ..)` method takes [ccer::W](ccer::W) writer structure"]
    impl crate::Writable for CCER {}
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Reader of register CCER"]
        pub type R = crate::R<u32, super::CCER>;
        #[doc = "Writer for register CCER"]
        pub type W = crate::W<u32, super::CCER>;
        #[doc = "Register CCER `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1NP`"]
        pub type CC1NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NP`"]
        pub struct CC1NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC1P`"]
        pub type CC1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1P`"]
        pub struct CC1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC1E`"]
        pub type CC1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1E`"]
        pub struct CC1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - Capture/Compare 1 complementary output Polarity"]
            #[inline(always)]
            pub fn cc1np(&self) -> CC1NP_R {
                CC1NP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&self) -> CC1P_R {
                CC1P_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&self) -> CC1E_R {
                CC1E_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - Capture/Compare 1 complementary output Polarity"]
            #[inline(always)]
            pub fn cc1np(&mut self) -> CC1NP_W {
                CC1NP_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&mut self) -> CC1P_W {
                CC1P_W { w: self }
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&mut self) -> CC1E_W {
                CC1E_W { w: self }
            }
        }
    }
    #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - TIM10 counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - TIM10 counter"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - TIM9 prescaler"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - TIM9 prescaler"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr](ccr) module"]
    pub type CCR = crate::Reg<u32, _CCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR;
    #[doc = "`read()` method returns [ccr::R](ccr::R) reader structure"]
    impl crate::Readable for CCR {}
    #[doc = "`write(|w| ..)` method takes [ccr::W](ccr::W) writer structure"]
    impl crate::Writable for CCR {}
    #[doc = "capture/compare register 1"]
    pub mod ccr {
        #[doc = "Reader of register CCR%s"]
        pub type R = crate::R<u32, super::CCR>;
        #[doc = "Writer for register CCR%s"]
        pub type W = crate::W<u32, super::CCR>;
        #[doc = "Register CCR%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR`"]
        pub type CCR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR`"]
        pub struct CCR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr(&self) -> CCR_R {
                CCR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr(&mut self) -> CCR_W {
                CCR_W { w: self }
            }
        }
    }
    #[doc = "option register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [or](or) module"]
    pub type OR = crate::Reg<u32, _OR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OR;
    #[doc = "`read()` method returns [or::R](or::R) reader structure"]
    impl crate::Readable for OR {}
    #[doc = "`write(|w| ..)` method takes [or::W](or::W) writer structure"]
    impl crate::Writable for OR {}
    #[doc = "option register"]
    pub mod or {
        #[doc = "Reader of register OR"]
        pub type R = crate::R<u32, super::OR>;
        #[doc = "Writer for register OR"]
        pub type W = crate::W<u32, super::OR>;
        #[doc = "Register OR `reset()`'s with value 0"]
        impl crate::ResetValue for super::OR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TI1_RMP`"]
        pub type TI1_RMP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TI1_RMP`"]
        pub struct TI1_RMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1_RMP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Reader of field `ETR_RMP`"]
        pub type ETR_RMP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ETR_RMP`"]
        pub struct ETR_RMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETR_RMP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TI1_RMP_RI`"]
        pub type TI1_RMP_RI_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TI1_RMP_RI`"]
        pub struct TI1_RMP_RI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1_RMP_RI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Timer 10 input 1 remap"]
            #[inline(always)]
            pub fn ti1_rmp(&self) -> TI1_RMP_R {
                TI1_RMP_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - Timer10 ETR remap"]
            #[inline(always)]
            pub fn etr_rmp(&self) -> ETR_RMP_R {
                ETR_RMP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Timer10 Input 1 remap for Routing Interface (RI)"]
            #[inline(always)]
            pub fn ti1_rmp_ri(&self) -> TI1_RMP_RI_R {
                TI1_RMP_RI_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Timer 10 input 1 remap"]
            #[inline(always)]
            pub fn ti1_rmp(&mut self) -> TI1_RMP_W {
                TI1_RMP_W { w: self }
            }
            #[doc = "Bit 2 - Timer10 ETR remap"]
            #[inline(always)]
            pub fn etr_rmp(&mut self) -> ETR_RMP_W {
                ETR_RMP_W { w: self }
            }
            #[doc = "Bit 3 - Timer10 Input 1 remap for Routing Interface (RI)"]
            #[inline(always)]
            pub fn ti1_rmp_ri(&mut self) -> TI1_RMP_RI_W {
                TI1_RMP_RI_W { w: self }
            }
        }
    }
    #[doc = "TIM10 control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "TIM10 control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MMS`"]
        pub type MMS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MMS`"]
        pub struct MMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&self) -> MMS_R {
                MMS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&mut self) -> MMS_W {
                MMS_W { w: self }
            }
        }
    }
    #[doc = "TIM10 slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcr](smcr) module"]
    pub type SMCR = crate::Reg<u32, _SMCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMCR;
    #[doc = "`read()` method returns [smcr::R](smcr::R) reader structure"]
    impl crate::Readable for SMCR {}
    #[doc = "`write(|w| ..)` method takes [smcr::W](smcr::W) writer structure"]
    impl crate::Writable for SMCR {}
    #[doc = "TIM10 slave mode control register"]
    pub mod smcr {
        #[doc = "Reader of register SMCR"]
        pub type R = crate::R<u32, super::SMCR>;
        #[doc = "Writer for register SMCR"]
        pub type W = crate::W<u32, super::SMCR>;
        #[doc = "Register SMCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ETF`"]
        pub type ETF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ETF`"]
        pub struct ETF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ETPS`"]
        pub type ETPS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ETPS`"]
        pub struct ETPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETPS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `ECE`"]
        pub type ECE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ECE`"]
        pub struct ECE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `ETP`"]
        pub type ETP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ETP`"]
        pub struct ETP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&self) -> ETF_R {
                ETF_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&self) -> ETPS_R {
                ETPS_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&self) -> ECE_R {
                ECE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&self) -> ETP_R {
                ETP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&mut self) -> ETF_W {
                ETF_W { w: self }
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&mut self) -> ETPS_W {
                ETPS_W { w: self }
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&mut self) -> ECE_W {
                ECE_W { w: self }
            }
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&mut self) -> ETP_W {
                ETP_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose timers"]
pub struct TIM11 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM11 {}
impl TIM11 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim11::RegisterBlock {
        0x4001_1000 as *const _
    }
}
impl Deref for TIM11 {
    type Target = tim11::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM11::ptr() }
    }
}
#[doc = "General-purpose timers"]
pub mod tim11 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        _reserved1: [u8; 4usize],
        #[doc = "0x08 - TIM 11 slave mode control register 1"]
        pub smcr: SMCR,
        #[doc = "0x0c - Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - status register"]
        pub sr: SR,
        #[doc = "0x14 - event generation register"]
        pub egr: EGR,
        _reserved_5_ccmr1: [u8; 4usize],
        _reserved6: [u8; 4usize],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: CCER,
        #[doc = "0x24 - counter"]
        pub cnt: CNT,
        #[doc = "0x28 - prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - auto-reload register"]
        pub arr: ARR,
        _reserved10: [u8; 4usize],
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: CCR,
        _reserved11: [u8; 24usize],
        #[doc = "0x50 - option register"]
        pub or: OR,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &CCMR1_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input_mut(&self) -> &mut CCMR1_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &CCMR1_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_OUTPUT) }
        }
        #[doc = "0x18 - capture/compare mode register"]
        #[inline(always)]
        pub fn ccmr1_output_mut(&self) -> &mut CCMR1_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_OUTPUT) }
        }
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Clock division\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CKD_A {
            #[doc = "0: t_DTS = t_CK_INT"]
            DIV1 = 0,
            #[doc = "1: t_DTS = 2 × t_CK_INT"]
            DIV2 = 1,
            #[doc = "2: t_DTS = 4 × t_CK_INT"]
            DIV4 = 2,
        }
        impl From<CKD_A> for u8 {
            #[inline(always)]
            fn from(variant: CKD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CKD`"]
        pub type CKD_R = crate::R<u8, CKD_A>;
        impl CKD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CKD_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CKD_A::DIV1),
                    1 => Val(CKD_A::DIV2),
                    2 => Val(CKD_A::DIV4),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == CKD_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == CKD_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == CKD_A::DIV4
            }
        }
        #[doc = "Write proxy for field `CKD`"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CKD_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "t_DTS = t_CK_INT"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(CKD_A::DIV1)
            }
            #[doc = "t_DTS = 2 × t_CK_INT"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(CKD_A::DIV2)
            }
            #[doc = "t_DTS = 4 × t_CK_INT"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(CKD_A::DIV4)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Auto-reload preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARPE_A {
            #[doc = "0: TIMx_APRR register is not buffered"]
            DISABLED = 0,
            #[doc = "1: TIMx_APRR register is buffered"]
            ENABLED = 1,
        }
        impl From<ARPE_A> for bool {
            #[inline(always)]
            fn from(variant: ARPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, ARPE_A>;
        impl ARPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ARPE_A {
                match self.bits {
                    false => ARPE_A::DISABLED,
                    true => ARPE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ARPE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ARPE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ARPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIMx_APRR register is not buffered"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ARPE_A::DISABLED)
            }
            #[doc = "TIMx_APRR register is buffered"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ARPE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Update request source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum URS_A {
            #[doc = "0: Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            ANYEVENT = 0,
            #[doc = "1: Only counter overflow/underflow generates an update interrupt or DMA request"]
            COUNTERONLY = 1,
        }
        impl From<URS_A> for bool {
            #[inline(always)]
            fn from(variant: URS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, URS_A>;
        impl URS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> URS_A {
                match self.bits {
                    false => URS_A::ANYEVENT,
                    true => URS_A::COUNTERONLY,
                }
            }
            #[doc = "Checks if the value of the field is `ANYEVENT`"]
            #[inline(always)]
            pub fn is_any_event(&self) -> bool {
                *self == URS_A::ANYEVENT
            }
            #[doc = "Checks if the value of the field is `COUNTERONLY`"]
            #[inline(always)]
            pub fn is_counter_only(&self) -> bool {
                *self == URS_A::COUNTERONLY
            }
        }
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: URS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn any_event(self) -> &'a mut W {
                self.variant(URS_A::ANYEVENT)
            }
            #[doc = "Only counter overflow/underflow generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn counter_only(self) -> &'a mut W {
                self.variant(URS_A::COUNTERONLY)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Update disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDIS_A {
            #[doc = "0: Update event enabled"]
            ENABLED = 0,
            #[doc = "1: Update event disabled"]
            DISABLED = 1,
        }
        impl From<UDIS_A> for bool {
            #[inline(always)]
            fn from(variant: UDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, UDIS_A>;
        impl UDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDIS_A {
                match self.bits {
                    false => UDIS_A::ENABLED,
                    true => UDIS_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDIS_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDIS_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update event enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDIS_A::ENABLED)
            }
            #[doc = "Update event disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDIS_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Counter enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CEN_A {
            #[doc = "0: Counter disabled"]
            DISABLED = 0,
            #[doc = "1: Counter enabled"]
            ENABLED = 1,
        }
        impl From<CEN_A> for bool {
            #[inline(always)]
            fn from(variant: CEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, CEN_A>;
        impl CEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CEN_A {
                match self.bits {
                    false => CEN_A::DISABLED,
                    true => CEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CEN_A::DISABLED)
            }
            #[doc = "Counter enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `OPM`"]
        pub type OPM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPM`"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
        }
    }
    #[doc = "Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Update interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIE_A {
            #[doc = "0: Update interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Update interrupt enabled"]
            ENABLED = 1,
        }
        impl From<UIE_A> for bool {
            #[inline(always)]
            fn from(variant: UIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, UIE_A>;
        impl UIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIE_A {
                match self.bits {
                    false => UIE_A::DISABLED,
                    true => UIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UIE_A::DISABLED)
            }
            #[doc = "Update interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IE`"]
        pub type CC1IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IE`"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1OF`"]
        pub type CC1OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1OF`"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IF`"]
        pub type CC1IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IF`"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIF_A {
            #[doc = "0: No update occurred"]
            CLEAR = 0,
            #[doc = "1: Update interrupt pending."]
            UPDATEPENDING = 1,
        }
        impl From<UIF_A> for bool {
            #[inline(always)]
            fn from(variant: UIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, UIF_A>;
        impl UIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIF_A {
                match self.bits {
                    false => UIF_A::CLEAR,
                    true => UIF_A::UPDATEPENDING,
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == UIF_A::CLEAR
            }
            #[doc = "Checks if the value of the field is `UPDATEPENDING`"]
            #[inline(always)]
            pub fn is_update_pending(&self) -> bool {
                *self == UIF_A::UPDATEPENDING
            }
        }
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No update occurred"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(UIF_A::CLEAR)
            }
            #[doc = "Update interrupt pending."]
            #[inline(always)]
            pub fn update_pending(self) -> &'a mut W {
                self.variant(UIF_A::UPDATEPENDING)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 9 - Capture/compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 9 - Capture/compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
        }
    }
    #[doc = "event generation register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CC1G`"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UG_AW {
            #[doc = "1: Re-initializes the timer counter and generates an update of the registers."]
            UPDATE = 1,
        }
        impl From<UG_AW> for bool {
            #[inline(always)]
            fn from(variant: UG_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UG_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Re-initializes the timer counter and generates an update of the registers."]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(UG_AW::UPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 1 - Capture/Compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](ccmr1_output) module"]
    pub type CCMR1_OUTPUT = crate::Reg<u32, _CCMR1_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_OUTPUT;
    #[doc = "`read()` method returns [ccmr1_output::R](ccmr1_output::R) reader structure"]
    impl crate::Readable for CCMR1_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](ccmr1_output::W) writer structure"]
    impl crate::Writable for CCMR1_OUTPUT {}
    #[doc = "capture/compare mode register"]
    pub mod ccmr1_output {
        #[doc = "Reader of register CCMR1_Output"]
        pub type R = crate::R<u32, super::CCMR1_OUTPUT>;
        #[doc = "Writer for register CCMR1_Output"]
        pub type W = crate::W<u32, super::CCMR1_OUTPUT>;
        #[doc = "Register CCMR1_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Reader of field `OC1FE`"]
        pub type OC1FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1FE`"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OC1PE`"]
        pub type OC1PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1PE`"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC1M`"]
        pub type OC1M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC1M`"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OC1CE`"]
        pub type OC1CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1CE`"]
        pub struct OC1CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Output compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 7 - Output compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&self) -> OC1CE_R {
                OC1CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&mut self) -> OC1CE_W {
                OC1CE_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](ccmr1_input) module"]
    pub type CCMR1_INPUT = crate::Reg<u32, _CCMR1_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_INPUT;
    #[doc = "`read()` method returns [ccmr1_input::R](ccmr1_input::R) reader structure"]
    impl crate::Readable for CCMR1_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](ccmr1_input::W) writer structure"]
    impl crate::Writable for CCMR1_INPUT {}
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Reader of register CCMR1_Input"]
        pub type R = crate::R<u32, super::CCMR1_INPUT>;
        #[doc = "Writer for register CCMR1_Input"]
        pub type W = crate::W<u32, super::CCMR1_INPUT>;
        #[doc = "Register CCMR1_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC1F`"]
        pub type IC1F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1F`"]
        pub struct IC1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC1PSC`"]
        pub type IC1PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1PSC`"]
        pub struct IC1PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&self) -> IC1F_R {
                IC1F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&self) -> IC1PSC_R {
                IC1PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&mut self) -> IC1F_W {
                IC1F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&mut self) -> IC1PSC_W {
                IC1PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](ccer) module"]
    pub type CCER = crate::Reg<u32, _CCER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCER;
    #[doc = "`read()` method returns [ccer::R](ccer::R) reader structure"]
    impl crate::Readable for CCER {}
    #[doc = "`write(|w| ..)` method takes [ccer::W](ccer::W) writer structure"]
    impl crate::Writable for CCER {}
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Reader of register CCER"]
        pub type R = crate::R<u32, super::CCER>;
        #[doc = "Writer for register CCER"]
        pub type W = crate::W<u32, super::CCER>;
        #[doc = "Register CCER `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1NP`"]
        pub type CC1NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NP`"]
        pub struct CC1NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC1P`"]
        pub type CC1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1P`"]
        pub struct CC1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC1E`"]
        pub type CC1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1E`"]
        pub struct CC1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - Capture/Compare 1 complementary output Polarity"]
            #[inline(always)]
            pub fn cc1np(&self) -> CC1NP_R {
                CC1NP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&self) -> CC1P_R {
                CC1P_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&self) -> CC1E_R {
                CC1E_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - Capture/Compare 1 complementary output Polarity"]
            #[inline(always)]
            pub fn cc1np(&mut self) -> CC1NP_W {
                CC1NP_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&mut self) -> CC1P_W {
                CC1P_W { w: self }
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&mut self) -> CC1E_W {
                CC1E_W { w: self }
            }
        }
    }
    #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - TIM10 counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - TIM10 counter"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - TIM9 prescaler"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - TIM9 prescaler"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr](ccr) module"]
    pub type CCR = crate::Reg<u32, _CCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR;
    #[doc = "`read()` method returns [ccr::R](ccr::R) reader structure"]
    impl crate::Readable for CCR {}
    #[doc = "`write(|w| ..)` method takes [ccr::W](ccr::W) writer structure"]
    impl crate::Writable for CCR {}
    #[doc = "capture/compare register 1"]
    pub mod ccr {
        #[doc = "Reader of register CCR%s"]
        pub type R = crate::R<u32, super::CCR>;
        #[doc = "Writer for register CCR%s"]
        pub type W = crate::W<u32, super::CCR>;
        #[doc = "Register CCR%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR`"]
        pub type CCR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR`"]
        pub struct CCR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr(&self) -> CCR_R {
                CCR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr(&mut self) -> CCR_W {
                CCR_W { w: self }
            }
        }
    }
    #[doc = "option register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [or](or) module"]
    pub type OR = crate::Reg<u32, _OR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OR;
    #[doc = "`read()` method returns [or::R](or::R) reader structure"]
    impl crate::Readable for OR {}
    #[doc = "`write(|w| ..)` method takes [or::W](or::W) writer structure"]
    impl crate::Writable for OR {}
    #[doc = "option register"]
    pub mod or {
        #[doc = "Reader of register OR"]
        pub type R = crate::R<u32, super::OR>;
        #[doc = "Writer for register OR"]
        pub type W = crate::W<u32, super::OR>;
        #[doc = "Register OR `reset()`'s with value 0"]
        impl crate::ResetValue for super::OR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TI1_RMP`"]
        pub type TI1_RMP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TI1_RMP`"]
        pub struct TI1_RMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1_RMP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Reader of field `ETR_RMP`"]
        pub type ETR_RMP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ETR_RMP`"]
        pub struct ETR_RMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETR_RMP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TI1_RMP_RI`"]
        pub type TI1_RMP_RI_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TI1_RMP_RI`"]
        pub struct TI1_RMP_RI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1_RMP_RI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - TIM11 Input 1 remapping capability"]
            #[inline(always)]
            pub fn ti1_rmp(&self) -> TI1_RMP_R {
                TI1_RMP_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - Timer11 ETR remap"]
            #[inline(always)]
            pub fn etr_rmp(&self) -> ETR_RMP_R {
                ETR_RMP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Timer11 Input 1 remap for Routing Interface (RI)"]
            #[inline(always)]
            pub fn ti1_rmp_ri(&self) -> TI1_RMP_RI_R {
                TI1_RMP_RI_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - TIM11 Input 1 remapping capability"]
            #[inline(always)]
            pub fn ti1_rmp(&mut self) -> TI1_RMP_W {
                TI1_RMP_W { w: self }
            }
            #[doc = "Bit 2 - Timer11 ETR remap"]
            #[inline(always)]
            pub fn etr_rmp(&mut self) -> ETR_RMP_W {
                ETR_RMP_W { w: self }
            }
            #[doc = "Bit 3 - Timer11 Input 1 remap for Routing Interface (RI)"]
            #[inline(always)]
            pub fn ti1_rmp_ri(&mut self) -> TI1_RMP_RI_W {
                TI1_RMP_RI_W { w: self }
            }
        }
    }
    #[doc = "TIM 11 slave mode control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcr](smcr) module"]
    pub type SMCR = crate::Reg<u32, _SMCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMCR;
    #[doc = "`read()` method returns [smcr::R](smcr::R) reader structure"]
    impl crate::Readable for SMCR {}
    #[doc = "`write(|w| ..)` method takes [smcr::W](smcr::W) writer structure"]
    impl crate::Writable for SMCR {}
    #[doc = "TIM 11 slave mode control register 1"]
    pub mod smcr {
        #[doc = "Reader of register SMCR"]
        pub type R = crate::R<u32, super::SMCR>;
        #[doc = "Writer for register SMCR"]
        pub type W = crate::W<u32, super::SMCR>;
        #[doc = "Register SMCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ETF`"]
        pub type ETF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ETF`"]
        pub struct ETF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ETPS`"]
        pub type ETPS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ETPS`"]
        pub struct ETPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETPS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `ECE`"]
        pub type ECE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ECE`"]
        pub struct ECE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `ETP`"]
        pub type ETP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ETP`"]
        pub struct ETP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&self) -> ETF_R {
                ETF_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&self) -> ETPS_R {
                ETPS_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&self) -> ECE_R {
                ECE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&self) -> ETP_R {
                ETP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&mut self) -> ETF_W {
                ETF_W { w: self }
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&mut self) -> ETPS_W {
                ETPS_W { w: self }
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&mut self) -> ECE_W {
                ECE_W { w: self }
            }
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&mut self) -> ETP_W {
                ETP_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose timers"]
pub struct TIM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM2 {}
impl TIM2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        0x4000_0000 as *const _
    }
}
impl Deref for TIM2 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM2::ptr() }
    }
}
#[doc = "General-purpose timers"]
pub mod tim2 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - slave mode control register"]
        pub smcr: SMCR,
        #[doc = "0x0c - Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - status register"]
        pub sr: SR,
        #[doc = "0x14 - event generation register"]
        pub egr: EGR,
        _reserved_6_ccmr1: [u8; 4usize],
        _reserved_7_ccmr2: [u8; 4usize],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: CCER,
        #[doc = "0x24 - counter"]
        pub cnt: CNT,
        #[doc = "0x28 - prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - auto-reload register"]
        pub arr: ARR,
        _reserved12: [u8; 4usize],
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: CCR,
        #[doc = "0x38 - capture/compare register 1"]
        pub ccr2: CCR,
        #[doc = "0x3c - capture/compare register 1"]
        pub ccr3: CCR,
        #[doc = "0x40 - capture/compare register 1"]
        pub ccr4: CCR,
        _reserved16: [u8; 4usize],
        #[doc = "0x48 - DMA control register"]
        pub dcr: DCR,
        #[doc = "0x4c - DMA address for full transfer"]
        pub dmar: DMAR,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &CCMR1_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input_mut(&self) -> &mut CCMR1_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &CCMR1_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_OUTPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1"]
        #[inline(always)]
        pub fn ccmr1_output_mut(&self) -> &mut CCMR1_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_OUTPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (input mode)"]
        #[inline(always)]
        pub fn ccmr2_input(&self) -> &CCMR2_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(28usize) as *const CCMR2_INPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (input mode)"]
        #[inline(always)]
        pub fn ccmr2_input_mut(&self) -> &mut CCMR2_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(28usize) as *mut CCMR2_INPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2"]
        #[inline(always)]
        pub fn ccmr2_output(&self) -> &CCMR2_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(28usize) as *const CCMR2_OUTPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2"]
        #[inline(always)]
        pub fn ccmr2_output_mut(&self) -> &mut CCMR2_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(28usize) as *mut CCMR2_OUTPUT) }
        }
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Clock division\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CKD_A {
            #[doc = "0: t_DTS = t_CK_INT"]
            DIV1 = 0,
            #[doc = "1: t_DTS = 2 × t_CK_INT"]
            DIV2 = 1,
            #[doc = "2: t_DTS = 4 × t_CK_INT"]
            DIV4 = 2,
        }
        impl From<CKD_A> for u8 {
            #[inline(always)]
            fn from(variant: CKD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CKD`"]
        pub type CKD_R = crate::R<u8, CKD_A>;
        impl CKD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CKD_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CKD_A::DIV1),
                    1 => Val(CKD_A::DIV2),
                    2 => Val(CKD_A::DIV4),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == CKD_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == CKD_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == CKD_A::DIV4
            }
        }
        #[doc = "Write proxy for field `CKD`"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CKD_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "t_DTS = t_CK_INT"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(CKD_A::DIV1)
            }
            #[doc = "t_DTS = 2 × t_CK_INT"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(CKD_A::DIV2)
            }
            #[doc = "t_DTS = 4 × t_CK_INT"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(CKD_A::DIV4)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Auto-reload preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARPE_A {
            #[doc = "0: TIMx_APRR register is not buffered"]
            DISABLED = 0,
            #[doc = "1: TIMx_APRR register is buffered"]
            ENABLED = 1,
        }
        impl From<ARPE_A> for bool {
            #[inline(always)]
            fn from(variant: ARPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, ARPE_A>;
        impl ARPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ARPE_A {
                match self.bits {
                    false => ARPE_A::DISABLED,
                    true => ARPE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ARPE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ARPE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ARPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIMx_APRR register is not buffered"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ARPE_A::DISABLED)
            }
            #[doc = "TIMx_APRR register is buffered"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ARPE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Center-aligned mode selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CMS_A {
            #[doc = "0: The counter counts up or down depending on the direction bit"]
            EDGEALIGNED = 0,
            #[doc = "1: The counter counts up and down alternatively. Output compare interrupt flags are set only when the counter is counting down."]
            CENTERALIGNED1 = 1,
            #[doc = "2: The counter counts up and down alternatively. Output compare interrupt flags are set only when the counter is counting up."]
            CENTERALIGNED2 = 2,
            #[doc = "3: The counter counts up and down alternatively. Output compare interrupt flags are set both when the counter is counting up or down."]
            CENTERALIGNED3 = 3,
        }
        impl From<CMS_A> for u8 {
            #[inline(always)]
            fn from(variant: CMS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CMS`"]
        pub type CMS_R = crate::R<u8, CMS_A>;
        impl CMS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CMS_A {
                match self.bits {
                    0 => CMS_A::EDGEALIGNED,
                    1 => CMS_A::CENTERALIGNED1,
                    2 => CMS_A::CENTERALIGNED2,
                    3 => CMS_A::CENTERALIGNED3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `EDGEALIGNED`"]
            #[inline(always)]
            pub fn is_edge_aligned(&self) -> bool {
                *self == CMS_A::EDGEALIGNED
            }
            #[doc = "Checks if the value of the field is `CENTERALIGNED1`"]
            #[inline(always)]
            pub fn is_center_aligned1(&self) -> bool {
                *self == CMS_A::CENTERALIGNED1
            }
            #[doc = "Checks if the value of the field is `CENTERALIGNED2`"]
            #[inline(always)]
            pub fn is_center_aligned2(&self) -> bool {
                *self == CMS_A::CENTERALIGNED2
            }
            #[doc = "Checks if the value of the field is `CENTERALIGNED3`"]
            #[inline(always)]
            pub fn is_center_aligned3(&self) -> bool {
                *self == CMS_A::CENTERALIGNED3
            }
        }
        #[doc = "Write proxy for field `CMS`"]
        pub struct CMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CMS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The counter counts up or down depending on the direction bit"]
            #[inline(always)]
            pub fn edge_aligned(self) -> &'a mut W {
                self.variant(CMS_A::EDGEALIGNED)
            }
            #[doc = "The counter counts up and down alternatively. Output compare interrupt flags are set only when the counter is counting down."]
            #[inline(always)]
            pub fn center_aligned1(self) -> &'a mut W {
                self.variant(CMS_A::CENTERALIGNED1)
            }
            #[doc = "The counter counts up and down alternatively. Output compare interrupt flags are set only when the counter is counting up."]
            #[inline(always)]
            pub fn center_aligned2(self) -> &'a mut W {
                self.variant(CMS_A::CENTERALIGNED2)
            }
            #[doc = "The counter counts up and down alternatively. Output compare interrupt flags are set both when the counter is counting up or down."]
            #[inline(always)]
            pub fn center_aligned3(self) -> &'a mut W {
                self.variant(CMS_A::CENTERALIGNED3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DIR_A {
            #[doc = "0: Counter used as upcounter"]
            UP = 0,
            #[doc = "1: Counter used as downcounter"]
            DOWN = 1,
        }
        impl From<DIR_A> for bool {
            #[inline(always)]
            fn from(variant: DIR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, DIR_A>;
        impl DIR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DIR_A {
                match self.bits {
                    false => DIR_A::UP,
                    true => DIR_A::DOWN,
                }
            }
            #[doc = "Checks if the value of the field is `UP`"]
            #[inline(always)]
            pub fn is_up(&self) -> bool {
                *self == DIR_A::UP
            }
            #[doc = "Checks if the value of the field is `DOWN`"]
            #[inline(always)]
            pub fn is_down(&self) -> bool {
                *self == DIR_A::DOWN
            }
        }
        #[doc = "Write proxy for field `DIR`"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DIR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter used as upcounter"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(DIR_A::UP)
            }
            #[doc = "Counter used as downcounter"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(DIR_A::DOWN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "One-pulse mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OPM_A {
            #[doc = "0: Counter is not stopped at update event"]
            DISABLED = 0,
            #[doc = "1: Counter stops counting at the next update event (clearing the CEN bit)"]
            ENABLED = 1,
        }
        impl From<OPM_A> for bool {
            #[inline(always)]
            fn from(variant: OPM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OPM`"]
        pub type OPM_R = crate::R<bool, OPM_A>;
        impl OPM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OPM_A {
                match self.bits {
                    false => OPM_A::DISABLED,
                    true => OPM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OPM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OPM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OPM`"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OPM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter is not stopped at update event"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OPM_A::DISABLED)
            }
            #[doc = "Counter stops counting at the next update event (clearing the CEN bit)"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OPM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Update request source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum URS_A {
            #[doc = "0: Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            ANYEVENT = 0,
            #[doc = "1: Only counter overflow/underflow generates an update interrupt or DMA request"]
            COUNTERONLY = 1,
        }
        impl From<URS_A> for bool {
            #[inline(always)]
            fn from(variant: URS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, URS_A>;
        impl URS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> URS_A {
                match self.bits {
                    false => URS_A::ANYEVENT,
                    true => URS_A::COUNTERONLY,
                }
            }
            #[doc = "Checks if the value of the field is `ANYEVENT`"]
            #[inline(always)]
            pub fn is_any_event(&self) -> bool {
                *self == URS_A::ANYEVENT
            }
            #[doc = "Checks if the value of the field is `COUNTERONLY`"]
            #[inline(always)]
            pub fn is_counter_only(&self) -> bool {
                *self == URS_A::COUNTERONLY
            }
        }
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: URS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn any_event(self) -> &'a mut W {
                self.variant(URS_A::ANYEVENT)
            }
            #[doc = "Only counter overflow/underflow generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn counter_only(self) -> &'a mut W {
                self.variant(URS_A::COUNTERONLY)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Update disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDIS_A {
            #[doc = "0: Update event enabled"]
            ENABLED = 0,
            #[doc = "1: Update event disabled"]
            DISABLED = 1,
        }
        impl From<UDIS_A> for bool {
            #[inline(always)]
            fn from(variant: UDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, UDIS_A>;
        impl UDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDIS_A {
                match self.bits {
                    false => UDIS_A::ENABLED,
                    true => UDIS_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDIS_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDIS_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update event enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDIS_A::ENABLED)
            }
            #[doc = "Update event disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDIS_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Counter enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CEN_A {
            #[doc = "0: Counter disabled"]
            DISABLED = 0,
            #[doc = "1: Counter enabled"]
            ENABLED = 1,
        }
        impl From<CEN_A> for bool {
            #[inline(always)]
            fn from(variant: CEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, CEN_A>;
        impl CEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CEN_A {
                match self.bits {
                    false => CEN_A::DISABLED,
                    true => CEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CEN_A::DISABLED)
            }
            #[doc = "Counter enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - Center-aligned mode selection"]
            #[inline(always)]
            pub fn cms(&self) -> CMS_R {
                CMS_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bits 5:6 - Center-aligned mode selection"]
            #[inline(always)]
            pub fn cms(&mut self) -> CMS_W {
                CMS_W { w: self }
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "TI1 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TI1S_A {
            #[doc = "0: The TIMx_CH1 pin is connected to TI1 input"]
            NORMAL = 0,
            #[doc = "1: The TIMx_CH1, CH2, CH3 pins are connected to TI1 input"]
            XOR = 1,
        }
        impl From<TI1S_A> for bool {
            #[inline(always)]
            fn from(variant: TI1S_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TI1S`"]
        pub type TI1S_R = crate::R<bool, TI1S_A>;
        impl TI1S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TI1S_A {
                match self.bits {
                    false => TI1S_A::NORMAL,
                    true => TI1S_A::XOR,
                }
            }
            #[doc = "Checks if the value of the field is `NORMAL`"]
            #[inline(always)]
            pub fn is_normal(&self) -> bool {
                *self == TI1S_A::NORMAL
            }
            #[doc = "Checks if the value of the field is `XOR`"]
            #[inline(always)]
            pub fn is_xor(&self) -> bool {
                *self == TI1S_A::XOR
            }
        }
        #[doc = "Write proxy for field `TI1S`"]
        pub struct TI1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TI1S_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The TIMx_CH1 pin is connected to TI1 input"]
            #[inline(always)]
            pub fn normal(self) -> &'a mut W {
                self.variant(TI1S_A::NORMAL)
            }
            #[doc = "The TIMx_CH1, CH2, CH3 pins are connected to TI1 input"]
            #[inline(always)]
            pub fn xor(self) -> &'a mut W {
                self.variant(TI1S_A::XOR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Master mode selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MMS_A {
            #[doc = "0: The UG bit from the TIMx_EGR register is used as trigger output"]
            RESET = 0,
            #[doc = "1: The counter enable signal, CNT_EN, is used as trigger output"]
            ENABLE = 1,
            #[doc = "2: The update event is selected as trigger output"]
            UPDATE = 2,
            #[doc = "3: The trigger output send a positive pulse when the CC1IF flag it to be set, as soon as a capture or a compare match occurred"]
            COMPAREPULSE = 3,
            #[doc = "4: OC1REF signal is used as trigger output"]
            COMPAREOC1 = 4,
            #[doc = "5: OC2REF signal is used as trigger output"]
            COMPAREOC2 = 5,
            #[doc = "6: OC3REF signal is used as trigger output"]
            COMPAREOC3 = 6,
            #[doc = "7: OC4REF signal is used as trigger output"]
            COMPAREOC4 = 7,
        }
        impl From<MMS_A> for u8 {
            #[inline(always)]
            fn from(variant: MMS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MMS`"]
        pub type MMS_R = crate::R<u8, MMS_A>;
        impl MMS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MMS_A {
                match self.bits {
                    0 => MMS_A::RESET,
                    1 => MMS_A::ENABLE,
                    2 => MMS_A::UPDATE,
                    3 => MMS_A::COMPAREPULSE,
                    4 => MMS_A::COMPAREOC1,
                    5 => MMS_A::COMPAREOC2,
                    6 => MMS_A::COMPAREOC3,
                    7 => MMS_A::COMPAREOC4,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == MMS_A::RESET
            }
            #[doc = "Checks if the value of the field is `ENABLE`"]
            #[inline(always)]
            pub fn is_enable(&self) -> bool {
                *self == MMS_A::ENABLE
            }
            #[doc = "Checks if the value of the field is `UPDATE`"]
            #[inline(always)]
            pub fn is_update(&self) -> bool {
                *self == MMS_A::UPDATE
            }
            #[doc = "Checks if the value of the field is `COMPAREPULSE`"]
            #[inline(always)]
            pub fn is_compare_pulse(&self) -> bool {
                *self == MMS_A::COMPAREPULSE
            }
            #[doc = "Checks if the value of the field is `COMPAREOC1`"]
            #[inline(always)]
            pub fn is_compare_oc1(&self) -> bool {
                *self == MMS_A::COMPAREOC1
            }
            #[doc = "Checks if the value of the field is `COMPAREOC2`"]
            #[inline(always)]
            pub fn is_compare_oc2(&self) -> bool {
                *self == MMS_A::COMPAREOC2
            }
            #[doc = "Checks if the value of the field is `COMPAREOC3`"]
            #[inline(always)]
            pub fn is_compare_oc3(&self) -> bool {
                *self == MMS_A::COMPAREOC3
            }
            #[doc = "Checks if the value of the field is `COMPAREOC4`"]
            #[inline(always)]
            pub fn is_compare_oc4(&self) -> bool {
                *self == MMS_A::COMPAREOC4
            }
        }
        #[doc = "Write proxy for field `MMS`"]
        pub struct MMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MMS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The UG bit from the TIMx_EGR register is used as trigger output"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(MMS_A::RESET)
            }
            #[doc = "The counter enable signal, CNT_EN, is used as trigger output"]
            #[inline(always)]
            pub fn enable(self) -> &'a mut W {
                self.variant(MMS_A::ENABLE)
            }
            #[doc = "The update event is selected as trigger output"]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(MMS_A::UPDATE)
            }
            #[doc = "The trigger output send a positive pulse when the CC1IF flag it to be set, as soon as a capture or a compare match occurred"]
            #[inline(always)]
            pub fn compare_pulse(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREPULSE)
            }
            #[doc = "OC1REF signal is used as trigger output"]
            #[inline(always)]
            pub fn compare_oc1(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREOC1)
            }
            #[doc = "OC2REF signal is used as trigger output"]
            #[inline(always)]
            pub fn compare_oc2(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREOC2)
            }
            #[doc = "OC3REF signal is used as trigger output"]
            #[inline(always)]
            pub fn compare_oc3(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREOC3)
            }
            #[doc = "OC4REF signal is used as trigger output"]
            #[inline(always)]
            pub fn compare_oc4(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREOC4)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Capture/compare DMA selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CCDS_A {
            #[doc = "0: CCx DMA request sent when CCx event occurs"]
            ONCOMPARE = 0,
            #[doc = "1: CCx DMA request sent when update event occurs"]
            ONUPDATE = 1,
        }
        impl From<CCDS_A> for bool {
            #[inline(always)]
            fn from(variant: CCDS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CCDS`"]
        pub type CCDS_R = crate::R<bool, CCDS_A>;
        impl CCDS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CCDS_A {
                match self.bits {
                    false => CCDS_A::ONCOMPARE,
                    true => CCDS_A::ONUPDATE,
                }
            }
            #[doc = "Checks if the value of the field is `ONCOMPARE`"]
            #[inline(always)]
            pub fn is_on_compare(&self) -> bool {
                *self == CCDS_A::ONCOMPARE
            }
            #[doc = "Checks if the value of the field is `ONUPDATE`"]
            #[inline(always)]
            pub fn is_on_update(&self) -> bool {
                *self == CCDS_A::ONUPDATE
            }
        }
        #[doc = "Write proxy for field `CCDS`"]
        pub struct CCDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCDS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CCDS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request sent when CCx event occurs"]
            #[inline(always)]
            pub fn on_compare(self) -> &'a mut W {
                self.variant(CCDS_A::ONCOMPARE)
            }
            #[doc = "CCx DMA request sent when update event occurs"]
            #[inline(always)]
            pub fn on_update(self) -> &'a mut W {
                self.variant(CCDS_A::ONUPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - TI1 selection"]
            #[inline(always)]
            pub fn ti1s(&self) -> TI1S_R {
                TI1S_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&self) -> MMS_R {
                MMS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&self) -> CCDS_R {
                CCDS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - TI1 selection"]
            #[inline(always)]
            pub fn ti1s(&mut self) -> TI1S_W {
                TI1S_W { w: self }
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&mut self) -> MMS_W {
                MMS_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&mut self) -> CCDS_W {
                CCDS_W { w: self }
            }
        }
    }
    #[doc = "slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcr](smcr) module"]
    pub type SMCR = crate::Reg<u32, _SMCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMCR;
    #[doc = "`read()` method returns [smcr::R](smcr::R) reader structure"]
    impl crate::Readable for SMCR {}
    #[doc = "`write(|w| ..)` method takes [smcr::W](smcr::W) writer structure"]
    impl crate::Writable for SMCR {}
    #[doc = "slave mode control register"]
    pub mod smcr {
        #[doc = "Reader of register SMCR"]
        pub type R = crate::R<u32, super::SMCR>;
        #[doc = "Writer for register SMCR"]
        pub type W = crate::W<u32, super::SMCR>;
        #[doc = "Register SMCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "External trigger polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ETP_A {
            #[doc = "0: ETR is noninverted, active at high level or rising edge"]
            NOTINVERTED = 0,
            #[doc = "1: ETR is inverted, active at low level or falling edge"]
            INVERTED = 1,
        }
        impl From<ETP_A> for bool {
            #[inline(always)]
            fn from(variant: ETP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ETP`"]
        pub type ETP_R = crate::R<bool, ETP_A>;
        impl ETP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ETP_A {
                match self.bits {
                    false => ETP_A::NOTINVERTED,
                    true => ETP_A::INVERTED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTINVERTED`"]
            #[inline(always)]
            pub fn is_not_inverted(&self) -> bool {
                *self == ETP_A::NOTINVERTED
            }
            #[doc = "Checks if the value of the field is `INVERTED`"]
            #[inline(always)]
            pub fn is_inverted(&self) -> bool {
                *self == ETP_A::INVERTED
            }
        }
        #[doc = "Write proxy for field `ETP`"]
        pub struct ETP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ETP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ETR is noninverted, active at high level or rising edge"]
            #[inline(always)]
            pub fn not_inverted(self) -> &'a mut W {
                self.variant(ETP_A::NOTINVERTED)
            }
            #[doc = "ETR is inverted, active at low level or falling edge"]
            #[inline(always)]
            pub fn inverted(self) -> &'a mut W {
                self.variant(ETP_A::INVERTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "External clock enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ECE_A {
            #[doc = "0: External clock mode 2 disabled"]
            DISABLED = 0,
            #[doc = "1: External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF signal."]
            ENABLED = 1,
        }
        impl From<ECE_A> for bool {
            #[inline(always)]
            fn from(variant: ECE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ECE`"]
        pub type ECE_R = crate::R<bool, ECE_A>;
        impl ECE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ECE_A {
                match self.bits {
                    false => ECE_A::DISABLED,
                    true => ECE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ECE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ECE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ECE`"]
        pub struct ECE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ECE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "External clock mode 2 disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ECE_A::DISABLED)
            }
            #[doc = "External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF signal."]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ECE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "External trigger prescaler\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ETPS_A {
            #[doc = "0: Prescaler OFF"]
            DIV1 = 0,
            #[doc = "1: ETRP frequency divided by 2"]
            DIV2 = 1,
            #[doc = "2: ETRP frequency divided by 4"]
            DIV4 = 2,
            #[doc = "3: ETRP frequency divided by 8"]
            DIV8 = 3,
        }
        impl From<ETPS_A> for u8 {
            #[inline(always)]
            fn from(variant: ETPS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ETPS`"]
        pub type ETPS_R = crate::R<u8, ETPS_A>;
        impl ETPS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ETPS_A {
                match self.bits {
                    0 => ETPS_A::DIV1,
                    1 => ETPS_A::DIV2,
                    2 => ETPS_A::DIV4,
                    3 => ETPS_A::DIV8,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == ETPS_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == ETPS_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == ETPS_A::DIV4
            }
            #[doc = "Checks if the value of the field is `DIV8`"]
            #[inline(always)]
            pub fn is_div8(&self) -> bool {
                *self == ETPS_A::DIV8
            }
        }
        #[doc = "Write proxy for field `ETPS`"]
        pub struct ETPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETPS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ETPS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Prescaler OFF"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(ETPS_A::DIV1)
            }
            #[doc = "ETRP frequency divided by 2"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(ETPS_A::DIV2)
            }
            #[doc = "ETRP frequency divided by 4"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(ETPS_A::DIV4)
            }
            #[doc = "ETRP frequency divided by 8"]
            #[inline(always)]
            pub fn div8(self) -> &'a mut W {
                self.variant(ETPS_A::DIV8)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "External trigger filter\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ETF_A {
            #[doc = "0: No filter, sampling is done at fDTS"]
            NOFILTER = 0,
            #[doc = "1: fSAMPLING=fCK_INT, N=2"]
            FCK_INT_N2 = 1,
            #[doc = "2: fSAMPLING=fCK_INT, N=4"]
            FCK_INT_N4 = 2,
            #[doc = "3: fSAMPLING=fCK_INT, N=8"]
            FCK_INT_N8 = 3,
            #[doc = "4: fSAMPLING=fDTS/2, N=6"]
            FDTS_DIV2_N6 = 4,
            #[doc = "5: fSAMPLING=fDTS/2, N=8"]
            FDTS_DIV2_N8 = 5,
            #[doc = "6: fSAMPLING=fDTS/4, N=6"]
            FDTS_DIV4_N6 = 6,
            #[doc = "7: fSAMPLING=fDTS/4, N=8"]
            FDTS_DIV4_N8 = 7,
            #[doc = "8: fSAMPLING=fDTS/8, N=6"]
            FDTS_DIV8_N6 = 8,
            #[doc = "9: fSAMPLING=fDTS/8, N=8"]
            FDTS_DIV8_N8 = 9,
            #[doc = "10: fSAMPLING=fDTS/16, N=5"]
            FDTS_DIV16_N5 = 10,
            #[doc = "11: fSAMPLING=fDTS/16, N=6"]
            FDTS_DIV16_N6 = 11,
            #[doc = "12: fSAMPLING=fDTS/16, N=8"]
            FDTS_DIV16_N8 = 12,
            #[doc = "13: fSAMPLING=fDTS/32, N=5"]
            FDTS_DIV32_N5 = 13,
            #[doc = "14: fSAMPLING=fDTS/32, N=6"]
            FDTS_DIV32_N6 = 14,
            #[doc = "15: fSAMPLING=fDTS/32, N=8"]
            FDTS_DIV32_N8 = 15,
        }
        impl From<ETF_A> for u8 {
            #[inline(always)]
            fn from(variant: ETF_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ETF`"]
        pub type ETF_R = crate::R<u8, ETF_A>;
        impl ETF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ETF_A {
                match self.bits {
                    0 => ETF_A::NOFILTER,
                    1 => ETF_A::FCK_INT_N2,
                    2 => ETF_A::FCK_INT_N4,
                    3 => ETF_A::FCK_INT_N8,
                    4 => ETF_A::FDTS_DIV2_N6,
                    5 => ETF_A::FDTS_DIV2_N8,
                    6 => ETF_A::FDTS_DIV4_N6,
                    7 => ETF_A::FDTS_DIV4_N8,
                    8 => ETF_A::FDTS_DIV8_N6,
                    9 => ETF_A::FDTS_DIV8_N8,
                    10 => ETF_A::FDTS_DIV16_N5,
                    11 => ETF_A::FDTS_DIV16_N6,
                    12 => ETF_A::FDTS_DIV16_N8,
                    13 => ETF_A::FDTS_DIV32_N5,
                    14 => ETF_A::FDTS_DIV32_N6,
                    15 => ETF_A::FDTS_DIV32_N8,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `NOFILTER`"]
            #[inline(always)]
            pub fn is_no_filter(&self) -> bool {
                *self == ETF_A::NOFILTER
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N2`"]
            #[inline(always)]
            pub fn is_fck_int_n2(&self) -> bool {
                *self == ETF_A::FCK_INT_N2
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N4`"]
            #[inline(always)]
            pub fn is_fck_int_n4(&self) -> bool {
                *self == ETF_A::FCK_INT_N4
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N8`"]
            #[inline(always)]
            pub fn is_fck_int_n8(&self) -> bool {
                *self == ETF_A::FCK_INT_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV2_N6`"]
            #[inline(always)]
            pub fn is_fdts_div2_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV2_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV2_N8`"]
            #[inline(always)]
            pub fn is_fdts_div2_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV2_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV4_N6`"]
            #[inline(always)]
            pub fn is_fdts_div4_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV4_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV4_N8`"]
            #[inline(always)]
            pub fn is_fdts_div4_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV4_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV8_N6`"]
            #[inline(always)]
            pub fn is_fdts_div8_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV8_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV8_N8`"]
            #[inline(always)]
            pub fn is_fdts_div8_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV8_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N5`"]
            #[inline(always)]
            pub fn is_fdts_div16_n5(&self) -> bool {
                *self == ETF_A::FDTS_DIV16_N5
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N6`"]
            #[inline(always)]
            pub fn is_fdts_div16_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV16_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N8`"]
            #[inline(always)]
            pub fn is_fdts_div16_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV16_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N5`"]
            #[inline(always)]
            pub fn is_fdts_div32_n5(&self) -> bool {
                *self == ETF_A::FDTS_DIV32_N5
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N6`"]
            #[inline(always)]
            pub fn is_fdts_div32_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV32_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N8`"]
            #[inline(always)]
            pub fn is_fdts_div32_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV32_N8
            }
        }
        #[doc = "Write proxy for field `ETF`"]
        pub struct ETF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ETF_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No filter, sampling is done at fDTS"]
            #[inline(always)]
            pub fn no_filter(self) -> &'a mut W {
                self.variant(ETF_A::NOFILTER)
            }
            #[doc = "fSAMPLING=fCK_INT, N=2"]
            #[inline(always)]
            pub fn fck_int_n2(self) -> &'a mut W {
                self.variant(ETF_A::FCK_INT_N2)
            }
            #[doc = "fSAMPLING=fCK_INT, N=4"]
            #[inline(always)]
            pub fn fck_int_n4(self) -> &'a mut W {
                self.variant(ETF_A::FCK_INT_N4)
            }
            #[doc = "fSAMPLING=fCK_INT, N=8"]
            #[inline(always)]
            pub fn fck_int_n8(self) -> &'a mut W {
                self.variant(ETF_A::FCK_INT_N8)
            }
            #[doc = "fSAMPLING=fDTS/2, N=6"]
            #[inline(always)]
            pub fn fdts_div2_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV2_N6)
            }
            #[doc = "fSAMPLING=fDTS/2, N=8"]
            #[inline(always)]
            pub fn fdts_div2_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV2_N8)
            }
            #[doc = "fSAMPLING=fDTS/4, N=6"]
            #[inline(always)]
            pub fn fdts_div4_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV4_N6)
            }
            #[doc = "fSAMPLING=fDTS/4, N=8"]
            #[inline(always)]
            pub fn fdts_div4_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV4_N8)
            }
            #[doc = "fSAMPLING=fDTS/8, N=6"]
            #[inline(always)]
            pub fn fdts_div8_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV8_N6)
            }
            #[doc = "fSAMPLING=fDTS/8, N=8"]
            #[inline(always)]
            pub fn fdts_div8_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV8_N8)
            }
            #[doc = "fSAMPLING=fDTS/16, N=5"]
            #[inline(always)]
            pub fn fdts_div16_n5(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV16_N5)
            }
            #[doc = "fSAMPLING=fDTS/16, N=6"]
            #[inline(always)]
            pub fn fdts_div16_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV16_N6)
            }
            #[doc = "fSAMPLING=fDTS/16, N=8"]
            #[inline(always)]
            pub fn fdts_div16_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV16_N8)
            }
            #[doc = "fSAMPLING=fDTS/32, N=5"]
            #[inline(always)]
            pub fn fdts_div32_n5(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV32_N5)
            }
            #[doc = "fSAMPLING=fDTS/32, N=6"]
            #[inline(always)]
            pub fn fdts_div32_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV32_N6)
            }
            #[doc = "fSAMPLING=fDTS/32, N=8"]
            #[inline(always)]
            pub fn fdts_div32_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV32_N8)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Master/Slave mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MSM_A {
            #[doc = "0: No action"]
            NOSYNC = 0,
            #[doc = "1: The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event."]
            SYNC = 1,
        }
        impl From<MSM_A> for bool {
            #[inline(always)]
            fn from(variant: MSM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MSM`"]
        pub type MSM_R = crate::R<bool, MSM_A>;
        impl MSM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MSM_A {
                match self.bits {
                    false => MSM_A::NOSYNC,
                    true => MSM_A::SYNC,
                }
            }
            #[doc = "Checks if the value of the field is `NOSYNC`"]
            #[inline(always)]
            pub fn is_no_sync(&self) -> bool {
                *self == MSM_A::NOSYNC
            }
            #[doc = "Checks if the value of the field is `SYNC`"]
            #[inline(always)]
            pub fn is_sync(&self) -> bool {
                *self == MSM_A::SYNC
            }
        }
        #[doc = "Write proxy for field `MSM`"]
        pub struct MSM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MSM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action"]
            #[inline(always)]
            pub fn no_sync(self) -> &'a mut W {
                self.variant(MSM_A::NOSYNC)
            }
            #[doc = "The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event."]
            #[inline(always)]
            pub fn sync(self) -> &'a mut W {
                self.variant(MSM_A::SYNC)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Trigger selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum TS_A {
            #[doc = "0: Internal Trigger 0 (ITR0)"]
            ITR0 = 0,
            #[doc = "1: Internal Trigger 1 (ITR1)"]
            ITR1 = 1,
            #[doc = "2: Internal Trigger 2 (ITR2)"]
            ITR2 = 2,
            #[doc = "4: TI1 Edge Detector (TI1F_ED)"]
            TI1F_ED = 4,
            #[doc = "5: Filtered Timer Input 1 (TI1FP1)"]
            TI1FP1 = 5,
            #[doc = "6: Filtered Timer Input 2 (TI2FP2)"]
            TI2FP2 = 6,
            #[doc = "7: External Trigger input (ETRF)"]
            ETRF = 7,
        }
        impl From<TS_A> for u8 {
            #[inline(always)]
            fn from(variant: TS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `TS`"]
        pub type TS_R = crate::R<u8, TS_A>;
        impl TS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, TS_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(TS_A::ITR0),
                    1 => Val(TS_A::ITR1),
                    2 => Val(TS_A::ITR2),
                    4 => Val(TS_A::TI1F_ED),
                    5 => Val(TS_A::TI1FP1),
                    6 => Val(TS_A::TI2FP2),
                    7 => Val(TS_A::ETRF),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `ITR0`"]
            #[inline(always)]
            pub fn is_itr0(&self) -> bool {
                *self == TS_A::ITR0
            }
            #[doc = "Checks if the value of the field is `ITR1`"]
            #[inline(always)]
            pub fn is_itr1(&self) -> bool {
                *self == TS_A::ITR1
            }
            #[doc = "Checks if the value of the field is `ITR2`"]
            #[inline(always)]
            pub fn is_itr2(&self) -> bool {
                *self == TS_A::ITR2
            }
            #[doc = "Checks if the value of the field is `TI1F_ED`"]
            #[inline(always)]
            pub fn is_ti1f_ed(&self) -> bool {
                *self == TS_A::TI1F_ED
            }
            #[doc = "Checks if the value of the field is `TI1FP1`"]
            #[inline(always)]
            pub fn is_ti1fp1(&self) -> bool {
                *self == TS_A::TI1FP1
            }
            #[doc = "Checks if the value of the field is `TI2FP2`"]
            #[inline(always)]
            pub fn is_ti2fp2(&self) -> bool {
                *self == TS_A::TI2FP2
            }
            #[doc = "Checks if the value of the field is `ETRF`"]
            #[inline(always)]
            pub fn is_etrf(&self) -> bool {
                *self == TS_A::ETRF
            }
        }
        #[doc = "Write proxy for field `TS`"]
        pub struct TS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TS_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Internal Trigger 0 (ITR0)"]
            #[inline(always)]
            pub fn itr0(self) -> &'a mut W {
                self.variant(TS_A::ITR0)
            }
            #[doc = "Internal Trigger 1 (ITR1)"]
            #[inline(always)]
            pub fn itr1(self) -> &'a mut W {
                self.variant(TS_A::ITR1)
            }
            #[doc = "Internal Trigger 2 (ITR2)"]
            #[inline(always)]
            pub fn itr2(self) -> &'a mut W {
                self.variant(TS_A::ITR2)
            }
            #[doc = "TI1 Edge Detector (TI1F_ED)"]
            #[inline(always)]
            pub fn ti1f_ed(self) -> &'a mut W {
                self.variant(TS_A::TI1F_ED)
            }
            #[doc = "Filtered Timer Input 1 (TI1FP1)"]
            #[inline(always)]
            pub fn ti1fp1(self) -> &'a mut W {
                self.variant(TS_A::TI1FP1)
            }
            #[doc = "Filtered Timer Input 2 (TI2FP2)"]
            #[inline(always)]
            pub fn ti2fp2(self) -> &'a mut W {
                self.variant(TS_A::TI2FP2)
            }
            #[doc = "External Trigger input (ETRF)"]
            #[inline(always)]
            pub fn etrf(self) -> &'a mut W {
                self.variant(TS_A::ETRF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OCCS`"]
        pub type OCCS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OCCS`"]
        pub struct OCCS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OCCS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Slave mode selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SMS_A {
            #[doc = "0: Slave mode disabled - if CEN = ‘1 then the prescaler is clocked directly by the internal clock."]
            DISABLED = 0,
            #[doc = "1: Encoder mode 1 - Counter counts up/down on TI2FP1 edge depending on TI1FP2 level."]
            ENCODER_MODE_1 = 1,
            #[doc = "2: Encoder mode 2 - Counter counts up/down on TI1FP2 edge depending on TI2FP1 level."]
            ENCODER_MODE_2 = 2,
            #[doc = "3: Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input."]
            ENCODER_MODE_3 = 3,
            #[doc = "4: Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers."]
            RESET_MODE = 4,
            #[doc = "5: Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled."]
            GATED_MODE = 5,
            #[doc = "6: Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled."]
            TRIGGER_MODE = 6,
            #[doc = "7: External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter."]
            EXT_CLOCK_MODE = 7,
        }
        impl From<SMS_A> for u8 {
            #[inline(always)]
            fn from(variant: SMS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `SMS`"]
        pub type SMS_R = crate::R<u8, SMS_A>;
        impl SMS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SMS_A {
                match self.bits {
                    0 => SMS_A::DISABLED,
                    1 => SMS_A::ENCODER_MODE_1,
                    2 => SMS_A::ENCODER_MODE_2,
                    3 => SMS_A::ENCODER_MODE_3,
                    4 => SMS_A::RESET_MODE,
                    5 => SMS_A::GATED_MODE,
                    6 => SMS_A::TRIGGER_MODE,
                    7 => SMS_A::EXT_CLOCK_MODE,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SMS_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENCODER_MODE_1`"]
            #[inline(always)]
            pub fn is_encoder_mode_1(&self) -> bool {
                *self == SMS_A::ENCODER_MODE_1
            }
            #[doc = "Checks if the value of the field is `ENCODER_MODE_2`"]
            #[inline(always)]
            pub fn is_encoder_mode_2(&self) -> bool {
                *self == SMS_A::ENCODER_MODE_2
            }
            #[doc = "Checks if the value of the field is `ENCODER_MODE_3`"]
            #[inline(always)]
            pub fn is_encoder_mode_3(&self) -> bool {
                *self == SMS_A::ENCODER_MODE_3
            }
            #[doc = "Checks if the value of the field is `RESET_MODE`"]
            #[inline(always)]
            pub fn is_reset_mode(&self) -> bool {
                *self == SMS_A::RESET_MODE
            }
            #[doc = "Checks if the value of the field is `GATED_MODE`"]
            #[inline(always)]
            pub fn is_gated_mode(&self) -> bool {
                *self == SMS_A::GATED_MODE
            }
            #[doc = "Checks if the value of the field is `TRIGGER_MODE`"]
            #[inline(always)]
            pub fn is_trigger_mode(&self) -> bool {
                *self == SMS_A::TRIGGER_MODE
            }
            #[doc = "Checks if the value of the field is `EXT_CLOCK_MODE`"]
            #[inline(always)]
            pub fn is_ext_clock_mode(&self) -> bool {
                *self == SMS_A::EXT_CLOCK_MODE
            }
        }
        #[doc = "Write proxy for field `SMS`"]
        pub struct SMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SMS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Slave mode disabled - if CEN = ‘1 then the prescaler is clocked directly by the internal clock."]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SMS_A::DISABLED)
            }
            #[doc = "Encoder mode 1 - Counter counts up/down on TI2FP1 edge depending on TI1FP2 level."]
            #[inline(always)]
            pub fn encoder_mode_1(self) -> &'a mut W {
                self.variant(SMS_A::ENCODER_MODE_1)
            }
            #[doc = "Encoder mode 2 - Counter counts up/down on TI1FP2 edge depending on TI2FP1 level."]
            #[inline(always)]
            pub fn encoder_mode_2(self) -> &'a mut W {
                self.variant(SMS_A::ENCODER_MODE_2)
            }
            #[doc = "Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input."]
            #[inline(always)]
            pub fn encoder_mode_3(self) -> &'a mut W {
                self.variant(SMS_A::ENCODER_MODE_3)
            }
            #[doc = "Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers."]
            #[inline(always)]
            pub fn reset_mode(self) -> &'a mut W {
                self.variant(SMS_A::RESET_MODE)
            }
            #[doc = "Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled."]
            #[inline(always)]
            pub fn gated_mode(self) -> &'a mut W {
                self.variant(SMS_A::GATED_MODE)
            }
            #[doc = "Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled."]
            #[inline(always)]
            pub fn trigger_mode(self) -> &'a mut W {
                self.variant(SMS_A::TRIGGER_MODE)
            }
            #[doc = "External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter."]
            #[inline(always)]
            pub fn ext_clock_mode(self) -> &'a mut W {
                self.variant(SMS_A::EXT_CLOCK_MODE)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&self) -> ETP_R {
                ETP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&self) -> ECE_R {
                ECE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&self) -> ETPS_R {
                ETPS_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&self) -> ETF_R {
                ETF_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&self) -> MSM_R {
                MSM_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&self) -> TS_R {
                TS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - OCREF clear selection"]
            #[inline(always)]
            pub fn occs(&self) -> OCCS_R {
                OCCS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&self) -> SMS_R {
                SMS_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&mut self) -> ETP_W {
                ETP_W { w: self }
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&mut self) -> ECE_W {
                ECE_W { w: self }
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&mut self) -> ETPS_W {
                ETPS_W { w: self }
            }
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&mut self) -> ETF_W {
                ETF_W { w: self }
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&mut self) -> MSM_W {
                MSM_W { w: self }
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&mut self) -> TS_W {
                TS_W { w: self }
            }
            #[doc = "Bit 3 - OCREF clear selection"]
            #[inline(always)]
            pub fn occs(&mut self) -> OCCS_W {
                OCCS_W { w: self }
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&mut self) -> SMS_W {
                SMS_W { w: self }
            }
        }
    }
    #[doc = "Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Trigger DMA request enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TDE_A {
            #[doc = "0: Trigger DMA request disabled"]
            DISABLED = 0,
            #[doc = "1: Trigger DMA request enabled"]
            ENABLED = 1,
        }
        impl From<TDE_A> for bool {
            #[inline(always)]
            fn from(variant: TDE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TDE`"]
        pub type TDE_R = crate::R<bool, TDE_A>;
        impl TDE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TDE_A {
                match self.bits {
                    false => TDE_A::DISABLED,
                    true => TDE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TDE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TDE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TDE`"]
        pub struct TDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TDE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Trigger DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TDE_A::DISABLED)
            }
            #[doc = "Trigger DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TDE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 DMA request enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4DE_A {
            #[doc = "0: CCx DMA request disabled"]
            DISABLED = 0,
            #[doc = "1: CCx DMA request enabled"]
            ENABLED = 1,
        }
        impl From<CC4DE_A> for bool {
            #[inline(always)]
            fn from(variant: CC4DE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC4DE`"]
        pub type CC4DE_R = crate::R<bool, CC4DE_A>;
        impl CC4DE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CC4DE_A {
                match self.bits {
                    false => CC4DE_A::DISABLED,
                    true => CC4DE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CC4DE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CC4DE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CC4DE`"]
        pub struct CC4DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4DE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4DE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4DE_A::DISABLED)
            }
            #[doc = "CCx DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4DE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 DMA request enable"]
        pub type CC3DE_A = CC4DE_A;
        #[doc = "Reader of field `CC3DE`"]
        pub type CC3DE_R = crate::R<bool, CC4DE_A>;
        #[doc = "Write proxy for field `CC3DE`"]
        pub struct CC3DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3DE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3DE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4DE_A::DISABLED)
            }
            #[doc = "CCx DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4DE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Capture/Compare 2 DMA request enable"]
        pub type CC2DE_A = CC4DE_A;
        #[doc = "Reader of field `CC2DE`"]
        pub type CC2DE_R = crate::R<bool, CC4DE_A>;
        #[doc = "Write proxy for field `CC2DE`"]
        pub struct CC2DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2DE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2DE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4DE_A::DISABLED)
            }
            #[doc = "CCx DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4DE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 DMA request enable"]
        pub type CC1DE_A = CC4DE_A;
        #[doc = "Reader of field `CC1DE`"]
        pub type CC1DE_R = crate::R<bool, CC4DE_A>;
        #[doc = "Write proxy for field `CC1DE`"]
        pub struct CC1DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1DE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1DE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4DE_A::DISABLED)
            }
            #[doc = "CCx DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4DE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Update DMA request enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDE_A {
            #[doc = "0: Update DMA request disabled"]
            DISABLED = 0,
            #[doc = "1: Update DMA request enabled"]
            ENABLED = 1,
        }
        impl From<UDE_A> for bool {
            #[inline(always)]
            fn from(variant: UDE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDE`"]
        pub type UDE_R = crate::R<bool, UDE_A>;
        impl UDE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDE_A {
                match self.bits {
                    false => UDE_A::DISABLED,
                    true => UDE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UDE`"]
        pub struct UDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDE_A::DISABLED)
            }
            #[doc = "Update DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Trigger interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIE_A {
            #[doc = "0: Trigger interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Trigger interrupt enabled"]
            ENABLED = 1,
        }
        impl From<TIE_A> for bool {
            #[inline(always)]
            fn from(variant: TIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIE`"]
        pub type TIE_R = crate::R<bool, TIE_A>;
        impl TIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIE_A {
                match self.bits {
                    false => TIE_A::DISABLED,
                    true => TIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TIE`"]
        pub struct TIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Trigger interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIE_A::DISABLED)
            }
            #[doc = "Trigger interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4IE_A {
            #[doc = "0: CCx interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: CCx interrupt enabled"]
            ENABLED = 1,
        }
        impl From<CC4IE_A> for bool {
            #[inline(always)]
            fn from(variant: CC4IE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC4IE`"]
        pub type CC4IE_R = crate::R<bool, CC4IE_A>;
        impl CC4IE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CC4IE_A {
                match self.bits {
                    false => CC4IE_A::DISABLED,
                    true => CC4IE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CC4IE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CC4IE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CC4IE`"]
        pub struct CC4IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4IE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4IE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4IE_A::DISABLED)
            }
            #[doc = "CCx interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4IE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 interrupt enable"]
        pub type CC3IE_A = CC4IE_A;
        #[doc = "Reader of field `CC3IE`"]
        pub type CC3IE_R = crate::R<bool, CC4IE_A>;
        #[doc = "Write proxy for field `CC3IE`"]
        pub struct CC3IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3IE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3IE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4IE_A::DISABLED)
            }
            #[doc = "CCx interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4IE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Capture/Compare 2 interrupt enable"]
        pub type CC2IE_A = CC4IE_A;
        #[doc = "Reader of field `CC2IE`"]
        pub type CC2IE_R = crate::R<bool, CC4IE_A>;
        #[doc = "Write proxy for field `CC2IE`"]
        pub struct CC2IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2IE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4IE_A::DISABLED)
            }
            #[doc = "CCx interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4IE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 interrupt enable"]
        pub type CC1IE_A = CC4IE_A;
        #[doc = "Reader of field `CC1IE`"]
        pub type CC1IE_R = crate::R<bool, CC4IE_A>;
        #[doc = "Write proxy for field `CC1IE`"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1IE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4IE_A::DISABLED)
            }
            #[doc = "CCx interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4IE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIE_A {
            #[doc = "0: Update interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Update interrupt enabled"]
            ENABLED = 1,
        }
        impl From<UIE_A> for bool {
            #[inline(always)]
            fn from(variant: UIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, UIE_A>;
        impl UIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIE_A {
                match self.bits {
                    false => UIE_A::DISABLED,
                    true => UIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UIE_A::DISABLED)
            }
            #[doc = "Update interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&self) -> TDE_R {
                TDE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
            #[inline(always)]
            pub fn cc4de(&self) -> CC4DE_R {
                CC4DE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
            #[inline(always)]
            pub fn cc3de(&self) -> CC3DE_R {
                CC3DE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&self) -> CC2DE_R {
                CC2DE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&self) -> CC1DE_R {
                CC1DE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&self) -> UDE_R {
                UDE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&self) -> TIE_R {
                TIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
            #[inline(always)]
            pub fn cc4ie(&self) -> CC4IE_R {
                CC4IE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
            #[inline(always)]
            pub fn cc3ie(&self) -> CC3IE_R {
                CC3IE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&self) -> CC2IE_R {
                CC2IE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&mut self) -> TDE_W {
                TDE_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
            #[inline(always)]
            pub fn cc4de(&mut self) -> CC4DE_W {
                CC4DE_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
            #[inline(always)]
            pub fn cc3de(&mut self) -> CC3DE_W {
                CC3DE_W { w: self }
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&mut self) -> CC2DE_W {
                CC2DE_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&mut self) -> CC1DE_W {
                CC1DE_W { w: self }
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&mut self) -> UDE_W {
                UDE_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&mut self) -> TIE_W {
                TIE_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
            #[inline(always)]
            pub fn cc4ie(&mut self) -> CC4IE_W {
                CC4IE_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
            #[inline(always)]
            pub fn cc3ie(&mut self) -> CC3IE_W {
                CC3IE_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&mut self) -> CC2IE_W {
                CC2IE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Capture/compare 1 overcapture flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4OF_A {
            #[doc = "1: The counter value has been captured in TIMx_CCRx register while CCxIF flag was already set"]
            OVERCAPTURE = 1,
        }
        impl From<CC4OF_A> for bool {
            #[inline(always)]
            fn from(variant: CC4OF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC4OF`"]
        pub type CC4OF_R = crate::R<bool, CC4OF_A>;
        impl CC4OF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, CC4OF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(CC4OF_A::OVERCAPTURE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OVERCAPTURE`"]
            #[inline(always)]
            pub fn is_overcapture(&self) -> bool {
                *self == CC4OF_A::OVERCAPTURE
            }
        }
        #[doc = "Capture/compare 1 overcapture flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4OF_AW {
            #[doc = "0: Clear flag"]
            CLEAR = 0,
        }
        impl From<CC4OF_AW> for bool {
            #[inline(always)]
            fn from(variant: CC4OF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `CC4OF`"]
        pub struct CC4OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4OF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4OF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4OF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Capture/compare 3 overcapture flag"]
        pub type CC3OF_A = CC4OF_A;
        #[doc = "Reader of field `CC3OF`"]
        pub type CC3OF_R = crate::R<bool, CC4OF_A>;
        #[doc = "Capture/compare 3 overcapture flag"]
        pub type CC3OF_AW = CC4OF_AW;
        #[doc = "Write proxy for field `CC3OF`"]
        pub struct CC3OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3OF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3OF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4OF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Capture/compare 2 overcapture flag"]
        pub type CC2OF_A = CC4OF_A;
        #[doc = "Reader of field `CC2OF`"]
        pub type CC2OF_R = crate::R<bool, CC4OF_A>;
        #[doc = "Capture/compare 2 overcapture flag"]
        pub type CC2OF_AW = CC4OF_AW;
        #[doc = "Write proxy for field `CC2OF`"]
        pub struct CC2OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2OF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2OF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4OF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Capture/compare 1 overcapture flag"]
        pub type CC1OF_A = CC4OF_A;
        #[doc = "Reader of field `CC1OF`"]
        pub type CC1OF_R = crate::R<bool, CC4OF_A>;
        #[doc = "Capture/compare 1 overcapture flag"]
        pub type CC1OF_AW = CC4OF_AW;
        #[doc = "Write proxy for field `CC1OF`"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1OF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4OF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Trigger interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIF_A {
            #[doc = "0: No trigger event occurred"]
            NOTRIGGER = 0,
            #[doc = "1: Trigger interrupt pending"]
            TRIGGER = 1,
        }
        impl From<TIF_A> for bool {
            #[inline(always)]
            fn from(variant: TIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIF`"]
        pub type TIF_R = crate::R<bool, TIF_A>;
        impl TIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIF_A {
                match self.bits {
                    false => TIF_A::NOTRIGGER,
                    true => TIF_A::TRIGGER,
                }
            }
            #[doc = "Checks if the value of the field is `NOTRIGGER`"]
            #[inline(always)]
            pub fn is_no_trigger(&self) -> bool {
                *self == TIF_A::NOTRIGGER
            }
            #[doc = "Checks if the value of the field is `TRIGGER`"]
            #[inline(always)]
            pub fn is_trigger(&self) -> bool {
                *self == TIF_A::TRIGGER
            }
        }
        #[doc = "Trigger interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIF_AW {
            #[doc = "0: Clear flag"]
            CLEAR = 0,
        }
        impl From<TIF_AW> for bool {
            #[inline(always)]
            fn from(variant: TIF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `TIF`"]
        pub struct TIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(TIF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4IF_A {
            #[doc = "1: If CC1 is an output: The content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. If CC1 is an input: The counter value has been captured in TIMx_CCR1 register."]
            MATCH = 1,
        }
        impl From<CC4IF_A> for bool {
            #[inline(always)]
            fn from(variant: CC4IF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC4IF`"]
        pub type CC4IF_R = crate::R<bool, CC4IF_A>;
        impl CC4IF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, CC4IF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(CC4IF_A::MATCH),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `MATCH`"]
            #[inline(always)]
            pub fn is_match_(&self) -> bool {
                *self == CC4IF_A::MATCH
            }
        }
        #[doc = "Capture/Compare 4 interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4IF_AW {
            #[doc = "0: Clear flag"]
            CLEAR = 0,
        }
        impl From<CC4IF_AW> for bool {
            #[inline(always)]
            fn from(variant: CC4IF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `CC4IF`"]
        pub struct CC4IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4IF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4IF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4IF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 interrupt flag"]
        pub type CC3IF_A = CC4IF_A;
        #[doc = "Reader of field `CC3IF`"]
        pub type CC3IF_R = crate::R<bool, CC4IF_A>;
        #[doc = "Capture/Compare 3 interrupt flag"]
        pub type CC3IF_AW = CC4IF_AW;
        #[doc = "Write proxy for field `CC3IF`"]
        pub struct CC3IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3IF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3IF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4IF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Capture/Compare 2 interrupt flag"]
        pub type CC2IF_A = CC4IF_A;
        #[doc = "Reader of field `CC2IF`"]
        pub type CC2IF_R = crate::R<bool, CC4IF_A>;
        #[doc = "Capture/Compare 2 interrupt flag"]
        pub type CC2IF_AW = CC4IF_AW;
        #[doc = "Write proxy for field `CC2IF`"]
        pub struct CC2IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2IF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4IF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 interrupt flag"]
        pub type CC1IF_A = CC4IF_A;
        #[doc = "Reader of field `CC1IF`"]
        pub type CC1IF_R = crate::R<bool, CC4IF_A>;
        #[doc = "Capture/Compare 1 interrupt flag"]
        pub type CC1IF_AW = CC4IF_AW;
        #[doc = "Write proxy for field `CC1IF`"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1IF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4IF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIF_A {
            #[doc = "0: No update occurred"]
            CLEAR = 0,
            #[doc = "1: Update interrupt pending."]
            UPDATEPENDING = 1,
        }
        impl From<UIF_A> for bool {
            #[inline(always)]
            fn from(variant: UIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, UIF_A>;
        impl UIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIF_A {
                match self.bits {
                    false => UIF_A::CLEAR,
                    true => UIF_A::UPDATEPENDING,
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == UIF_A::CLEAR
            }
            #[doc = "Checks if the value of the field is `UPDATEPENDING`"]
            #[inline(always)]
            pub fn is_update_pending(&self) -> bool {
                *self == UIF_A::UPDATEPENDING
            }
        }
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No update occurred"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(UIF_A::CLEAR)
            }
            #[doc = "Update interrupt pending."]
            #[inline(always)]
            pub fn update_pending(self) -> &'a mut W {
                self.variant(UIF_A::UPDATEPENDING)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 12 - Capture/compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc4of(&self) -> CC4OF_R {
                CC4OF_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/compare 3 overcapture flag"]
            #[inline(always)]
            pub fn cc3of(&self) -> CC3OF_R {
                CC3OF_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&self) -> CC2OF_R {
                CC2OF_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&self) -> TIF_R {
                TIF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
            #[inline(always)]
            pub fn cc4if(&self) -> CC4IF_R {
                CC4IF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
            #[inline(always)]
            pub fn cc3if(&self) -> CC3IF_R {
                CC3IF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&self) -> CC2IF_R {
                CC2IF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 12 - Capture/compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc4of(&mut self) -> CC4OF_W {
                CC4OF_W { w: self }
            }
            #[doc = "Bit 11 - Capture/compare 3 overcapture flag"]
            #[inline(always)]
            pub fn cc3of(&mut self) -> CC3OF_W {
                CC3OF_W { w: self }
            }
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&mut self) -> CC2OF_W {
                CC2OF_W { w: self }
            }
            #[doc = "Bit 9 - Capture/compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&mut self) -> TIF_W {
                TIF_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
            #[inline(always)]
            pub fn cc4if(&mut self) -> CC4IF_W {
                CC4IF_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
            #[inline(always)]
            pub fn cc3if(&mut self) -> CC3IF_W {
                CC3IF_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&mut self) -> CC2IF_W {
                CC2IF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
        }
    }
    #[doc = "event generation register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`read()` method returns [egr::R](egr::R) reader structure"]
    impl crate::Readable for EGR {}
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Reader of register EGR"]
        pub type R = crate::R<u32, super::EGR>;
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Trigger generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TG_A {
            #[doc = "1: The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled."]
            TRIGGER = 1,
        }
        impl From<TG_A> for bool {
            #[inline(always)]
            fn from(variant: TG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TG`"]
        pub type TG_R = crate::R<bool, TG_A>;
        impl TG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, TG_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(TG_A::TRIGGER),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TRIGGER`"]
            #[inline(always)]
            pub fn is_trigger(&self) -> bool {
                *self == TG_A::TRIGGER
            }
        }
        #[doc = "Write proxy for field `TG`"]
        pub struct TG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(TG_A::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Capture/compare 4 generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4G_A {
            #[doc = "1: If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            TRIGGER = 1,
        }
        impl From<CC4G_A> for bool {
            #[inline(always)]
            fn from(variant: CC4G_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC4G`"]
        pub type CC4G_R = crate::R<bool, CC4G_A>;
        impl CC4G_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, CC4G_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(CC4G_A::TRIGGER),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TRIGGER`"]
            #[inline(always)]
            pub fn is_trigger(&self) -> bool {
                *self == CC4G_A::TRIGGER
            }
        }
        #[doc = "Write proxy for field `CC4G`"]
        pub struct CC4G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4G_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4G_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(CC4G_A::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Capture/compare 3 generation"]
        pub type CC3G_A = CC4G_A;
        #[doc = "Reader of field `CC3G`"]
        pub type CC3G_R = crate::R<bool, CC4G_A>;
        #[doc = "Write proxy for field `CC3G`"]
        pub struct CC3G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3G_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3G_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(CC4G_A::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Capture/compare 2 generation"]
        pub type CC2G_A = CC4G_A;
        #[doc = "Reader of field `CC2G`"]
        pub type CC2G_R = crate::R<bool, CC4G_A>;
        #[doc = "Write proxy for field `CC2G`"]
        pub struct CC2G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2G_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2G_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(CC4G_A::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/compare 1 generation"]
        pub type CC1G_A = CC4G_A;
        #[doc = "Reader of field `CC1G`"]
        pub type CC1G_R = crate::R<bool, CC4G_A>;
        #[doc = "Write proxy for field `CC1G`"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1G_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(CC4G_A::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UG_A {
            #[doc = "1: Re-initializes the timer counter and generates an update of the registers."]
            UPDATE = 1,
        }
        impl From<UG_A> for bool {
            #[inline(always)]
            fn from(variant: UG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UG`"]
        pub type UG_R = crate::R<bool, UG_A>;
        impl UG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, UG_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(UG_A::UPDATE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `UPDATE`"]
            #[inline(always)]
            pub fn is_update(&self) -> bool {
                *self == UG_A::UPDATE
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Re-initializes the timer counter and generates an update of the registers."]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(UG_A::UPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 6 - Trigger generation"]
            #[inline(always)]
            pub fn tg(&self) -> TG_R {
                TG_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/compare 4 generation"]
            #[inline(always)]
            pub fn cc4g(&self) -> CC4G_R {
                CC4G_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/compare 3 generation"]
            #[inline(always)]
            pub fn cc3g(&self) -> CC3G_R {
                CC3G_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/compare 2 generation"]
            #[inline(always)]
            pub fn cc2g(&self) -> CC2G_R {
                CC2G_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&self) -> CC1G_R {
                CC1G_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&self) -> UG_R {
                UG_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 6 - Trigger generation"]
            #[inline(always)]
            pub fn tg(&mut self) -> TG_W {
                TG_W { w: self }
            }
            #[doc = "Bit 4 - Capture/compare 4 generation"]
            #[inline(always)]
            pub fn cc4g(&mut self) -> CC4G_W {
                CC4G_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare 3 generation"]
            #[inline(always)]
            pub fn cc3g(&mut self) -> CC3G_W {
                CC3G_W { w: self }
            }
            #[doc = "Bit 2 - Capture/compare 2 generation"]
            #[inline(always)]
            pub fn cc2g(&mut self) -> CC2G_W {
                CC2G_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](ccmr1_output) module"]
    pub type CCMR1_OUTPUT = crate::Reg<u32, _CCMR1_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_OUTPUT;
    #[doc = "`read()` method returns [ccmr1_output::R](ccmr1_output::R) reader structure"]
    impl crate::Readable for CCMR1_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](ccmr1_output::W) writer structure"]
    impl crate::Writable for CCMR1_OUTPUT {}
    #[doc = "capture/compare mode register 1"]
    pub mod ccmr1_output {
        #[doc = "Reader of register CCMR1_Output"]
        pub type R = crate::R<u32, super::CCMR1_OUTPUT>;
        #[doc = "Writer for register CCMR1_Output"]
        pub type W = crate::W<u32, super::CCMR1_OUTPUT>;
        #[doc = "Register CCMR1_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OC2CE`"]
        pub type OC2CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2CE`"]
        pub struct OC2CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Output compare 2 mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OC2M_A {
            #[doc = "0: The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            FROZEN = 0,
            #[doc = "1: Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            ACTIVEONMATCH = 1,
            #[doc = "2: Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            INACTIVEONMATCH = 2,
            #[doc = "3: OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            TOGGLE = 3,
            #[doc = "4: OCyREF is forced low"]
            FORCEINACTIVE = 4,
            #[doc = "5: OCyREF is forced high"]
            FORCEACTIVE = 5,
            #[doc = "6: In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            PWMMODE1 = 6,
            #[doc = "7: Inversely to PwmMode1"]
            PWMMODE2 = 7,
        }
        impl From<OC2M_A> for u8 {
            #[inline(always)]
            fn from(variant: OC2M_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `OC2M`"]
        pub type OC2M_R = crate::R<u8, OC2M_A>;
        impl OC2M_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC2M_A {
                match self.bits {
                    0 => OC2M_A::FROZEN,
                    1 => OC2M_A::ACTIVEONMATCH,
                    2 => OC2M_A::INACTIVEONMATCH,
                    3 => OC2M_A::TOGGLE,
                    4 => OC2M_A::FORCEINACTIVE,
                    5 => OC2M_A::FORCEACTIVE,
                    6 => OC2M_A::PWMMODE1,
                    7 => OC2M_A::PWMMODE2,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `FROZEN`"]
            #[inline(always)]
            pub fn is_frozen(&self) -> bool {
                *self == OC2M_A::FROZEN
            }
            #[doc = "Checks if the value of the field is `ACTIVEONMATCH`"]
            #[inline(always)]
            pub fn is_active_on_match(&self) -> bool {
                *self == OC2M_A::ACTIVEONMATCH
            }
            #[doc = "Checks if the value of the field is `INACTIVEONMATCH`"]
            #[inline(always)]
            pub fn is_inactive_on_match(&self) -> bool {
                *self == OC2M_A::INACTIVEONMATCH
            }
            #[doc = "Checks if the value of the field is `TOGGLE`"]
            #[inline(always)]
            pub fn is_toggle(&self) -> bool {
                *self == OC2M_A::TOGGLE
            }
            #[doc = "Checks if the value of the field is `FORCEINACTIVE`"]
            #[inline(always)]
            pub fn is_force_inactive(&self) -> bool {
                *self == OC2M_A::FORCEINACTIVE
            }
            #[doc = "Checks if the value of the field is `FORCEACTIVE`"]
            #[inline(always)]
            pub fn is_force_active(&self) -> bool {
                *self == OC2M_A::FORCEACTIVE
            }
            #[doc = "Checks if the value of the field is `PWMMODE1`"]
            #[inline(always)]
            pub fn is_pwm_mode1(&self) -> bool {
                *self == OC2M_A::PWMMODE1
            }
            #[doc = "Checks if the value of the field is `PWMMODE2`"]
            #[inline(always)]
            pub fn is_pwm_mode2(&self) -> bool {
                *self == OC2M_A::PWMMODE2
            }
        }
        #[doc = "Write proxy for field `OC2M`"]
        pub struct OC2M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2M_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC2M_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            #[inline(always)]
            pub fn frozen(self) -> &'a mut W {
                self.variant(OC2M_A::FROZEN)
            }
            #[doc = "Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn active_on_match(self) -> &'a mut W {
                self.variant(OC2M_A::ACTIVEONMATCH)
            }
            #[doc = "Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn inactive_on_match(self) -> &'a mut W {
                self.variant(OC2M_A::INACTIVEONMATCH)
            }
            #[doc = "OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            #[inline(always)]
            pub fn toggle(self) -> &'a mut W {
                self.variant(OC2M_A::TOGGLE)
            }
            #[doc = "OCyREF is forced low"]
            #[inline(always)]
            pub fn force_inactive(self) -> &'a mut W {
                self.variant(OC2M_A::FORCEINACTIVE)
            }
            #[doc = "OCyREF is forced high"]
            #[inline(always)]
            pub fn force_active(self) -> &'a mut W {
                self.variant(OC2M_A::FORCEACTIVE)
            }
            #[doc = "In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            #[inline(always)]
            pub fn pwm_mode1(self) -> &'a mut W {
                self.variant(OC2M_A::PWMMODE1)
            }
            #[doc = "Inversely to PwmMode1"]
            #[inline(always)]
            pub fn pwm_mode2(self) -> &'a mut W {
                self.variant(OC2M_A::PWMMODE2)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Output compare 2 preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OC2PE_A {
            #[doc = "0: Preload register on CCR2 disabled. New values written to CCR2 are taken into account immediately"]
            DISABLED = 0,
            #[doc = "1: Preload register on CCR2 enabled. Preload value is loaded into active register on each update event"]
            ENABLED = 1,
        }
        impl From<OC2PE_A> for bool {
            #[inline(always)]
            fn from(variant: OC2PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OC2PE`"]
        pub type OC2PE_R = crate::R<bool, OC2PE_A>;
        impl OC2PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC2PE_A {
                match self.bits {
                    false => OC2PE_A::DISABLED,
                    true => OC2PE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OC2PE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OC2PE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OC2PE`"]
        pub struct OC2PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC2PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Preload register on CCR2 disabled. New values written to CCR2 are taken into account immediately"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OC2PE_A::DISABLED)
            }
            #[doc = "Preload register on CCR2 enabled. Preload value is loaded into active register on each update event"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OC2PE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC2FE`"]
        pub type OC2FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2FE`"]
        pub struct OC2FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 2 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC2S_A {
            #[doc = "0: CC2 channel is configured as output"]
            OUTPUT = 0,
        }
        impl From<CC2S_A> for bool {
            #[inline(always)]
            fn from(variant: CC2S_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC2S`"]
        pub type CC2S_R = crate::R<bool, CC2S_A>;
        impl CC2S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, CC2S_A> {
                use crate::Variant::*;
                match self.bits {
                    false => Val(CC2S_A::OUTPUT),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == CC2S_A::OUTPUT
            }
        }
        #[doc = "Write proxy for field `CC2S`"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2S_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CC2 channel is configured as output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(CC2S_A::OUTPUT)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OC1CE`"]
        pub type OC1CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1CE`"]
        pub struct OC1CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Output compare 1 mode"]
        pub type OC1M_A = OC2M_A;
        #[doc = "Reader of field `OC1M`"]
        pub type OC1M_R = crate::R<u8, OC2M_A>;
        #[doc = "Write proxy for field `OC1M`"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC1M_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            #[inline(always)]
            pub fn frozen(self) -> &'a mut W {
                self.variant(OC2M_A::FROZEN)
            }
            #[doc = "Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn active_on_match(self) -> &'a mut W {
                self.variant(OC2M_A::ACTIVEONMATCH)
            }
            #[doc = "Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn inactive_on_match(self) -> &'a mut W {
                self.variant(OC2M_A::INACTIVEONMATCH)
            }
            #[doc = "OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            #[inline(always)]
            pub fn toggle(self) -> &'a mut W {
                self.variant(OC2M_A::TOGGLE)
            }
            #[doc = "OCyREF is forced low"]
            #[inline(always)]
            pub fn force_inactive(self) -> &'a mut W {
                self.variant(OC2M_A::FORCEINACTIVE)
            }
            #[doc = "OCyREF is forced high"]
            #[inline(always)]
            pub fn force_active(self) -> &'a mut W {
                self.variant(OC2M_A::FORCEACTIVE)
            }
            #[doc = "In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            #[inline(always)]
            pub fn pwm_mode1(self) -> &'a mut W {
                self.variant(OC2M_A::PWMMODE1)
            }
            #[doc = "Inversely to PwmMode1"]
            #[inline(always)]
            pub fn pwm_mode2(self) -> &'a mut W {
                self.variant(OC2M_A::PWMMODE2)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Output compare 1 preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OC1PE_A {
            #[doc = "0: Preload register on CCR1 disabled. New values written to CCR1 are taken into account immediately"]
            DISABLED = 0,
            #[doc = "1: Preload register on CCR1 enabled. Preload value is loaded into active register on each update event"]
            ENABLED = 1,
        }
        impl From<OC1PE_A> for bool {
            #[inline(always)]
            fn from(variant: OC1PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OC1PE`"]
        pub type OC1PE_R = crate::R<bool, OC1PE_A>;
        impl OC1PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC1PE_A {
                match self.bits {
                    false => OC1PE_A::DISABLED,
                    true => OC1PE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OC1PE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OC1PE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OC1PE`"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC1PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Preload register on CCR1 disabled. New values written to CCR1 are taken into account immediately"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OC1PE_A::DISABLED)
            }
            #[doc = "Preload register on CCR1 enabled. Preload value is loaded into active register on each update event"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OC1PE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC1FE`"]
        pub type OC1FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1FE`"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC1S_A {
            #[doc = "0: CC1 channel is configured as output"]
            OUTPUT = 0,
        }
        impl From<CC1S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC1S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, CC1S_A>;
        impl CC1S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC1S_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CC1S_A::OUTPUT),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == CC1S_A::OUTPUT
            }
        }
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC1 channel is configured as output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(CC1S_A::OUTPUT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Output compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&self) -> OC2CE_R {
                OC2CE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Output compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&self) -> OC2M_R {
                OC2M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 11 - Output compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&self) -> OC2PE_R {
                OC2PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&self) -> OC2FE_R {
                OC2FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Output compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&self) -> OC1CE_R {
                OC1CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Output compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Output compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&mut self) -> OC2CE_W {
                OC2CE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&mut self) -> OC2M_W {
                OC2M_W { w: self }
            }
            #[doc = "Bit 11 - Output compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&mut self) -> OC2PE_W {
                OC2PE_W { w: self }
            }
            #[doc = "Bit 10 - Output compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&mut self) -> OC2FE_W {
                OC2FE_W { w: self }
            }
            #[doc = "Bit 8 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&mut self) -> OC1CE_W {
                OC1CE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](ccmr1_input) module"]
    pub type CCMR1_INPUT = crate::Reg<u32, _CCMR1_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_INPUT;
    #[doc = "`read()` method returns [ccmr1_input::R](ccmr1_input::R) reader structure"]
    impl crate::Readable for CCMR1_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](ccmr1_input::W) writer structure"]
    impl crate::Writable for CCMR1_INPUT {}
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Reader of register CCMR1_Input"]
        pub type R = crate::R<u32, super::CCMR1_INPUT>;
        #[doc = "Writer for register CCMR1_Input"]
        pub type W = crate::W<u32, super::CCMR1_INPUT>;
        #[doc = "Register CCMR1_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC2F`"]
        pub type IC2F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC2F`"]
        pub struct IC2F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IC2PSC`"]
        pub type IC2PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC2PSC`"]
        pub struct IC2PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 2 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC2S_A {
            #[doc = "1: CC2 channel is configured as input, IC2 is mapped on TI2"]
            TI2 = 1,
            #[doc = "2: CC2 channel is configured as input, IC2 is mapped on TI1"]
            TI1 = 2,
            #[doc = "3: CC2 channel is configured as input, IC2 is mapped on TRC"]
            TRC = 3,
        }
        impl From<CC2S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC2S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC2S`"]
        pub type CC2S_R = crate::R<u8, CC2S_A>;
        impl CC2S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC2S_A> {
                use crate::Variant::*;
                match self.bits {
                    1 => Val(CC2S_A::TI2),
                    2 => Val(CC2S_A::TI1),
                    3 => Val(CC2S_A::TRC),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TI2`"]
            #[inline(always)]
            pub fn is_ti2(&self) -> bool {
                *self == CC2S_A::TI2
            }
            #[doc = "Checks if the value of the field is `TI1`"]
            #[inline(always)]
            pub fn is_ti1(&self) -> bool {
                *self == CC2S_A::TI1
            }
            #[doc = "Checks if the value of the field is `TRC`"]
            #[inline(always)]
            pub fn is_trc(&self) -> bool {
                *self == CC2S_A::TRC
            }
        }
        #[doc = "Write proxy for field `CC2S`"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC2 channel is configured as input, IC2 is mapped on TI2"]
            #[inline(always)]
            pub fn ti2(self) -> &'a mut W {
                self.variant(CC2S_A::TI2)
            }
            #[doc = "CC2 channel is configured as input, IC2 is mapped on TI1"]
            #[inline(always)]
            pub fn ti1(self) -> &'a mut W {
                self.variant(CC2S_A::TI1)
            }
            #[doc = "CC2 channel is configured as input, IC2 is mapped on TRC"]
            #[inline(always)]
            pub fn trc(self) -> &'a mut W {
                self.variant(CC2S_A::TRC)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Input capture 1 filter\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum IC1F_A {
            #[doc = "0: No filter, sampling is done at fDTS"]
            NOFILTER = 0,
            #[doc = "1: fSAMPLING=fCK_INT, N=2"]
            FCK_INT_N2 = 1,
            #[doc = "2: fSAMPLING=fCK_INT, N=4"]
            FCK_INT_N4 = 2,
            #[doc = "3: fSAMPLING=fCK_INT, N=8"]
            FCK_INT_N8 = 3,
            #[doc = "4: fSAMPLING=fDTS/2, N=6"]
            FDTS_DIV2_N6 = 4,
            #[doc = "5: fSAMPLING=fDTS/2, N=8"]
            FDTS_DIV2_N8 = 5,
            #[doc = "6: fSAMPLING=fDTS/4, N=6"]
            FDTS_DIV4_N6 = 6,
            #[doc = "7: fSAMPLING=fDTS/4, N=8"]
            FDTS_DIV4_N8 = 7,
            #[doc = "8: fSAMPLING=fDTS/8, N=6"]
            FDTS_DIV8_N6 = 8,
            #[doc = "9: fSAMPLING=fDTS/8, N=8"]
            FDTS_DIV8_N8 = 9,
            #[doc = "10: fSAMPLING=fDTS/16, N=5"]
            FDTS_DIV16_N5 = 10,
            #[doc = "11: fSAMPLING=fDTS/16, N=6"]
            FDTS_DIV16_N6 = 11,
            #[doc = "12: fSAMPLING=fDTS/16, N=8"]
            FDTS_DIV16_N8 = 12,
            #[doc = "13: fSAMPLING=fDTS/32, N=5"]
            FDTS_DIV32_N5 = 13,
            #[doc = "14: fSAMPLING=fDTS/32, N=6"]
            FDTS_DIV32_N6 = 14,
            #[doc = "15: fSAMPLING=fDTS/32, N=8"]
            FDTS_DIV32_N8 = 15,
        }
        impl From<IC1F_A> for u8 {
            #[inline(always)]
            fn from(variant: IC1F_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `IC1F`"]
        pub type IC1F_R = crate::R<u8, IC1F_A>;
        impl IC1F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IC1F_A {
                match self.bits {
                    0 => IC1F_A::NOFILTER,
                    1 => IC1F_A::FCK_INT_N2,
                    2 => IC1F_A::FCK_INT_N4,
                    3 => IC1F_A::FCK_INT_N8,
                    4 => IC1F_A::FDTS_DIV2_N6,
                    5 => IC1F_A::FDTS_DIV2_N8,
                    6 => IC1F_A::FDTS_DIV4_N6,
                    7 => IC1F_A::FDTS_DIV4_N8,
                    8 => IC1F_A::FDTS_DIV8_N6,
                    9 => IC1F_A::FDTS_DIV8_N8,
                    10 => IC1F_A::FDTS_DIV16_N5,
                    11 => IC1F_A::FDTS_DIV16_N6,
                    12 => IC1F_A::FDTS_DIV16_N8,
                    13 => IC1F_A::FDTS_DIV32_N5,
                    14 => IC1F_A::FDTS_DIV32_N6,
                    15 => IC1F_A::FDTS_DIV32_N8,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `NOFILTER`"]
            #[inline(always)]
            pub fn is_no_filter(&self) -> bool {
                *self == IC1F_A::NOFILTER
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N2`"]
            #[inline(always)]
            pub fn is_fck_int_n2(&self) -> bool {
                *self == IC1F_A::FCK_INT_N2
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N4`"]
            #[inline(always)]
            pub fn is_fck_int_n4(&self) -> bool {
                *self == IC1F_A::FCK_INT_N4
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N8`"]
            #[inline(always)]
            pub fn is_fck_int_n8(&self) -> bool {
                *self == IC1F_A::FCK_INT_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV2_N6`"]
            #[inline(always)]
            pub fn is_fdts_div2_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV2_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV2_N8`"]
            #[inline(always)]
            pub fn is_fdts_div2_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV2_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV4_N6`"]
            #[inline(always)]
            pub fn is_fdts_div4_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV4_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV4_N8`"]
            #[inline(always)]
            pub fn is_fdts_div4_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV4_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV8_N6`"]
            #[inline(always)]
            pub fn is_fdts_div8_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV8_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV8_N8`"]
            #[inline(always)]
            pub fn is_fdts_div8_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV8_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N5`"]
            #[inline(always)]
            pub fn is_fdts_div16_n5(&self) -> bool {
                *self == IC1F_A::FDTS_DIV16_N5
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N6`"]
            #[inline(always)]
            pub fn is_fdts_div16_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV16_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N8`"]
            #[inline(always)]
            pub fn is_fdts_div16_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV16_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N5`"]
            #[inline(always)]
            pub fn is_fdts_div32_n5(&self) -> bool {
                *self == IC1F_A::FDTS_DIV32_N5
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N6`"]
            #[inline(always)]
            pub fn is_fdts_div32_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV32_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N8`"]
            #[inline(always)]
            pub fn is_fdts_div32_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV32_N8
            }
        }
        #[doc = "Write proxy for field `IC1F`"]
        pub struct IC1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IC1F_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No filter, sampling is done at fDTS"]
            #[inline(always)]
            pub fn no_filter(self) -> &'a mut W {
                self.variant(IC1F_A::NOFILTER)
            }
            #[doc = "fSAMPLING=fCK_INT, N=2"]
            #[inline(always)]
            pub fn fck_int_n2(self) -> &'a mut W {
                self.variant(IC1F_A::FCK_INT_N2)
            }
            #[doc = "fSAMPLING=fCK_INT, N=4"]
            #[inline(always)]
            pub fn fck_int_n4(self) -> &'a mut W {
                self.variant(IC1F_A::FCK_INT_N4)
            }
            #[doc = "fSAMPLING=fCK_INT, N=8"]
            #[inline(always)]
            pub fn fck_int_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FCK_INT_N8)
            }
            #[doc = "fSAMPLING=fDTS/2, N=6"]
            #[inline(always)]
            pub fn fdts_div2_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV2_N6)
            }
            #[doc = "fSAMPLING=fDTS/2, N=8"]
            #[inline(always)]
            pub fn fdts_div2_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV2_N8)
            }
            #[doc = "fSAMPLING=fDTS/4, N=6"]
            #[inline(always)]
            pub fn fdts_div4_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV4_N6)
            }
            #[doc = "fSAMPLING=fDTS/4, N=8"]
            #[inline(always)]
            pub fn fdts_div4_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV4_N8)
            }
            #[doc = "fSAMPLING=fDTS/8, N=6"]
            #[inline(always)]
            pub fn fdts_div8_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV8_N6)
            }
            #[doc = "fSAMPLING=fDTS/8, N=8"]
            #[inline(always)]
            pub fn fdts_div8_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV8_N8)
            }
            #[doc = "fSAMPLING=fDTS/16, N=5"]
            #[inline(always)]
            pub fn fdts_div16_n5(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV16_N5)
            }
            #[doc = "fSAMPLING=fDTS/16, N=6"]
            #[inline(always)]
            pub fn fdts_div16_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV16_N6)
            }
            #[doc = "fSAMPLING=fDTS/16, N=8"]
            #[inline(always)]
            pub fn fdts_div16_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV16_N8)
            }
            #[doc = "fSAMPLING=fDTS/32, N=5"]
            #[inline(always)]
            pub fn fdts_div32_n5(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV32_N5)
            }
            #[doc = "fSAMPLING=fDTS/32, N=6"]
            #[inline(always)]
            pub fn fdts_div32_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV32_N6)
            }
            #[doc = "fSAMPLING=fDTS/32, N=8"]
            #[inline(always)]
            pub fn fdts_div32_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV32_N8)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC1PSC`"]
        pub type IC1PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1PSC`"]
        pub struct IC1PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC1S_A {
            #[doc = "1: CC1 channel is configured as input, IC1 is mapped on TI1"]
            TI1 = 1,
            #[doc = "2: CC1 channel is configured as input, IC1 is mapped on TI2"]
            TI2 = 2,
            #[doc = "3: CC1 channel is configured as input, IC1 is mapped on TRC"]
            TRC = 3,
        }
        impl From<CC1S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC1S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, CC1S_A>;
        impl CC1S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC1S_A> {
                use crate::Variant::*;
                match self.bits {
                    1 => Val(CC1S_A::TI1),
                    2 => Val(CC1S_A::TI2),
                    3 => Val(CC1S_A::TRC),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TI1`"]
            #[inline(always)]
            pub fn is_ti1(&self) -> bool {
                *self == CC1S_A::TI1
            }
            #[doc = "Checks if the value of the field is `TI2`"]
            #[inline(always)]
            pub fn is_ti2(&self) -> bool {
                *self == CC1S_A::TI2
            }
            #[doc = "Checks if the value of the field is `TRC`"]
            #[inline(always)]
            pub fn is_trc(&self) -> bool {
                *self == CC1S_A::TRC
            }
        }
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC1 channel is configured as input, IC1 is mapped on TI1"]
            #[inline(always)]
            pub fn ti1(self) -> &'a mut W {
                self.variant(CC1S_A::TI1)
            }
            #[doc = "CC1 channel is configured as input, IC1 is mapped on TI2"]
            #[inline(always)]
            pub fn ti2(self) -> &'a mut W {
                self.variant(CC1S_A::TI2)
            }
            #[doc = "CC1 channel is configured as input, IC1 is mapped on TRC"]
            #[inline(always)]
            pub fn trc(self) -> &'a mut W {
                self.variant(CC1S_A::TRC)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&self) -> IC2F_R {
                IC2F_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2psc(&self) -> IC2PSC_R {
                IC2PSC_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&self) -> IC1F_R {
                IC1F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&self) -> IC1PSC_R {
                IC1PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&mut self) -> IC2F_W {
                IC2F_W { w: self }
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2psc(&mut self) -> IC2PSC_W {
                IC2PSC_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&mut self) -> IC1F_W {
                IC1F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&mut self) -> IC1PSC_W {
                IC1PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_output](ccmr2_output) module"]
    pub type CCMR2_OUTPUT = crate::Reg<u32, _CCMR2_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR2_OUTPUT;
    #[doc = "`read()` method returns [ccmr2_output::R](ccmr2_output::R) reader structure"]
    impl crate::Readable for CCMR2_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr2_output::W](ccmr2_output::W) writer structure"]
    impl crate::Writable for CCMR2_OUTPUT {}
    #[doc = "capture/compare mode register 2"]
    pub mod ccmr2_output {
        #[doc = "Reader of register CCMR2_Output"]
        pub type R = crate::R<u32, super::CCMR2_OUTPUT>;
        #[doc = "Writer for register CCMR2_Output"]
        pub type W = crate::W<u32, super::CCMR2_OUTPUT>;
        #[doc = "Register CCMR2_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR2_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OC4CE`"]
        pub type OC4CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4CE`"]
        pub struct OC4CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Output compare 4 mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OC4M_A {
            #[doc = "0: The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            FROZEN = 0,
            #[doc = "1: Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            ACTIVEONMATCH = 1,
            #[doc = "2: Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            INACTIVEONMATCH = 2,
            #[doc = "3: OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            TOGGLE = 3,
            #[doc = "4: OCyREF is forced low"]
            FORCEINACTIVE = 4,
            #[doc = "5: OCyREF is forced high"]
            FORCEACTIVE = 5,
            #[doc = "6: In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            PWMMODE1 = 6,
            #[doc = "7: Inversely to PwmMode1"]
            PWMMODE2 = 7,
        }
        impl From<OC4M_A> for u8 {
            #[inline(always)]
            fn from(variant: OC4M_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `OC4M`"]
        pub type OC4M_R = crate::R<u8, OC4M_A>;
        impl OC4M_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC4M_A {
                match self.bits {
                    0 => OC4M_A::FROZEN,
                    1 => OC4M_A::ACTIVEONMATCH,
                    2 => OC4M_A::INACTIVEONMATCH,
                    3 => OC4M_A::TOGGLE,
                    4 => OC4M_A::FORCEINACTIVE,
                    5 => OC4M_A::FORCEACTIVE,
                    6 => OC4M_A::PWMMODE1,
                    7 => OC4M_A::PWMMODE2,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `FROZEN`"]
            #[inline(always)]
            pub fn is_frozen(&self) -> bool {
                *self == OC4M_A::FROZEN
            }
            #[doc = "Checks if the value of the field is `ACTIVEONMATCH`"]
            #[inline(always)]
            pub fn is_active_on_match(&self) -> bool {
                *self == OC4M_A::ACTIVEONMATCH
            }
            #[doc = "Checks if the value of the field is `INACTIVEONMATCH`"]
            #[inline(always)]
            pub fn is_inactive_on_match(&self) -> bool {
                *self == OC4M_A::INACTIVEONMATCH
            }
            #[doc = "Checks if the value of the field is `TOGGLE`"]
            #[inline(always)]
            pub fn is_toggle(&self) -> bool {
                *self == OC4M_A::TOGGLE
            }
            #[doc = "Checks if the value of the field is `FORCEINACTIVE`"]
            #[inline(always)]
            pub fn is_force_inactive(&self) -> bool {
                *self == OC4M_A::FORCEINACTIVE
            }
            #[doc = "Checks if the value of the field is `FORCEACTIVE`"]
            #[inline(always)]
            pub fn is_force_active(&self) -> bool {
                *self == OC4M_A::FORCEACTIVE
            }
            #[doc = "Checks if the value of the field is `PWMMODE1`"]
            #[inline(always)]
            pub fn is_pwm_mode1(&self) -> bool {
                *self == OC4M_A::PWMMODE1
            }
            #[doc = "Checks if the value of the field is `PWMMODE2`"]
            #[inline(always)]
            pub fn is_pwm_mode2(&self) -> bool {
                *self == OC4M_A::PWMMODE2
            }
        }
        #[doc = "Write proxy for field `OC4M`"]
        pub struct OC4M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4M_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC4M_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            #[inline(always)]
            pub fn frozen(self) -> &'a mut W {
                self.variant(OC4M_A::FROZEN)
            }
            #[doc = "Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn active_on_match(self) -> &'a mut W {
                self.variant(OC4M_A::ACTIVEONMATCH)
            }
            #[doc = "Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn inactive_on_match(self) -> &'a mut W {
                self.variant(OC4M_A::INACTIVEONMATCH)
            }
            #[doc = "OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            #[inline(always)]
            pub fn toggle(self) -> &'a mut W {
                self.variant(OC4M_A::TOGGLE)
            }
            #[doc = "OCyREF is forced low"]
            #[inline(always)]
            pub fn force_inactive(self) -> &'a mut W {
                self.variant(OC4M_A::FORCEINACTIVE)
            }
            #[doc = "OCyREF is forced high"]
            #[inline(always)]
            pub fn force_active(self) -> &'a mut W {
                self.variant(OC4M_A::FORCEACTIVE)
            }
            #[doc = "In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            #[inline(always)]
            pub fn pwm_mode1(self) -> &'a mut W {
                self.variant(OC4M_A::PWMMODE1)
            }
            #[doc = "Inversely to PwmMode1"]
            #[inline(always)]
            pub fn pwm_mode2(self) -> &'a mut W {
                self.variant(OC4M_A::PWMMODE2)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Output compare 4 preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OC4PE_A {
            #[doc = "0: Preload register on CCR4 disabled. New values written to CCR4 are taken into account immediately"]
            DISABLED = 0,
            #[doc = "1: Preload register on CCR4 enabled. Preload value is loaded into active register on each update event"]
            ENABLED = 1,
        }
        impl From<OC4PE_A> for bool {
            #[inline(always)]
            fn from(variant: OC4PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OC4PE`"]
        pub type OC4PE_R = crate::R<bool, OC4PE_A>;
        impl OC4PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC4PE_A {
                match self.bits {
                    false => OC4PE_A::DISABLED,
                    true => OC4PE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OC4PE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OC4PE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OC4PE`"]
        pub struct OC4PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC4PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Preload register on CCR4 disabled. New values written to CCR4 are taken into account immediately"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OC4PE_A::DISABLED)
            }
            #[doc = "Preload register on CCR4 enabled. Preload value is loaded into active register on each update event"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OC4PE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC4FE`"]
        pub type OC4FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4FE`"]
        pub struct OC4FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4S_A {
            #[doc = "0: CC4 channel is configured as output"]
            OUTPUT = 0,
        }
        impl From<CC4S_A> for bool {
            #[inline(always)]
            fn from(variant: CC4S_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC4S`"]
        pub type CC4S_R = crate::R<bool, CC4S_A>;
        impl CC4S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, CC4S_A> {
                use crate::Variant::*;
                match self.bits {
                    false => Val(CC4S_A::OUTPUT),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == CC4S_A::OUTPUT
            }
        }
        #[doc = "Write proxy for field `CC4S`"]
        pub struct CC4S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4S_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CC4 channel is configured as output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(CC4S_A::OUTPUT)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OC3CE`"]
        pub type OC3CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3CE`"]
        pub struct OC3CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Output compare 3 mode"]
        pub type OC3M_A = OC4M_A;
        #[doc = "Reader of field `OC3M`"]
        pub type OC3M_R = crate::R<u8, OC4M_A>;
        #[doc = "Write proxy for field `OC3M`"]
        pub struct OC3M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3M_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC3M_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            #[inline(always)]
            pub fn frozen(self) -> &'a mut W {
                self.variant(OC4M_A::FROZEN)
            }
            #[doc = "Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn active_on_match(self) -> &'a mut W {
                self.variant(OC4M_A::ACTIVEONMATCH)
            }
            #[doc = "Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn inactive_on_match(self) -> &'a mut W {
                self.variant(OC4M_A::INACTIVEONMATCH)
            }
            #[doc = "OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            #[inline(always)]
            pub fn toggle(self) -> &'a mut W {
                self.variant(OC4M_A::TOGGLE)
            }
            #[doc = "OCyREF is forced low"]
            #[inline(always)]
            pub fn force_inactive(self) -> &'a mut W {
                self.variant(OC4M_A::FORCEINACTIVE)
            }
            #[doc = "OCyREF is forced high"]
            #[inline(always)]
            pub fn force_active(self) -> &'a mut W {
                self.variant(OC4M_A::FORCEACTIVE)
            }
            #[doc = "In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            #[inline(always)]
            pub fn pwm_mode1(self) -> &'a mut W {
                self.variant(OC4M_A::PWMMODE1)
            }
            #[doc = "Inversely to PwmMode1"]
            #[inline(always)]
            pub fn pwm_mode2(self) -> &'a mut W {
                self.variant(OC4M_A::PWMMODE2)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Output compare 3 preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OC3PE_A {
            #[doc = "0: Preload register on CCR3 disabled. New values written to CCR3 are taken into account immediately"]
            DISABLED = 0,
            #[doc = "1: Preload register on CCR3 enabled. Preload value is loaded into active register on each update event"]
            ENABLED = 1,
        }
        impl From<OC3PE_A> for bool {
            #[inline(always)]
            fn from(variant: OC3PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OC3PE`"]
        pub type OC3PE_R = crate::R<bool, OC3PE_A>;
        impl OC3PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC3PE_A {
                match self.bits {
                    false => OC3PE_A::DISABLED,
                    true => OC3PE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OC3PE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OC3PE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OC3PE`"]
        pub struct OC3PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC3PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Preload register on CCR3 disabled. New values written to CCR3 are taken into account immediately"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OC3PE_A::DISABLED)
            }
            #[doc = "Preload register on CCR3 enabled. Preload value is loaded into active register on each update event"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OC3PE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC3FE`"]
        pub type OC3FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3FE`"]
        pub struct OC3FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC3S_A {
            #[doc = "0: CC3 channel is configured as output"]
            OUTPUT = 0,
        }
        impl From<CC3S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC3S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC3S`"]
        pub type CC3S_R = crate::R<u8, CC3S_A>;
        impl CC3S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC3S_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CC3S_A::OUTPUT),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == CC3S_A::OUTPUT
            }
        }
        #[doc = "Write proxy for field `CC3S`"]
        pub struct CC3S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC3 channel is configured as output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(CC3S_A::OUTPUT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&self) -> OC4CE_R {
                OC4CE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&self) -> OC4M_R {
                OC4M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&self) -> OC4PE_R {
                OC4PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&self) -> OC4FE_R {
                OC4FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&self) -> CC4S_R {
                CC4S_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&self) -> OC3CE_R {
                OC3CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&self) -> OC3M_R {
                OC3M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&self) -> OC3PE_R {
                OC3PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&self) -> OC3FE_R {
                OC3FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&self) -> CC3S_R {
                CC3S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&mut self) -> OC4CE_W {
                OC4CE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&mut self) -> OC4M_W {
                OC4M_W { w: self }
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&mut self) -> OC4PE_W {
                OC4PE_W { w: self }
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&mut self) -> OC4FE_W {
                OC4FE_W { w: self }
            }
            #[doc = "Bit 8 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&mut self) -> CC4S_W {
                CC4S_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&mut self) -> OC3CE_W {
                OC3CE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&mut self) -> OC3M_W {
                OC3M_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&mut self) -> OC3PE_W {
                OC3PE_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&mut self) -> OC3FE_W {
                OC3FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&mut self) -> CC3S_W {
                CC3S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 2 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_input](ccmr2_input) module"]
    pub type CCMR2_INPUT = crate::Reg<u32, _CCMR2_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR2_INPUT;
    #[doc = "`read()` method returns [ccmr2_input::R](ccmr2_input::R) reader structure"]
    impl crate::Readable for CCMR2_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr2_input::W](ccmr2_input::W) writer structure"]
    impl crate::Writable for CCMR2_INPUT {}
    #[doc = "capture/compare mode register 2 (input mode)"]
    pub mod ccmr2_input {
        #[doc = "Reader of register CCMR2_Input"]
        pub type R = crate::R<u32, super::CCMR2_INPUT>;
        #[doc = "Writer for register CCMR2_Input"]
        pub type W = crate::W<u32, super::CCMR2_INPUT>;
        #[doc = "Register CCMR2_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR2_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC4F`"]
        pub type IC4F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC4F`"]
        pub struct IC4F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC4F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IC4PSC`"]
        pub type IC4PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC4PSC`"]
        pub struct IC4PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC4PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC4S_A {
            #[doc = "1: CC4 channel is configured as input, IC4 is mapped on TI4"]
            TI4 = 1,
            #[doc = "2: CC4 channel is configured as input, IC4 is mapped on TI3"]
            TI3 = 2,
            #[doc = "3: CC4 channel is configured as input, IC4 is mapped on TRC"]
            TRC = 3,
        }
        impl From<CC4S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC4S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC4S`"]
        pub type CC4S_R = crate::R<u8, CC4S_A>;
        impl CC4S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC4S_A> {
                use crate::Variant::*;
                match self.bits {
                    1 => Val(CC4S_A::TI4),
                    2 => Val(CC4S_A::TI3),
                    3 => Val(CC4S_A::TRC),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TI4`"]
            #[inline(always)]
            pub fn is_ti4(&self) -> bool {
                *self == CC4S_A::TI4
            }
            #[doc = "Checks if the value of the field is `TI3`"]
            #[inline(always)]
            pub fn is_ti3(&self) -> bool {
                *self == CC4S_A::TI3
            }
            #[doc = "Checks if the value of the field is `TRC`"]
            #[inline(always)]
            pub fn is_trc(&self) -> bool {
                *self == CC4S_A::TRC
            }
        }
        #[doc = "Write proxy for field `CC4S`"]
        pub struct CC4S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC4 channel is configured as input, IC4 is mapped on TI4"]
            #[inline(always)]
            pub fn ti4(self) -> &'a mut W {
                self.variant(CC4S_A::TI4)
            }
            #[doc = "CC4 channel is configured as input, IC4 is mapped on TI3"]
            #[inline(always)]
            pub fn ti3(self) -> &'a mut W {
                self.variant(CC4S_A::TI3)
            }
            #[doc = "CC4 channel is configured as input, IC4 is mapped on TRC"]
            #[inline(always)]
            pub fn trc(self) -> &'a mut W {
                self.variant(CC4S_A::TRC)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `IC3F`"]
        pub type IC3F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC3F`"]
        pub struct IC3F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC3F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC3PSC`"]
        pub type IC3PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC3PSC`"]
        pub struct IC3PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC3PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Capture/compare 3 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC3S_A {
            #[doc = "1: CC3 channel is configured as input, IC3 is mapped on TI3"]
            TI3 = 1,
            #[doc = "2: CC3 channel is configured as input, IC3 is mapped on TI4"]
            TI4 = 2,
            #[doc = "3: CC3 channel is configured as input, IC3 is mapped on TRC"]
            TRC = 3,
        }
        impl From<CC3S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC3S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC3S`"]
        pub type CC3S_R = crate::R<u8, CC3S_A>;
        impl CC3S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC3S_A> {
                use crate::Variant::*;
                match self.bits {
                    1 => Val(CC3S_A::TI3),
                    2 => Val(CC3S_A::TI4),
                    3 => Val(CC3S_A::TRC),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TI3`"]
            #[inline(always)]
            pub fn is_ti3(&self) -> bool {
                *self == CC3S_A::TI3
            }
            #[doc = "Checks if the value of the field is `TI4`"]
            #[inline(always)]
            pub fn is_ti4(&self) -> bool {
                *self == CC3S_A::TI4
            }
            #[doc = "Checks if the value of the field is `TRC`"]
            #[inline(always)]
            pub fn is_trc(&self) -> bool {
                *self == CC3S_A::TRC
            }
        }
        #[doc = "Write proxy for field `CC3S`"]
        pub struct CC3S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC3 channel is configured as input, IC3 is mapped on TI3"]
            #[inline(always)]
            pub fn ti3(self) -> &'a mut W {
                self.variant(CC3S_A::TI3)
            }
            #[doc = "CC3 channel is configured as input, IC3 is mapped on TI4"]
            #[inline(always)]
            pub fn ti4(self) -> &'a mut W {
                self.variant(CC3S_A::TI4)
            }
            #[doc = "CC3 channel is configured as input, IC3 is mapped on TRC"]
            #[inline(always)]
            pub fn trc(self) -> &'a mut W {
                self.variant(CC3S_A::TRC)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - Input capture 4 filter"]
            #[inline(always)]
            pub fn ic4f(&self) -> IC4F_R {
                IC4F_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 10:11 - Input capture 4 prescaler"]
            #[inline(always)]
            pub fn ic4psc(&self) -> IC4PSC_R {
                IC4PSC_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&self) -> CC4S_R {
                CC4S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 3 filter"]
            #[inline(always)]
            pub fn ic3f(&self) -> IC3F_R {
                IC3F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 3 prescaler"]
            #[inline(always)]
            pub fn ic3psc(&self) -> IC3PSC_R {
                IC3PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&self) -> CC3S_R {
                CC3S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - Input capture 4 filter"]
            #[inline(always)]
            pub fn ic4f(&mut self) -> IC4F_W {
                IC4F_W { w: self }
            }
            #[doc = "Bits 10:11 - Input capture 4 prescaler"]
            #[inline(always)]
            pub fn ic4psc(&mut self) -> IC4PSC_W {
                IC4PSC_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&mut self) -> CC4S_W {
                CC4S_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 3 filter"]
            #[inline(always)]
            pub fn ic3f(&mut self) -> IC3F_W {
                IC3F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 3 prescaler"]
            #[inline(always)]
            pub fn ic3psc(&mut self) -> IC3PSC_W {
                IC3PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&mut self) -> CC3S_W {
                CC3S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](ccer) module"]
    pub type CCER = crate::Reg<u32, _CCER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCER;
    #[doc = "`read()` method returns [ccer::R](ccer::R) reader structure"]
    impl crate::Readable for CCER {}
    #[doc = "`write(|w| ..)` method takes [ccer::W](ccer::W) writer structure"]
    impl crate::Writable for CCER {}
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Reader of register CCER"]
        pub type R = crate::R<u32, super::CCER>;
        #[doc = "Writer for register CCER"]
        pub type W = crate::W<u32, super::CCER>;
        #[doc = "Register CCER `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC4NP`"]
        pub type CC4NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4NP`"]
        pub struct CC4NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `CC4P`"]
        pub type CC4P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4P`"]
        pub struct CC4P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `CC4E`"]
        pub type CC4E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4E`"]
        pub struct CC4E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `CC3NP`"]
        pub type CC3NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3NP`"]
        pub struct CC3NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CC3P`"]
        pub type CC3P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3P`"]
        pub struct CC3P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `CC3E`"]
        pub type CC3E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3E`"]
        pub struct CC3E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CC2NP`"]
        pub type CC2NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2NP`"]
        pub struct CC2NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CC2P`"]
        pub type CC2P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2P`"]
        pub struct CC2P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `CC2E`"]
        pub type CC2E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2E`"]
        pub struct CC2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CC1NP`"]
        pub type CC1NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NP`"]
        pub struct CC1NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC1P`"]
        pub type CC1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1P`"]
        pub struct CC1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC1E`"]
        pub type CC1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1E`"]
        pub struct CC1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Capture/Compare 4 output Polarity"]
            #[inline(always)]
            pub fn cc4np(&self) -> CC4NP_R {
                CC4NP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Capture/Compare 4 output Polarity"]
            #[inline(always)]
            pub fn cc4p(&self) -> CC4P_R {
                CC4P_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 output enable"]
            #[inline(always)]
            pub fn cc4e(&self) -> CC4E_R {
                CC4E_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3np(&self) -> CC3NP_R {
                CC3NP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3p(&self) -> CC3P_R {
                CC3P_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Capture/Compare 3 output enable"]
            #[inline(always)]
            pub fn cc3e(&self) -> CC3E_R {
                CC3E_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2np(&self) -> CC2NP_R {
                CC2NP_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&self) -> CC2P_R {
                CC2P_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&self) -> CC2E_R {
                CC2E_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 1 complementary output Polarity"]
            #[inline(always)]
            pub fn cc1np(&self) -> CC1NP_R {
                CC1NP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&self) -> CC1P_R {
                CC1P_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&self) -> CC1E_R {
                CC1E_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Capture/Compare 4 output Polarity"]
            #[inline(always)]
            pub fn cc4np(&mut self) -> CC4NP_W {
                CC4NP_W { w: self }
            }
            #[doc = "Bit 13 - Capture/Compare 4 output Polarity"]
            #[inline(always)]
            pub fn cc4p(&mut self) -> CC4P_W {
                CC4P_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 output enable"]
            #[inline(always)]
            pub fn cc4e(&mut self) -> CC4E_W {
                CC4E_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3np(&mut self) -> CC3NP_W {
                CC3NP_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3p(&mut self) -> CC3P_W {
                CC3P_W { w: self }
            }
            #[doc = "Bit 8 - Capture/Compare 3 output enable"]
            #[inline(always)]
            pub fn cc3e(&mut self) -> CC3E_W {
                CC3E_W { w: self }
            }
            #[doc = "Bit 7 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2np(&mut self) -> CC2NP_W {
                CC2NP_W { w: self }
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&mut self) -> CC2P_W {
                CC2P_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&mut self) -> CC2E_W {
                CC2E_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 1 complementary output Polarity"]
            #[inline(always)]
            pub fn cc1np(&mut self) -> CC1NP_W {
                CC1NP_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&mut self) -> CC1P_W {
                CC1P_W { w: self }
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&mut self) -> CC1E_W {
                CC1E_W { w: self }
            }
        }
    }
    #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - TIM2 counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - TIM2 counter"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - TIM2 prescaler"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - TIM2 prescaler"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr](ccr) module"]
    pub type CCR = crate::Reg<u32, _CCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR;
    #[doc = "`read()` method returns [ccr::R](ccr::R) reader structure"]
    impl crate::Readable for CCR {}
    #[doc = "`write(|w| ..)` method takes [ccr::W](ccr::W) writer structure"]
    impl crate::Writable for CCR {}
    #[doc = "capture/compare register 1"]
    pub mod ccr {
        #[doc = "Reader of register CCR%s"]
        pub type R = crate::R<u32, super::CCR>;
        #[doc = "Writer for register CCR%s"]
        pub type W = crate::W<u32, super::CCR>;
        #[doc = "Register CCR%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR`"]
        pub type CCR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR`"]
        pub struct CCR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr(&self) -> CCR_R {
                CCR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr(&mut self) -> CCR_W {
                CCR_W { w: self }
            }
        }
    }
    #[doc = "DMA control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcr](dcr) module"]
    pub type DCR = crate::Reg<u32, _DCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DCR;
    #[doc = "`read()` method returns [dcr::R](dcr::R) reader structure"]
    impl crate::Readable for DCR {}
    #[doc = "`write(|w| ..)` method takes [dcr::W](dcr::W) writer structure"]
    impl crate::Writable for DCR {}
    #[doc = "DMA control register"]
    pub mod dcr {
        #[doc = "Reader of register DCR"]
        pub type R = crate::R<u32, super::DCR>;
        #[doc = "Writer for register DCR"]
        pub type W = crate::W<u32, super::DCR>;
        #[doc = "Register DCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBL`"]
        pub type DBL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBL`"]
        pub struct DBL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DBA`"]
        pub type DBA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBA`"]
        pub struct DBA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&self) -> DBL_R {
                DBL_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&self) -> DBA_R {
                DBA_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&mut self) -> DBL_W {
                DBL_W { w: self }
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&mut self) -> DBA_W {
                DBA_W { w: self }
            }
        }
    }
    #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmar](dmar) module"]
    pub type DMAR = crate::Reg<u32, _DMAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAR;
    #[doc = "`read()` method returns [dmar::R](dmar::R) reader structure"]
    impl crate::Readable for DMAR {}
    #[doc = "`write(|w| ..)` method takes [dmar::W](dmar::W) writer structure"]
    impl crate::Writable for DMAR {}
    #[doc = "DMA address for full transfer"]
    pub mod dmar {
        #[doc = "Reader of register DMAR"]
        pub type R = crate::R<u32, super::DMAR>;
        #[doc = "Writer for register DMAR"]
        pub type W = crate::W<u32, super::DMAR>;
        #[doc = "Register DMAR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMAR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAB`"]
        pub type DMAB_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DMAB`"]
        pub struct DMAB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmab(&self) -> DMAB_R {
                DMAB_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmab(&mut self) -> DMAB_W {
                DMAB_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose timers"]
pub struct TIM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM3 {}
impl TIM3 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        0x4000_0400 as *const _
    }
}
impl Deref for TIM3 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM3::ptr() }
    }
}
#[doc = "General-purpose timers"]
pub struct TIM4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM4 {}
impl TIM4 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        0x4000_0800 as *const _
    }
}
impl Deref for TIM4 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM4::ptr() }
    }
}
#[doc = "General-purpose timers"]
pub struct TIM5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM5 {}
impl TIM5 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        0x4000_0c00 as *const _
    }
}
impl Deref for TIM5 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM5::ptr() }
    }
}
#[doc = "Basic timers"]
pub struct TIM6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM6 {}
impl TIM6 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim6::RegisterBlock {
        0x4000_1000 as *const _
    }
}
impl Deref for TIM6 {
    type Target = tim6::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM6::ptr() }
    }
}
#[doc = "Basic timers"]
pub mod tim6 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - TIM6 control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - TIM6 control register 2"]
        pub cr2: CR2,
        _reserved2: [u8; 4usize],
        #[doc = "0x0c - TIM6 DMA/Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - TIM6 status register"]
        pub sr: SR,
        #[doc = "0x14 - TIM6 event generation register"]
        pub egr: EGR,
        _reserved5: [u8; 12usize],
        #[doc = "0x24 - TIM6 counter"]
        pub cnt: CNT,
        #[doc = "0x28 - TIM6 prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - TIM6 auto-reload register"]
        pub arr: ARR,
    }
    #[doc = "TIM6 control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "TIM6 control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Auto-reload preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARPE_A {
            #[doc = "0: TIMx_APRR register is not buffered"]
            DISABLED = 0,
            #[doc = "1: TIMx_APRR register is buffered"]
            ENABLED = 1,
        }
        impl From<ARPE_A> for bool {
            #[inline(always)]
            fn from(variant: ARPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, ARPE_A>;
        impl ARPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ARPE_A {
                match self.bits {
                    false => ARPE_A::DISABLED,
                    true => ARPE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ARPE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ARPE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ARPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIMx_APRR register is not buffered"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ARPE_A::DISABLED)
            }
            #[doc = "TIMx_APRR register is buffered"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ARPE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "One-pulse mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OPM_A {
            #[doc = "0: Counter is not stopped at update event"]
            DISABLED = 0,
            #[doc = "1: Counter stops counting at the next update event (clearing the CEN bit)"]
            ENABLED = 1,
        }
        impl From<OPM_A> for bool {
            #[inline(always)]
            fn from(variant: OPM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OPM`"]
        pub type OPM_R = crate::R<bool, OPM_A>;
        impl OPM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OPM_A {
                match self.bits {
                    false => OPM_A::DISABLED,
                    true => OPM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OPM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OPM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OPM`"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OPM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter is not stopped at update event"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OPM_A::DISABLED)
            }
            #[doc = "Counter stops counting at the next update event (clearing the CEN bit)"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OPM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Update request source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum URS_A {
            #[doc = "0: Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            ANYEVENT = 0,
            #[doc = "1: Only counter overflow/underflow generates an update interrupt or DMA request"]
            COUNTERONLY = 1,
        }
        impl From<URS_A> for bool {
            #[inline(always)]
            fn from(variant: URS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, URS_A>;
        impl URS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> URS_A {
                match self.bits {
                    false => URS_A::ANYEVENT,
                    true => URS_A::COUNTERONLY,
                }
            }
            #[doc = "Checks if the value of the field is `ANYEVENT`"]
            #[inline(always)]
            pub fn is_any_event(&self) -> bool {
                *self == URS_A::ANYEVENT
            }
            #[doc = "Checks if the value of the field is `COUNTERONLY`"]
            #[inline(always)]
            pub fn is_counter_only(&self) -> bool {
                *self == URS_A::COUNTERONLY
            }
        }
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: URS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn any_event(self) -> &'a mut W {
                self.variant(URS_A::ANYEVENT)
            }
            #[doc = "Only counter overflow/underflow generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn counter_only(self) -> &'a mut W {
                self.variant(URS_A::COUNTERONLY)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Update disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDIS_A {
            #[doc = "0: Update event enabled"]
            ENABLED = 0,
            #[doc = "1: Update event disabled"]
            DISABLED = 1,
        }
        impl From<UDIS_A> for bool {
            #[inline(always)]
            fn from(variant: UDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, UDIS_A>;
        impl UDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDIS_A {
                match self.bits {
                    false => UDIS_A::ENABLED,
                    true => UDIS_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDIS_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDIS_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update event enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDIS_A::ENABLED)
            }
            #[doc = "Update event disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDIS_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Counter enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CEN_A {
            #[doc = "0: Counter disabled"]
            DISABLED = 0,
            #[doc = "1: Counter enabled"]
            ENABLED = 1,
        }
        impl From<CEN_A> for bool {
            #[inline(always)]
            fn from(variant: CEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, CEN_A>;
        impl CEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CEN_A {
                match self.bits {
                    false => CEN_A::DISABLED,
                    true => CEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CEN_A::DISABLED)
            }
            #[doc = "Counter enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
        }
    }
    #[doc = "TIM6 control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "TIM6 control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Master mode selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MMS_A {
            #[doc = "0: Use UG bit from TIMx_EGR register"]
            RESET = 0,
            #[doc = "1: Use CNT bit from TIMx_CEN register"]
            ENABLE = 1,
            #[doc = "2: Use the update event"]
            UPDATE = 2,
        }
        impl From<MMS_A> for u8 {
            #[inline(always)]
            fn from(variant: MMS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MMS`"]
        pub type MMS_R = crate::R<u8, MMS_A>;
        impl MMS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, MMS_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(MMS_A::RESET),
                    1 => Val(MMS_A::ENABLE),
                    2 => Val(MMS_A::UPDATE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == MMS_A::RESET
            }
            #[doc = "Checks if the value of the field is `ENABLE`"]
            #[inline(always)]
            pub fn is_enable(&self) -> bool {
                *self == MMS_A::ENABLE
            }
            #[doc = "Checks if the value of the field is `UPDATE`"]
            #[inline(always)]
            pub fn is_update(&self) -> bool {
                *self == MMS_A::UPDATE
            }
        }
        #[doc = "Write proxy for field `MMS`"]
        pub struct MMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MMS_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Use UG bit from TIMx_EGR register"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(MMS_A::RESET)
            }
            #[doc = "Use CNT bit from TIMx_CEN register"]
            #[inline(always)]
            pub fn enable(self) -> &'a mut W {
                self.variant(MMS_A::ENABLE)
            }
            #[doc = "Use the update event"]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(MMS_A::UPDATE)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&self) -> MMS_R {
                MMS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&mut self) -> MMS_W {
                MMS_W { w: self }
            }
        }
    }
    #[doc = "TIM6 DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "TIM6 DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Update DMA request enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDE_A {
            #[doc = "0: Update DMA request disabled"]
            DISABLED = 0,
            #[doc = "1: Update DMA request enabled"]
            ENABLED = 1,
        }
        impl From<UDE_A> for bool {
            #[inline(always)]
            fn from(variant: UDE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDE`"]
        pub type UDE_R = crate::R<bool, UDE_A>;
        impl UDE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDE_A {
                match self.bits {
                    false => UDE_A::DISABLED,
                    true => UDE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UDE`"]
        pub struct UDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDE_A::DISABLED)
            }
            #[doc = "Update DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Update interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIE_A {
            #[doc = "0: Update interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Update interrupt enabled"]
            ENABLED = 1,
        }
        impl From<UIE_A> for bool {
            #[inline(always)]
            fn from(variant: UIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, UIE_A>;
        impl UIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIE_A {
                match self.bits {
                    false => UIE_A::DISABLED,
                    true => UIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UIE_A::DISABLED)
            }
            #[doc = "Update interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&self) -> UDE_R {
                UDE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&mut self) -> UDE_W {
                UDE_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
        }
    }
    #[doc = "TIM6 status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "TIM6 status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Update interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIF_A {
            #[doc = "0: No update occurred"]
            CLEAR = 0,
            #[doc = "1: Update interrupt pending."]
            UPDATEPENDING = 1,
        }
        impl From<UIF_A> for bool {
            #[inline(always)]
            fn from(variant: UIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, UIF_A>;
        impl UIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIF_A {
                match self.bits {
                    false => UIF_A::CLEAR,
                    true => UIF_A::UPDATEPENDING,
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == UIF_A::CLEAR
            }
            #[doc = "Checks if the value of the field is `UPDATEPENDING`"]
            #[inline(always)]
            pub fn is_update_pending(&self) -> bool {
                *self == UIF_A::UPDATEPENDING
            }
        }
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No update occurred"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(UIF_A::CLEAR)
            }
            #[doc = "Update interrupt pending."]
            #[inline(always)]
            pub fn update_pending(self) -> &'a mut W {
                self.variant(UIF_A::UPDATEPENDING)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
        }
    }
    #[doc = "TIM6 event generation register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "TIM6 event generation register"]
    pub mod egr {
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Update generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UG_AW {
            #[doc = "1: Re-initializes the timer counter and generates an update of the registers."]
            UPDATE = 1,
        }
        impl From<UG_AW> for bool {
            #[inline(always)]
            fn from(variant: UG_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UG_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Re-initializes the timer counter and generates an update of the registers."]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(UG_AW::UPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
        }
    }
    #[doc = "TIM6 counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "TIM6 counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - CNT"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - CNT"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "TIM6 prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "TIM6 prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Prescaler valueThe counter clock frequency CK_CNT is equal to fCK_PSC / (PSC\\[15:0\\]
+ 1)."]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler valueThe counter clock frequency CK_CNT is equal to fCK_PSC / (PSC\\[15:0\\]
+ 1)."]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "TIM6 auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "TIM6 auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
}
#[doc = "Basic timers"]
pub struct TIM7 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM7 {}
impl TIM7 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim6::RegisterBlock {
        0x4000_1400 as *const _
    }
}
impl Deref for TIM7 {
    type Target = tim6::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM7::ptr() }
    }
}
#[doc = "General-purpose timers"]
pub struct TIM9 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM9 {}
impl TIM9 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim9::RegisterBlock {
        0x4001_0800 as *const _
    }
}
impl Deref for TIM9 {
    type Target = tim9::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM9::ptr() }
    }
}
#[doc = "General-purpose timers"]
pub mod tim9 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - slave mode control register"]
        pub smcr: SMCR,
        #[doc = "0x0c - Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - status register"]
        pub sr: SR,
        #[doc = "0x14 - event generation register"]
        pub egr: EGR,
        _reserved_6_ccmr1: [u8; 4usize],
        _reserved7: [u8; 8usize],
        #[doc = "0x24 - counter"]
        pub cnt: CNT,
        #[doc = "0x28 - prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - auto-reload register"]
        pub arr: ARR,
        _reserved10: [u8; 4usize],
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: CCR,
        #[doc = "0x38 - capture/compare register 1"]
        pub ccr2: CCR,
        _reserved12: [u8; 20usize],
        #[doc = "0x50 - option register"]
        pub or: OR,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &CCMR1_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input_mut(&self) -> &mut CCMR1_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &CCMR1_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_OUTPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1"]
        #[inline(always)]
        pub fn ccmr1_output_mut(&self) -> &mut CCMR1_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_OUTPUT) }
        }
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Clock division\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CKD_A {
            #[doc = "0: t_DTS = t_CK_INT"]
            DIV1 = 0,
            #[doc = "1: t_DTS = 2 × t_CK_INT"]
            DIV2 = 1,
            #[doc = "2: t_DTS = 4 × t_CK_INT"]
            DIV4 = 2,
        }
        impl From<CKD_A> for u8 {
            #[inline(always)]
            fn from(variant: CKD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CKD`"]
        pub type CKD_R = crate::R<u8, CKD_A>;
        impl CKD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CKD_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CKD_A::DIV1),
                    1 => Val(CKD_A::DIV2),
                    2 => Val(CKD_A::DIV4),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == CKD_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == CKD_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == CKD_A::DIV4
            }
        }
        #[doc = "Write proxy for field `CKD`"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CKD_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "t_DTS = t_CK_INT"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(CKD_A::DIV1)
            }
            #[doc = "t_DTS = 2 × t_CK_INT"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(CKD_A::DIV2)
            }
            #[doc = "t_DTS = 4 × t_CK_INT"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(CKD_A::DIV4)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Auto-reload preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARPE_A {
            #[doc = "0: TIMx_APRR register is not buffered"]
            DISABLED = 0,
            #[doc = "1: TIMx_APRR register is buffered"]
            ENABLED = 1,
        }
        impl From<ARPE_A> for bool {
            #[inline(always)]
            fn from(variant: ARPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, ARPE_A>;
        impl ARPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ARPE_A {
                match self.bits {
                    false => ARPE_A::DISABLED,
                    true => ARPE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ARPE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ARPE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ARPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIMx_APRR register is not buffered"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ARPE_A::DISABLED)
            }
            #[doc = "TIMx_APRR register is buffered"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ARPE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "One-pulse mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OPM_A {
            #[doc = "0: Counter is not stopped at update event"]
            DISABLED = 0,
            #[doc = "1: Counter stops counting at the next update event (clearing the CEN bit)"]
            ENABLED = 1,
        }
        impl From<OPM_A> for bool {
            #[inline(always)]
            fn from(variant: OPM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OPM`"]
        pub type OPM_R = crate::R<bool, OPM_A>;
        impl OPM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OPM_A {
                match self.bits {
                    false => OPM_A::DISABLED,
                    true => OPM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OPM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OPM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OPM`"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OPM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter is not stopped at update event"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OPM_A::DISABLED)
            }
            #[doc = "Counter stops counting at the next update event (clearing the CEN bit)"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OPM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Update request source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum URS_A {
            #[doc = "0: Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            ANYEVENT = 0,
            #[doc = "1: Only counter overflow/underflow generates an update interrupt or DMA request"]
            COUNTERONLY = 1,
        }
        impl From<URS_A> for bool {
            #[inline(always)]
            fn from(variant: URS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, URS_A>;
        impl URS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> URS_A {
                match self.bits {
                    false => URS_A::ANYEVENT,
                    true => URS_A::COUNTERONLY,
                }
            }
            #[doc = "Checks if the value of the field is `ANYEVENT`"]
            #[inline(always)]
            pub fn is_any_event(&self) -> bool {
                *self == URS_A::ANYEVENT
            }
            #[doc = "Checks if the value of the field is `COUNTERONLY`"]
            #[inline(always)]
            pub fn is_counter_only(&self) -> bool {
                *self == URS_A::COUNTERONLY
            }
        }
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: URS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn any_event(self) -> &'a mut W {
                self.variant(URS_A::ANYEVENT)
            }
            #[doc = "Only counter overflow/underflow generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn counter_only(self) -> &'a mut W {
                self.variant(URS_A::COUNTERONLY)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Update disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDIS_A {
            #[doc = "0: Update event enabled"]
            ENABLED = 0,
            #[doc = "1: Update event disabled"]
            DISABLED = 1,
        }
        impl From<UDIS_A> for bool {
            #[inline(always)]
            fn from(variant: UDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, UDIS_A>;
        impl UDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDIS_A {
                match self.bits {
                    false => UDIS_A::ENABLED,
                    true => UDIS_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDIS_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDIS_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update event enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDIS_A::ENABLED)
            }
            #[doc = "Update event disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDIS_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Counter enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CEN_A {
            #[doc = "0: Counter disabled"]
            DISABLED = 0,
            #[doc = "1: Counter enabled"]
            ENABLED = 1,
        }
        impl From<CEN_A> for bool {
            #[inline(always)]
            fn from(variant: CEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, CEN_A>;
        impl CEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CEN_A {
                match self.bits {
                    false => CEN_A::DISABLED,
                    true => CEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CEN_A::DISABLED)
            }
            #[doc = "Counter enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MMS`"]
        pub type MMS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MMS`"]
        pub struct MMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&self) -> MMS_R {
                MMS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&mut self) -> MMS_W {
                MMS_W { w: self }
            }
        }
    }
    #[doc = "slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcr](smcr) module"]
    pub type SMCR = crate::Reg<u32, _SMCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMCR;
    #[doc = "`read()` method returns [smcr::R](smcr::R) reader structure"]
    impl crate::Readable for SMCR {}
    #[doc = "`write(|w| ..)` method takes [smcr::W](smcr::W) writer structure"]
    impl crate::Writable for SMCR {}
    #[doc = "slave mode control register"]
    pub mod smcr {
        #[doc = "Reader of register SMCR"]
        pub type R = crate::R<u32, super::SMCR>;
        #[doc = "Writer for register SMCR"]
        pub type W = crate::W<u32, super::SMCR>;
        #[doc = "Register SMCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MSM`"]
        pub type MSM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSM`"]
        pub struct MSM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TS`"]
        pub type TS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TS`"]
        pub struct TS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SMS`"]
        pub type SMS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SMS`"]
        pub struct SMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&self) -> MSM_R {
                MSM_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&self) -> TS_R {
                TS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&self) -> SMS_R {
                SMS_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&mut self) -> MSM_W {
                MSM_W { w: self }
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&mut self) -> TS_W {
                TS_W { w: self }
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&mut self) -> SMS_W {
                SMS_W { w: self }
            }
        }
    }
    #[doc = "Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TIE`"]
        pub type TIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIE`"]
        pub struct TIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CC2IE`"]
        pub type CC2IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2IE`"]
        pub struct CC2IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IE`"]
        pub type CC1IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IE`"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIE_A {
            #[doc = "0: Update interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Update interrupt enabled"]
            ENABLED = 1,
        }
        impl From<UIE_A> for bool {
            #[inline(always)]
            fn from(variant: UIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, UIE_A>;
        impl UIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIE_A {
                match self.bits {
                    false => UIE_A::DISABLED,
                    true => UIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UIE_A::DISABLED)
            }
            #[doc = "Update interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&self) -> TIE_R {
                TIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&self) -> CC2IE_R {
                CC2IE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&mut self) -> TIE_W {
                TIE_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&mut self) -> CC2IE_W {
                CC2IE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC2OF`"]
        pub type CC2OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2OF`"]
        pub struct CC2OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC1OF`"]
        pub type CC1OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1OF`"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TIF`"]
        pub type TIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIF`"]
        pub struct TIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CC2IF`"]
        pub type CC2IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2IF`"]
        pub struct CC2IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IF`"]
        pub type CC1IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IF`"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIF_A {
            #[doc = "0: No update occurred"]
            CLEAR = 0,
            #[doc = "1: Update interrupt pending."]
            UPDATEPENDING = 1,
        }
        impl From<UIF_A> for bool {
            #[inline(always)]
            fn from(variant: UIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, UIF_A>;
        impl UIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIF_A {
                match self.bits {
                    false => UIF_A::CLEAR,
                    true => UIF_A::UPDATEPENDING,
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == UIF_A::CLEAR
            }
            #[doc = "Checks if the value of the field is `UPDATEPENDING`"]
            #[inline(always)]
            pub fn is_update_pending(&self) -> bool {
                *self == UIF_A::UPDATEPENDING
            }
        }
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No update occurred"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(UIF_A::CLEAR)
            }
            #[doc = "Update interrupt pending."]
            #[inline(always)]
            pub fn update_pending(self) -> &'a mut W {
                self.variant(UIF_A::UPDATEPENDING)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&self) -> CC2OF_R {
                CC2OF_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&self) -> TIF_R {
                TIF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&self) -> CC2IF_R {
                CC2IF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&mut self) -> CC2OF_W {
                CC2OF_W { w: self }
            }
            #[doc = "Bit 9 - Capture/compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&mut self) -> TIF_W {
                TIF_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&mut self) -> CC2IF_W {
                CC2IF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
        }
    }
    #[doc = "event generation register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`read()` method returns [egr::R](egr::R) reader structure"]
    impl crate::Readable for EGR {}
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Reader of register EGR"]
        pub type R = crate::R<u32, super::EGR>;
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TG`"]
        pub type TG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TG`"]
        pub struct TG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CC2G`"]
        pub type CC2G_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2G`"]
        pub struct CC2G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1G`"]
        pub type CC1G_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1G`"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UG_A {
            #[doc = "1: Re-initializes the timer counter and generates an update of the registers."]
            UPDATE = 1,
        }
        impl From<UG_A> for bool {
            #[inline(always)]
            fn from(variant: UG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UG`"]
        pub type UG_R = crate::R<bool, UG_A>;
        impl UG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, UG_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(UG_A::UPDATE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `UPDATE`"]
            #[inline(always)]
            pub fn is_update(&self) -> bool {
                *self == UG_A::UPDATE
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Re-initializes the timer counter and generates an update of the registers."]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(UG_A::UPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 6 - Trigger generation"]
            #[inline(always)]
            pub fn tg(&self) -> TG_R {
                TG_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 generation"]
            #[inline(always)]
            pub fn cc2g(&self) -> CC2G_R {
                CC2G_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&self) -> CC1G_R {
                CC1G_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&self) -> UG_R {
                UG_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 6 - Trigger generation"]
            #[inline(always)]
            pub fn tg(&mut self) -> TG_W {
                TG_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 generation"]
            #[inline(always)]
            pub fn cc2g(&mut self) -> CC2G_W {
                CC2G_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](ccmr1_output) module"]
    pub type CCMR1_OUTPUT = crate::Reg<u32, _CCMR1_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_OUTPUT;
    #[doc = "`read()` method returns [ccmr1_output::R](ccmr1_output::R) reader structure"]
    impl crate::Readable for CCMR1_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](ccmr1_output::W) writer structure"]
    impl crate::Writable for CCMR1_OUTPUT {}
    #[doc = "capture/compare mode register 1"]
    pub mod ccmr1_output {
        #[doc = "Reader of register CCMR1_Output"]
        pub type R = crate::R<u32, super::CCMR1_OUTPUT>;
        #[doc = "Writer for register CCMR1_Output"]
        pub type W = crate::W<u32, super::CCMR1_OUTPUT>;
        #[doc = "Register CCMR1_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OC2CE`"]
        pub type OC2CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2CE`"]
        pub struct OC2CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `OC2M`"]
        pub type OC2M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC2M`"]
        pub struct OC2M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OC2PE`"]
        pub type OC2PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2PE`"]
        pub struct OC2PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC2FE`"]
        pub type OC2FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2FE`"]
        pub struct OC2FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC2S`"]
        pub type CC2S_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2S`"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OC1CE`"]
        pub type OC1CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1CE`"]
        pub struct OC1CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `OC1M`"]
        pub type OC1M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC1M`"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OC1PE`"]
        pub type OC1PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1PE`"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC1FE`"]
        pub type OC1FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1FE`"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Output compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&self) -> OC2CE_R {
                OC2CE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Output compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&self) -> OC2M_R {
                OC2M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 11 - Output compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&self) -> OC2PE_R {
                OC2PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&self) -> OC2FE_R {
                OC2FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Output compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&self) -> OC1CE_R {
                OC1CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Output compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Output compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&mut self) -> OC2CE_W {
                OC2CE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&mut self) -> OC2M_W {
                OC2M_W { w: self }
            }
            #[doc = "Bit 11 - Output compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&mut self) -> OC2PE_W {
                OC2PE_W { w: self }
            }
            #[doc = "Bit 10 - Output compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&mut self) -> OC2FE_W {
                OC2FE_W { w: self }
            }
            #[doc = "Bit 8 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&mut self) -> OC1CE_W {
                OC1CE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](ccmr1_input) module"]
    pub type CCMR1_INPUT = crate::Reg<u32, _CCMR1_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_INPUT;
    #[doc = "`read()` method returns [ccmr1_input::R](ccmr1_input::R) reader structure"]
    impl crate::Readable for CCMR1_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](ccmr1_input::W) writer structure"]
    impl crate::Writable for CCMR1_INPUT {}
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Reader of register CCMR1_Input"]
        pub type R = crate::R<u32, super::CCMR1_INPUT>;
        #[doc = "Writer for register CCMR1_Input"]
        pub type W = crate::W<u32, super::CCMR1_INPUT>;
        #[doc = "Register CCMR1_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC2F`"]
        pub type IC2F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC2F`"]
        pub struct IC2F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IC2PSC`"]
        pub type IC2PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC2PSC`"]
        pub struct IC2PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC2S`"]
        pub type CC2S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC2S`"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `IC1F`"]
        pub type IC1F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1F`"]
        pub struct IC1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC1PSC`"]
        pub type IC1PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1PSC`"]
        pub struct IC1PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&self) -> IC2F_R {
                IC2F_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2psc(&self) -> IC2PSC_R {
                IC2PSC_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&self) -> IC1F_R {
                IC1F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&self) -> IC1PSC_R {
                IC1PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&mut self) -> IC2F_W {
                IC2F_W { w: self }
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2psc(&mut self) -> IC2PSC_W {
                IC2PSC_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&mut self) -> IC1F_W {
                IC1F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&mut self) -> IC1PSC_W {
                IC1PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - TIM9 counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - TIM9 counter"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - TIM9 prescaler"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - TIM9 prescaler"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr](ccr) module"]
    pub type CCR = crate::Reg<u32, _CCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR;
    #[doc = "`read()` method returns [ccr::R](ccr::R) reader structure"]
    impl crate::Readable for CCR {}
    #[doc = "`write(|w| ..)` method takes [ccr::W](ccr::W) writer structure"]
    impl crate::Writable for CCR {}
    #[doc = "capture/compare register 1"]
    pub mod ccr {
        #[doc = "Reader of register CCR%s"]
        pub type R = crate::R<u32, super::CCR>;
        #[doc = "Writer for register CCR%s"]
        pub type W = crate::W<u32, super::CCR>;
        #[doc = "Register CCR%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR`"]
        pub type CCR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR`"]
        pub struct CCR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr(&self) -> CCR_R {
                CCR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr(&mut self) -> CCR_W {
                CCR_W { w: self }
            }
        }
    }
    #[doc = "option register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [or](or) module"]
    pub type OR = crate::Reg<u32, _OR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OR;
    #[doc = "`read()` method returns [or::R](or::R) reader structure"]
    impl crate::Readable for OR {}
    #[doc = "`write(|w| ..)` method takes [or::W](or::W) writer structure"]
    impl crate::Writable for OR {}
    #[doc = "option register"]
    pub mod or {
        #[doc = "Reader of register OR"]
        pub type R = crate::R<u32, super::OR>;
        #[doc = "Writer for register OR"]
        pub type W = crate::W<u32, super::OR>;
        #[doc = "Register OR `reset()`'s with value 0"]
        impl crate::ResetValue for super::OR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TI1_RMP`"]
        pub type TI1_RMP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TI1_RMP`"]
        pub struct TI1_RMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1_RMP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - TIM9 Input 1 remapping capability"]
            #[inline(always)]
            pub fn ti1_rmp(&self) -> TI1_RMP_R {
                TI1_RMP_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - TIM9 Input 1 remapping capability"]
            #[inline(always)]
            pub fn ti1_rmp(&mut self) -> TI1_RMP_W {
                TI1_RMP_W { w: self }
            }
        }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct USART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART1 {}
impl USART1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        0x4001_3800 as *const _
    }
}
impl Deref for USART1 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*USART1::ptr() }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod usart1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Status register"]
        pub sr: SR,
        #[doc = "0x04 - Data register"]
        pub dr: DR,
        #[doc = "0x08 - Baud rate register"]
        pub brr: BRR,
        #[doc = "0x0c - Control register 1"]
        pub cr1: CR1,
        #[doc = "0x10 - Control register 2"]
        pub cr2: CR2,
        #[doc = "0x14 - Control register 3"]
        pub cr3: CR3,
        #[doc = "0x18 - Guard time and prescaler register"]
        pub gtpr: GTPR,
    }
    #[doc = "Status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "Status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0x00c0_0000"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x00c0_0000
            }
        }
        #[doc = "Reader of field `CTS`"]
        pub type CTS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTS`"]
        pub struct CTS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `LBD`"]
        pub type LBD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LBD`"]
        pub struct LBD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TXE`"]
        pub type TXE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TC`"]
        pub type TC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TC`"]
        pub struct TC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RXNE`"]
        pub type RXNE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXNE`"]
        pub struct RXNE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXNE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `IDLE`"]
        pub type IDLE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ORE`"]
        pub type ORE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `NF`"]
        pub type NF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `FE`"]
        pub type FE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PE`"]
        pub type PE_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 9 - CTS flag"]
            #[inline(always)]
            pub fn cts(&self) -> CTS_R {
                CTS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - LIN break detection flag"]
            #[inline(always)]
            pub fn lbd(&self) -> LBD_R {
                LBD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Transmit data register empty"]
            #[inline(always)]
            pub fn txe(&self) -> TXE_R {
                TXE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Transmission complete"]
            #[inline(always)]
            pub fn tc(&self) -> TC_R {
                TC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Read data register not empty"]
            #[inline(always)]
            pub fn rxne(&self) -> RXNE_R {
                RXNE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - IDLE line detected"]
            #[inline(always)]
            pub fn idle(&self) -> IDLE_R {
                IDLE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Overrun error"]
            #[inline(always)]
            pub fn ore(&self) -> ORE_R {
                ORE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Noise detected flag"]
            #[inline(always)]
            pub fn nf(&self) -> NF_R {
                NF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Framing error"]
            #[inline(always)]
            pub fn fe(&self) -> FE_R {
                FE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Parity error"]
            #[inline(always)]
            pub fn pe(&self) -> PE_R {
                PE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 9 - CTS flag"]
            #[inline(always)]
            pub fn cts(&mut self) -> CTS_W {
                CTS_W { w: self }
            }
            #[doc = "Bit 8 - LIN break detection flag"]
            #[inline(always)]
            pub fn lbd(&mut self) -> LBD_W {
                LBD_W { w: self }
            }
            #[doc = "Bit 6 - Transmission complete"]
            #[inline(always)]
            pub fn tc(&mut self) -> TC_W {
                TC_W { w: self }
            }
            #[doc = "Bit 5 - Read data register not empty"]
            #[inline(always)]
            pub fn rxne(&mut self) -> RXNE_W {
                RXNE_W { w: self }
            }
        }
    }
    #[doc = "Data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "`write(|w| ..)` method takes [dr::W](dr::W) writer structure"]
    impl crate::Writable for DR {}
    #[doc = "Data register"]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Writer for register DR"]
        pub type W = crate::W<u32, super::DR>;
        #[doc = "Register DR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DR`"]
        pub type DR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DR`"]
        pub struct DR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01ff) | ((value as u32) & 0x01ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:8 - Data value"]
            #[inline(always)]
            pub fn dr(&self) -> DR_R {
                DR_R::new((self.bits & 0x01ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:8 - Data value"]
            #[inline(always)]
            pub fn dr(&mut self) -> DR_W {
                DR_W { w: self }
            }
        }
    }
    #[doc = "Baud rate register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [brr](brr) module"]
    pub type BRR = crate::Reg<u32, _BRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BRR;
    #[doc = "`read()` method returns [brr::R](brr::R) reader structure"]
    impl crate::Readable for BRR {}
    #[doc = "`write(|w| ..)` method takes [brr::W](brr::W) writer structure"]
    impl crate::Writable for BRR {}
    #[doc = "Baud rate register"]
    pub mod brr {
        #[doc = "Reader of register BRR"]
        pub type R = crate::R<u32, super::BRR>;
        #[doc = "Writer for register BRR"]
        pub type W = crate::W<u32, super::BRR>;
        #[doc = "Register BRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIV_Mantissa`"]
        pub type DIV_MANTISSA_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DIV_Mantissa`"]
        pub struct DIV_MANTISSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIV_MANTISSA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 4)) | (((value as u32) & 0x0fff) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DIV_Fraction`"]
        pub type DIV_FRACTION_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DIV_Fraction`"]
        pub struct DIV_FRACTION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIV_FRACTION_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:15 - mantissa of USARTDIV"]
            #[inline(always)]
            pub fn div_mantissa(&self) -> DIV_MANTISSA_R {
                DIV_MANTISSA_R::new(((self.bits >> 4) & 0x0fff) as u16)
            }
            #[doc = "Bits 0:3 - fraction of USARTDIV"]
            #[inline(always)]
            pub fn div_fraction(&self) -> DIV_FRACTION_R {
                DIV_FRACTION_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:15 - mantissa of USARTDIV"]
            #[inline(always)]
            pub fn div_mantissa(&mut self) -> DIV_MANTISSA_W {
                DIV_MANTISSA_W { w: self }
            }
            #[doc = "Bits 0:3 - fraction of USARTDIV"]
            #[inline(always)]
            pub fn div_fraction(&mut self) -> DIV_FRACTION_W {
                DIV_FRACTION_W { w: self }
            }
        }
    }
    #[doc = "Control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "Control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OVER8`"]
        pub type OVER8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OVER8`"]
        pub struct OVER8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVER8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `UE`"]
        pub type UE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UE`"]
        pub struct UE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `M`"]
        pub type M_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `M`"]
        pub struct M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> M_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `WAKE`"]
        pub type WAKE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WAKE`"]
        pub struct WAKE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAKE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `PCE`"]
        pub type PCE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PCE`"]
        pub struct PCE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PCE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PS`"]
        pub type PS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PS`"]
        pub struct PS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `PEIE`"]
        pub type PEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PEIE`"]
        pub struct PEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TXEIE`"]
        pub type TXEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXEIE`"]
        pub struct TXEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TCIE`"]
        pub type TCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TCIE`"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RXNEIE`"]
        pub type RXNEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXNEIE`"]
        pub struct RXNEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXNEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `IDLEIE`"]
        pub type IDLEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IDLEIE`"]
        pub struct IDLEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDLEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TE`"]
        pub type TE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TE`"]
        pub struct TE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `RE`"]
        pub type RE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RE`"]
        pub struct RE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `RWU`"]
        pub type RWU_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RWU`"]
        pub struct RWU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RWU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `SBK`"]
        pub type SBK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SBK`"]
        pub struct SBK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Oversampling mode"]
            #[inline(always)]
            pub fn over8(&self) -> OVER8_R {
                OVER8_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 13 - USART enable"]
            #[inline(always)]
            pub fn ue(&self) -> UE_R {
                UE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Word length"]
            #[inline(always)]
            pub fn m(&self) -> M_R {
                M_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Wakeup method"]
            #[inline(always)]
            pub fn wake(&self) -> WAKE_R {
                WAKE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Parity control enable"]
            #[inline(always)]
            pub fn pce(&self) -> PCE_R {
                PCE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Parity selection"]
            #[inline(always)]
            pub fn ps(&self) -> PS_R {
                PS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - PE interrupt enable"]
            #[inline(always)]
            pub fn peie(&self) -> PEIE_R {
                PEIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TXE interrupt enable"]
            #[inline(always)]
            pub fn txeie(&self) -> TXEIE_R {
                TXEIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Transmission complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - RXNE interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&self) -> RXNEIE_R {
                RXNEIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - IDLE interrupt enable"]
            #[inline(always)]
            pub fn idleie(&self) -> IDLEIE_R {
                IDLEIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Transmitter enable"]
            #[inline(always)]
            pub fn te(&self) -> TE_R {
                TE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Receiver enable"]
            #[inline(always)]
            pub fn re(&self) -> RE_R {
                RE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Receiver wakeup"]
            #[inline(always)]
            pub fn rwu(&self) -> RWU_R {
                RWU_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Send break"]
            #[inline(always)]
            pub fn sbk(&self) -> SBK_R {
                SBK_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Oversampling mode"]
            #[inline(always)]
            pub fn over8(&mut self) -> OVER8_W {
                OVER8_W { w: self }
            }
            #[doc = "Bit 13 - USART enable"]
            #[inline(always)]
            pub fn ue(&mut self) -> UE_W {
                UE_W { w: self }
            }
            #[doc = "Bit 12 - Word length"]
            #[inline(always)]
            pub fn m(&mut self) -> M_W {
                M_W { w: self }
            }
            #[doc = "Bit 11 - Wakeup method"]
            #[inline(always)]
            pub fn wake(&mut self) -> WAKE_W {
                WAKE_W { w: self }
            }
            #[doc = "Bit 10 - Parity control enable"]
            #[inline(always)]
            pub fn pce(&mut self) -> PCE_W {
                PCE_W { w: self }
            }
            #[doc = "Bit 9 - Parity selection"]
            #[inline(always)]
            pub fn ps(&mut self) -> PS_W {
                PS_W { w: self }
            }
            #[doc = "Bit 8 - PE interrupt enable"]
            #[inline(always)]
            pub fn peie(&mut self) -> PEIE_W {
                PEIE_W { w: self }
            }
            #[doc = "Bit 7 - TXE interrupt enable"]
            #[inline(always)]
            pub fn txeie(&mut self) -> TXEIE_W {
                TXEIE_W { w: self }
            }
            #[doc = "Bit 6 - Transmission complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 5 - RXNE interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&mut self) -> RXNEIE_W {
                RXNEIE_W { w: self }
            }
            #[doc = "Bit 4 - IDLE interrupt enable"]
            #[inline(always)]
            pub fn idleie(&mut self) -> IDLEIE_W {
                IDLEIE_W { w: self }
            }
            #[doc = "Bit 3 - Transmitter enable"]
            #[inline(always)]
            pub fn te(&mut self) -> TE_W {
                TE_W { w: self }
            }
            #[doc = "Bit 2 - Receiver enable"]
            #[inline(always)]
            pub fn re(&mut self) -> RE_W {
                RE_W { w: self }
            }
            #[doc = "Bit 1 - Receiver wakeup"]
            #[inline(always)]
            pub fn rwu(&mut self) -> RWU_W {
                RWU_W { w: self }
            }
            #[doc = "Bit 0 - Send break"]
            #[inline(always)]
            pub fn sbk(&mut self) -> SBK_W {
                SBK_W { w: self }
            }
        }
    }
    #[doc = "Control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "Control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LINEN`"]
        pub type LINEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LINEN`"]
        pub struct LINEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LINEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `STOP`"]
        pub type STOP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `STOP`"]
        pub struct STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `CLKEN`"]
        pub type CLKEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLKEN`"]
        pub struct CLKEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CPOL`"]
        pub type CPOL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CPOL`"]
        pub struct CPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPOL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CPHA`"]
        pub type CPHA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CPHA`"]
        pub struct CPHA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPHA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `LBCL`"]
        pub type LBCL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LBCL`"]
        pub struct LBCL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBCL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `LBDIE`"]
        pub type LBDIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LBDIE`"]
        pub struct LBDIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBDIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `LBDL`"]
        pub type LBDL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LBDL`"]
        pub struct LBDL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBDL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `ADD`"]
        pub type ADD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADD`"]
        pub struct ADD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - LIN mode enable"]
            #[inline(always)]
            pub fn linen(&self) -> LINEN_R {
                LINEN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - STOP bits"]
            #[inline(always)]
            pub fn stop(&self) -> STOP_R {
                STOP_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Clock enable"]
            #[inline(always)]
            pub fn clken(&self) -> CLKEN_R {
                CLKEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&self) -> CPOL_R {
                CPOL_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&self) -> CPHA_R {
                CPHA_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Last bit clock pulse"]
            #[inline(always)]
            pub fn lbcl(&self) -> LBCL_R {
                LBCL_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - LIN break detection interrupt enable"]
            #[inline(always)]
            pub fn lbdie(&self) -> LBDIE_R {
                LBDIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - lin break detection length"]
            #[inline(always)]
            pub fn lbdl(&self) -> LBDL_R {
                LBDL_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bits 0:3 - Address of the USART node"]
            #[inline(always)]
            pub fn add(&self) -> ADD_R {
                ADD_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 14 - LIN mode enable"]
            #[inline(always)]
            pub fn linen(&mut self) -> LINEN_W {
                LINEN_W { w: self }
            }
            #[doc = "Bits 12:13 - STOP bits"]
            #[inline(always)]
            pub fn stop(&mut self) -> STOP_W {
                STOP_W { w: self }
            }
            #[doc = "Bit 11 - Clock enable"]
            #[inline(always)]
            pub fn clken(&mut self) -> CLKEN_W {
                CLKEN_W { w: self }
            }
            #[doc = "Bit 10 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&mut self) -> CPOL_W {
                CPOL_W { w: self }
            }
            #[doc = "Bit 9 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&mut self) -> CPHA_W {
                CPHA_W { w: self }
            }
            #[doc = "Bit 8 - Last bit clock pulse"]
            #[inline(always)]
            pub fn lbcl(&mut self) -> LBCL_W {
                LBCL_W { w: self }
            }
            #[doc = "Bit 6 - LIN break detection interrupt enable"]
            #[inline(always)]
            pub fn lbdie(&mut self) -> LBDIE_W {
                LBDIE_W { w: self }
            }
            #[doc = "Bit 5 - lin break detection length"]
            #[inline(always)]
            pub fn lbdl(&mut self) -> LBDL_W {
                LBDL_W { w: self }
            }
            #[doc = "Bits 0:3 - Address of the USART node"]
            #[inline(always)]
            pub fn add(&mut self) -> ADD_W {
                ADD_W { w: self }
            }
        }
    }
    #[doc = "Control register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr3](cr3) module"]
    pub type CR3 = crate::Reg<u32, _CR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR3;
    #[doc = "`read()` method returns [cr3::R](cr3::R) reader structure"]
    impl crate::Readable for CR3 {}
    #[doc = "`write(|w| ..)` method takes [cr3::W](cr3::W) writer structure"]
    impl crate::Writable for CR3 {}
    #[doc = "Control register 3"]
    pub mod cr3 {
        #[doc = "Reader of register CR3"]
        pub type R = crate::R<u32, super::CR3>;
        #[doc = "Writer for register CR3"]
        pub type W = crate::W<u32, super::CR3>;
        #[doc = "Register CR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ONEBIT`"]
        pub type ONEBIT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ONEBIT`"]
        pub struct ONEBIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ONEBIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CTSIE`"]
        pub type CTSIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTSIE`"]
        pub struct CTSIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CTSE`"]
        pub type CTSE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTSE`"]
        pub struct CTSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `RTSE`"]
        pub type RTSE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTSE`"]
        pub struct RTSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DMAT`"]
        pub type DMAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAT`"]
        pub struct DMAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `DMAR`"]
        pub type DMAR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAR`"]
        pub struct DMAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `SCEN`"]
        pub type SCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SCEN`"]
        pub struct SCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `NACK`"]
        pub type NACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `NACK`"]
        pub struct NACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `HDSEL`"]
        pub type HDSEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HDSEL`"]
        pub struct HDSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HDSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `IRLP`"]
        pub type IRLP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRLP`"]
        pub struct IRLP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRLP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `IREN`"]
        pub type IREN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IREN`"]
        pub struct IREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IREN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EIE`"]
        pub type EIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EIE`"]
        pub struct EIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 11 - One sample bit method enable"]
            #[inline(always)]
            pub fn onebit(&self) -> ONEBIT_R {
                ONEBIT_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CTS interrupt enable"]
            #[inline(always)]
            pub fn ctsie(&self) -> CTSIE_R {
                CTSIE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CTS enable"]
            #[inline(always)]
            pub fn ctse(&self) -> CTSE_R {
                CTSE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - RTS enable"]
            #[inline(always)]
            pub fn rtse(&self) -> RTSE_R {
                RTSE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - DMA enable transmitter"]
            #[inline(always)]
            pub fn dmat(&self) -> DMAT_R {
                DMAT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - DMA enable receiver"]
            #[inline(always)]
            pub fn dmar(&self) -> DMAR_R {
                DMAR_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Smartcard mode enable"]
            #[inline(always)]
            pub fn scen(&self) -> SCEN_R {
                SCEN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Smartcard NACK enable"]
            #[inline(always)]
            pub fn nack(&self) -> NACK_R {
                NACK_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Half-duplex selection"]
            #[inline(always)]
            pub fn hdsel(&self) -> HDSEL_R {
                HDSEL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - IrDA low-power"]
            #[inline(always)]
            pub fn irlp(&self) -> IRLP_R {
                IRLP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - IrDA mode enable"]
            #[inline(always)]
            pub fn iren(&self) -> IREN_R {
                IREN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Error interrupt enable"]
            #[inline(always)]
            pub fn eie(&self) -> EIE_R {
                EIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 11 - One sample bit method enable"]
            #[inline(always)]
            pub fn onebit(&mut self) -> ONEBIT_W {
                ONEBIT_W { w: self }
            }
            #[doc = "Bit 10 - CTS interrupt enable"]
            #[inline(always)]
            pub fn ctsie(&mut self) -> CTSIE_W {
                CTSIE_W { w: self }
            }
            #[doc = "Bit 9 - CTS enable"]
            #[inline(always)]
            pub fn ctse(&mut self) -> CTSE_W {
                CTSE_W { w: self }
            }
            #[doc = "Bit 8 - RTS enable"]
            #[inline(always)]
            pub fn rtse(&mut self) -> RTSE_W {
                RTSE_W { w: self }
            }
            #[doc = "Bit 7 - DMA enable transmitter"]
            #[inline(always)]
            pub fn dmat(&mut self) -> DMAT_W {
                DMAT_W { w: self }
            }
            #[doc = "Bit 6 - DMA enable receiver"]
            #[inline(always)]
            pub fn dmar(&mut self) -> DMAR_W {
                DMAR_W { w: self }
            }
            #[doc = "Bit 5 - Smartcard mode enable"]
            #[inline(always)]
            pub fn scen(&mut self) -> SCEN_W {
                SCEN_W { w: self }
            }
            #[doc = "Bit 4 - Smartcard NACK enable"]
            #[inline(always)]
            pub fn nack(&mut self) -> NACK_W {
                NACK_W { w: self }
            }
            #[doc = "Bit 3 - Half-duplex selection"]
            #[inline(always)]
            pub fn hdsel(&mut self) -> HDSEL_W {
                HDSEL_W { w: self }
            }
            #[doc = "Bit 2 - IrDA low-power"]
            #[inline(always)]
            pub fn irlp(&mut self) -> IRLP_W {
                IRLP_W { w: self }
            }
            #[doc = "Bit 1 - IrDA mode enable"]
            #[inline(always)]
            pub fn iren(&mut self) -> IREN_W {
                IREN_W { w: self }
            }
            #[doc = "Bit 0 - Error interrupt enable"]
            #[inline(always)]
            pub fn eie(&mut self) -> EIE_W {
                EIE_W { w: self }
            }
        }
    }
    #[doc = "Guard time and prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gtpr](gtpr) module"]
    pub type GTPR = crate::Reg<u32, _GTPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GTPR;
    #[doc = "`read()` method returns [gtpr::R](gtpr::R) reader structure"]
    impl crate::Readable for GTPR {}
    #[doc = "`write(|w| ..)` method takes [gtpr::W](gtpr::W) writer structure"]
    impl crate::Writable for GTPR {}
    #[doc = "Guard time and prescaler register"]
    pub mod gtpr {
        #[doc = "Reader of register GTPR"]
        pub type R = crate::R<u32, super::GTPR>;
        #[doc = "Writer for register GTPR"]
        pub type W = crate::W<u32, super::GTPR>;
        #[doc = "Register GTPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::GTPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `GT`"]
        pub type GT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GT`"]
        pub struct GT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - Guard time value"]
            #[inline(always)]
            pub fn gt(&self) -> GT_R {
                GT_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - Guard time value"]
            #[inline(always)]
            pub fn gt(&mut self) -> GT_W {
                GT_W { w: self }
            }
            #[doc = "Bits 0:7 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct USART2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART2 {}
impl USART2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        0x4000_4400 as *const _
    }
}
impl Deref for USART2 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*USART2::ptr() }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct USART3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART3 {}
impl USART3 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        0x4000_4800 as *const _
    }
}
impl Deref for USART3 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*USART3::ptr() }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct UART4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART4 {}
impl UART4 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        0x4000_4c00 as *const _
    }
}
impl Deref for UART4 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*UART4::ptr() }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct UART5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART5 {}
impl UART5 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        0x4000_5000 as *const _
    }
}
impl Deref for UART5 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*UART5::ptr() }
    }
}
#[doc = "Universal serial bus full-speed device interface"]
pub struct USB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USB {}
impl USB {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usb::RegisterBlock {
        0x4000_5c00 as *const _
    }
}
impl Deref for USB {
    type Target = usb::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*USB::ptr() }
    }
}
#[doc = "Universal serial bus full-speed device interface"]
pub mod usb {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - endpoint 0 register"]
        pub ep0r: EP0R,
        #[doc = "0x04 - endpoint 1 register"]
        pub ep1r: EP1R,
        #[doc = "0x08 - endpoint 2 register"]
        pub ep2r: EP2R,
        #[doc = "0x0c - endpoint 3 register"]
        pub ep3r: EP3R,
        #[doc = "0x10 - endpoint 4 register"]
        pub ep4r: EP4R,
        #[doc = "0x14 - endpoint 5 register"]
        pub ep5r: EP5R,
        #[doc = "0x18 - endpoint 6 register"]
        pub ep6r: EP6R,
        #[doc = "0x1c - endpoint 7 register"]
        pub ep7r: EP7R,
        _reserved8: [u8; 32usize],
        #[doc = "0x40 - control register"]
        pub cntr: CNTR,
        #[doc = "0x44 - interrupt status register"]
        pub istr: ISTR,
        #[doc = "0x48 - frame number register"]
        pub fnr: FNR,
        #[doc = "0x4c - device address"]
        pub daddr: DADDR,
        #[doc = "0x50 - Buffer table address"]
        pub btable: BTABLE,
    }
    #[doc = "endpoint 0 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep0r](ep0r) module"]
    pub type EP0R = crate::Reg<u32, _EP0R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP0R;
    #[doc = "`read()` method returns [ep0r::R](ep0r::R) reader structure"]
    impl crate::Readable for EP0R {}
    #[doc = "`write(|w| ..)` method takes [ep0r::W](ep0r::W) writer structure"]
    impl crate::Writable for EP0R {}
    #[doc = "endpoint 0 register"]
    pub mod ep0r {
        #[doc = "Reader of register EP0R"]
        pub type R = crate::R<u32, super::EP0R>;
        #[doc = "Writer for register EP0R"]
        pub type W = crate::W<u32, super::EP0R>;
        #[doc = "Register EP0R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP0R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "endpoint 1 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep1r](ep1r) module"]
    pub type EP1R = crate::Reg<u32, _EP1R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP1R;
    #[doc = "`read()` method returns [ep1r::R](ep1r::R) reader structure"]
    impl crate::Readable for EP1R {}
    #[doc = "`write(|w| ..)` method takes [ep1r::W](ep1r::W) writer structure"]
    impl crate::Writable for EP1R {}
    #[doc = "endpoint 1 register"]
    pub mod ep1r {
        #[doc = "Reader of register EP1R"]
        pub type R = crate::R<u32, super::EP1R>;
        #[doc = "Writer for register EP1R"]
        pub type W = crate::W<u32, super::EP1R>;
        #[doc = "Register EP1R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP1R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "endpoint 2 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep2r](ep2r) module"]
    pub type EP2R = crate::Reg<u32, _EP2R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP2R;
    #[doc = "`read()` method returns [ep2r::R](ep2r::R) reader structure"]
    impl crate::Readable for EP2R {}
    #[doc = "`write(|w| ..)` method takes [ep2r::W](ep2r::W) writer structure"]
    impl crate::Writable for EP2R {}
    #[doc = "endpoint 2 register"]
    pub mod ep2r {
        #[doc = "Reader of register EP2R"]
        pub type R = crate::R<u32, super::EP2R>;
        #[doc = "Writer for register EP2R"]
        pub type W = crate::W<u32, super::EP2R>;
        #[doc = "Register EP2R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP2R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "endpoint 3 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep3r](ep3r) module"]
    pub type EP3R = crate::Reg<u32, _EP3R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP3R;
    #[doc = "`read()` method returns [ep3r::R](ep3r::R) reader structure"]
    impl crate::Readable for EP3R {}
    #[doc = "`write(|w| ..)` method takes [ep3r::W](ep3r::W) writer structure"]
    impl crate::Writable for EP3R {}
    #[doc = "endpoint 3 register"]
    pub mod ep3r {
        #[doc = "Reader of register EP3R"]
        pub type R = crate::R<u32, super::EP3R>;
        #[doc = "Writer for register EP3R"]
        pub type W = crate::W<u32, super::EP3R>;
        #[doc = "Register EP3R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP3R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "endpoint 4 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep4r](ep4r) module"]
    pub type EP4R = crate::Reg<u32, _EP4R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP4R;
    #[doc = "`read()` method returns [ep4r::R](ep4r::R) reader structure"]
    impl crate::Readable for EP4R {}
    #[doc = "`write(|w| ..)` method takes [ep4r::W](ep4r::W) writer structure"]
    impl crate::Writable for EP4R {}
    #[doc = "endpoint 4 register"]
    pub mod ep4r {
        #[doc = "Reader of register EP4R"]
        pub type R = crate::R<u32, super::EP4R>;
        #[doc = "Writer for register EP4R"]
        pub type W = crate::W<u32, super::EP4R>;
        #[doc = "Register EP4R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP4R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "endpoint 5 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep5r](ep5r) module"]
    pub type EP5R = crate::Reg<u32, _EP5R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP5R;
    #[doc = "`read()` method returns [ep5r::R](ep5r::R) reader structure"]
    impl crate::Readable for EP5R {}
    #[doc = "`write(|w| ..)` method takes [ep5r::W](ep5r::W) writer structure"]
    impl crate::Writable for EP5R {}
    #[doc = "endpoint 5 register"]
    pub mod ep5r {
        #[doc = "Reader of register EP5R"]
        pub type R = crate::R<u32, super::EP5R>;
        #[doc = "Writer for register EP5R"]
        pub type W = crate::W<u32, super::EP5R>;
        #[doc = "Register EP5R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP5R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "endpoint 6 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep6r](ep6r) module"]
    pub type EP6R = crate::Reg<u32, _EP6R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP6R;
    #[doc = "`read()` method returns [ep6r::R](ep6r::R) reader structure"]
    impl crate::Readable for EP6R {}
    #[doc = "`write(|w| ..)` method takes [ep6r::W](ep6r::W) writer structure"]
    impl crate::Writable for EP6R {}
    #[doc = "endpoint 6 register"]
    pub mod ep6r {
        #[doc = "Reader of register EP6R"]
        pub type R = crate::R<u32, super::EP6R>;
        #[doc = "Writer for register EP6R"]
        pub type W = crate::W<u32, super::EP6R>;
        #[doc = "Register EP6R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP6R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "endpoint 7 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep7r](ep7r) module"]
    pub type EP7R = crate::Reg<u32, _EP7R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP7R;
    #[doc = "`read()` method returns [ep7r::R](ep7r::R) reader structure"]
    impl crate::Readable for EP7R {}
    #[doc = "`write(|w| ..)` method takes [ep7r::W](ep7r::W) writer structure"]
    impl crate::Writable for EP7R {}
    #[doc = "endpoint 7 register"]
    pub mod ep7r {
        #[doc = "Reader of register EP7R"]
        pub type R = crate::R<u32, super::EP7R>;
        #[doc = "Writer for register EP7R"]
        pub type W = crate::W<u32, super::EP7R>;
        #[doc = "Register EP7R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP7R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntr](cntr) module"]
    pub type CNTR = crate::Reg<u32, _CNTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNTR;
    #[doc = "`read()` method returns [cntr::R](cntr::R) reader structure"]
    impl crate::Readable for CNTR {}
    #[doc = "`write(|w| ..)` method takes [cntr::W](cntr::W) writer structure"]
    impl crate::Writable for CNTR {}
    #[doc = "control register"]
    pub mod cntr {
        #[doc = "Reader of register CNTR"]
        pub type R = crate::R<u32, super::CNTR>;
        #[doc = "Writer for register CNTR"]
        pub type W = crate::W<u32, super::CNTR>;
        #[doc = "Register CNTR `reset()`'s with value 0x03"]
        impl crate::ResetValue for super::CNTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x03
            }
        }
        #[doc = "Force USB Reset\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FRES_A {
            #[doc = "0: Clear USB reset"]
            NORESET = 0,
            #[doc = "1: Force a reset of the USB peripheral, exactly like a RESET signaling on the USB"]
            RESET = 1,
        }
        impl From<FRES_A> for bool {
            #[inline(always)]
            fn from(variant: FRES_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FRES`"]
        pub type FRES_R = crate::R<bool, FRES_A>;
        impl FRES_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FRES_A {
                match self.bits {
                    false => FRES_A::NORESET,
                    true => FRES_A::RESET,
                }
            }
            #[doc = "Checks if the value of the field is `NORESET`"]
            #[inline(always)]
            pub fn is_no_reset(&self) -> bool {
                *self == FRES_A::NORESET
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == FRES_A::RESET
            }
        }
        #[doc = "Write proxy for field `FRES`"]
        pub struct FRES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRES_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FRES_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear USB reset"]
            #[inline(always)]
            pub fn no_reset(self) -> &'a mut W {
                self.variant(FRES_A::NORESET)
            }
            #[doc = "Force a reset of the USB peripheral, exactly like a RESET signaling on the USB"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(FRES_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Power down\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDWN_A {
            #[doc = "0: No power down"]
            DISABLED = 0,
            #[doc = "1: Enter power down mode"]
            ENABLED = 1,
        }
        impl From<PDWN_A> for bool {
            #[inline(always)]
            fn from(variant: PDWN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDWN`"]
        pub type PDWN_R = crate::R<bool, PDWN_A>;
        impl PDWN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDWN_A {
                match self.bits {
                    false => PDWN_A::DISABLED,
                    true => PDWN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == PDWN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == PDWN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `PDWN`"]
        pub struct PDWN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDWN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDWN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No power down"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(PDWN_A::DISABLED)
            }
            #[doc = "Enter power down mode"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(PDWN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Low-power mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LPMODE_A {
            #[doc = "0: No low-power mode"]
            DISABLED = 0,
            #[doc = "1: Enter low-power mode"]
            ENABLED = 1,
        }
        impl From<LPMODE_A> for bool {
            #[inline(always)]
            fn from(variant: LPMODE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LPMODE`"]
        pub type LPMODE_R = crate::R<bool, LPMODE_A>;
        impl LPMODE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LPMODE_A {
                match self.bits {
                    false => LPMODE_A::DISABLED,
                    true => LPMODE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == LPMODE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == LPMODE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `LPMODE`"]
        pub struct LPMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPMODE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LPMODE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No low-power mode"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(LPMODE_A::DISABLED)
            }
            #[doc = "Enter low-power mode"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(LPMODE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Force suspend\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FSUSP_A {
            #[doc = "0: No effect"]
            NOEFFECT = 0,
            #[doc = "1: Enter suspend mode. Clocks and static power dissipation in the analog transceiver are left unaffected"]
            SUSPEND = 1,
        }
        impl From<FSUSP_A> for bool {
            #[inline(always)]
            fn from(variant: FSUSP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FSUSP`"]
        pub type FSUSP_R = crate::R<bool, FSUSP_A>;
        impl FSUSP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSUSP_A {
                match self.bits {
                    false => FSUSP_A::NOEFFECT,
                    true => FSUSP_A::SUSPEND,
                }
            }
            #[doc = "Checks if the value of the field is `NOEFFECT`"]
            #[inline(always)]
            pub fn is_no_effect(&self) -> bool {
                *self == FSUSP_A::NOEFFECT
            }
            #[doc = "Checks if the value of the field is `SUSPEND`"]
            #[inline(always)]
            pub fn is_suspend(&self) -> bool {
                *self == FSUSP_A::SUSPEND
            }
        }
        #[doc = "Write proxy for field `FSUSP`"]
        pub struct FSUSP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSUSP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSUSP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No effect"]
            #[inline(always)]
            pub fn no_effect(self) -> &'a mut W {
                self.variant(FSUSP_A::NOEFFECT)
            }
            #[doc = "Enter suspend mode. Clocks and static power dissipation in the analog transceiver are left unaffected"]
            #[inline(always)]
            pub fn suspend(self) -> &'a mut W {
                self.variant(FSUSP_A::SUSPEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Resume request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RESUME_A {
            #[doc = "1: Resume requested"]
            REQUESTED = 1,
        }
        impl From<RESUME_A> for bool {
            #[inline(always)]
            fn from(variant: RESUME_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RESUME`"]
        pub type RESUME_R = crate::R<bool, RESUME_A>;
        impl RESUME_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, RESUME_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(RESUME_A::REQUESTED),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `REQUESTED`"]
            #[inline(always)]
            pub fn is_requested(&self) -> bool {
                *self == RESUME_A::REQUESTED
            }
        }
        #[doc = "Write proxy for field `RESUME`"]
        pub struct RESUME_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESUME_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RESUME_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resume requested"]
            #[inline(always)]
            pub fn requested(self) -> &'a mut W {
                self.variant(RESUME_A::REQUESTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Expected start of frame interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ESOFM_A {
            #[doc = "0: ESOF Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: ESOF Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<ESOFM_A> for bool {
            #[inline(always)]
            fn from(variant: ESOFM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ESOFM`"]
        pub type ESOFM_R = crate::R<bool, ESOFM_A>;
        impl ESOFM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ESOFM_A {
                match self.bits {
                    false => ESOFM_A::DISABLED,
                    true => ESOFM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ESOFM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ESOFM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ESOFM`"]
        pub struct ESOFM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ESOFM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ESOFM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ESOF Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ESOFM_A::DISABLED)
            }
            #[doc = "ESOF Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ESOFM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Start of frame interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SOFM_A {
            #[doc = "0: SOF Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: SOF Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<SOFM_A> for bool {
            #[inline(always)]
            fn from(variant: SOFM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SOFM`"]
        pub type SOFM_R = crate::R<bool, SOFM_A>;
        impl SOFM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SOFM_A {
                match self.bits {
                    false => SOFM_A::DISABLED,
                    true => SOFM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SOFM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == SOFM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `SOFM`"]
        pub struct SOFM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOFM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SOFM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SOF Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SOFM_A::DISABLED)
            }
            #[doc = "SOF Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SOFM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "USB reset interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RESETM_A {
            #[doc = "0: RESET Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: RESET Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<RESETM_A> for bool {
            #[inline(always)]
            fn from(variant: RESETM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RESETM`"]
        pub type RESETM_R = crate::R<bool, RESETM_A>;
        impl RESETM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RESETM_A {
                match self.bits {
                    false => RESETM_A::DISABLED,
                    true => RESETM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == RESETM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == RESETM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `RESETM`"]
        pub struct RESETM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESETM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RESETM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "RESET Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(RESETM_A::DISABLED)
            }
            #[doc = "RESET Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(RESETM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Suspend mode interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SUSPM_A {
            #[doc = "0: Suspend Mode Request SUSP Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: SUSP Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<SUSPM_A> for bool {
            #[inline(always)]
            fn from(variant: SUSPM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SUSPM`"]
        pub type SUSPM_R = crate::R<bool, SUSPM_A>;
        impl SUSPM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SUSPM_A {
                match self.bits {
                    false => SUSPM_A::DISABLED,
                    true => SUSPM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SUSPM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == SUSPM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `SUSPM`"]
        pub struct SUSPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SUSPM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SUSPM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Suspend Mode Request SUSP Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SUSPM_A::DISABLED)
            }
            #[doc = "SUSP Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SUSPM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Wakeup interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WKUPM_A {
            #[doc = "0: WKUP Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: WKUP Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<WKUPM_A> for bool {
            #[inline(always)]
            fn from(variant: WKUPM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WKUPM`"]
        pub type WKUPM_R = crate::R<bool, WKUPM_A>;
        impl WKUPM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WKUPM_A {
                match self.bits {
                    false => WKUPM_A::DISABLED,
                    true => WKUPM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == WKUPM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == WKUPM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `WKUPM`"]
        pub struct WKUPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WKUPM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WKUPM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "WKUP Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(WKUPM_A::DISABLED)
            }
            #[doc = "WKUP Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(WKUPM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Error interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ERRM_A {
            #[doc = "0: ERR Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: ERR Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<ERRM_A> for bool {
            #[inline(always)]
            fn from(variant: ERRM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ERRM`"]
        pub type ERRM_R = crate::R<bool, ERRM_A>;
        impl ERRM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ERRM_A {
                match self.bits {
                    false => ERRM_A::DISABLED,
                    true => ERRM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ERRM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ERRM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ERRM`"]
        pub struct ERRM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERRM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ERRM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ERR Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ERRM_A::DISABLED)
            }
            #[doc = "ERR Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ERRM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Packet memory area over / underrun interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PMAOVRM_A {
            #[doc = "0: PMAOVR Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: PMAOVR Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<PMAOVRM_A> for bool {
            #[inline(always)]
            fn from(variant: PMAOVRM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PMAOVRM`"]
        pub type PMAOVRM_R = crate::R<bool, PMAOVRM_A>;
        impl PMAOVRM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PMAOVRM_A {
                match self.bits {
                    false => PMAOVRM_A::DISABLED,
                    true => PMAOVRM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == PMAOVRM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == PMAOVRM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `PMAOVRM`"]
        pub struct PMAOVRM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PMAOVRM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PMAOVRM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PMAOVR Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(PMAOVRM_A::DISABLED)
            }
            #[doc = "PMAOVR Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(PMAOVRM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Correct transfer interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CTRM_A {
            #[doc = "0: Correct Transfer (CTR) Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: CTR Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<CTRM_A> for bool {
            #[inline(always)]
            fn from(variant: CTRM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CTRM`"]
        pub type CTRM_R = crate::R<bool, CTRM_A>;
        impl CTRM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CTRM_A {
                match self.bits {
                    false => CTRM_A::DISABLED,
                    true => CTRM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CTRM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CTRM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CTRM`"]
        pub struct CTRM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTRM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTRM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Correct Transfer (CTR) Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CTRM_A::DISABLED)
            }
            #[doc = "CTR Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CTRM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Force USB Reset"]
            #[inline(always)]
            pub fn fres(&self) -> FRES_R {
                FRES_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Power down"]
            #[inline(always)]
            pub fn pdwn(&self) -> PDWN_R {
                PDWN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Low-power mode"]
            #[inline(always)]
            pub fn lpmode(&self) -> LPMODE_R {
                LPMODE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Force suspend"]
            #[inline(always)]
            pub fn fsusp(&self) -> FSUSP_R {
                FSUSP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Resume request"]
            #[inline(always)]
            pub fn resume(&self) -> RESUME_R {
                RESUME_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Expected start of frame interrupt mask"]
            #[inline(always)]
            pub fn esofm(&self) -> ESOFM_R {
                ESOFM_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Start of frame interrupt mask"]
            #[inline(always)]
            pub fn sofm(&self) -> SOFM_R {
                SOFM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - USB reset interrupt mask"]
            #[inline(always)]
            pub fn resetm(&self) -> RESETM_R {
                RESETM_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Suspend mode interrupt mask"]
            #[inline(always)]
            pub fn suspm(&self) -> SUSPM_R {
                SUSPM_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Wakeup interrupt mask"]
            #[inline(always)]
            pub fn wkupm(&self) -> WKUPM_R {
                WKUPM_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Error interrupt mask"]
            #[inline(always)]
            pub fn errm(&self) -> ERRM_R {
                ERRM_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Packet memory area over / underrun interrupt mask"]
            #[inline(always)]
            pub fn pmaovrm(&self) -> PMAOVRM_R {
                PMAOVRM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer interrupt mask"]
            #[inline(always)]
            pub fn ctrm(&self) -> CTRM_R {
                CTRM_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Force USB Reset"]
            #[inline(always)]
            pub fn fres(&mut self) -> FRES_W {
                FRES_W { w: self }
            }
            #[doc = "Bit 1 - Power down"]
            #[inline(always)]
            pub fn pdwn(&mut self) -> PDWN_W {
                PDWN_W { w: self }
            }
            #[doc = "Bit 2 - Low-power mode"]
            #[inline(always)]
            pub fn lpmode(&mut self) -> LPMODE_W {
                LPMODE_W { w: self }
            }
            #[doc = "Bit 3 - Force suspend"]
            #[inline(always)]
            pub fn fsusp(&mut self) -> FSUSP_W {
                FSUSP_W { w: self }
            }
            #[doc = "Bit 4 - Resume request"]
            #[inline(always)]
            pub fn resume(&mut self) -> RESUME_W {
                RESUME_W { w: self }
            }
            #[doc = "Bit 8 - Expected start of frame interrupt mask"]
            #[inline(always)]
            pub fn esofm(&mut self) -> ESOFM_W {
                ESOFM_W { w: self }
            }
            #[doc = "Bit 9 - Start of frame interrupt mask"]
            #[inline(always)]
            pub fn sofm(&mut self) -> SOFM_W {
                SOFM_W { w: self }
            }
            #[doc = "Bit 10 - USB reset interrupt mask"]
            #[inline(always)]
            pub fn resetm(&mut self) -> RESETM_W {
                RESETM_W { w: self }
            }
            #[doc = "Bit 11 - Suspend mode interrupt mask"]
            #[inline(always)]
            pub fn suspm(&mut self) -> SUSPM_W {
                SUSPM_W { w: self }
            }
            #[doc = "Bit 12 - Wakeup interrupt mask"]
            #[inline(always)]
            pub fn wkupm(&mut self) -> WKUPM_W {
                WKUPM_W { w: self }
            }
            #[doc = "Bit 13 - Error interrupt mask"]
            #[inline(always)]
            pub fn errm(&mut self) -> ERRM_W {
                ERRM_W { w: self }
            }
            #[doc = "Bit 14 - Packet memory area over / underrun interrupt mask"]
            #[inline(always)]
            pub fn pmaovrm(&mut self) -> PMAOVRM_W {
                PMAOVRM_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer interrupt mask"]
            #[inline(always)]
            pub fn ctrm(&mut self) -> CTRM_W {
                CTRM_W { w: self }
            }
        }
    }
    #[doc = "interrupt status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [istr](istr) module"]
    pub type ISTR = crate::Reg<u32, _ISTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISTR;
    #[doc = "`read()` method returns [istr::R](istr::R) reader structure"]
    impl crate::Readable for ISTR {}
    #[doc = "`write(|w| ..)` method takes [istr::W](istr::W) writer structure"]
    impl crate::Writable for ISTR {}
    #[doc = "interrupt status register"]
    pub mod istr {
        #[doc = "Reader of register ISTR"]
        pub type R = crate::R<u32, super::ISTR>;
        #[doc = "Writer for register ISTR"]
        pub type W = crate::W<u32, super::ISTR>;
        #[doc = "Register ISTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ISTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EP_ID`"]
        pub type EP_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EP_ID`"]
        pub struct EP_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Direction of transaction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DIR_A {
            #[doc = "0: data transmitted by the USB peripheral to the host PC"]
            TO = 0,
            #[doc = "1: data received by the USB peripheral from the host PC"]
            FROM = 1,
        }
        impl From<DIR_A> for bool {
            #[inline(always)]
            fn from(variant: DIR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, DIR_A>;
        impl DIR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DIR_A {
                match self.bits {
                    false => DIR_A::TO,
                    true => DIR_A::FROM,
                }
            }
            #[doc = "Checks if the value of the field is `TO`"]
            #[inline(always)]
            pub fn is_to(&self) -> bool {
                *self == DIR_A::TO
            }
            #[doc = "Checks if the value of the field is `FROM`"]
            #[inline(always)]
            pub fn is_from(&self) -> bool {
                *self == DIR_A::FROM
            }
        }
        #[doc = "Write proxy for field `DIR`"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DIR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "data transmitted by the USB peripheral to the host PC"]
            #[inline(always)]
            pub fn to(self) -> &'a mut W {
                self.variant(DIR_A::TO)
            }
            #[doc = "data received by the USB peripheral from the host PC"]
            #[inline(always)]
            pub fn from(self) -> &'a mut W {
                self.variant(DIR_A::FROM)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Expected start frame\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ESOF_A {
            #[doc = "1: an SOF packet is expected but not received"]
            EXPECTEDSTARTOFFRAME = 1,
        }
        impl From<ESOF_A> for bool {
            #[inline(always)]
            fn from(variant: ESOF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ESOF`"]
        pub type ESOF_R = crate::R<bool, ESOF_A>;
        impl ESOF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, ESOF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(ESOF_A::EXPECTEDSTARTOFFRAME),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `EXPECTEDSTARTOFFRAME`"]
            #[inline(always)]
            pub fn is_expected_start_of_frame(&self) -> bool {
                *self == ESOF_A::EXPECTEDSTARTOFFRAME
            }
        }
        #[doc = "Write proxy for field `ESOF`"]
        pub struct ESOF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ESOF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ESOF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "an SOF packet is expected but not received"]
            #[inline(always)]
            pub fn expected_start_of_frame(self) -> &'a mut W {
                self.variant(ESOF_A::EXPECTEDSTARTOFFRAME)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "start of frame\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SOF_A {
            #[doc = "1: beginning of a new USB frame and it is set when a SOF packet arrives through the USB bus"]
            STARTOFFRAME = 1,
        }
        impl From<SOF_A> for bool {
            #[inline(always)]
            fn from(variant: SOF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SOF`"]
        pub type SOF_R = crate::R<bool, SOF_A>;
        impl SOF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, SOF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(SOF_A::STARTOFFRAME),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `STARTOFFRAME`"]
            #[inline(always)]
            pub fn is_start_of_frame(&self) -> bool {
                *self == SOF_A::STARTOFFRAME
            }
        }
        #[doc = "Write proxy for field `SOF`"]
        pub struct SOF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SOF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "beginning of a new USB frame and it is set when a SOF packet arrives through the USB bus"]
            #[inline(always)]
            pub fn start_of_frame(self) -> &'a mut W {
                self.variant(SOF_A::STARTOFFRAME)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "reset request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RESET_A {
            #[doc = "1: peripheral detects an active USB RESET signal at its inputs"]
            RESET = 1,
        }
        impl From<RESET_A> for bool {
            #[inline(always)]
            fn from(variant: RESET_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RESET`"]
        pub type RESET_R = crate::R<bool, RESET_A>;
        impl RESET_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, RESET_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(RESET_A::RESET),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == RESET_A::RESET
            }
        }
        #[doc = "Write proxy for field `RESET`"]
        pub struct RESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RESET_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "peripheral detects an active USB RESET signal at its inputs"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(RESET_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Suspend mode request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SUSP_A {
            #[doc = "1: no traffic has been received for 3 ms, indicating a suspend mode request from the USB bus"]
            SUSPEND = 1,
        }
        impl From<SUSP_A> for bool {
            #[inline(always)]
            fn from(variant: SUSP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SUSP`"]
        pub type SUSP_R = crate::R<bool, SUSP_A>;
        impl SUSP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, SUSP_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(SUSP_A::SUSPEND),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `SUSPEND`"]
            #[inline(always)]
            pub fn is_suspend(&self) -> bool {
                *self == SUSP_A::SUSPEND
            }
        }
        #[doc = "Write proxy for field `SUSP`"]
        pub struct SUSP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SUSP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SUSP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "no traffic has been received for 3 ms, indicating a suspend mode request from the USB bus"]
            #[inline(always)]
            pub fn suspend(self) -> &'a mut W {
                self.variant(SUSP_A::SUSPEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Wakeup\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WKUP_A {
            #[doc = "1: activity is detected that wakes up the USB peripheral"]
            WAKEUP = 1,
        }
        impl From<WKUP_A> for bool {
            #[inline(always)]
            fn from(variant: WKUP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WKUP`"]
        pub type WKUP_R = crate::R<bool, WKUP_A>;
        impl WKUP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, WKUP_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(WKUP_A::WAKEUP),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `WAKEUP`"]
            #[inline(always)]
            pub fn is_wakeup(&self) -> bool {
                *self == WKUP_A::WAKEUP
            }
        }
        #[doc = "Write proxy for field `WKUP`"]
        pub struct WKUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WKUP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WKUP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "activity is detected that wakes up the USB peripheral"]
            #[inline(always)]
            pub fn wakeup(self) -> &'a mut W {
                self.variant(WKUP_A::WAKEUP)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Error\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ERR_A {
            #[doc = "1: One of No ANSwer, Cyclic Redundancy Check, Bit Stuffing or Framing format Violation error occurred"]
            ERROR = 1,
        }
        impl From<ERR_A> for bool {
            #[inline(always)]
            fn from(variant: ERR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ERR`"]
        pub type ERR_R = crate::R<bool, ERR_A>;
        impl ERR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, ERR_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(ERR_A::ERROR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `ERROR`"]
            #[inline(always)]
            pub fn is_error(&self) -> bool {
                *self == ERR_A::ERROR
            }
        }
        #[doc = "Write proxy for field `ERR`"]
        pub struct ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ERR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "One of No ANSwer, Cyclic Redundancy Check, Bit Stuffing or Framing format Violation error occurred"]
            #[inline(always)]
            pub fn error(self) -> &'a mut W {
                self.variant(ERR_A::ERROR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Packet memory area over / underrun\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PMAOVR_A {
            #[doc = "1: microcontroller has not been able to respond in time to an USB memory request"]
            OVERRUN = 1,
        }
        impl From<PMAOVR_A> for bool {
            #[inline(always)]
            fn from(variant: PMAOVR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PMAOVR`"]
        pub type PMAOVR_R = crate::R<bool, PMAOVR_A>;
        impl PMAOVR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, PMAOVR_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(PMAOVR_A::OVERRUN),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OVERRUN`"]
            #[inline(always)]
            pub fn is_overrun(&self) -> bool {
                *self == PMAOVR_A::OVERRUN
            }
        }
        #[doc = "Write proxy for field `PMAOVR`"]
        pub struct PMAOVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PMAOVR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PMAOVR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "microcontroller has not been able to respond in time to an USB memory request"]
            #[inline(always)]
            pub fn overrun(self) -> &'a mut W {
                self.variant(PMAOVR_A::OVERRUN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Correct transfer\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CTR_A {
            #[doc = "1: endpoint has successfully completed a transaction"]
            COMPLETED = 1,
        }
        impl From<CTR_A> for bool {
            #[inline(always)]
            fn from(variant: CTR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CTR`"]
        pub type CTR_R = crate::R<bool, CTR_A>;
        impl CTR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, CTR_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(CTR_A::COMPLETED),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `COMPLETED`"]
            #[inline(always)]
            pub fn is_completed(&self) -> bool {
                *self == CTR_A::COMPLETED
            }
        }
        #[doc = "Write proxy for field `CTR`"]
        pub struct CTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "endpoint has successfully completed a transaction"]
            #[inline(always)]
            pub fn completed(self) -> &'a mut W {
                self.variant(CTR_A::COMPLETED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint Identifier"]
            #[inline(always)]
            pub fn ep_id(&self) -> EP_ID_R {
                EP_ID_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bit 4 - Direction of transaction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Expected start frame"]
            #[inline(always)]
            pub fn esof(&self) -> ESOF_R {
                ESOF_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - start of frame"]
            #[inline(always)]
            pub fn sof(&self) -> SOF_R {
                SOF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - reset request"]
            #[inline(always)]
            pub fn reset(&self) -> RESET_R {
                RESET_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Suspend mode request"]
            #[inline(always)]
            pub fn susp(&self) -> SUSP_R {
                SUSP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Wakeup"]
            #[inline(always)]
            pub fn wkup(&self) -> WKUP_R {
                WKUP_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Error"]
            #[inline(always)]
            pub fn err(&self) -> ERR_R {
                ERR_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Packet memory area over / underrun"]
            #[inline(always)]
            pub fn pmaovr(&self) -> PMAOVR_R {
                PMAOVR_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer"]
            #[inline(always)]
            pub fn ctr(&self) -> CTR_R {
                CTR_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint Identifier"]
            #[inline(always)]
            pub fn ep_id(&mut self) -> EP_ID_W {
                EP_ID_W { w: self }
            }
            #[doc = "Bit 4 - Direction of transaction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 8 - Expected start frame"]
            #[inline(always)]
            pub fn esof(&mut self) -> ESOF_W {
                ESOF_W { w: self }
            }
            #[doc = "Bit 9 - start of frame"]
            #[inline(always)]
            pub fn sof(&mut self) -> SOF_W {
                SOF_W { w: self }
            }
            #[doc = "Bit 10 - reset request"]
            #[inline(always)]
            pub fn reset(&mut self) -> RESET_W {
                RESET_W { w: self }
            }
            #[doc = "Bit 11 - Suspend mode request"]
            #[inline(always)]
            pub fn susp(&mut self) -> SUSP_W {
                SUSP_W { w: self }
            }
            #[doc = "Bit 12 - Wakeup"]
            #[inline(always)]
            pub fn wkup(&mut self) -> WKUP_W {
                WKUP_W { w: self }
            }
            #[doc = "Bit 13 - Error"]
            #[inline(always)]
            pub fn err(&mut self) -> ERR_W {
                ERR_W { w: self }
            }
            #[doc = "Bit 14 - Packet memory area over / underrun"]
            #[inline(always)]
            pub fn pmaovr(&mut self) -> PMAOVR_W {
                PMAOVR_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer"]
            #[inline(always)]
            pub fn ctr(&mut self) -> CTR_W {
                CTR_W { w: self }
            }
        }
    }
    #[doc = "frame number register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fnr](fnr) module"]
    pub type FNR = crate::Reg<u32, _FNR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FNR;
    #[doc = "`read()` method returns [fnr::R](fnr::R) reader structure"]
    impl crate::Readable for FNR {}
    #[doc = "frame number register"]
    pub mod fnr {
        #[doc = "Reader of register FNR"]
        pub type R = crate::R<u32, super::FNR>;
        #[doc = "Reader of field `FN`"]
        pub type FN_R = crate::R<u16, u16>;
        #[doc = "Reader of field `LSOF`"]
        pub type LSOF_R = crate::R<u8, u8>;
        #[doc = "Locked\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCK_A {
            #[doc = "1: the frame timer remains in this state until an USB reset or USB suspend event occurs"]
            LOCKED = 1,
        }
        impl From<LCK_A> for bool {
            #[inline(always)]
            fn from(variant: LCK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCK`"]
        pub type LCK_R = crate::R<bool, LCK_A>;
        impl LCK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, LCK_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(LCK_A::LOCKED),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `LOCKED`"]
            #[inline(always)]
            pub fn is_locked(&self) -> bool {
                *self == LCK_A::LOCKED
            }
        }
        #[doc = "Receive data - line status\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXDM_A {
            #[doc = "1: received data minus upstream port data line"]
            RECEIVED = 1,
        }
        impl From<RXDM_A> for bool {
            #[inline(always)]
            fn from(variant: RXDM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXDM`"]
        pub type RXDM_R = crate::R<bool, RXDM_A>;
        impl RXDM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, RXDM_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(RXDM_A::RECEIVED),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `RECEIVED`"]
            #[inline(always)]
            pub fn is_received(&self) -> bool {
                *self == RXDM_A::RECEIVED
            }
        }
        #[doc = "Receive data + line status\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXDP_A {
            #[doc = "1: received data plus upstream port data line"]
            RECEIVED = 1,
        }
        impl From<RXDP_A> for bool {
            #[inline(always)]
            fn from(variant: RXDP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXDP`"]
        pub type RXDP_R = crate::R<bool, RXDP_A>;
        impl RXDP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, RXDP_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(RXDP_A::RECEIVED),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `RECEIVED`"]
            #[inline(always)]
            pub fn is_received(&self) -> bool {
                *self == RXDP_A::RECEIVED
            }
        }
        impl R {
            #[doc = "Bits 0:10 - Frame number"]
            #[inline(always)]
            pub fn fn_(&self) -> FN_R {
                FN_R::new((self.bits & 0x07ff) as u16)
            }
            #[doc = "Bits 11:12 - Lost SOF"]
            #[inline(always)]
            pub fn lsof(&self) -> LSOF_R {
                LSOF_R::new(((self.bits >> 11) & 0x03) as u8)
            }
            #[doc = "Bit 13 - Locked"]
            #[inline(always)]
            pub fn lck(&self) -> LCK_R {
                LCK_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Receive data - line status"]
            #[inline(always)]
            pub fn rxdm(&self) -> RXDM_R {
                RXDM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Receive data + line status"]
            #[inline(always)]
            pub fn rxdp(&self) -> RXDP_R {
                RXDP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
    }
    #[doc = "device address\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [daddr](daddr) module"]
    pub type DADDR = crate::Reg<u32, _DADDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DADDR;
    #[doc = "`read()` method returns [daddr::R](daddr::R) reader structure"]
    impl crate::Readable for DADDR {}
    #[doc = "`write(|w| ..)` method takes [daddr::W](daddr::W) writer structure"]
    impl crate::Writable for DADDR {}
    #[doc = "device address"]
    pub mod daddr {
        #[doc = "Reader of register DADDR"]
        pub type R = crate::R<u32, super::DADDR>;
        #[doc = "Writer for register DADDR"]
        pub type W = crate::W<u32, super::DADDR>;
        #[doc = "Register DADDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DADDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADD`"]
        pub type ADD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADD`"]
        pub struct ADD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        #[doc = "Enable function\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EF_A {
            #[doc = "0: USB device disabled"]
            DISABLED = 0,
            #[doc = "1: USB device enabled"]
            ENABLED = 1,
        }
        impl From<EF_A> for bool {
            #[inline(always)]
            fn from(variant: EF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EF`"]
        pub type EF_R = crate::R<bool, EF_A>;
        impl EF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EF_A {
                match self.bits {
                    false => EF_A::DISABLED,
                    true => EF_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == EF_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == EF_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `EF`"]
        pub struct EF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "USB device disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(EF_A::DISABLED)
            }
            #[doc = "USB device enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(EF_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - Device address"]
            #[inline(always)]
            pub fn add(&self) -> ADD_R {
                ADD_R::new((self.bits & 0x7f) as u8)
            }
            #[doc = "Bit 7 - Enable function"]
            #[inline(always)]
            pub fn ef(&self) -> EF_R {
                EF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - Device address"]
            #[inline(always)]
            pub fn add(&mut self) -> ADD_W {
                ADD_W { w: self }
            }
            #[doc = "Bit 7 - Enable function"]
            #[inline(always)]
            pub fn ef(&mut self) -> EF_W {
                EF_W { w: self }
            }
        }
    }
    #[doc = "Buffer table address\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [btable](btable) module"]
    pub type BTABLE = crate::Reg<u32, _BTABLE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BTABLE;
    #[doc = "`read()` method returns [btable::R](btable::R) reader structure"]
    impl crate::Readable for BTABLE {}
    #[doc = "`write(|w| ..)` method takes [btable::W](btable::W) writer structure"]
    impl crate::Writable for BTABLE {}
    #[doc = "Buffer table address"]
    pub mod btable {
        #[doc = "Reader of register BTABLE"]
        pub type R = crate::R<u32, super::BTABLE>;
        #[doc = "Writer for register BTABLE"]
        pub type W = crate::W<u32, super::BTABLE>;
        #[doc = "Register BTABLE `reset()`'s with value 0"]
        impl crate::ResetValue for super::BTABLE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BTABLE`"]
        pub type BTABLE_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `BTABLE`"]
        pub struct BTABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BTABLE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1fff << 3)) | (((value as u32) & 0x1fff) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 3:15 - Buffer table"]
            #[inline(always)]
            pub fn btable(&self) -> BTABLE_R {
                BTABLE_R::new(((self.bits >> 3) & 0x1fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 3:15 - Buffer table"]
            #[inline(always)]
            pub fn btable(&mut self) -> BTABLE_W {
                BTABLE_W { w: self }
            }
        }
    }
}
#[doc = "Universal serial bus full-speed device interface"]
pub struct USB_SRAM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USB_SRAM {}
impl USB_SRAM {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usb::RegisterBlock {
        0x4000_6000 as *const _
    }
}
impl Deref for USB_SRAM {
    type Target = usb::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*USB_SRAM::ptr() }
    }
}
#[doc = "Window watchdog"]
pub struct WWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WWDG {}
impl WWDG {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wwdg::RegisterBlock {
        0x4000_2c00 as *const _
    }
}
impl Deref for WWDG {
    type Target = wwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*WWDG::ptr() }
    }
}
#[doc = "Window watchdog"]
pub mod wwdg {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control register"]
        pub cr: CR,
        #[doc = "0x04 - Configuration register"]
        pub cfr: CFR,
        #[doc = "0x08 - SR"]
        pub sr: SR,
    }
    #[doc = "Control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0x7f"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x7f
            }
        }
        #[doc = "Activation bit\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WDGA_AW {
            #[doc = "0: Watchdog disabled"]
            DISABLED = 0,
            #[doc = "1: Watchdog enabled"]
            ENABLED = 1,
        }
        impl From<WDGA_AW> for bool {
            #[inline(always)]
            fn from(variant: WDGA_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `WDGA`"]
        pub struct WDGA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDGA_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WDGA_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Watchdog disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(WDGA_AW::DISABLED)
            }
            #[doc = "Watchdog enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(WDGA_AW::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `T`"]
        pub type T_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `T`"]
        pub struct T_W<'a> {
            w: &'a mut W,
        }
        impl<'a> T_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - 7-bit counter (MSB to LSB)"]
            #[inline(always)]
            pub fn t(&self) -> T_R {
                T_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 7 - Activation bit"]
            #[inline(always)]
            pub fn wdga(&mut self) -> WDGA_W {
                WDGA_W { w: self }
            }
            #[doc = "Bits 0:6 - 7-bit counter (MSB to LSB)"]
            #[inline(always)]
            pub fn t(&mut self) -> T_W {
                T_W { w: self }
            }
        }
    }
    #[doc = "Configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfr](cfr) module"]
    pub type CFR = crate::Reg<u32, _CFR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFR;
    #[doc = "`read()` method returns [cfr::R](cfr::R) reader structure"]
    impl crate::Readable for CFR {}
    #[doc = "`write(|w| ..)` method takes [cfr::W](cfr::W) writer structure"]
    impl crate::Writable for CFR {}
    #[doc = "Configuration register"]
    pub mod cfr {
        #[doc = "Reader of register CFR"]
        pub type R = crate::R<u32, super::CFR>;
        #[doc = "Writer for register CFR"]
        pub type W = crate::W<u32, super::CFR>;
        #[doc = "Register CFR `reset()`'s with value 0x7f"]
        impl crate::ResetValue for super::CFR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x7f
            }
        }
        #[doc = "Early wakeup interrupt\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EWI_AW {
            #[doc = "1: interrupt occurs whenever the counter reaches the value 0x40"]
            ENABLE = 1,
        }
        impl From<EWI_AW> for bool {
            #[inline(always)]
            fn from(variant: EWI_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `EWI`"]
        pub struct EWI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EWI_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "interrupt occurs whenever the counter reaches the value 0x40"]
            #[inline(always)]
            pub fn enable(self) -> &'a mut W {
                self.variant(EWI_AW::ENABLE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `W`"]
        pub type W_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `W`"]
        pub struct W_W<'a> {
            w: &'a mut W,
        }
        impl<'a> W_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        #[doc = "Timer base\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum WDGTB_A {
            #[doc = "0: Counter clock (PCLK1 div 4096) div 1"]
            DIV1 = 0,
            #[doc = "1: Counter clock (PCLK1 div 4096) div 2"]
            DIV2 = 1,
            #[doc = "2: Counter clock (PCLK1 div 4096) div 4"]
            DIV4 = 2,
            #[doc = "3: Counter clock (PCLK1 div 4096) div 8"]
            DIV8 = 3,
        }
        impl From<WDGTB_A> for u8 {
            #[inline(always)]
            fn from(variant: WDGTB_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `WDGTB`"]
        pub type WDGTB_R = crate::R<u8, WDGTB_A>;
        impl WDGTB_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WDGTB_A {
                match self.bits {
                    0 => WDGTB_A::DIV1,
                    1 => WDGTB_A::DIV2,
                    2 => WDGTB_A::DIV4,
                    3 => WDGTB_A::DIV8,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == WDGTB_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == WDGTB_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == WDGTB_A::DIV4
            }
            #[doc = "Checks if the value of the field is `DIV8`"]
            #[inline(always)]
            pub fn is_div8(&self) -> bool {
                *self == WDGTB_A::DIV8
            }
        }
        #[doc = "Write proxy for field `WDGTB`"]
        pub struct WDGTB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDGTB_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WDGTB_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Counter clock (PCLK1 div 4096) div 1"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(WDGTB_A::DIV1)
            }
            #[doc = "Counter clock (PCLK1 div 4096) div 2"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(WDGTB_A::DIV2)
            }
            #[doc = "Counter clock (PCLK1 div 4096) div 4"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(WDGTB_A::DIV4)
            }
            #[doc = "Counter clock (PCLK1 div 4096) div 8"]
            #[inline(always)]
            pub fn div8(self) -> &'a mut W {
                self.variant(WDGTB_A::DIV8)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 7)) | (((value as u32) & 0x03) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - 7-bit window value"]
            #[inline(always)]
            pub fn w(&self) -> W_R {
                W_R::new((self.bits & 0x7f) as u8)
            }
            #[doc = "Bits 7:8 - Timer base"]
            #[inline(always)]
            pub fn wdgtb(&self) -> WDGTB_R {
                WDGTB_R::new(((self.bits >> 7) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 9 - Early wakeup interrupt"]
            #[inline(always)]
            pub fn ewi(&mut self) -> EWI_W {
                EWI_W { w: self }
            }
            #[doc = "Bits 0:6 - 7-bit window value"]
            #[inline(always)]
            pub fn w(&mut self) -> W_W {
                W_W { w: self }
            }
            #[doc = "Bits 7:8 - Timer base"]
            #[inline(always)]
            pub fn wdgtb(&mut self) -> WDGTB_W {
                WDGTB_W { w: self }
            }
        }
    }
    #[doc = "SR\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "SR"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "EWIF\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EWIF_A {
            #[doc = "1: The EWI Interrupt Service Routine has been triggered"]
            PENDING = 1,
            #[doc = "0: The EWI Interrupt Service Routine has been serviced"]
            FINISHED = 0,
        }
        impl From<EWIF_A> for bool {
            #[inline(always)]
            fn from(variant: EWIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EWIF`"]
        pub type EWIF_R = crate::R<bool, EWIF_A>;
        impl EWIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EWIF_A {
                match self.bits {
                    true => EWIF_A::PENDING,
                    false => EWIF_A::FINISHED,
                }
            }
            #[doc = "Checks if the value of the field is `PENDING`"]
            #[inline(always)]
            pub fn is_pending(&self) -> bool {
                *self == EWIF_A::PENDING
            }
            #[doc = "Checks if the value of the field is `FINISHED`"]
            #[inline(always)]
            pub fn is_finished(&self) -> bool {
                *self == EWIF_A::FINISHED
            }
        }
        #[doc = "EWIF\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EWIF_AW {
            #[doc = "0: The EWI Interrupt Service Routine has been serviced"]
            FINISHED = 0,
        }
        impl From<EWIF_AW> for bool {
            #[inline(always)]
            fn from(variant: EWIF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `EWIF`"]
        pub struct EWIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EWIF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The EWI Interrupt Service Routine has been serviced"]
            #[inline(always)]
            pub fn finished(self) -> &'a mut W {
                self.variant(EWIF_AW::FINISHED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - EWIF"]
            #[inline(always)]
            pub fn ewif(&self) -> EWIF_R {
                EWIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - EWIF"]
            #[inline(always)]
            pub fn ewif(&mut self) -> EWIF_W {
                EWIF_W { w: self }
            }
        }
    }
}
#[doc = "Analog-to-digital converter"]
pub struct ADC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC {}
impl ADC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc::RegisterBlock {
        0x4001_2400 as *const _
    }
}
impl Deref for ADC {
    type Target = adc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*ADC::ptr() }
    }
}
#[doc = "Analog-to-digital converter"]
pub mod adc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - status register"]
        pub sr: SR,
        #[doc = "0x04 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x08 - control register 2"]
        pub cr2: CR2,
        #[doc = "0x0c - sample time register 1"]
        pub smpr1: SMPR1,
        #[doc = "0x10 - sample time register 2"]
        pub smpr2: SMPR2,
        #[doc = "0x14 - sample time register 3"]
        pub smpr3: SMPR3,
        #[doc = "0x18 - injected channel data offset register x"]
        pub jofr1: JOFR1,
        #[doc = "0x1c - injected channel data offset register x"]
        pub jofr2: JOFR2,
        #[doc = "0x20 - injected channel data offset register x"]
        pub jofr3: JOFR3,
        #[doc = "0x24 - injected channel data offset register x"]
        pub jofr4: JOFR4,
        #[doc = "0x28 - watchdog higher threshold register"]
        pub htr: HTR,
        #[doc = "0x2c - watchdog lower threshold register"]
        pub ltr: LTR,
        #[doc = "0x30 - regular sequence register 1"]
        pub sqr1: SQR1,
        #[doc = "0x34 - regular sequence register 2"]
        pub sqr2: SQR2,
        #[doc = "0x38 - regular sequence register 3"]
        pub sqr3: SQR3,
        #[doc = "0x3c - regular sequence register 4"]
        pub sqr4: SQR4,
        #[doc = "0x40 - regular sequence register 5"]
        pub sqr5: SQR5,
        #[doc = "0x44 - injected sequence register"]
        pub jsqr: JSQR,
        #[doc = "0x48 - injected data register x"]
        pub jdr1: JDR1,
        #[doc = "0x4c - injected data register x"]
        pub jdr2: JDR2,
        #[doc = "0x50 - injected data register x"]
        pub jdr3: JDR3,
        #[doc = "0x54 - injected data register x"]
        pub jdr4: JDR4,
        #[doc = "0x58 - regular data register"]
        pub dr: DR,
        #[doc = "0x5c - sample time register 0"]
        pub smpr0: SMPR0,
        _reserved24: [u8; 672usize],
        #[doc = "0x300 - ADC common status register"]
        pub csr: CSR,
        #[doc = "0x304 - ADC common control register"]
        pub ccr: CCR,
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `JCNR`"]
        pub type JCNR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RCNR`"]
        pub type RCNR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ADONS`"]
        pub type ADONS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `OVR`"]
        pub type OVR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OVR`"]
        pub struct OVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `STRT`"]
        pub type STRT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STRT`"]
        pub struct STRT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STRT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `JSTRT`"]
        pub type JSTRT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `JSTRT`"]
        pub struct JSTRT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JSTRT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `JEOC`"]
        pub type JEOC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `JEOC`"]
        pub struct JEOC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JEOC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `EOC`"]
        pub type EOC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOC`"]
        pub struct EOC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `AWD`"]
        pub type AWD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AWD`"]
        pub struct AWD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 9 - Injected channel not ready"]
            #[inline(always)]
            pub fn jcnr(&self) -> JCNR_R {
                JCNR_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Regular channel not ready"]
            #[inline(always)]
            pub fn rcnr(&self) -> RCNR_R {
                RCNR_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - ADC ON status"]
            #[inline(always)]
            pub fn adons(&self) -> ADONS_R {
                ADONS_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Overrun"]
            #[inline(always)]
            pub fn ovr(&self) -> OVR_R {
                OVR_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Regular channel start flag"]
            #[inline(always)]
            pub fn strt(&self) -> STRT_R {
                STRT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Injected channel start flag"]
            #[inline(always)]
            pub fn jstrt(&self) -> JSTRT_R {
                JSTRT_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Injected channel end of conversion"]
            #[inline(always)]
            pub fn jeoc(&self) -> JEOC_R {
                JEOC_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Regular channel end of conversion"]
            #[inline(always)]
            pub fn eoc(&self) -> EOC_R {
                EOC_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Analog watchdog flag"]
            #[inline(always)]
            pub fn awd(&self) -> AWD_R {
                AWD_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 5 - Overrun"]
            #[inline(always)]
            pub fn ovr(&mut self) -> OVR_W {
                OVR_W { w: self }
            }
            #[doc = "Bit 4 - Regular channel start flag"]
            #[inline(always)]
            pub fn strt(&mut self) -> STRT_W {
                STRT_W { w: self }
            }
            #[doc = "Bit 3 - Injected channel start flag"]
            #[inline(always)]
            pub fn jstrt(&mut self) -> JSTRT_W {
                JSTRT_W { w: self }
            }
            #[doc = "Bit 2 - Injected channel end of conversion"]
            #[inline(always)]
            pub fn jeoc(&mut self) -> JEOC_W {
                JEOC_W { w: self }
            }
            #[doc = "Bit 1 - Regular channel end of conversion"]
            #[inline(always)]
            pub fn eoc(&mut self) -> EOC_W {
                EOC_W { w: self }
            }
            #[doc = "Bit 0 - Analog watchdog flag"]
            #[inline(always)]
            pub fn awd(&mut self) -> AWD_W {
                AWD_W { w: self }
            }
        }
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OVRIE`"]
        pub type OVRIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OVRIE`"]
        pub struct OVRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `RES`"]
        pub type RES_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RES`"]
        pub struct RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `AWDEN`"]
        pub type AWDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AWDEN`"]
        pub struct AWDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `JAWDEN`"]
        pub type JAWDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `JAWDEN`"]
        pub struct JAWDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JAWDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `PDI`"]
        pub type PDI_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PDI`"]
        pub struct PDI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `PDD`"]
        pub type PDD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PDD`"]
        pub struct PDD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DISCNUM`"]
        pub type DISCNUM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DISCNUM`"]
        pub struct DISCNUM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISCNUM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `JDISCEN`"]
        pub type JDISCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `JDISCEN`"]
        pub struct JDISCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JDISCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DISCEN`"]
        pub type DISCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DISCEN`"]
        pub struct DISCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `JAUTO`"]
        pub type JAUTO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `JAUTO`"]
        pub struct JAUTO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JAUTO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `AWDSGL`"]
        pub type AWDSGL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AWDSGL`"]
        pub struct AWDSGL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWDSGL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SCAN`"]
        pub type SCAN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SCAN`"]
        pub struct SCAN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCAN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `JEOCIE`"]
        pub type JEOCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `JEOCIE`"]
        pub struct JEOCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JEOCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `AWDIE`"]
        pub type AWDIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AWDIE`"]
        pub struct AWDIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWDIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `EOCIE`"]
        pub type EOCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOCIE`"]
        pub struct EOCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `AWDCH`"]
        pub type AWDCH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AWDCH`"]
        pub struct AWDCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWDCH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 26 - Overrun interrupt enable"]
            #[inline(always)]
            pub fn ovrie(&self) -> OVRIE_R {
                OVRIE_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bits 24:25 - Resolution"]
            #[inline(always)]
            pub fn res(&self) -> RES_R {
                RES_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bit 23 - Analog watchdog enable on regular channels"]
            #[inline(always)]
            pub fn awden(&self) -> AWDEN_R {
                AWDEN_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Analog watchdog enable on injected channels"]
            #[inline(always)]
            pub fn jawden(&self) -> JAWDEN_R {
                JAWDEN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Power down during the idle phase"]
            #[inline(always)]
            pub fn pdi(&self) -> PDI_R {
                PDI_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Power down during the delay phase"]
            #[inline(always)]
            pub fn pdd(&self) -> PDD_R {
                PDD_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 13:15 - Discontinuous mode channel count"]
            #[inline(always)]
            pub fn discnum(&self) -> DISCNUM_R {
                DISCNUM_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - Discontinuous mode on injected channels"]
            #[inline(always)]
            pub fn jdiscen(&self) -> JDISCEN_R {
                JDISCEN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Discontinuous mode on regular channels"]
            #[inline(always)]
            pub fn discen(&self) -> DISCEN_R {
                DISCEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Automatic injected group conversion"]
            #[inline(always)]
            pub fn jauto(&self) -> JAUTO_R {
                JAUTO_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Enable the watchdog on a single channel in scan mode"]
            #[inline(always)]
            pub fn awdsgl(&self) -> AWDSGL_R {
                AWDSGL_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Scan mode"]
            #[inline(always)]
            pub fn scan(&self) -> SCAN_R {
                SCAN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Interrupt enable for injected channels"]
            #[inline(always)]
            pub fn jeocie(&self) -> JEOCIE_R {
                JEOCIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Analog watchdog interrupt enable"]
            #[inline(always)]
            pub fn awdie(&self) -> AWDIE_R {
                AWDIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Interrupt enable for EOC"]
            #[inline(always)]
            pub fn eocie(&self) -> EOCIE_R {
                EOCIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bits 0:4 - Analog watchdog channel select bits"]
            #[inline(always)]
            pub fn awdch(&self) -> AWDCH_R {
                AWDCH_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 26 - Overrun interrupt enable"]
            #[inline(always)]
            pub fn ovrie(&mut self) -> OVRIE_W {
                OVRIE_W { w: self }
            }
            #[doc = "Bits 24:25 - Resolution"]
            #[inline(always)]
            pub fn res(&mut self) -> RES_W {
                RES_W { w: self }
            }
            #[doc = "Bit 23 - Analog watchdog enable on regular channels"]
            #[inline(always)]
            pub fn awden(&mut self) -> AWDEN_W {
                AWDEN_W { w: self }
            }
            #[doc = "Bit 22 - Analog watchdog enable on injected channels"]
            #[inline(always)]
            pub fn jawden(&mut self) -> JAWDEN_W {
                JAWDEN_W { w: self }
            }
            #[doc = "Bit 17 - Power down during the idle phase"]
            #[inline(always)]
            pub fn pdi(&mut self) -> PDI_W {
                PDI_W { w: self }
            }
            #[doc = "Bit 16 - Power down during the delay phase"]
            #[inline(always)]
            pub fn pdd(&mut self) -> PDD_W {
                PDD_W { w: self }
            }
            #[doc = "Bits 13:15 - Discontinuous mode channel count"]
            #[inline(always)]
            pub fn discnum(&mut self) -> DISCNUM_W {
                DISCNUM_W { w: self }
            }
            #[doc = "Bit 12 - Discontinuous mode on injected channels"]
            #[inline(always)]
            pub fn jdiscen(&mut self) -> JDISCEN_W {
                JDISCEN_W { w: self }
            }
            #[doc = "Bit 11 - Discontinuous mode on regular channels"]
            #[inline(always)]
            pub fn discen(&mut self) -> DISCEN_W {
                DISCEN_W { w: self }
            }
            #[doc = "Bit 10 - Automatic injected group conversion"]
            #[inline(always)]
            pub fn jauto(&mut self) -> JAUTO_W {
                JAUTO_W { w: self }
            }
            #[doc = "Bit 9 - Enable the watchdog on a single channel in scan mode"]
            #[inline(always)]
            pub fn awdsgl(&mut self) -> AWDSGL_W {
                AWDSGL_W { w: self }
            }
            #[doc = "Bit 8 - Scan mode"]
            #[inline(always)]
            pub fn scan(&mut self) -> SCAN_W {
                SCAN_W { w: self }
            }
            #[doc = "Bit 7 - Interrupt enable for injected channels"]
            #[inline(always)]
            pub fn jeocie(&mut self) -> JEOCIE_W {
                JEOCIE_W { w: self }
            }
            #[doc = "Bit 6 - Analog watchdog interrupt enable"]
            #[inline(always)]
            pub fn awdie(&mut self) -> AWDIE_W {
                AWDIE_W { w: self }
            }
            #[doc = "Bit 5 - Interrupt enable for EOC"]
            #[inline(always)]
            pub fn eocie(&mut self) -> EOCIE_W {
                EOCIE_W { w: self }
            }
            #[doc = "Bits 0:4 - Analog watchdog channel select bits"]
            #[inline(always)]
            pub fn awdch(&mut self) -> AWDCH_W {
                AWDCH_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SWSTART`"]
        pub type SWSTART_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWSTART`"]
        pub struct SWSTART_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWSTART_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `EXTEN`"]
        pub type EXTEN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTEN`"]
        pub struct EXTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `EXTSEL`"]
        pub type EXTSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTSEL`"]
        pub struct EXTSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `JSWSTART`"]
        pub type JSWSTART_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `JSWSTART`"]
        pub struct JSWSTART_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JSWSTART_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `JEXTEN`"]
        pub type JEXTEN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `JEXTEN`"]
        pub struct JEXTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JEXTEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `JEXTSEL`"]
        pub type JEXTSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `JEXTSEL`"]
        pub struct JEXTSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JEXTSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `ALIGN`"]
        pub type ALIGN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALIGN`"]
        pub struct ALIGN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALIGN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `EOCS`"]
        pub type EOCS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOCS`"]
        pub struct EOCS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOCS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `DDS`"]
        pub type DDS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DDS`"]
        pub struct DDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DDS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `DMA`"]
        pub type DMA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMA`"]
        pub struct DMA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DELS`"]
        pub type DELS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DELS`"]
        pub struct DELS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DELS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_CFG`"]
        pub type ADC_CFG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_CFG`"]
        pub struct ADC_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_CFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CONT`"]
        pub type CONT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CONT`"]
        pub struct CONT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CONT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `ADON`"]
        pub type ADON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADON`"]
        pub struct ADON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - Start conversion of regular channels"]
            #[inline(always)]
            pub fn swstart(&self) -> SWSTART_R {
                SWSTART_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bits 28:29 - External trigger enable for regular channels"]
            #[inline(always)]
            pub fn exten(&self) -> EXTEN_R {
                EXTEN_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 24:27 - External event select for regular group"]
            #[inline(always)]
            pub fn extsel(&self) -> EXTSEL_R {
                EXTSEL_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bit 22 - Start conversion of injected channels"]
            #[inline(always)]
            pub fn jswstart(&self) -> JSWSTART_R {
                JSWSTART_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - External trigger enable for injected channels"]
            #[inline(always)]
            pub fn jexten(&self) -> JEXTEN_R {
                JEXTEN_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 16:19 - External event select for injected group"]
            #[inline(always)]
            pub fn jextsel(&self) -> JEXTSEL_R {
                JEXTSEL_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bit 11 - Data alignment"]
            #[inline(always)]
            pub fn align(&self) -> ALIGN_R {
                ALIGN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - End of conversion selection"]
            #[inline(always)]
            pub fn eocs(&self) -> EOCS_R {
                EOCS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - DMA disable selection"]
            #[inline(always)]
            pub fn dds(&self) -> DDS_R {
                DDS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Direct memory access mode"]
            #[inline(always)]
            pub fn dma(&self) -> DMA_R {
                DMA_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Delay selection"]
            #[inline(always)]
            pub fn dels(&self) -> DELS_R {
                DELS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 2 - ADC configuration"]
            #[inline(always)]
            pub fn adc_cfg(&self) -> ADC_CFG_R {
                ADC_CFG_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Continuous conversion"]
            #[inline(always)]
            pub fn cont(&self) -> CONT_R {
                CONT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - A/D Converter ON / OFF"]
            #[inline(always)]
            pub fn adon(&self) -> ADON_R {
                ADON_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 30 - Start conversion of regular channels"]
            #[inline(always)]
            pub fn swstart(&mut self) -> SWSTART_W {
                SWSTART_W { w: self }
            }
            #[doc = "Bits 28:29 - External trigger enable for regular channels"]
            #[inline(always)]
            pub fn exten(&mut self) -> EXTEN_W {
                EXTEN_W { w: self }
            }
            #[doc = "Bits 24:27 - External event select for regular group"]
            #[inline(always)]
            pub fn extsel(&mut self) -> EXTSEL_W {
                EXTSEL_W { w: self }
            }
            #[doc = "Bit 22 - Start conversion of injected channels"]
            #[inline(always)]
            pub fn jswstart(&mut self) -> JSWSTART_W {
                JSWSTART_W { w: self }
            }
            #[doc = "Bits 20:21 - External trigger enable for injected channels"]
            #[inline(always)]
            pub fn jexten(&mut self) -> JEXTEN_W {
                JEXTEN_W { w: self }
            }
            #[doc = "Bits 16:19 - External event select for injected group"]
            #[inline(always)]
            pub fn jextsel(&mut self) -> JEXTSEL_W {
                JEXTSEL_W { w: self }
            }
            #[doc = "Bit 11 - Data alignment"]
            #[inline(always)]
            pub fn align(&mut self) -> ALIGN_W {
                ALIGN_W { w: self }
            }
            #[doc = "Bit 10 - End of conversion selection"]
            #[inline(always)]
            pub fn eocs(&mut self) -> EOCS_W {
                EOCS_W { w: self }
            }
            #[doc = "Bit 9 - DMA disable selection"]
            #[inline(always)]
            pub fn dds(&mut self) -> DDS_W {
                DDS_W { w: self }
            }
            #[doc = "Bit 8 - Direct memory access mode"]
            #[inline(always)]
            pub fn dma(&mut self) -> DMA_W {
                DMA_W { w: self }
            }
            #[doc = "Bits 4:6 - Delay selection"]
            #[inline(always)]
            pub fn dels(&mut self) -> DELS_W {
                DELS_W { w: self }
            }
            #[doc = "Bit 2 - ADC configuration"]
            #[inline(always)]
            pub fn adc_cfg(&mut self) -> ADC_CFG_W {
                ADC_CFG_W { w: self }
            }
            #[doc = "Bit 1 - Continuous conversion"]
            #[inline(always)]
            pub fn cont(&mut self) -> CONT_W {
                CONT_W { w: self }
            }
            #[doc = "Bit 0 - A/D Converter ON / OFF"]
            #[inline(always)]
            pub fn adon(&mut self) -> ADON_W {
                ADON_W { w: self }
            }
        }
    }
    #[doc = "sample time register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smpr1](smpr1) module"]
    pub type SMPR1 = crate::Reg<u32, _SMPR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPR1;
    #[doc = "`read()` method returns [smpr1::R](smpr1::R) reader structure"]
    impl crate::Readable for SMPR1 {}
    #[doc = "`write(|w| ..)` method takes [smpr1::W](smpr1::W) writer structure"]
    impl crate::Writable for SMPR1 {}
    #[doc = "sample time register 1"]
    pub mod smpr1 {
        #[doc = "Reader of register SMPR1"]
        pub type R = crate::R<u32, super::SMPR1>;
        #[doc = "Writer for register SMPR1"]
        pub type W = crate::W<u32, super::SMPR1>;
        #[doc = "Register SMPR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMPR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SMP`"]
        pub type SMP_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `SMP`"]
        pub struct SMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3fff_ffff) | ((value as u32) & 0x3fff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:29 - Channel sampling time selection"]
            #[inline(always)]
            pub fn smp(&self) -> SMP_R {
                SMP_R::new((self.bits & 0x3fff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:29 - Channel sampling time selection"]
            #[inline(always)]
            pub fn smp(&mut self) -> SMP_W {
                SMP_W { w: self }
            }
        }
    }
    #[doc = "sample time register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smpr2](smpr2) module"]
    pub type SMPR2 = crate::Reg<u32, _SMPR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPR2;
    #[doc = "`read()` method returns [smpr2::R](smpr2::R) reader structure"]
    impl crate::Readable for SMPR2 {}
    #[doc = "`write(|w| ..)` method takes [smpr2::W](smpr2::W) writer structure"]
    impl crate::Writable for SMPR2 {}
    #[doc = "sample time register 2"]
    pub mod smpr2 {
        #[doc = "Reader of register SMPR2"]
        pub type R = crate::R<u32, super::SMPR2>;
        #[doc = "Writer for register SMPR2"]
        pub type W = crate::W<u32, super::SMPR2>;
        #[doc = "Register SMPR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMPR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SMP`"]
        pub type SMP_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `SMP`"]
        pub struct SMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3fff_ffff) | ((value as u32) & 0x3fff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:29 - Channel sampling time selection"]
            #[inline(always)]
            pub fn smp(&self) -> SMP_R {
                SMP_R::new((self.bits & 0x3fff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:29 - Channel sampling time selection"]
            #[inline(always)]
            pub fn smp(&mut self) -> SMP_W {
                SMP_W { w: self }
            }
        }
    }
    #[doc = "sample time register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smpr3](smpr3) module"]
    pub type SMPR3 = crate::Reg<u32, _SMPR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPR3;
    #[doc = "`read()` method returns [smpr3::R](smpr3::R) reader structure"]
    impl crate::Readable for SMPR3 {}
    #[doc = "`write(|w| ..)` method takes [smpr3::W](smpr3::W) writer structure"]
    impl crate::Writable for SMPR3 {}
    #[doc = "sample time register 3"]
    pub mod smpr3 {
        #[doc = "Reader of register SMPR3"]
        pub type R = crate::R<u32, super::SMPR3>;
        #[doc = "Writer for register SMPR3"]
        pub type W = crate::W<u32, super::SMPR3>;
        #[doc = "Register SMPR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMPR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SMP`"]
        pub type SMP_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `SMP`"]
        pub struct SMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3fff_ffff) | ((value as u32) & 0x3fff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:29 - Channel Sample time selection"]
            #[inline(always)]
            pub fn smp(&self) -> SMP_R {
                SMP_R::new((self.bits & 0x3fff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:29 - Channel Sample time selection"]
            #[inline(always)]
            pub fn smp(&mut self) -> SMP_W {
                SMP_W { w: self }
            }
        }
    }
    #[doc = "injected channel data offset register x\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [jofr1](jofr1) module"]
    pub type JOFR1 = crate::Reg<u32, _JOFR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _JOFR1;
    #[doc = "`read()` method returns [jofr1::R](jofr1::R) reader structure"]
    impl crate::Readable for JOFR1 {}
    #[doc = "`write(|w| ..)` method takes [jofr1::W](jofr1::W) writer structure"]
    impl crate::Writable for JOFR1 {}
    #[doc = "injected channel data offset register x"]
    pub mod jofr1 {
        #[doc = "Reader of register JOFR1"]
        pub type R = crate::R<u32, super::JOFR1>;
        #[doc = "Writer for register JOFR1"]
        pub type W = crate::W<u32, super::JOFR1>;
        #[doc = "Register JOFR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::JOFR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `JOFFSET1`"]
        pub type JOFFSET1_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `JOFFSET1`"]
        pub struct JOFFSET1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JOFFSET1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn joffset1(&self) -> JOFFSET1_R {
                JOFFSET1_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn joffset1(&mut self) -> JOFFSET1_W {
                JOFFSET1_W { w: self }
            }
        }
    }
    #[doc = "injected channel data offset register x\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [jofr2](jofr2) module"]
    pub type JOFR2 = crate::Reg<u32, _JOFR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _JOFR2;
    #[doc = "`read()` method returns [jofr2::R](jofr2::R) reader structure"]
    impl crate::Readable for JOFR2 {}
    #[doc = "`write(|w| ..)` method takes [jofr2::W](jofr2::W) writer structure"]
    impl crate::Writable for JOFR2 {}
    #[doc = "injected channel data offset register x"]
    pub mod jofr2 {
        #[doc = "Reader of register JOFR2"]
        pub type R = crate::R<u32, super::JOFR2>;
        #[doc = "Writer for register JOFR2"]
        pub type W = crate::W<u32, super::JOFR2>;
        #[doc = "Register JOFR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::JOFR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `JOFFSET2`"]
        pub type JOFFSET2_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `JOFFSET2`"]
        pub struct JOFFSET2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JOFFSET2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn joffset2(&self) -> JOFFSET2_R {
                JOFFSET2_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn joffset2(&mut self) -> JOFFSET2_W {
                JOFFSET2_W { w: self }
            }
        }
    }
    #[doc = "injected channel data offset register x\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [jofr3](jofr3) module"]
    pub type JOFR3 = crate::Reg<u32, _JOFR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _JOFR3;
    #[doc = "`read()` method returns [jofr3::R](jofr3::R) reader structure"]
    impl crate::Readable for JOFR3 {}
    #[doc = "`write(|w| ..)` method takes [jofr3::W](jofr3::W) writer structure"]
    impl crate::Writable for JOFR3 {}
    #[doc = "injected channel data offset register x"]
    pub mod jofr3 {
        #[doc = "Reader of register JOFR3"]
        pub type R = crate::R<u32, super::JOFR3>;
        #[doc = "Writer for register JOFR3"]
        pub type W = crate::W<u32, super::JOFR3>;
        #[doc = "Register JOFR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::JOFR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `JOFFSET3`"]
        pub type JOFFSET3_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `JOFFSET3`"]
        pub struct JOFFSET3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JOFFSET3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn joffset3(&self) -> JOFFSET3_R {
                JOFFSET3_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn joffset3(&mut self) -> JOFFSET3_W {
                JOFFSET3_W { w: self }
            }
        }
    }
    #[doc = "injected channel data offset register x\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [jofr4](jofr4) module"]
    pub type JOFR4 = crate::Reg<u32, _JOFR4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _JOFR4;
    #[doc = "`read()` method returns [jofr4::R](jofr4::R) reader structure"]
    impl crate::Readable for JOFR4 {}
    #[doc = "`write(|w| ..)` method takes [jofr4::W](jofr4::W) writer structure"]
    impl crate::Writable for JOFR4 {}
    #[doc = "injected channel data offset register x"]
    pub mod jofr4 {
        #[doc = "Reader of register JOFR4"]
        pub type R = crate::R<u32, super::JOFR4>;
        #[doc = "Writer for register JOFR4"]
        pub type W = crate::W<u32, super::JOFR4>;
        #[doc = "Register JOFR4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::JOFR4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `JOFFSET4`"]
        pub type JOFFSET4_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `JOFFSET4`"]
        pub struct JOFFSET4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JOFFSET4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn joffset4(&self) -> JOFFSET4_R {
                JOFFSET4_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for injected channel x"]
            #[inline(always)]
            pub fn joffset4(&mut self) -> JOFFSET4_W {
                JOFFSET4_W { w: self }
            }
        }
    }
    #[doc = "watchdog higher threshold register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [htr](htr) module"]
    pub type HTR = crate::Reg<u32, _HTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _HTR;
    #[doc = "`read()` method returns [htr::R](htr::R) reader structure"]
    impl crate::Readable for HTR {}
    #[doc = "`write(|w| ..)` method takes [htr::W](htr::W) writer structure"]
    impl crate::Writable for HTR {}
    #[doc = "watchdog higher threshold register"]
    pub mod htr {
        #[doc = "Reader of register HTR"]
        pub type R = crate::R<u32, super::HTR>;
        #[doc = "Writer for register HTR"]
        pub type W = crate::W<u32, super::HTR>;
        #[doc = "Register HTR `reset()`'s with value 0x0fff"]
        impl crate::ResetValue for super::HTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0fff
            }
        }
        #[doc = "Reader of field `HT`"]
        pub type HT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `HT`"]
        pub struct HT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Analog watchdog higher threshold"]
            #[inline(always)]
            pub fn ht(&self) -> HT_R {
                HT_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Analog watchdog higher threshold"]
            #[inline(always)]
            pub fn ht(&mut self) -> HT_W {
                HT_W { w: self }
            }
        }
    }
    #[doc = "watchdog lower threshold register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ltr](ltr) module"]
    pub type LTR = crate::Reg<u32, _LTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LTR;
    #[doc = "`read()` method returns [ltr::R](ltr::R) reader structure"]
    impl crate::Readable for LTR {}
    #[doc = "`write(|w| ..)` method takes [ltr::W](ltr::W) writer structure"]
    impl crate::Writable for LTR {}
    #[doc = "watchdog lower threshold register"]
    pub mod ltr {
        #[doc = "Reader of register LTR"]
        pub type R = crate::R<u32, super::LTR>;
        #[doc = "Writer for register LTR"]
        pub type W = crate::W<u32, super::LTR>;
        #[doc = "Register LTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::LTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LT`"]
        pub type LT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `LT`"]
        pub struct LT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Analog watchdog lower threshold"]
            #[inline(always)]
            pub fn lt(&self) -> LT_R {
                LT_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Analog watchdog lower threshold"]
            #[inline(always)]
            pub fn lt(&mut self) -> LT_W {
                LT_W { w: self }
            }
        }
    }
    #[doc = "regular sequence register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sqr1](sqr1) module"]
    pub type SQR1 = crate::Reg<u32, _SQR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SQR1;
    #[doc = "`read()` method returns [sqr1::R](sqr1::R) reader structure"]
    impl crate::Readable for SQR1 {}
    #[doc = "`write(|w| ..)` method takes [sqr1::W](sqr1::W) writer structure"]
    impl crate::Writable for SQR1 {}
    #[doc = "regular sequence register 1"]
    pub mod sqr1 {
        #[doc = "Reader of register SQR1"]
        pub type R = crate::R<u32, super::SQR1>;
        #[doc = "Writer for register SQR1"]
        pub type W = crate::W<u32, super::SQR1>;
        #[doc = "Register SQR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SQR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `L`"]
        pub type L_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `L`"]
        pub struct L_W<'a> {
            w: &'a mut W,
        }
        impl<'a> L_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `SQ28`"]
        pub type SQ28_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ28`"]
        pub struct SQ28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ28_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 15)) | (((value as u32) & 0x1f) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `SQ27`"]
        pub type SQ27_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ27`"]
        pub struct SQ27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ27_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 10)) | (((value as u32) & 0x1f) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `SQ26`"]
        pub type SQ26_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ26`"]
        pub struct SQ26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ26_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 5)) | (((value as u32) & 0x1f) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `SQ25`"]
        pub type SQ25_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ25`"]
        pub struct SQ25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ25_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:23 - Regular channel sequence length"]
            #[inline(always)]
            pub fn l(&self) -> L_R {
                L_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 15:19 - 28th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq28(&self) -> SQ28_R {
                SQ28_R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 27th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq27(&self) -> SQ27_R {
                SQ27_R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 26th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq26(&self) -> SQ26_R {
                SQ26_R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - 25th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq25(&self) -> SQ25_R {
                SQ25_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 20:23 - Regular channel sequence length"]
            #[inline(always)]
            pub fn l(&mut self) -> L_W {
                L_W { w: self }
            }
            #[doc = "Bits 15:19 - 28th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq28(&mut self) -> SQ28_W {
                SQ28_W { w: self }
            }
            #[doc = "Bits 10:14 - 27th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq27(&mut self) -> SQ27_W {
                SQ27_W { w: self }
            }
            #[doc = "Bits 5:9 - 26th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq26(&mut self) -> SQ26_W {
                SQ26_W { w: self }
            }
            #[doc = "Bits 0:4 - 25th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq25(&mut self) -> SQ25_W {
                SQ25_W { w: self }
            }
        }
    }
    #[doc = "regular sequence register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sqr2](sqr2) module"]
    pub type SQR2 = crate::Reg<u32, _SQR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SQR2;
    #[doc = "`read()` method returns [sqr2::R](sqr2::R) reader structure"]
    impl crate::Readable for SQR2 {}
    #[doc = "`write(|w| ..)` method takes [sqr2::W](sqr2::W) writer structure"]
    impl crate::Writable for SQR2 {}
    #[doc = "regular sequence register 2"]
    pub mod sqr2 {
        #[doc = "Reader of register SQR2"]
        pub type R = crate::R<u32, super::SQR2>;
        #[doc = "Writer for register SQR2"]
        pub type W = crate::W<u32, super::SQR2>;
        #[doc = "Register SQR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SQR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SQ24`"]
        pub type SQ24_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ24`"]
        pub struct SQ24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ24_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 25)) | (((value as u32) & 0x1f) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `SQ23`"]
        pub type SQ23_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ23`"]
        pub struct SQ23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ23_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 20)) | (((value as u32) & 0x1f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `SQ22`"]
        pub type SQ22_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ22`"]
        pub struct SQ22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ22_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 15)) | (((value as u32) & 0x1f) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `SQ21`"]
        pub type SQ21_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ21`"]
        pub struct SQ21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ21_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 10)) | (((value as u32) & 0x1f) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `SQ20`"]
        pub type SQ20_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ20`"]
        pub struct SQ20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ20_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 5)) | (((value as u32) & 0x1f) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `SQ19`"]
        pub type SQ19_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ19`"]
        pub struct SQ19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ19_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 25:29 - 24th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq24(&self) -> SQ24_R {
                SQ24_R::new(((self.bits >> 25) & 0x1f) as u8)
            }
            #[doc = "Bits 20:24 - 23rd conversion in regular sequence"]
            #[inline(always)]
            pub fn sq23(&self) -> SQ23_R {
                SQ23_R::new(((self.bits >> 20) & 0x1f) as u8)
            }
            #[doc = "Bits 15:19 - 22nd conversion in regular sequence"]
            #[inline(always)]
            pub fn sq22(&self) -> SQ22_R {
                SQ22_R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 21st conversion in regular sequence"]
            #[inline(always)]
            pub fn sq21(&self) -> SQ21_R {
                SQ21_R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 20th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq20(&self) -> SQ20_R {
                SQ20_R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - 19th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq19(&self) -> SQ19_R {
                SQ19_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 25:29 - 24th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq24(&mut self) -> SQ24_W {
                SQ24_W { w: self }
            }
            #[doc = "Bits 20:24 - 23rd conversion in regular sequence"]
            #[inline(always)]
            pub fn sq23(&mut self) -> SQ23_W {
                SQ23_W { w: self }
            }
            #[doc = "Bits 15:19 - 22nd conversion in regular sequence"]
            #[inline(always)]
            pub fn sq22(&mut self) -> SQ22_W {
                SQ22_W { w: self }
            }
            #[doc = "Bits 10:14 - 21st conversion in regular sequence"]
            #[inline(always)]
            pub fn sq21(&mut self) -> SQ21_W {
                SQ21_W { w: self }
            }
            #[doc = "Bits 5:9 - 20th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq20(&mut self) -> SQ20_W {
                SQ20_W { w: self }
            }
            #[doc = "Bits 0:4 - 19th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq19(&mut self) -> SQ19_W {
                SQ19_W { w: self }
            }
        }
    }
    #[doc = "regular sequence register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sqr3](sqr3) module"]
    pub type SQR3 = crate::Reg<u32, _SQR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SQR3;
    #[doc = "`read()` method returns [sqr3::R](sqr3::R) reader structure"]
    impl crate::Readable for SQR3 {}
    #[doc = "`write(|w| ..)` method takes [sqr3::W](sqr3::W) writer structure"]
    impl crate::Writable for SQR3 {}
    #[doc = "regular sequence register 3"]
    pub mod sqr3 {
        #[doc = "Reader of register SQR3"]
        pub type R = crate::R<u32, super::SQR3>;
        #[doc = "Writer for register SQR3"]
        pub type W = crate::W<u32, super::SQR3>;
        #[doc = "Register SQR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SQR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SQ18`"]
        pub type SQ18_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ18`"]
        pub struct SQ18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ18_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 25)) | (((value as u32) & 0x1f) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `SQ17`"]
        pub type SQ17_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ17`"]
        pub struct SQ17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ17_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 20)) | (((value as u32) & 0x1f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `SQ16`"]
        pub type SQ16_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ16`"]
        pub struct SQ16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ16_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 15)) | (((value as u32) & 0x1f) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `SQ15`"]
        pub type SQ15_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ15`"]
        pub struct SQ15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 10)) | (((value as u32) & 0x1f) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `SQ14`"]
        pub type SQ14_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ14`"]
        pub struct SQ14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 5)) | (((value as u32) & 0x1f) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `SQ13`"]
        pub type SQ13_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ13`"]
        pub struct SQ13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 25:29 - 18th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq18(&self) -> SQ18_R {
                SQ18_R::new(((self.bits >> 25) & 0x1f) as u8)
            }
            #[doc = "Bits 20:24 - 17th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq17(&self) -> SQ17_R {
                SQ17_R::new(((self.bits >> 20) & 0x1f) as u8)
            }
            #[doc = "Bits 15:19 - 16th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq16(&self) -> SQ16_R {
                SQ16_R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 15th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq15(&self) -> SQ15_R {
                SQ15_R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 14th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq14(&self) -> SQ14_R {
                SQ14_R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - 13th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq13(&self) -> SQ13_R {
                SQ13_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 25:29 - 18th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq18(&mut self) -> SQ18_W {
                SQ18_W { w: self }
            }
            #[doc = "Bits 20:24 - 17th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq17(&mut self) -> SQ17_W {
                SQ17_W { w: self }
            }
            #[doc = "Bits 15:19 - 16th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq16(&mut self) -> SQ16_W {
                SQ16_W { w: self }
            }
            #[doc = "Bits 10:14 - 15th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq15(&mut self) -> SQ15_W {
                SQ15_W { w: self }
            }
            #[doc = "Bits 5:9 - 14th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq14(&mut self) -> SQ14_W {
                SQ14_W { w: self }
            }
            #[doc = "Bits 0:4 - 13th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq13(&mut self) -> SQ13_W {
                SQ13_W { w: self }
            }
        }
    }
    #[doc = "regular sequence register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sqr4](sqr4) module"]
    pub type SQR4 = crate::Reg<u32, _SQR4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SQR4;
    #[doc = "`read()` method returns [sqr4::R](sqr4::R) reader structure"]
    impl crate::Readable for SQR4 {}
    #[doc = "`write(|w| ..)` method takes [sqr4::W](sqr4::W) writer structure"]
    impl crate::Writable for SQR4 {}
    #[doc = "regular sequence register 4"]
    pub mod sqr4 {
        #[doc = "Reader of register SQR4"]
        pub type R = crate::R<u32, super::SQR4>;
        #[doc = "Writer for register SQR4"]
        pub type W = crate::W<u32, super::SQR4>;
        #[doc = "Register SQR4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SQR4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SQ12`"]
        pub type SQ12_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ12`"]
        pub struct SQ12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 25)) | (((value as u32) & 0x1f) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `SQ11`"]
        pub type SQ11_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ11`"]
        pub struct SQ11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 20)) | (((value as u32) & 0x1f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `SQ10`"]
        pub type SQ10_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ10`"]
        pub struct SQ10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 15)) | (((value as u32) & 0x1f) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `SQ9`"]
        pub type SQ9_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ9`"]
        pub struct SQ9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 10)) | (((value as u32) & 0x1f) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `SQ8`"]
        pub type SQ8_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ8`"]
        pub struct SQ8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 5)) | (((value as u32) & 0x1f) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `SQ7`"]
        pub type SQ7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ7`"]
        pub struct SQ7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 25:29 - 12th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq12(&self) -> SQ12_R {
                SQ12_R::new(((self.bits >> 25) & 0x1f) as u8)
            }
            #[doc = "Bits 20:24 - 11th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq11(&self) -> SQ11_R {
                SQ11_R::new(((self.bits >> 20) & 0x1f) as u8)
            }
            #[doc = "Bits 15:19 - 10th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq10(&self) -> SQ10_R {
                SQ10_R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 9th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq9(&self) -> SQ9_R {
                SQ9_R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 8th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq8(&self) -> SQ8_R {
                SQ8_R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - 7th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq7(&self) -> SQ7_R {
                SQ7_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 25:29 - 12th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq12(&mut self) -> SQ12_W {
                SQ12_W { w: self }
            }
            #[doc = "Bits 20:24 - 11th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq11(&mut self) -> SQ11_W {
                SQ11_W { w: self }
            }
            #[doc = "Bits 15:19 - 10th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq10(&mut self) -> SQ10_W {
                SQ10_W { w: self }
            }
            #[doc = "Bits 10:14 - 9th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq9(&mut self) -> SQ9_W {
                SQ9_W { w: self }
            }
            #[doc = "Bits 5:9 - 8th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq8(&mut self) -> SQ8_W {
                SQ8_W { w: self }
            }
            #[doc = "Bits 0:4 - 7th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq7(&mut self) -> SQ7_W {
                SQ7_W { w: self }
            }
        }
    }
    #[doc = "regular sequence register 5\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sqr5](sqr5) module"]
    pub type SQR5 = crate::Reg<u32, _SQR5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SQR5;
    #[doc = "`read()` method returns [sqr5::R](sqr5::R) reader structure"]
    impl crate::Readable for SQR5 {}
    #[doc = "`write(|w| ..)` method takes [sqr5::W](sqr5::W) writer structure"]
    impl crate::Writable for SQR5 {}
    #[doc = "regular sequence register 5"]
    pub mod sqr5 {
        #[doc = "Reader of register SQR5"]
        pub type R = crate::R<u32, super::SQR5>;
        #[doc = "Writer for register SQR5"]
        pub type W = crate::W<u32, super::SQR5>;
        #[doc = "Register SQR5 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SQR5 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SQ6`"]
        pub type SQ6_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ6`"]
        pub struct SQ6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 25)) | (((value as u32) & 0x1f) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `SQ5`"]
        pub type SQ5_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ5`"]
        pub struct SQ5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 20)) | (((value as u32) & 0x1f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `SQ4`"]
        pub type SQ4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ4`"]
        pub struct SQ4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 15)) | (((value as u32) & 0x1f) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `SQ3`"]
        pub type SQ3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ3`"]
        pub struct SQ3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 10)) | (((value as u32) & 0x1f) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `SQ2`"]
        pub type SQ2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ2`"]
        pub struct SQ2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 5)) | (((value as u32) & 0x1f) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `SQ1`"]
        pub type SQ1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ1`"]
        pub struct SQ1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 25:29 - 6th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq6(&self) -> SQ6_R {
                SQ6_R::new(((self.bits >> 25) & 0x1f) as u8)
            }
            #[doc = "Bits 20:24 - 5th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq5(&self) -> SQ5_R {
                SQ5_R::new(((self.bits >> 20) & 0x1f) as u8)
            }
            #[doc = "Bits 15:19 - 4th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq4(&self) -> SQ4_R {
                SQ4_R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 3rd conversion in regular sequence"]
            #[inline(always)]
            pub fn sq3(&self) -> SQ3_R {
                SQ3_R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 2nd conversion in regular sequence"]
            #[inline(always)]
            pub fn sq2(&self) -> SQ2_R {
                SQ2_R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - 1st conversion in regular sequence"]
            #[inline(always)]
            pub fn sq1(&self) -> SQ1_R {
                SQ1_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 25:29 - 6th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq6(&mut self) -> SQ6_W {
                SQ6_W { w: self }
            }
            #[doc = "Bits 20:24 - 5th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq5(&mut self) -> SQ5_W {
                SQ5_W { w: self }
            }
            #[doc = "Bits 15:19 - 4th conversion in regular sequence"]
            #[inline(always)]
            pub fn sq4(&mut self) -> SQ4_W {
                SQ4_W { w: self }
            }
            #[doc = "Bits 10:14 - 3rd conversion in regular sequence"]
            #[inline(always)]
            pub fn sq3(&mut self) -> SQ3_W {
                SQ3_W { w: self }
            }
            #[doc = "Bits 5:9 - 2nd conversion in regular sequence"]
            #[inline(always)]
            pub fn sq2(&mut self) -> SQ2_W {
                SQ2_W { w: self }
            }
            #[doc = "Bits 0:4 - 1st conversion in regular sequence"]
            #[inline(always)]
            pub fn sq1(&mut self) -> SQ1_W {
                SQ1_W { w: self }
            }
        }
    }
    #[doc = "injected sequence register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [jsqr](jsqr) module"]
    pub type JSQR = crate::Reg<u32, _JSQR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _JSQR;
    #[doc = "`read()` method returns [jsqr::R](jsqr::R) reader structure"]
    impl crate::Readable for JSQR {}
    #[doc = "`write(|w| ..)` method takes [jsqr::W](jsqr::W) writer structure"]
    impl crate::Writable for JSQR {}
    #[doc = "injected sequence register"]
    pub mod jsqr {
        #[doc = "Reader of register JSQR"]
        pub type R = crate::R<u32, super::JSQR>;
        #[doc = "Writer for register JSQR"]
        pub type W = crate::W<u32, super::JSQR>;
        #[doc = "Register JSQR `reset()`'s with value 0"]
        impl crate::ResetValue for super::JSQR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `JL`"]
        pub type JL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `JL`"]
        pub struct JL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `JSQ4`"]
        pub type JSQ4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `JSQ4`"]
        pub struct JSQ4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JSQ4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 15)) | (((value as u32) & 0x1f) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `JSQ3`"]
        pub type JSQ3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `JSQ3`"]
        pub struct JSQ3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JSQ3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 10)) | (((value as u32) & 0x1f) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `JSQ2`"]
        pub type JSQ2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `JSQ2`"]
        pub struct JSQ2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JSQ2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 5)) | (((value as u32) & 0x1f) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `JSQ1`"]
        pub type JSQ1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `JSQ1`"]
        pub struct JSQ1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JSQ1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:21 - Injected sequence length"]
            #[inline(always)]
            pub fn jl(&self) -> JL_R {
                JL_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 15:19 - 4th conversion in injected sequence"]
            #[inline(always)]
            pub fn jsq4(&self) -> JSQ4_R {
                JSQ4_R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 3rd conversion in injected sequence"]
            #[inline(always)]
            pub fn jsq3(&self) -> JSQ3_R {
                JSQ3_R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 2nd conversion in injected sequence"]
            #[inline(always)]
            pub fn jsq2(&self) -> JSQ2_R {
                JSQ2_R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - 1st conversion in injected sequence"]
            #[inline(always)]
            pub fn jsq1(&self) -> JSQ1_R {
                JSQ1_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 20:21 - Injected sequence length"]
            #[inline(always)]
            pub fn jl(&mut self) -> JL_W {
                JL_W { w: self }
            }
            #[doc = "Bits 15:19 - 4th conversion in injected sequence"]
            #[inline(always)]
            pub fn jsq4(&mut self) -> JSQ4_W {
                JSQ4_W { w: self }
            }
            #[doc = "Bits 10:14 - 3rd conversion in injected sequence"]
            #[inline(always)]
            pub fn jsq3(&mut self) -> JSQ3_W {
                JSQ3_W { w: self }
            }
            #[doc = "Bits 5:9 - 2nd conversion in injected sequence"]
            #[inline(always)]
            pub fn jsq2(&mut self) -> JSQ2_W {
                JSQ2_W { w: self }
            }
            #[doc = "Bits 0:4 - 1st conversion in injected sequence"]
            #[inline(always)]
            pub fn jsq1(&mut self) -> JSQ1_W {
                JSQ1_W { w: self }
            }
        }
    }
    #[doc = "injected data register x\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [jdr1](jdr1) module"]
    pub type JDR1 = crate::Reg<u32, _JDR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _JDR1;
    #[doc = "`read()` method returns [jdr1::R](jdr1::R) reader structure"]
    impl crate::Readable for JDR1 {}
    #[doc = "injected data register x"]
    pub mod jdr1 {
        #[doc = "Reader of register JDR1"]
        pub type R = crate::R<u32, super::JDR1>;
        #[doc = "Reader of field `JDATA`"]
        pub type JDATA_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Injected data"]
            #[inline(always)]
            pub fn jdata(&self) -> JDATA_R {
                JDATA_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "injected data register x\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [jdr2](jdr2) module"]
    pub type JDR2 = crate::Reg<u32, _JDR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _JDR2;
    #[doc = "`read()` method returns [jdr2::R](jdr2::R) reader structure"]
    impl crate::Readable for JDR2 {}
    #[doc = "injected data register x"]
    pub mod jdr2 {
        #[doc = "Reader of register JDR2"]
        pub type R = crate::R<u32, super::JDR2>;
        #[doc = "Reader of field `JDATA`"]
        pub type JDATA_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Injected data"]
            #[inline(always)]
            pub fn jdata(&self) -> JDATA_R {
                JDATA_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "injected data register x\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [jdr3](jdr3) module"]
    pub type JDR3 = crate::Reg<u32, _JDR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _JDR3;
    #[doc = "`read()` method returns [jdr3::R](jdr3::R) reader structure"]
    impl crate::Readable for JDR3 {}
    #[doc = "injected data register x"]
    pub mod jdr3 {
        #[doc = "Reader of register JDR3"]
        pub type R = crate::R<u32, super::JDR3>;
        #[doc = "Reader of field `JDATA`"]
        pub type JDATA_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Injected data"]
            #[inline(always)]
            pub fn jdata(&self) -> JDATA_R {
                JDATA_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "injected data register x\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [jdr4](jdr4) module"]
    pub type JDR4 = crate::Reg<u32, _JDR4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _JDR4;
    #[doc = "`read()` method returns [jdr4::R](jdr4::R) reader structure"]
    impl crate::Readable for JDR4 {}
    #[doc = "injected data register x"]
    pub mod jdr4 {
        #[doc = "Reader of register JDR4"]
        pub type R = crate::R<u32, super::JDR4>;
        #[doc = "Reader of field `JDATA`"]
        pub type JDATA_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Injected data"]
            #[inline(always)]
            pub fn jdata(&self) -> JDATA_R {
                JDATA_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "regular data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "regular data register"]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Reader of field `RegularDATA`"]
        pub type REGULARDATA_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Regular data"]
            #[inline(always)]
            pub fn regular_data(&self) -> REGULARDATA_R {
                REGULARDATA_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "sample time register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smpr0](smpr0) module"]
    pub type SMPR0 = crate::Reg<u32, _SMPR0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPR0;
    #[doc = "`read()` method returns [smpr0::R](smpr0::R) reader structure"]
    impl crate::Readable for SMPR0 {}
    #[doc = "`write(|w| ..)` method takes [smpr0::W](smpr0::W) writer structure"]
    impl crate::Writable for SMPR0 {}
    #[doc = "sample time register 0"]
    pub mod smpr0 {
        #[doc = "Reader of register SMPR0"]
        pub type R = crate::R<u32, super::SMPR0>;
        #[doc = "Writer for register SMPR0"]
        pub type W = crate::W<u32, super::SMPR0>;
        #[doc = "Register SMPR0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMPR0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SMP`"]
        pub type SMP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SMP`"]
        pub struct SMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - Channel Sample time selection"]
            #[inline(always)]
            pub fn smp(&self) -> SMP_R {
                SMP_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - Channel Sample time selection"]
            #[inline(always)]
            pub fn smp(&mut self) -> SMP_W {
                SMP_W { w: self }
            }
        }
    }
    #[doc = "ADC common status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr](csr) module"]
    pub type CSR = crate::Reg<u32, _CSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CSR;
    #[doc = "`read()` method returns [csr::R](csr::R) reader structure"]
    impl crate::Readable for CSR {}
    #[doc = "ADC common status register"]
    pub mod csr {
        #[doc = "Reader of register CSR"]
        pub type R = crate::R<u32, super::CSR>;
        #[doc = "Reader of field `AWD1`"]
        pub type AWD1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EOC1`"]
        pub type EOC1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `JEOC1`"]
        pub type JEOC1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `JSTRT1`"]
        pub type JSTRT1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `STRT1`"]
        pub type STRT1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `OVR1`"]
        pub type OVR1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ADONS1`"]
        pub type ADONS1_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - Analog watchdog flag of the ADC"]
            #[inline(always)]
            pub fn awd1(&self) -> AWD1_R {
                AWD1_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - End of conversion of the ADC"]
            #[inline(always)]
            pub fn eoc1(&self) -> EOC1_R {
                EOC1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Injected channel end of conversion of the ADC"]
            #[inline(always)]
            pub fn jeoc1(&self) -> JEOC1_R {
                JEOC1_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Injected channel Start flag of the ADC"]
            #[inline(always)]
            pub fn jstrt1(&self) -> JSTRT1_R {
                JSTRT1_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Regular channel Start flag of the ADC"]
            #[inline(always)]
            pub fn strt1(&self) -> STRT1_R {
                STRT1_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Overrun flag of the ADC"]
            #[inline(always)]
            pub fn ovr1(&self) -> OVR1_R {
                OVR1_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - ADON Status of ADC1"]
            #[inline(always)]
            pub fn adons1(&self) -> ADONS1_R {
                ADONS1_R::new(((self.bits >> 6) & 0x01) != 0)
            }
        }
    }
    #[doc = "ADC common control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr](ccr) module"]
    pub type CCR = crate::Reg<u32, _CCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR;
    #[doc = "`read()` method returns [ccr::R](ccr::R) reader structure"]
    impl crate::Readable for CCR {}
    #[doc = "`write(|w| ..)` method takes [ccr::W](ccr::W) writer structure"]
    impl crate::Writable for CCR {}
    #[doc = "ADC common control register"]
    pub mod ccr {
        #[doc = "Reader of register CCR"]
        pub type R = crate::R<u32, super::CCR>;
        #[doc = "Writer for register CCR"]
        pub type W = crate::W<u32, super::CCR>;
        #[doc = "Register CCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADCPRE`"]
        pub type ADCPRE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADCPRE`"]
        pub struct ADCPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCPRE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `TSVREFE`"]
        pub type TSVREFE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSVREFE`"]
        pub struct TSVREFE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSVREFE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:17 - ADC prescaler"]
            #[inline(always)]
            pub fn adcpre(&self) -> ADCPRE_R {
                ADCPRE_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bit 23 - Temperature sensor and VREFINT enable"]
            #[inline(always)]
            pub fn tsvrefe(&self) -> TSVREFE_R {
                TSVREFE_R::new(((self.bits >> 23) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 16:17 - ADC prescaler"]
            #[inline(always)]
            pub fn adcpre(&mut self) -> ADCPRE_W {
                ADCPRE_W { w: self }
            }
            #[doc = "Bit 23 - Temperature sensor and VREFINT enable"]
            #[inline(always)]
            pub fn tsvrefe(&mut self) -> TSVREFE_W {
                TSVREFE_W { w: self }
            }
        }
    }
}
#[doc = "debug support"]
pub struct DBGMCU {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DBGMCU {}
impl DBGMCU {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dbgmcu::RegisterBlock {
        0xe004_2000 as *const _
    }
}
impl Deref for DBGMCU {
    type Target = dbgmcu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*DBGMCU::ptr() }
    }
}
#[doc = "debug support"]
pub mod dbgmcu {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - DBGMCU_IDCODE"]
        pub idcode: IDCODE,
        #[doc = "0x04 - Debug MCU configuration register"]
        pub cr: CR,
        #[doc = "0x08 - Debug MCU APB1 freeze register1"]
        pub apb1_fz: APB1_FZ,
        #[doc = "0x0c - Debug MCU APB1 freeze register 2"]
        pub apb2_fz: APB2_FZ,
    }
    #[doc = "DBGMCU_IDCODE\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idcode](idcode) module"]
    pub type IDCODE = crate::Reg<u32, _IDCODE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IDCODE;
    #[doc = "`read()` method returns [idcode::R](idcode::R) reader structure"]
    impl crate::Readable for IDCODE {}
    #[doc = "DBGMCU_IDCODE"]
    pub mod idcode {
        #[doc = "Reader of register IDCODE"]
        pub type R = crate::R<u32, super::IDCODE>;
        #[doc = "Reader of field `DEV_ID`"]
        pub type DEV_ID_R = crate::R<u16, u16>;
        #[doc = "Reader of field `REV_ID`"]
        pub type REV_ID_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:11 - Device identifier"]
            #[inline(always)]
            pub fn dev_id(&self) -> DEV_ID_R {
                DEV_ID_R::new((self.bits & 0x0fff) as u16)
            }
            #[doc = "Bits 16:31 - Revision identifie"]
            #[inline(always)]
            pub fn rev_id(&self) -> REV_ID_R {
                REV_ID_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
    }
    #[doc = "Debug MCU configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Debug MCU configuration register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBG_SLEEP`"]
        pub type DBG_SLEEP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_SLEEP`"]
        pub struct DBG_SLEEP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_SLEEP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_STOP`"]
        pub type DBG_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_STOP`"]
        pub struct DBG_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_STANDBY`"]
        pub type DBG_STANDBY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_STANDBY`"]
        pub struct DBG_STANDBY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_STANDBY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TRACE_IOEN`"]
        pub type TRACE_IOEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TRACE_IOEN`"]
        pub struct TRACE_IOEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRACE_IOEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TRACE_MODE`"]
        pub type TRACE_MODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TRACE_MODE`"]
        pub struct TRACE_MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRACE_MODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Debug Sleep mode"]
            #[inline(always)]
            pub fn dbg_sleep(&self) -> DBG_SLEEP_R {
                DBG_SLEEP_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Debug Stop mode"]
            #[inline(always)]
            pub fn dbg_stop(&self) -> DBG_STOP_R {
                DBG_STOP_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Debug Standby mode"]
            #[inline(always)]
            pub fn dbg_standby(&self) -> DBG_STANDBY_R {
                DBG_STANDBY_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Trace pin assignment control"]
            #[inline(always)]
            pub fn trace_ioen(&self) -> TRACE_IOEN_R {
                TRACE_IOEN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bits 6:7 - Trace pin assignment control"]
            #[inline(always)]
            pub fn trace_mode(&self) -> TRACE_MODE_R {
                TRACE_MODE_R::new(((self.bits >> 6) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Debug Sleep mode"]
            #[inline(always)]
            pub fn dbg_sleep(&mut self) -> DBG_SLEEP_W {
                DBG_SLEEP_W { w: self }
            }
            #[doc = "Bit 1 - Debug Stop mode"]
            #[inline(always)]
            pub fn dbg_stop(&mut self) -> DBG_STOP_W {
                DBG_STOP_W { w: self }
            }
            #[doc = "Bit 2 - Debug Standby mode"]
            #[inline(always)]
            pub fn dbg_standby(&mut self) -> DBG_STANDBY_W {
                DBG_STANDBY_W { w: self }
            }
            #[doc = "Bit 5 - Trace pin assignment control"]
            #[inline(always)]
            pub fn trace_ioen(&mut self) -> TRACE_IOEN_W {
                TRACE_IOEN_W { w: self }
            }
            #[doc = "Bits 6:7 - Trace pin assignment control"]
            #[inline(always)]
            pub fn trace_mode(&mut self) -> TRACE_MODE_W {
                TRACE_MODE_W { w: self }
            }
        }
    }
    #[doc = "Debug MCU APB1 freeze register1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb1_fz](apb1_fz) module"]
    pub type APB1_FZ = crate::Reg<u32, _APB1_FZ>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB1_FZ;
    #[doc = "`read()` method returns [apb1_fz::R](apb1_fz::R) reader structure"]
    impl crate::Readable for APB1_FZ {}
    #[doc = "`write(|w| ..)` method takes [apb1_fz::W](apb1_fz::W) writer structure"]
    impl crate::Writable for APB1_FZ {}
    #[doc = "Debug MCU APB1 freeze register1"]
    pub mod apb1_fz {
        #[doc = "Reader of register APB1_FZ"]
        pub type R = crate::R<u32, super::APB1_FZ>;
        #[doc = "Writer for register APB1_FZ"]
        pub type W = crate::W<u32, super::APB1_FZ>;
        #[doc = "Register APB1_FZ `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB1_FZ {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBG_TIM2_STOP`"]
        pub type DBG_TIM2_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM2_STOP`"]
        pub struct DBG_TIM2_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM2_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM3_STOP`"]
        pub type DBG_TIM3_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM3_STOP`"]
        pub struct DBG_TIM3_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM3_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM4_STOP`"]
        pub type DBG_TIM4_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM4_STOP`"]
        pub struct DBG_TIM4_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM4_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM5_STOP`"]
        pub type DBG_TIM5_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM5_STOP`"]
        pub struct DBG_TIM5_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM5_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM6_STOP`"]
        pub type DBG_TIM6_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM6_STOP`"]
        pub struct DBG_TIM6_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM6_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM7_STOP`"]
        pub type DBG_TIM7_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM7_STOP`"]
        pub struct DBG_TIM7_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM7_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_RTC_STOP`"]
        pub type DBG_RTC_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_RTC_STOP`"]
        pub struct DBG_RTC_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_RTC_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_WWDG_STOP`"]
        pub type DBG_WWDG_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_WWDG_STOP`"]
        pub struct DBG_WWDG_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_WWDG_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_IWDG_STOP`"]
        pub type DBG_IWDG_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_IWDG_STOP`"]
        pub struct DBG_IWDG_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_IWDG_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_I2C1_SMBUS_TIMEOUT`"]
        pub type DBG_I2C1_SMBUS_TIMEOUT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_I2C1_SMBUS_TIMEOUT`"]
        pub struct DBG_I2C1_SMBUS_TIMEOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_I2C1_SMBUS_TIMEOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_I2C2_SMBUS_TIMEOUT`"]
        pub type DBG_I2C2_SMBUS_TIMEOUT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_I2C2_SMBUS_TIMEOUT`"]
        pub struct DBG_I2C2_SMBUS_TIMEOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_I2C2_SMBUS_TIMEOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - TIM2 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim2_stop(&self) -> DBG_TIM2_STOP_R {
                DBG_TIM2_STOP_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - TIM3 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim3_stop(&self) -> DBG_TIM3_STOP_R {
                DBG_TIM3_STOP_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - TIM4 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim4_stop(&self) -> DBG_TIM4_STOP_R {
                DBG_TIM4_STOP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TIM5 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim5_stop(&self) -> DBG_TIM5_STOP_R {
                DBG_TIM5_STOP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TIM6 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim6_stop(&self) -> DBG_TIM6_STOP_R {
                DBG_TIM6_STOP_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TIM7 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim7_stop(&self) -> DBG_TIM7_STOP_R {
                DBG_TIM7_STOP_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Debug RTC stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_rtc_stop(&self) -> DBG_RTC_STOP_R {
                DBG_RTC_STOP_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Debug window watchdog stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_wwdg_stop(&self) -> DBG_WWDG_STOP_R {
                DBG_WWDG_STOP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Debug independent watchdog stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_iwdg_stop(&self) -> DBG_IWDG_STOP_R {
                DBG_IWDG_STOP_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 21 - SMBUS timeout mode stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_i2c1_smbus_timeout(&self) -> DBG_I2C1_SMBUS_TIMEOUT_R {
                DBG_I2C1_SMBUS_TIMEOUT_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - SMBUS timeout mode stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_i2c2_smbus_timeout(&self) -> DBG_I2C2_SMBUS_TIMEOUT_R {
                DBG_I2C2_SMBUS_TIMEOUT_R::new(((self.bits >> 22) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - TIM2 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim2_stop(&mut self) -> DBG_TIM2_STOP_W {
                DBG_TIM2_STOP_W { w: self }
            }
            #[doc = "Bit 1 - TIM3 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim3_stop(&mut self) -> DBG_TIM3_STOP_W {
                DBG_TIM3_STOP_W { w: self }
            }
            #[doc = "Bit 2 - TIM4 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim4_stop(&mut self) -> DBG_TIM4_STOP_W {
                DBG_TIM4_STOP_W { w: self }
            }
            #[doc = "Bit 3 - TIM5 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim5_stop(&mut self) -> DBG_TIM5_STOP_W {
                DBG_TIM5_STOP_W { w: self }
            }
            #[doc = "Bit 4 - TIM6 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim6_stop(&mut self) -> DBG_TIM6_STOP_W {
                DBG_TIM6_STOP_W { w: self }
            }
            #[doc = "Bit 5 - TIM7 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim7_stop(&mut self) -> DBG_TIM7_STOP_W {
                DBG_TIM7_STOP_W { w: self }
            }
            #[doc = "Bit 10 - Debug RTC stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_rtc_stop(&mut self) -> DBG_RTC_STOP_W {
                DBG_RTC_STOP_W { w: self }
            }
            #[doc = "Bit 11 - Debug window watchdog stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_wwdg_stop(&mut self) -> DBG_WWDG_STOP_W {
                DBG_WWDG_STOP_W { w: self }
            }
            #[doc = "Bit 12 - Debug independent watchdog stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_iwdg_stop(&mut self) -> DBG_IWDG_STOP_W {
                DBG_IWDG_STOP_W { w: self }
            }
            #[doc = "Bit 21 - SMBUS timeout mode stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_i2c1_smbus_timeout(&mut self) -> DBG_I2C1_SMBUS_TIMEOUT_W {
                DBG_I2C1_SMBUS_TIMEOUT_W { w: self }
            }
            #[doc = "Bit 22 - SMBUS timeout mode stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_i2c2_smbus_timeout(&mut self) -> DBG_I2C2_SMBUS_TIMEOUT_W {
                DBG_I2C2_SMBUS_TIMEOUT_W { w: self }
            }
        }
    }
    #[doc = "Debug MCU APB1 freeze register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb2_fz](apb2_fz) module"]
    pub type APB2_FZ = crate::Reg<u32, _APB2_FZ>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB2_FZ;
    #[doc = "`read()` method returns [apb2_fz::R](apb2_fz::R) reader structure"]
    impl crate::Readable for APB2_FZ {}
    #[doc = "`write(|w| ..)` method takes [apb2_fz::W](apb2_fz::W) writer structure"]
    impl crate::Writable for APB2_FZ {}
    #[doc = "Debug MCU APB1 freeze register 2"]
    pub mod apb2_fz {
        #[doc = "Reader of register APB2_FZ"]
        pub type R = crate::R<u32, super::APB2_FZ>;
        #[doc = "Writer for register APB2_FZ"]
        pub type W = crate::W<u32, super::APB2_FZ>;
        #[doc = "Register APB2_FZ `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB2_FZ {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBG_TIM9_STOP`"]
        pub type DBG_TIM9_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM9_STOP`"]
        pub struct DBG_TIM9_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM9_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM10_STOP`"]
        pub type DBG_TIM10_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM10_STOP`"]
        pub struct DBG_TIM10_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM10_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM11_STOP`"]
        pub type DBG_TIM11_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM11_STOP`"]
        pub struct DBG_TIM11_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM11_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - TIM counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim9_stop(&self) -> DBG_TIM9_STOP_R {
                DBG_TIM9_STOP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TIM counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim10_stop(&self) -> DBG_TIM10_STOP_R {
                DBG_TIM10_STOP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TIM counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim11_stop(&self) -> DBG_TIM11_STOP_R {
                DBG_TIM11_STOP_R::new(((self.bits >> 4) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - TIM counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim9_stop(&mut self) -> DBG_TIM9_STOP_W {
                DBG_TIM9_STOP_W { w: self }
            }
            #[doc = "Bit 3 - TIM counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim10_stop(&mut self) -> DBG_TIM10_STOP_W {
                DBG_TIM10_STOP_W { w: self }
            }
            #[doc = "Bit 4 - TIM counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim11_stop(&mut self) -> DBG_TIM11_STOP_W {
                DBG_TIM11_STOP_W { w: self }
            }
        }
    }
}
#[doc = "System control block ACTLR"]
pub struct SCB_ACTRL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SCB_ACTRL {}
impl SCB_ACTRL {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const scb_actrl::RegisterBlock {
        0xe000_e008 as *const _
    }
}
impl Deref for SCB_ACTRL {
    type Target = scb_actrl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SCB_ACTRL::ptr() }
    }
}
#[doc = "System control block ACTLR"]
pub mod scb_actrl {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Auxiliary control register"]
        pub actrl: ACTRL,
    }
    #[doc = "Auxiliary control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [actrl](actrl) module"]
    pub type ACTRL = crate::Reg<u32, _ACTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ACTRL;
    #[doc = "`read()` method returns [actrl::R](actrl::R) reader structure"]
    impl crate::Readable for ACTRL {}
    #[doc = "`write(|w| ..)` method takes [actrl::W](actrl::W) writer structure"]
    impl crate::Writable for ACTRL {}
    #[doc = "Auxiliary control register"]
    pub mod actrl {
        #[doc = "Reader of register ACTRL"]
        pub type R = crate::R<u32, super::ACTRL>;
        #[doc = "Writer for register ACTRL"]
        pub type W = crate::W<u32, super::ACTRL>;
        #[doc = "Register ACTRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::ACTRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DISFOLD`"]
        pub type DISFOLD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DISFOLD`"]
        pub struct DISFOLD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISFOLD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `FPEXCODIS`"]
        pub type FPEXCODIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FPEXCODIS`"]
        pub struct FPEXCODIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPEXCODIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `DISRAMODE`"]
        pub type DISRAMODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DISRAMODE`"]
        pub struct DISRAMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISRAMODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `DISITMATBFLUSH`"]
        pub type DISITMATBFLUSH_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DISITMATBFLUSH`"]
        pub struct DISITMATBFLUSH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISITMATBFLUSH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - DISFOLD"]
            #[inline(always)]
            pub fn disfold(&self) -> DISFOLD_R {
                DISFOLD_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 10 - FPEXCODIS"]
            #[inline(always)]
            pub fn fpexcodis(&self) -> FPEXCODIS_R {
                FPEXCODIS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - DISRAMODE"]
            #[inline(always)]
            pub fn disramode(&self) -> DISRAMODE_R {
                DISRAMODE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - DISITMATBFLUSH"]
            #[inline(always)]
            pub fn disitmatbflush(&self) -> DISITMATBFLUSH_R {
                DISITMATBFLUSH_R::new(((self.bits >> 12) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - DISFOLD"]
            #[inline(always)]
            pub fn disfold(&mut self) -> DISFOLD_W {
                DISFOLD_W { w: self }
            }
            #[doc = "Bit 10 - FPEXCODIS"]
            #[inline(always)]
            pub fn fpexcodis(&mut self) -> FPEXCODIS_W {
                FPEXCODIS_W { w: self }
            }
            #[doc = "Bit 11 - DISRAMODE"]
            #[inline(always)]
            pub fn disramode(&mut self) -> DISRAMODE_W {
                DISRAMODE_W { w: self }
            }
            #[doc = "Bit 12 - DISITMATBFLUSH"]
            #[inline(always)]
            pub fn disitmatbflush(&mut self) -> DISITMATBFLUSH_W {
                DISITMATBFLUSH_W { w: self }
            }
        }
    }
}
#[doc = "Nested vectored interrupt controller"]
pub struct NVIC_STIR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for NVIC_STIR {}
impl NVIC_STIR {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const nvic_stir::RegisterBlock {
        0xe000_ef00 as *const _
    }
}
impl Deref for NVIC_STIR {
    type Target = nvic_stir::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*NVIC_STIR::ptr() }
    }
}
#[doc = "Nested vectored interrupt controller"]
pub mod nvic_stir {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Software trigger interrupt register"]
        pub stir: STIR,
    }
    #[doc = "Software trigger interrupt register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stir](stir) module"]
    pub type STIR = crate::Reg<u32, _STIR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STIR;
    #[doc = "`read()` method returns [stir::R](stir::R) reader structure"]
    impl crate::Readable for STIR {}
    #[doc = "`write(|w| ..)` method takes [stir::W](stir::W) writer structure"]
    impl crate::Writable for STIR {}
    #[doc = "Software trigger interrupt register"]
    pub mod stir {
        #[doc = "Reader of register STIR"]
        pub type R = crate::R<u32, super::STIR>;
        #[doc = "Writer for register STIR"]
        pub type W = crate::W<u32, super::STIR>;
        #[doc = "Register STIR `reset()`'s with value 0"]
        impl crate::ResetValue for super::STIR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `INTID`"]
        pub type INTID_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `INTID`"]
        pub struct INTID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01ff) | ((value as u32) & 0x01ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:8 - Software generated interrupt ID"]
            #[inline(always)]
            pub fn intid(&self) -> INTID_R {
                INTID_R::new((self.bits & 0x01ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:8 - Software generated interrupt ID"]
            #[inline(always)]
            pub fn intid(&mut self) -> INTID_W {
                INTID_W { w: self }
            }
        }
    }
}
#[doc = "SysTick timer"]
pub struct STK {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for STK {}
impl STK {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const stk::RegisterBlock {
        0xe000_e010 as *const _
    }
}
impl Deref for STK {
    type Target = stk::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*STK::ptr() }
    }
}
#[doc = "SysTick timer"]
pub mod stk {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - SysTick control and status register"]
        pub ctrl: CTRL,
        #[doc = "0x04 - SysTick reload value register"]
        pub load_: LOAD_,
        #[doc = "0x08 - SysTick current value register"]
        pub val: VAL,
        #[doc = "0x0c - SysTick calibration value register"]
        pub calib: CALIB,
    }
    #[doc = "SysTick control and status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctrl](ctrl) module"]
    pub type CTRL = crate::Reg<u32, _CTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTRL;
    #[doc = "`read()` method returns [ctrl::R](ctrl::R) reader structure"]
    impl crate::Readable for CTRL {}
    #[doc = "`write(|w| ..)` method takes [ctrl::W](ctrl::W) writer structure"]
    impl crate::Writable for CTRL {}
    #[doc = "SysTick control and status register"]
    pub mod ctrl {
        #[doc = "Reader of register CTRL"]
        pub type R = crate::R<u32, super::CTRL>;
        #[doc = "Writer for register CTRL"]
        pub type W = crate::W<u32, super::CTRL>;
        #[doc = "Register CTRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ENABLE`"]
        pub type ENABLE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ENABLE`"]
        pub struct ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `TICKINT`"]
        pub type TICKINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TICKINT`"]
        pub struct TICKINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TICKINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CLKSOURCE`"]
        pub type CLKSOURCE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLKSOURCE`"]
        pub struct CLKSOURCE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKSOURCE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `COUNTFLAG`"]
        pub type COUNTFLAG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COUNTFLAG`"]
        pub struct COUNTFLAG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COUNTFLAG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn enable(&self) -> ENABLE_R {
                ENABLE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - SysTick exception request enable"]
            #[inline(always)]
            pub fn tickint(&self) -> TICKINT_R {
                TICKINT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Clock source selection"]
            #[inline(always)]
            pub fn clksource(&self) -> CLKSOURCE_R {
                CLKSOURCE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 16 - COUNTFLAG"]
            #[inline(always)]
            pub fn countflag(&self) -> COUNTFLAG_R {
                COUNTFLAG_R::new(((self.bits >> 16) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn enable(&mut self) -> ENABLE_W {
                ENABLE_W { w: self }
            }
            #[doc = "Bit 1 - SysTick exception request enable"]
            #[inline(always)]
            pub fn tickint(&mut self) -> TICKINT_W {
                TICKINT_W { w: self }
            }
            #[doc = "Bit 2 - Clock source selection"]
            #[inline(always)]
            pub fn clksource(&mut self) -> CLKSOURCE_W {
                CLKSOURCE_W { w: self }
            }
            #[doc = "Bit 16 - COUNTFLAG"]
            #[inline(always)]
            pub fn countflag(&mut self) -> COUNTFLAG_W {
                COUNTFLAG_W { w: self }
            }
        }
    }
    #[doc = "SysTick reload value register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [load_](load_) module"]
    pub type LOAD_ = crate::Reg<u32, _LOAD_>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LOAD_;
    #[doc = "`read()` method returns [load_::R](load_::R) reader structure"]
    impl crate::Readable for LOAD_ {}
    #[doc = "`write(|w| ..)` method takes [load_::W](load_::W) writer structure"]
    impl crate::Writable for LOAD_ {}
    #[doc = "SysTick reload value register"]
    pub mod load_ {
        #[doc = "Reader of register LOAD_"]
        pub type R = crate::R<u32, super::LOAD_>;
        #[doc = "Writer for register LOAD_"]
        pub type W = crate::W<u32, super::LOAD_>;
        #[doc = "Register LOAD_ `reset()`'s with value 0"]
        impl crate::ResetValue for super::LOAD_ {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RELOAD`"]
        pub type RELOAD_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `RELOAD`"]
        pub struct RELOAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RELOAD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - RELOAD value"]
            #[inline(always)]
            pub fn reload(&self) -> RELOAD_R {
                RELOAD_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - RELOAD value"]
            #[inline(always)]
            pub fn reload(&mut self) -> RELOAD_W {
                RELOAD_W { w: self }
            }
        }
    }
    #[doc = "SysTick current value register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [val](val) module"]
    pub type VAL = crate::Reg<u32, _VAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VAL;
    #[doc = "`read()` method returns [val::R](val::R) reader structure"]
    impl crate::Readable for VAL {}
    #[doc = "`write(|w| ..)` method takes [val::W](val::W) writer structure"]
    impl crate::Writable for VAL {}
    #[doc = "SysTick current value register"]
    pub mod val {
        #[doc = "Reader of register VAL"]
        pub type R = crate::R<u32, super::VAL>;
        #[doc = "Writer for register VAL"]
        pub type W = crate::W<u32, super::VAL>;
        #[doc = "Register VAL `reset()`'s with value 0"]
        impl crate::ResetValue for super::VAL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CURRENT`"]
        pub type CURRENT_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CURRENT`"]
        pub struct CURRENT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CURRENT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - Current counter value"]
            #[inline(always)]
            pub fn current(&self) -> CURRENT_R {
                CURRENT_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - Current counter value"]
            #[inline(always)]
            pub fn current(&mut self) -> CURRENT_W {
                CURRENT_W { w: self }
            }
        }
    }
    #[doc = "SysTick calibration value register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [calib](calib) module"]
    pub type CALIB = crate::Reg<u32, _CALIB>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CALIB;
    #[doc = "`read()` method returns [calib::R](calib::R) reader structure"]
    impl crate::Readable for CALIB {}
    #[doc = "`write(|w| ..)` method takes [calib::W](calib::W) writer structure"]
    impl crate::Writable for CALIB {}
    #[doc = "SysTick calibration value register"]
    pub mod calib {
        #[doc = "Reader of register CALIB"]
        pub type R = crate::R<u32, super::CALIB>;
        #[doc = "Writer for register CALIB"]
        pub type W = crate::W<u32, super::CALIB>;
        #[doc = "Register CALIB `reset()`'s with value 0"]
        impl crate::ResetValue for super::CALIB {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TENMS`"]
        pub type TENMS_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TENMS`"]
        pub struct TENMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TENMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - Calibration value"]
            #[inline(always)]
            pub fn tenms(&self) -> TENMS_R {
                TENMS_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - Calibration value"]
            #[inline(always)]
            pub fn tenms(&mut self) -> TENMS_W {
                TENMS_W { w: self }
            }
        }
    }
}
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r"All the peripherals"]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "AES"]
    pub AES: AES,
    #[doc = "COMP"]
    pub COMP: COMP,
    #[doc = "CRC"]
    pub CRC: CRC,
    #[doc = "DAC"]
    pub DAC: DAC,
    #[doc = "DMA1"]
    pub DMA1: DMA1,
    #[doc = "DMA2"]
    pub DMA2: DMA2,
    #[doc = "EXTI"]
    pub EXTI: EXTI,
    #[doc = "FLASH"]
    pub FLASH: FLASH,
    #[doc = "FSMC"]
    pub FSMC: FSMC,
    #[doc = "GPIOA"]
    pub GPIOA: GPIOA,
    #[doc = "GPIOB"]
    pub GPIOB: GPIOB,
    #[doc = "GPIOC"]
    pub GPIOC: GPIOC,
    #[doc = "GPIOD"]
    pub GPIOD: GPIOD,
    #[doc = "GPIOE"]
    pub GPIOE: GPIOE,
    #[doc = "GPIOF"]
    pub GPIOF: GPIOF,
    #[doc = "GPIOG"]
    pub GPIOG: GPIOG,
    #[doc = "GPIOH"]
    pub GPIOH: GPIOH,
    #[doc = "I2C1"]
    pub I2C1: I2C1,
    #[doc = "I2C2"]
    pub I2C2: I2C2,
    #[doc = "IWDG"]
    pub IWDG: IWDG,
    #[doc = "LCD"]
    pub LCD: LCD,
    #[doc = "OPAMP"]
    pub OPAMP: OPAMP,
    #[doc = "PWR"]
    pub PWR: PWR,
    #[doc = "RCC"]
    pub RCC: RCC,
    #[doc = "RI"]
    pub RI: RI,
    #[doc = "RTC"]
    pub RTC: RTC,
    #[doc = "SDIO"]
    pub SDIO: SDIO,
    #[doc = "SPI1"]
    pub SPI1: SPI1,
    #[doc = "SPI2"]
    pub SPI2: SPI2,
    #[doc = "SPI3"]
    pub SPI3: SPI3,
    #[doc = "SYSCFG"]
    pub SYSCFG: SYSCFG,
    #[doc = "TIM10"]
    pub TIM10: TIM10,
    #[doc = "TIM11"]
    pub TIM11: TIM11,
    #[doc = "TIM2"]
    pub TIM2: TIM2,
    #[doc = "TIM3"]
    pub TIM3: TIM3,
    #[doc = "TIM4"]
    pub TIM4: TIM4,
    #[doc = "TIM5"]
    pub TIM5: TIM5,
    #[doc = "TIM6"]
    pub TIM6: TIM6,
    #[doc = "TIM7"]
    pub TIM7: TIM7,
    #[doc = "TIM9"]
    pub TIM9: TIM9,
    #[doc = "USART1"]
    pub USART1: USART1,
    #[doc = "USART2"]
    pub USART2: USART2,
    #[doc = "USART3"]
    pub USART3: USART3,
    #[doc = "UART4"]
    pub UART4: UART4,
    #[doc = "UART5"]
    pub UART5: UART5,
    #[doc = "USB"]
    pub USB: USB,
    #[doc = "USB_SRAM"]
    pub USB_SRAM: USB_SRAM,
    #[doc = "WWDG"]
    pub WWDG: WWDG,
    #[doc = "ADC"]
    pub ADC: ADC,
    #[doc = "DBGMCU"]
    pub DBGMCU: DBGMCU,
    #[doc = "SCB_ACTRL"]
    pub SCB_ACTRL: SCB_ACTRL,
    #[doc = "NVIC_STIR"]
    pub NVIC_STIR: NVIC_STIR,
    #[doc = "STK"]
    pub STK: STK,
}
impl Peripherals {
    #[doc = r"Returns all the peripherals *once*"]
    #[inline]
    pub fn take() -> Option<Self> {
        cortex_m::interrupt::free(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                None
            } else {
                Some(unsafe { Peripherals::steal() })
            }
        })
    }
    #[doc = r"Unchecked version of `Peripherals::take`"]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            AES: AES {
                _marker: PhantomData,
            },
            COMP: COMP {
                _marker: PhantomData,
            },
            CRC: CRC {
                _marker: PhantomData,
            },
            DAC: DAC {
                _marker: PhantomData,
            },
            DMA1: DMA1 {
                _marker: PhantomData,
            },
            DMA2: DMA2 {
                _marker: PhantomData,
            },
            EXTI: EXTI {
                _marker: PhantomData,
            },
            FLASH: FLASH {
                _marker: PhantomData,
            },
            FSMC: FSMC {
                _marker: PhantomData,
            },
            GPIOA: GPIOA {
                _marker: PhantomData,
            },
            GPIOB: GPIOB {
                _marker: PhantomData,
            },
            GPIOC: GPIOC {
                _marker: PhantomData,
            },
            GPIOD: GPIOD {
                _marker: PhantomData,
            },
            GPIOE: GPIOE {
                _marker: PhantomData,
            },
            GPIOF: GPIOF {
                _marker: PhantomData,
            },
            GPIOG: GPIOG {
                _marker: PhantomData,
            },
            GPIOH: GPIOH {
                _marker: PhantomData,
            },
            I2C1: I2C1 {
                _marker: PhantomData,
            },
            I2C2: I2C2 {
                _marker: PhantomData,
            },
            IWDG: IWDG {
                _marker: PhantomData,
            },
            LCD: LCD {
                _marker: PhantomData,
            },
            OPAMP: OPAMP {
                _marker: PhantomData,
            },
            PWR: PWR {
                _marker: PhantomData,
            },
            RCC: RCC {
                _marker: PhantomData,
            },
            RI: RI {
                _marker: PhantomData,
            },
            RTC: RTC {
                _marker: PhantomData,
            },
            SDIO: SDIO {
                _marker: PhantomData,
            },
            SPI1: SPI1 {
                _marker: PhantomData,
            },
            SPI2: SPI2 {
                _marker: PhantomData,
            },
            SPI3: SPI3 {
                _marker: PhantomData,
            },
            SYSCFG: SYSCFG {
                _marker: PhantomData,
            },
            TIM10: TIM10 {
                _marker: PhantomData,
            },
            TIM11: TIM11 {
                _marker: PhantomData,
            },
            TIM2: TIM2 {
                _marker: PhantomData,
            },
            TIM3: TIM3 {
                _marker: PhantomData,
            },
            TIM4: TIM4 {
                _marker: PhantomData,
            },
            TIM5: TIM5 {
                _marker: PhantomData,
            },
            TIM6: TIM6 {
                _marker: PhantomData,
            },
            TIM7: TIM7 {
                _marker: PhantomData,
            },
            TIM9: TIM9 {
                _marker: PhantomData,
            },
            USART1: USART1 {
                _marker: PhantomData,
            },
            USART2: USART2 {
                _marker: PhantomData,
            },
            USART3: USART3 {
                _marker: PhantomData,
            },
            UART4: UART4 {
                _marker: PhantomData,
            },
            UART5: UART5 {
                _marker: PhantomData,
            },
            USB: USB {
                _marker: PhantomData,
            },
            USB_SRAM: USB_SRAM {
                _marker: PhantomData,
            },
            WWDG: WWDG {
                _marker: PhantomData,
            },
            ADC: ADC {
                _marker: PhantomData,
            },
            DBGMCU: DBGMCU {
                _marker: PhantomData,
            },
            SCB_ACTRL: SCB_ACTRL {
                _marker: PhantomData,
            },
            NVIC_STIR: NVIC_STIR {
                _marker: PhantomData,
            },
            STK: STK {
                _marker: PhantomData,
            },
        }
    }
}
