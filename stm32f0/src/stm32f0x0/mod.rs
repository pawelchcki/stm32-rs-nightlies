#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 2;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG();
    fn PVD();
    fn RTC();
    fn FLASH();
    fn RCC();
    fn EXTI0_1();
    fn EXTI2_3();
    fn EXTI4_15();
    fn DMA1_CH1();
    fn DMA1_CH2_3();
    fn DMA1_CH4_5();
    fn ADC();
    fn TIM1_BRK_UP_TRG_COM();
    fn TIM1_CC();
    fn TIM3();
    fn TIM6();
    fn TIM14();
    fn TIM15();
    fn TIM16();
    fn TIM17();
    fn I2C1();
    fn I2C2();
    fn SPI1();
    fn SPI2();
    fn USART1();
    fn USART2();
    fn USART3_4_5_6();
    fn USB();
}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 32] = [
    Vector { _handler: WWDG },
    Vector { _handler: PVD },
    Vector { _handler: RTC },
    Vector { _handler: FLASH },
    Vector { _handler: RCC },
    Vector { _handler: EXTI0_1 },
    Vector { _handler: EXTI2_3 },
    Vector { _handler: EXTI4_15 },
    Vector { _reserved: 0 },
    Vector { _handler: DMA1_CH1 },
    Vector {
        _handler: DMA1_CH2_3,
    },
    Vector {
        _handler: DMA1_CH4_5,
    },
    Vector { _handler: ADC },
    Vector {
        _handler: TIM1_BRK_UP_TRG_COM,
    },
    Vector { _handler: TIM1_CC },
    Vector { _reserved: 0 },
    Vector { _handler: TIM3 },
    Vector { _handler: TIM6 },
    Vector { _reserved: 0 },
    Vector { _handler: TIM14 },
    Vector { _handler: TIM15 },
    Vector { _handler: TIM16 },
    Vector { _handler: TIM17 },
    Vector { _handler: I2C1 },
    Vector { _handler: I2C2 },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector {
        _handler: USART3_4_5_6,
    },
    Vector { _reserved: 0 },
    Vector { _handler: USB },
];
#[doc = r"Enumeration of all the interrupts"]
#[derive(Copy, Clone, Debug)]
#[repr(u8)]
pub enum Interrupt {
    #[doc = "0 - Window Watchdog interrupt"]
    WWDG = 0,
    #[doc = "1 - PVD and VDDIO2 supply comparator interrupt"]
    PVD = 1,
    #[doc = "2 - RTC interrupts"]
    RTC = 2,
    #[doc = "3 - Flash global interrupt"]
    FLASH = 3,
    #[doc = "4 - RCC global interruptr"]
    RCC = 4,
    #[doc = "5 - EXTI Line\\[1:0\\]
interrupts"]
    EXTI0_1 = 5,
    #[doc = "6 - EXTI Line\\[3:2\\]
interrupts"]
    EXTI2_3 = 6,
    #[doc = "7 - EXTI Line15 and EXTI4 interrupts"]
    EXTI4_15 = 7,
    #[doc = "9 - DMA1 channel 1 interrupt"]
    DMA1_CH1 = 9,
    #[doc = "10 - DMA1 channel 2 and 3 interrupt"]
    DMA1_CH2_3 = 10,
    #[doc = "11 - DMA1 channel 4 and 5 interrupt"]
    DMA1_CH4_5 = 11,
    #[doc = "12 - ADC interrupt"]
    ADC = 12,
    #[doc = "13 - TIM1 break, update, trigger and commutation interrupt"]
    TIM1_BRK_UP_TRG_COM = 13,
    #[doc = "14 - TIM1 Capture Compare interrupt"]
    TIM1_CC = 14,
    #[doc = "16 - TIM3 global interrupt"]
    TIM3 = 16,
    #[doc = "17 - TIM6 global interrupt"]
    TIM6 = 17,
    #[doc = "19 - TIM14 global interrupt"]
    TIM14 = 19,
    #[doc = "20 - TIM15 global interrupt"]
    TIM15 = 20,
    #[doc = "21 - TIM16 global interrupt"]
    TIM16 = 21,
    #[doc = "22 - TIM17 global interrupt"]
    TIM17 = 22,
    #[doc = "23 - I2C1 global interrupt"]
    I2C1 = 23,
    #[doc = "24 - I2C2 global interrupt"]
    I2C2 = 24,
    #[doc = "25 - SPI1_global_interrupt"]
    SPI1 = 25,
    #[doc = "26 - SPI2 global interrupt"]
    SPI2 = 26,
    #[doc = "27 - USART1 global interrupt"]
    USART1 = 27,
    #[doc = "28 - USART2 global interrupt"]
    USART2 = 28,
    #[doc = "29 - USART3, USART4, USART5, USART6 global interrupt"]
    USART3_4_5_6 = 29,
    #[doc = "31 - USB global interrupt"]
    USB = 31,
}
unsafe impl bare_metal::Nr for Interrupt {
    #[inline(always)]
    fn nr(&self) -> u8 {
        *self as u8
    }
}
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[doc = "cyclic redundancy check calculation unit"]
pub struct CRC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRC {}
impl CRC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const crc::RegisterBlock {
        0x4002_3000 as *const _
    }
}
impl Deref for CRC {
    type Target = crc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*CRC::ptr() }
    }
}
#[doc = "cyclic redundancy check calculation unit"]
pub mod crc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved_0_dr: [u8; 4usize],
        #[doc = "0x04 - Independent data register"]
        pub idr: IDR,
        #[doc = "0x08 - Control register"]
        pub cr: CR,
        _reserved3: [u8; 4usize],
        #[doc = "0x10 - Initial CRC value"]
        pub init: INIT,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Data register - half-word sized"]
        #[inline(always)]
        pub fn dr16(&self) -> &DR16 {
            unsafe { &*(((self as *const Self) as *const u8).add(0usize) as *const DR16) }
        }
        #[doc = "0x00 - Data register - half-word sized"]
        #[inline(always)]
        pub fn dr16_mut(&self) -> &mut DR16 {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(0usize) as *mut DR16) }
        }
        #[doc = "0x00 - Data register - byte sized"]
        #[inline(always)]
        pub fn dr8(&self) -> &DR8 {
            unsafe { &*(((self as *const Self) as *const u8).add(0usize) as *const DR8) }
        }
        #[doc = "0x00 - Data register - byte sized"]
        #[inline(always)]
        pub fn dr8_mut(&self) -> &mut DR8 {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(0usize) as *mut DR8) }
        }
        #[doc = "0x00 - Data register"]
        #[inline(always)]
        pub fn dr(&self) -> &DR {
            unsafe { &*(((self as *const Self) as *const u8).add(0usize) as *const DR) }
        }
        #[doc = "0x00 - Data register"]
        #[inline(always)]
        pub fn dr_mut(&self) -> &mut DR {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(0usize) as *mut DR) }
        }
    }
    #[doc = "Data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "`write(|w| ..)` method takes [dr::W](dr::W) writer structure"]
    impl crate::Writable for DR {}
    #[doc = "Data register"]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Writer for register DR"]
        pub type W = crate::W<u32, super::DR>;
        #[doc = "Register DR `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::DR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `DR`"]
        pub type DR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `DR`"]
        pub struct DR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Data register bits"]
            #[inline(always)]
            pub fn dr(&self) -> DR_R {
                DR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Data register bits"]
            #[inline(always)]
            pub fn dr(&mut self) -> DR_W {
                DR_W { w: self }
            }
        }
    }
    #[doc = "Independent data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idr](idr) module"]
    pub type IDR = crate::Reg<u32, _IDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IDR;
    #[doc = "`read()` method returns [idr::R](idr::R) reader structure"]
    impl crate::Readable for IDR {}
    #[doc = "`write(|w| ..)` method takes [idr::W](idr::W) writer structure"]
    impl crate::Writable for IDR {}
    #[doc = "Independent data register"]
    pub mod idr {
        #[doc = "Reader of register IDR"]
        pub type R = crate::R<u32, super::IDR>;
        #[doc = "Writer for register IDR"]
        pub type W = crate::W<u32, super::IDR>;
        #[doc = "Register IDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IDR`"]
        pub type IDR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IDR`"]
        pub struct IDR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - General-purpose 8-bit data register bits"]
            #[inline(always)]
            pub fn idr(&self) -> IDR_R {
                IDR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - General-purpose 8-bit data register bits"]
            #[inline(always)]
            pub fn idr(&mut self) -> IDR_W {
                IDR_W { w: self }
            }
        }
    }
    #[doc = "Control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "reset bit\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RESET_A {
            #[doc = "1: Resets the CRC calculation unit and sets the data register to 0xFFFF FFFF"]
            RESET = 1,
        }
        impl From<RESET_A> for bool {
            #[inline(always)]
            fn from(variant: RESET_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RESET`"]
        pub type RESET_R = crate::R<bool, RESET_A>;
        impl RESET_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, RESET_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(RESET_A::RESET),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == RESET_A::RESET
            }
        }
        #[doc = "Write proxy for field `RESET`"]
        pub struct RESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RESET_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the CRC calculation unit and sets the data register to 0xFFFF FFFF"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(RESET_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Polynomial size\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum POLYSIZE_A {
            #[doc = "0: 32-bit polynomial"]
            POLYSIZE32 = 0,
            #[doc = "1: 16-bit polynomial"]
            POLYSIZE16 = 1,
            #[doc = "2: 8-bit polynomial"]
            POLYSIZE8 = 2,
            #[doc = "3: 7-bit polynomial"]
            POLYSIZE7 = 3,
        }
        impl From<POLYSIZE_A> for u8 {
            #[inline(always)]
            fn from(variant: POLYSIZE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `POLYSIZE`"]
        pub type POLYSIZE_R = crate::R<u8, POLYSIZE_A>;
        impl POLYSIZE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POLYSIZE_A {
                match self.bits {
                    0 => POLYSIZE_A::POLYSIZE32,
                    1 => POLYSIZE_A::POLYSIZE16,
                    2 => POLYSIZE_A::POLYSIZE8,
                    3 => POLYSIZE_A::POLYSIZE7,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `POLYSIZE32`"]
            #[inline(always)]
            pub fn is_polysize32(&self) -> bool {
                *self == POLYSIZE_A::POLYSIZE32
            }
            #[doc = "Checks if the value of the field is `POLYSIZE16`"]
            #[inline(always)]
            pub fn is_polysize16(&self) -> bool {
                *self == POLYSIZE_A::POLYSIZE16
            }
            #[doc = "Checks if the value of the field is `POLYSIZE8`"]
            #[inline(always)]
            pub fn is_polysize8(&self) -> bool {
                *self == POLYSIZE_A::POLYSIZE8
            }
            #[doc = "Checks if the value of the field is `POLYSIZE7`"]
            #[inline(always)]
            pub fn is_polysize7(&self) -> bool {
                *self == POLYSIZE_A::POLYSIZE7
            }
        }
        #[doc = "Write proxy for field `POLYSIZE`"]
        pub struct POLYSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POLYSIZE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POLYSIZE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "32-bit polynomial"]
            #[inline(always)]
            pub fn polysize32(self) -> &'a mut W {
                self.variant(POLYSIZE_A::POLYSIZE32)
            }
            #[doc = "16-bit polynomial"]
            #[inline(always)]
            pub fn polysize16(self) -> &'a mut W {
                self.variant(POLYSIZE_A::POLYSIZE16)
            }
            #[doc = "8-bit polynomial"]
            #[inline(always)]
            pub fn polysize8(self) -> &'a mut W {
                self.variant(POLYSIZE_A::POLYSIZE8)
            }
            #[doc = "7-bit polynomial"]
            #[inline(always)]
            pub fn polysize7(self) -> &'a mut W {
                self.variant(POLYSIZE_A::POLYSIZE7)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | (((value as u32) & 0x03) << 3);
                self.w
            }
        }
        #[doc = "Reverse input data\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum REV_IN_A {
            #[doc = "0: Bit order not affected"]
            NORMAL = 0,
            #[doc = "1: Bit reversal done by byte"]
            BYTE = 1,
            #[doc = "2: Bit reversal done by half-word"]
            HALFWORD = 2,
            #[doc = "3: Bit reversal done by word"]
            WORD = 3,
        }
        impl From<REV_IN_A> for u8 {
            #[inline(always)]
            fn from(variant: REV_IN_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `REV_IN`"]
        pub type REV_IN_R = crate::R<u8, REV_IN_A>;
        impl REV_IN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> REV_IN_A {
                match self.bits {
                    0 => REV_IN_A::NORMAL,
                    1 => REV_IN_A::BYTE,
                    2 => REV_IN_A::HALFWORD,
                    3 => REV_IN_A::WORD,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `NORMAL`"]
            #[inline(always)]
            pub fn is_normal(&self) -> bool {
                *self == REV_IN_A::NORMAL
            }
            #[doc = "Checks if the value of the field is `BYTE`"]
            #[inline(always)]
            pub fn is_byte(&self) -> bool {
                *self == REV_IN_A::BYTE
            }
            #[doc = "Checks if the value of the field is `HALFWORD`"]
            #[inline(always)]
            pub fn is_half_word(&self) -> bool {
                *self == REV_IN_A::HALFWORD
            }
            #[doc = "Checks if the value of the field is `WORD`"]
            #[inline(always)]
            pub fn is_word(&self) -> bool {
                *self == REV_IN_A::WORD
            }
        }
        #[doc = "Write proxy for field `REV_IN`"]
        pub struct REV_IN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REV_IN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: REV_IN_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bit order not affected"]
            #[inline(always)]
            pub fn normal(self) -> &'a mut W {
                self.variant(REV_IN_A::NORMAL)
            }
            #[doc = "Bit reversal done by byte"]
            #[inline(always)]
            pub fn byte(self) -> &'a mut W {
                self.variant(REV_IN_A::BYTE)
            }
            #[doc = "Bit reversal done by half-word"]
            #[inline(always)]
            pub fn half_word(self) -> &'a mut W {
                self.variant(REV_IN_A::HALFWORD)
            }
            #[doc = "Bit reversal done by word"]
            #[inline(always)]
            pub fn word(self) -> &'a mut W {
                self.variant(REV_IN_A::WORD)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Reverse output data\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum REV_OUT_A {
            #[doc = "0: Bit order not affected"]
            NORMAL = 0,
            #[doc = "1: Bit reversed output"]
            REVERSED = 1,
        }
        impl From<REV_OUT_A> for bool {
            #[inline(always)]
            fn from(variant: REV_OUT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `REV_OUT`"]
        pub type REV_OUT_R = crate::R<bool, REV_OUT_A>;
        impl REV_OUT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> REV_OUT_A {
                match self.bits {
                    false => REV_OUT_A::NORMAL,
                    true => REV_OUT_A::REVERSED,
                }
            }
            #[doc = "Checks if the value of the field is `NORMAL`"]
            #[inline(always)]
            pub fn is_normal(&self) -> bool {
                *self == REV_OUT_A::NORMAL
            }
            #[doc = "Checks if the value of the field is `REVERSED`"]
            #[inline(always)]
            pub fn is_reversed(&self) -> bool {
                *self == REV_OUT_A::REVERSED
            }
        }
        #[doc = "Write proxy for field `REV_OUT`"]
        pub struct REV_OUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REV_OUT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: REV_OUT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bit order not affected"]
            #[inline(always)]
            pub fn normal(self) -> &'a mut W {
                self.variant(REV_OUT_A::NORMAL)
            }
            #[doc = "Bit reversed output"]
            #[inline(always)]
            pub fn reversed(self) -> &'a mut W {
                self.variant(REV_OUT_A::REVERSED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - reset bit"]
            #[inline(always)]
            pub fn reset(&self) -> RESET_R {
                RESET_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bits 3:4 - Polynomial size"]
            #[inline(always)]
            pub fn polysize(&self) -> POLYSIZE_R {
                POLYSIZE_R::new(((self.bits >> 3) & 0x03) as u8)
            }
            #[doc = "Bits 5:6 - Reverse input data"]
            #[inline(always)]
            pub fn rev_in(&self) -> REV_IN_R {
                REV_IN_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Reverse output data"]
            #[inline(always)]
            pub fn rev_out(&self) -> REV_OUT_R {
                REV_OUT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - reset bit"]
            #[inline(always)]
            pub fn reset(&mut self) -> RESET_W {
                RESET_W { w: self }
            }
            #[doc = "Bits 3:4 - Polynomial size"]
            #[inline(always)]
            pub fn polysize(&mut self) -> POLYSIZE_W {
                POLYSIZE_W { w: self }
            }
            #[doc = "Bits 5:6 - Reverse input data"]
            #[inline(always)]
            pub fn rev_in(&mut self) -> REV_IN_W {
                REV_IN_W { w: self }
            }
            #[doc = "Bit 7 - Reverse output data"]
            #[inline(always)]
            pub fn rev_out(&mut self) -> REV_OUT_W {
                REV_OUT_W { w: self }
            }
        }
    }
    #[doc = "Initial CRC value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [init](init) module"]
    pub type INIT = crate::Reg<u32, _INIT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _INIT;
    #[doc = "`read()` method returns [init::R](init::R) reader structure"]
    impl crate::Readable for INIT {}
    #[doc = "`write(|w| ..)` method takes [init::W](init::W) writer structure"]
    impl crate::Writable for INIT {}
    #[doc = "Initial CRC value"]
    pub mod init {
        #[doc = "Reader of register INIT"]
        pub type R = crate::R<u32, super::INIT>;
        #[doc = "Writer for register INIT"]
        pub type W = crate::W<u32, super::INIT>;
        #[doc = "Register INIT `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::INIT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `INIT`"]
        pub type INIT_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `INIT`"]
        pub struct INIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INIT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Programmable initial CRC value"]
            #[inline(always)]
            pub fn init(&self) -> INIT_R {
                INIT_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Programmable initial CRC value"]
            #[inline(always)]
            pub fn init(&mut self) -> INIT_W {
                INIT_W { w: self }
            }
        }
    }
    #[doc = "Data register - byte sized\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr8](dr8) module"]
    pub type DR8 = crate::Reg<u8, _DR8>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR8;
    #[doc = "`read()` method returns [dr8::R](dr8::R) reader structure"]
    impl crate::Readable for DR8 {}
    #[doc = "`write(|w| ..)` method takes [dr8::W](dr8::W) writer structure"]
    impl crate::Writable for DR8 {}
    #[doc = "Data register - byte sized"]
    pub mod dr8 {
        #[doc = "Reader of register DR8"]
        pub type R = crate::R<u8, super::DR8>;
        #[doc = "Writer for register DR8"]
        pub type W = crate::W<u8, super::DR8>;
        #[doc = "Register DR8 `reset()`'s with value 0xff"]
        impl crate::ResetValue for super::DR8 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xff
            }
        }
        #[doc = "Reader of field `DR8`"]
        pub type DR8_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DR8`"]
        pub struct DR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Data register bits"]
            #[inline(always)]
            pub fn dr8(&self) -> DR8_R {
                DR8_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Data register bits"]
            #[inline(always)]
            pub fn dr8(&mut self) -> DR8_W {
                DR8_W { w: self }
            }
        }
    }
    #[doc = "Data register - half-word sized\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr16](dr16) module"]
    pub type DR16 = crate::Reg<u16, _DR16>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR16;
    #[doc = "`read()` method returns [dr16::R](dr16::R) reader structure"]
    impl crate::Readable for DR16 {}
    #[doc = "`write(|w| ..)` method takes [dr16::W](dr16::W) writer structure"]
    impl crate::Writable for DR16 {}
    #[doc = "Data register - half-word sized"]
    pub mod dr16 {
        #[doc = "Reader of register DR16"]
        pub type R = crate::R<u16, super::DR16>;
        #[doc = "Writer for register DR16"]
        pub type W = crate::W<u16, super::DR16>;
        #[doc = "Register DR16 `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::DR16 {
            type Type = u16;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `DR16`"]
        pub type DR16_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DR16`"]
        pub struct DR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR16_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u16) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Data register bits"]
            #[inline(always)]
            pub fn dr16(&self) -> DR16_R {
                DR16_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Data register bits"]
            #[inline(always)]
            pub fn dr16(&mut self) -> DR16_W {
                DR16_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOF {}
impl GPIOF {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpiof::RegisterBlock {
        0x4800_1400 as *const _
    }
}
impl Deref for GPIOF {
    type Target = gpiof::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOF::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpiof {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - GPIO port mode register"]
        pub moder: MODER,
        #[doc = "0x04 - GPIO port output type register"]
        pub otyper: OTYPER,
        #[doc = "0x08 - GPIO port output speed register"]
        pub ospeedr: OSPEEDR,
        #[doc = "0x0c - GPIO port pull-up/pull-down register"]
        pub pupdr: PUPDR,
        #[doc = "0x10 - GPIO port input data register"]
        pub idr: IDR,
        #[doc = "0x14 - GPIO port output data register"]
        pub odr: ODR,
        #[doc = "0x18 - GPIO port bit set/reset register"]
        pub bsrr: BSRR,
        #[doc = "0x1c - GPIO port configuration lock register"]
        pub lckr: LCKR,
        #[doc = "0x20 - GPIO alternate function low register"]
        pub afrl: AFRL,
        #[doc = "0x24 - GPIO alternate function high register"]
        pub afrh: AFRH,
        #[doc = "0x28 - Port bit reset register"]
        pub brr: BRR,
    }
    #[doc = "GPIO port mode register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [moder](moder) module"]
    pub type MODER = crate::Reg<u32, _MODER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MODER;
    #[doc = "`read()` method returns [moder::R](moder::R) reader structure"]
    impl crate::Readable for MODER {}
    #[doc = "`write(|w| ..)` method takes [moder::W](moder::W) writer structure"]
    impl crate::Writable for MODER {}
    #[doc = "GPIO port mode register"]
    pub mod moder {
        #[doc = "Reader of register MODER"]
        pub type R = crate::R<u32, super::MODER>;
        #[doc = "Writer for register MODER"]
        pub type W = crate::W<u32, super::MODER>;
        #[doc = "Register MODER `reset()`'s with value 0"]
        impl crate::ResetValue for super::MODER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MODER15_A {
            #[doc = "0: Input mode (reset state)"]
            INPUT = 0,
            #[doc = "1: General purpose output mode"]
            OUTPUT = 1,
            #[doc = "2: Alternate function mode"]
            ALTERNATE = 2,
            #[doc = "3: Analog mode"]
            ANALOG = 3,
        }
        impl From<MODER15_A> for u8 {
            #[inline(always)]
            fn from(variant: MODER15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MODER15`"]
        pub type MODER15_R = crate::R<u8, MODER15_A>;
        impl MODER15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MODER15_A {
                match self.bits {
                    0 => MODER15_A::INPUT,
                    1 => MODER15_A::OUTPUT,
                    2 => MODER15_A::ALTERNATE,
                    3 => MODER15_A::ANALOG,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                *self == MODER15_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == MODER15_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `ALTERNATE`"]
            #[inline(always)]
            pub fn is_alternate(&self) -> bool {
                *self == MODER15_A::ALTERNATE
            }
            #[doc = "Checks if the value of the field is `ANALOG`"]
            #[inline(always)]
            pub fn is_analog(&self) -> bool {
                *self == MODER15_A::ANALOG
            }
        }
        #[doc = "Write proxy for field `MODER15`"]
        pub struct MODER15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER14_A = MODER15_A;
        #[doc = "Reader of field `MODER14`"]
        pub type MODER14_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER14`"]
        pub struct MODER14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER13_A = MODER15_A;
        #[doc = "Reader of field `MODER13`"]
        pub type MODER13_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER13`"]
        pub struct MODER13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER12_A = MODER15_A;
        #[doc = "Reader of field `MODER12`"]
        pub type MODER12_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER12`"]
        pub struct MODER12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER11_A = MODER15_A;
        #[doc = "Reader of field `MODER11`"]
        pub type MODER11_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER11`"]
        pub struct MODER11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER10_A = MODER15_A;
        #[doc = "Reader of field `MODER10`"]
        pub type MODER10_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER10`"]
        pub struct MODER10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER9_A = MODER15_A;
        #[doc = "Reader of field `MODER9`"]
        pub type MODER9_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER9`"]
        pub struct MODER9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER8_A = MODER15_A;
        #[doc = "Reader of field `MODER8`"]
        pub type MODER8_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER8`"]
        pub struct MODER8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER7_A = MODER15_A;
        #[doc = "Reader of field `MODER7`"]
        pub type MODER7_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER7`"]
        pub struct MODER7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER6_A = MODER15_A;
        #[doc = "Reader of field `MODER6`"]
        pub type MODER6_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER6`"]
        pub struct MODER6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER5_A = MODER15_A;
        #[doc = "Reader of field `MODER5`"]
        pub type MODER5_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER5`"]
        pub struct MODER5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER4_A = MODER15_A;
        #[doc = "Reader of field `MODER4`"]
        pub type MODER4_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER4`"]
        pub struct MODER4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER3_A = MODER15_A;
        #[doc = "Reader of field `MODER3`"]
        pub type MODER3_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER3`"]
        pub struct MODER3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER2_A = MODER15_A;
        #[doc = "Reader of field `MODER2`"]
        pub type MODER2_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER2`"]
        pub struct MODER2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER1_A = MODER15_A;
        #[doc = "Reader of field `MODER1`"]
        pub type MODER1_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER1`"]
        pub struct MODER1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER0_A = MODER15_A;
        #[doc = "Reader of field `MODER0`"]
        pub type MODER0_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER0`"]
        pub struct MODER0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder15(&self) -> MODER15_R {
                MODER15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder14(&self) -> MODER14_R {
                MODER14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder13(&self) -> MODER13_R {
                MODER13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder12(&self) -> MODER12_R {
                MODER12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder11(&self) -> MODER11_R {
                MODER11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder10(&self) -> MODER10_R {
                MODER10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder9(&self) -> MODER9_R {
                MODER9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder8(&self) -> MODER8_R {
                MODER8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder7(&self) -> MODER7_R {
                MODER7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder6(&self) -> MODER6_R {
                MODER6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder5(&self) -> MODER5_R {
                MODER5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder4(&self) -> MODER4_R {
                MODER4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder3(&self) -> MODER3_R {
                MODER3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder2(&self) -> MODER2_R {
                MODER2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder1(&self) -> MODER1_R {
                MODER1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder0(&self) -> MODER0_R {
                MODER0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder15(&mut self) -> MODER15_W {
                MODER15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder14(&mut self) -> MODER14_W {
                MODER14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder13(&mut self) -> MODER13_W {
                MODER13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder12(&mut self) -> MODER12_W {
                MODER12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder11(&mut self) -> MODER11_W {
                MODER11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder10(&mut self) -> MODER10_W {
                MODER10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder9(&mut self) -> MODER9_W {
                MODER9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder8(&mut self) -> MODER8_W {
                MODER8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder7(&mut self) -> MODER7_W {
                MODER7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder6(&mut self) -> MODER6_W {
                MODER6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder5(&mut self) -> MODER5_W {
                MODER5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder4(&mut self) -> MODER4_W {
                MODER4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder3(&mut self) -> MODER3_W {
                MODER3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder2(&mut self) -> MODER2_W {
                MODER2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder1(&mut self) -> MODER1_W {
                MODER1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder0(&mut self) -> MODER0_W {
                MODER0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port output type register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [otyper](otyper) module"]
    pub type OTYPER = crate::Reg<u32, _OTYPER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OTYPER;
    #[doc = "`read()` method returns [otyper::R](otyper::R) reader structure"]
    impl crate::Readable for OTYPER {}
    #[doc = "`write(|w| ..)` method takes [otyper::W](otyper::W) writer structure"]
    impl crate::Writable for OTYPER {}
    #[doc = "GPIO port output type register"]
    pub mod otyper {
        #[doc = "Reader of register OTYPER"]
        pub type R = crate::R<u32, super::OTYPER>;
        #[doc = "Writer for register OTYPER"]
        pub type W = crate::W<u32, super::OTYPER>;
        #[doc = "Register OTYPER `reset()`'s with value 0"]
        impl crate::ResetValue for super::OTYPER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x configuration bit 15\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OT15_A {
            #[doc = "0: Output push-pull (reset state)"]
            PUSHPULL = 0,
            #[doc = "1: Output open-drain"]
            OPENDRAIN = 1,
        }
        impl From<OT15_A> for bool {
            #[inline(always)]
            fn from(variant: OT15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OT15`"]
        pub type OT15_R = crate::R<bool, OT15_A>;
        impl OT15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OT15_A {
                match self.bits {
                    false => OT15_A::PUSHPULL,
                    true => OT15_A::OPENDRAIN,
                }
            }
            #[doc = "Checks if the value of the field is `PUSHPULL`"]
            #[inline(always)]
            pub fn is_push_pull(&self) -> bool {
                *self == OT15_A::PUSHPULL
            }
            #[doc = "Checks if the value of the field is `OPENDRAIN`"]
            #[inline(always)]
            pub fn is_open_drain(&self) -> bool {
                *self == OT15_A::OPENDRAIN
            }
        }
        #[doc = "Write proxy for field `OT15`"]
        pub struct OT15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x configuration bit 14"]
        pub type OT14_A = OT15_A;
        #[doc = "Reader of field `OT14`"]
        pub type OT14_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT14`"]
        pub struct OT14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bit 13"]
        pub type OT13_A = OT15_A;
        #[doc = "Reader of field `OT13`"]
        pub type OT13_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT13`"]
        pub struct OT13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x configuration bit 12"]
        pub type OT12_A = OT15_A;
        #[doc = "Reader of field `OT12`"]
        pub type OT12_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT12`"]
        pub struct OT12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bit 11"]
        pub type OT11_A = OT15_A;
        #[doc = "Reader of field `OT11`"]
        pub type OT11_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT11`"]
        pub struct OT11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x configuration bit 10"]
        pub type OT10_A = OT15_A;
        #[doc = "Reader of field `OT10`"]
        pub type OT10_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT10`"]
        pub struct OT10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bit 9"]
        pub type OT9_A = OT15_A;
        #[doc = "Reader of field `OT9`"]
        pub type OT9_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT9`"]
        pub struct OT9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x configuration bit 8"]
        pub type OT8_A = OT15_A;
        #[doc = "Reader of field `OT8`"]
        pub type OT8_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT8`"]
        pub struct OT8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bit 7"]
        pub type OT7_A = OT15_A;
        #[doc = "Reader of field `OT7`"]
        pub type OT7_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT7`"]
        pub struct OT7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x configuration bit 6"]
        pub type OT6_A = OT15_A;
        #[doc = "Reader of field `OT6`"]
        pub type OT6_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT6`"]
        pub struct OT6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bit 5"]
        pub type OT5_A = OT15_A;
        #[doc = "Reader of field `OT5`"]
        pub type OT5_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT5`"]
        pub struct OT5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x configuration bit 4"]
        pub type OT4_A = OT15_A;
        #[doc = "Reader of field `OT4`"]
        pub type OT4_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT4`"]
        pub struct OT4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bit 3"]
        pub type OT3_A = OT15_A;
        #[doc = "Reader of field `OT3`"]
        pub type OT3_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT3`"]
        pub struct OT3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x configuration bit 2"]
        pub type OT2_A = OT15_A;
        #[doc = "Reader of field `OT2`"]
        pub type OT2_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT2`"]
        pub struct OT2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bit 1"]
        pub type OT1_A = OT15_A;
        #[doc = "Reader of field `OT1`"]
        pub type OT1_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT1`"]
        pub struct OT1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x configuration bit 0"]
        pub type OT0_A = OT15_A;
        #[doc = "Reader of field `OT0`"]
        pub type OT0_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT0`"]
        pub struct OT0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port x configuration bit 15"]
            #[inline(always)]
            pub fn ot15(&self) -> OT15_R {
                OT15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port x configuration bit 14"]
            #[inline(always)]
            pub fn ot14(&self) -> OT14_R {
                OT14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port x configuration bit 13"]
            #[inline(always)]
            pub fn ot13(&self) -> OT13_R {
                OT13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port x configuration bit 12"]
            #[inline(always)]
            pub fn ot12(&self) -> OT12_R {
                OT12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port x configuration bit 11"]
            #[inline(always)]
            pub fn ot11(&self) -> OT11_R {
                OT11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port x configuration bit 10"]
            #[inline(always)]
            pub fn ot10(&self) -> OT10_R {
                OT10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port x configuration bit 9"]
            #[inline(always)]
            pub fn ot9(&self) -> OT9_R {
                OT9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port x configuration bit 8"]
            #[inline(always)]
            pub fn ot8(&self) -> OT8_R {
                OT8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port x configuration bit 7"]
            #[inline(always)]
            pub fn ot7(&self) -> OT7_R {
                OT7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port x configuration bit 6"]
            #[inline(always)]
            pub fn ot6(&self) -> OT6_R {
                OT6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port x configuration bit 5"]
            #[inline(always)]
            pub fn ot5(&self) -> OT5_R {
                OT5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port x configuration bit 4"]
            #[inline(always)]
            pub fn ot4(&self) -> OT4_R {
                OT4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port x configuration bit 3"]
            #[inline(always)]
            pub fn ot3(&self) -> OT3_R {
                OT3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port x configuration bit 2"]
            #[inline(always)]
            pub fn ot2(&self) -> OT2_R {
                OT2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port x configuration bit 1"]
            #[inline(always)]
            pub fn ot1(&self) -> OT1_R {
                OT1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port x configuration bit 0"]
            #[inline(always)]
            pub fn ot0(&self) -> OT0_R {
                OT0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port x configuration bit 15"]
            #[inline(always)]
            pub fn ot15(&mut self) -> OT15_W {
                OT15_W { w: self }
            }
            #[doc = "Bit 14 - Port x configuration bit 14"]
            #[inline(always)]
            pub fn ot14(&mut self) -> OT14_W {
                OT14_W { w: self }
            }
            #[doc = "Bit 13 - Port x configuration bit 13"]
            #[inline(always)]
            pub fn ot13(&mut self) -> OT13_W {
                OT13_W { w: self }
            }
            #[doc = "Bit 12 - Port x configuration bit 12"]
            #[inline(always)]
            pub fn ot12(&mut self) -> OT12_W {
                OT12_W { w: self }
            }
            #[doc = "Bit 11 - Port x configuration bit 11"]
            #[inline(always)]
            pub fn ot11(&mut self) -> OT11_W {
                OT11_W { w: self }
            }
            #[doc = "Bit 10 - Port x configuration bit 10"]
            #[inline(always)]
            pub fn ot10(&mut self) -> OT10_W {
                OT10_W { w: self }
            }
            #[doc = "Bit 9 - Port x configuration bit 9"]
            #[inline(always)]
            pub fn ot9(&mut self) -> OT9_W {
                OT9_W { w: self }
            }
            #[doc = "Bit 8 - Port x configuration bit 8"]
            #[inline(always)]
            pub fn ot8(&mut self) -> OT8_W {
                OT8_W { w: self }
            }
            #[doc = "Bit 7 - Port x configuration bit 7"]
            #[inline(always)]
            pub fn ot7(&mut self) -> OT7_W {
                OT7_W { w: self }
            }
            #[doc = "Bit 6 - Port x configuration bit 6"]
            #[inline(always)]
            pub fn ot6(&mut self) -> OT6_W {
                OT6_W { w: self }
            }
            #[doc = "Bit 5 - Port x configuration bit 5"]
            #[inline(always)]
            pub fn ot5(&mut self) -> OT5_W {
                OT5_W { w: self }
            }
            #[doc = "Bit 4 - Port x configuration bit 4"]
            #[inline(always)]
            pub fn ot4(&mut self) -> OT4_W {
                OT4_W { w: self }
            }
            #[doc = "Bit 3 - Port x configuration bit 3"]
            #[inline(always)]
            pub fn ot3(&mut self) -> OT3_W {
                OT3_W { w: self }
            }
            #[doc = "Bit 2 - Port x configuration bit 2"]
            #[inline(always)]
            pub fn ot2(&mut self) -> OT2_W {
                OT2_W { w: self }
            }
            #[doc = "Bit 1 - Port x configuration bit 1"]
            #[inline(always)]
            pub fn ot1(&mut self) -> OT1_W {
                OT1_W { w: self }
            }
            #[doc = "Bit 0 - Port x configuration bit 0"]
            #[inline(always)]
            pub fn ot0(&mut self) -> OT0_W {
                OT0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port output speed register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ospeedr](ospeedr) module"]
    pub type OSPEEDR = crate::Reg<u32, _OSPEEDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OSPEEDR;
    #[doc = "`read()` method returns [ospeedr::R](ospeedr::R) reader structure"]
    impl crate::Readable for OSPEEDR {}
    #[doc = "`write(|w| ..)` method takes [ospeedr::W](ospeedr::W) writer structure"]
    impl crate::Writable for OSPEEDR {}
    #[doc = "GPIO port output speed register"]
    pub mod ospeedr {
        #[doc = "Reader of register OSPEEDR"]
        pub type R = crate::R<u32, super::OSPEEDR>;
        #[doc = "Writer for register OSPEEDR"]
        pub type W = crate::W<u32, super::OSPEEDR>;
        #[doc = "Register OSPEEDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::OSPEEDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OSPEEDR15_A {
            #[doc = "0: Low speed"]
            LOWSPEED = 0,
            #[doc = "1: Medium speed"]
            MEDIUMSPEED = 1,
            #[doc = "2: High speed"]
            HIGHSPEED = 2,
            #[doc = "3: Very high speed"]
            VERYHIGHSPEED = 3,
        }
        impl From<OSPEEDR15_A> for u8 {
            #[inline(always)]
            fn from(variant: OSPEEDR15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `OSPEEDR15`"]
        pub type OSPEEDR15_R = crate::R<u8, OSPEEDR15_A>;
        impl OSPEEDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OSPEEDR15_A {
                match self.bits {
                    0 => OSPEEDR15_A::LOWSPEED,
                    1 => OSPEEDR15_A::MEDIUMSPEED,
                    2 => OSPEEDR15_A::HIGHSPEED,
                    3 => OSPEEDR15_A::VERYHIGHSPEED,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `LOWSPEED`"]
            #[inline(always)]
            pub fn is_low_speed(&self) -> bool {
                *self == OSPEEDR15_A::LOWSPEED
            }
            #[doc = "Checks if the value of the field is `MEDIUMSPEED`"]
            #[inline(always)]
            pub fn is_medium_speed(&self) -> bool {
                *self == OSPEEDR15_A::MEDIUMSPEED
            }
            #[doc = "Checks if the value of the field is `HIGHSPEED`"]
            #[inline(always)]
            pub fn is_high_speed(&self) -> bool {
                *self == OSPEEDR15_A::HIGHSPEED
            }
            #[doc = "Checks if the value of the field is `VERYHIGHSPEED`"]
            #[inline(always)]
            pub fn is_very_high_speed(&self) -> bool {
                *self == OSPEEDR15_A::VERYHIGHSPEED
            }
        }
        #[doc = "Write proxy for field `OSPEEDR15`"]
        pub struct OSPEEDR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR14_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR14`"]
        pub type OSPEEDR14_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR14`"]
        pub struct OSPEEDR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR13_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR13`"]
        pub type OSPEEDR13_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR13`"]
        pub struct OSPEEDR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR12_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR12`"]
        pub type OSPEEDR12_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR12`"]
        pub struct OSPEEDR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR11_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR11`"]
        pub type OSPEEDR11_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR11`"]
        pub struct OSPEEDR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR10_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR10`"]
        pub type OSPEEDR10_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR10`"]
        pub struct OSPEEDR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR9_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR9`"]
        pub type OSPEEDR9_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR9`"]
        pub struct OSPEEDR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR8_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR8`"]
        pub type OSPEEDR8_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR8`"]
        pub struct OSPEEDR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR7_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR7`"]
        pub type OSPEEDR7_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR7`"]
        pub struct OSPEEDR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR6_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR6`"]
        pub type OSPEEDR6_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR6`"]
        pub struct OSPEEDR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR5_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR5`"]
        pub type OSPEEDR5_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR5`"]
        pub struct OSPEEDR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR4_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR4`"]
        pub type OSPEEDR4_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR4`"]
        pub struct OSPEEDR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR3_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR3`"]
        pub type OSPEEDR3_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR3`"]
        pub struct OSPEEDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR2_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR2`"]
        pub type OSPEEDR2_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR2`"]
        pub struct OSPEEDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR1_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR1`"]
        pub type OSPEEDR1_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR1`"]
        pub struct OSPEEDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR0_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR0`"]
        pub type OSPEEDR0_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR0`"]
        pub struct OSPEEDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr15(&self) -> OSPEEDR15_R {
                OSPEEDR15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr14(&self) -> OSPEEDR14_R {
                OSPEEDR14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr13(&self) -> OSPEEDR13_R {
                OSPEEDR13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr12(&self) -> OSPEEDR12_R {
                OSPEEDR12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr11(&self) -> OSPEEDR11_R {
                OSPEEDR11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr10(&self) -> OSPEEDR10_R {
                OSPEEDR10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr9(&self) -> OSPEEDR9_R {
                OSPEEDR9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr8(&self) -> OSPEEDR8_R {
                OSPEEDR8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr7(&self) -> OSPEEDR7_R {
                OSPEEDR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr6(&self) -> OSPEEDR6_R {
                OSPEEDR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr5(&self) -> OSPEEDR5_R {
                OSPEEDR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr4(&self) -> OSPEEDR4_R {
                OSPEEDR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr3(&self) -> OSPEEDR3_R {
                OSPEEDR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr2(&self) -> OSPEEDR2_R {
                OSPEEDR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr1(&self) -> OSPEEDR1_R {
                OSPEEDR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr0(&self) -> OSPEEDR0_R {
                OSPEEDR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr15(&mut self) -> OSPEEDR15_W {
                OSPEEDR15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr14(&mut self) -> OSPEEDR14_W {
                OSPEEDR14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr13(&mut self) -> OSPEEDR13_W {
                OSPEEDR13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr12(&mut self) -> OSPEEDR12_W {
                OSPEEDR12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr11(&mut self) -> OSPEEDR11_W {
                OSPEEDR11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr10(&mut self) -> OSPEEDR10_W {
                OSPEEDR10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr9(&mut self) -> OSPEEDR9_W {
                OSPEEDR9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr8(&mut self) -> OSPEEDR8_W {
                OSPEEDR8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr7(&mut self) -> OSPEEDR7_W {
                OSPEEDR7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr6(&mut self) -> OSPEEDR6_W {
                OSPEEDR6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr5(&mut self) -> OSPEEDR5_W {
                OSPEEDR5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr4(&mut self) -> OSPEEDR4_W {
                OSPEEDR4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr3(&mut self) -> OSPEEDR3_W {
                OSPEEDR3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr2(&mut self) -> OSPEEDR2_W {
                OSPEEDR2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr1(&mut self) -> OSPEEDR1_W {
                OSPEEDR1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr0(&mut self) -> OSPEEDR0_W {
                OSPEEDR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port pull-up/pull-down register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pupdr](pupdr) module"]
    pub type PUPDR = crate::Reg<u32, _PUPDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PUPDR;
    #[doc = "`read()` method returns [pupdr::R](pupdr::R) reader structure"]
    impl crate::Readable for PUPDR {}
    #[doc = "`write(|w| ..)` method takes [pupdr::W](pupdr::W) writer structure"]
    impl crate::Writable for PUPDR {}
    #[doc = "GPIO port pull-up/pull-down register"]
    pub mod pupdr {
        #[doc = "Reader of register PUPDR"]
        pub type R = crate::R<u32, super::PUPDR>;
        #[doc = "Writer for register PUPDR"]
        pub type W = crate::W<u32, super::PUPDR>;
        #[doc = "Register PUPDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PUPDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PUPDR15_A {
            #[doc = "0: No pull-up, pull-down"]
            FLOATING = 0,
            #[doc = "1: Pull-up"]
            PULLUP = 1,
            #[doc = "2: Pull-down"]
            PULLDOWN = 2,
        }
        impl From<PUPDR15_A> for u8 {
            #[inline(always)]
            fn from(variant: PUPDR15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PUPDR15`"]
        pub type PUPDR15_R = crate::R<u8, PUPDR15_A>;
        impl PUPDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, PUPDR15_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(PUPDR15_A::FLOATING),
                    1 => Val(PUPDR15_A::PULLUP),
                    2 => Val(PUPDR15_A::PULLDOWN),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `FLOATING`"]
            #[inline(always)]
            pub fn is_floating(&self) -> bool {
                *self == PUPDR15_A::FLOATING
            }
            #[doc = "Checks if the value of the field is `PULLUP`"]
            #[inline(always)]
            pub fn is_pull_up(&self) -> bool {
                *self == PUPDR15_A::PULLUP
            }
            #[doc = "Checks if the value of the field is `PULLDOWN`"]
            #[inline(always)]
            pub fn is_pull_down(&self) -> bool {
                *self == PUPDR15_A::PULLDOWN
            }
        }
        #[doc = "Write proxy for field `PUPDR15`"]
        pub struct PUPDR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR15_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR14_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR14`"]
        pub type PUPDR14_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR14`"]
        pub struct PUPDR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR14_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR13_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR13`"]
        pub type PUPDR13_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR13`"]
        pub struct PUPDR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR13_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR12_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR12`"]
        pub type PUPDR12_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR12`"]
        pub struct PUPDR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR12_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR11_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR11`"]
        pub type PUPDR11_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR11`"]
        pub struct PUPDR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR11_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR10_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR10`"]
        pub type PUPDR10_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR10`"]
        pub struct PUPDR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR10_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR9_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR9`"]
        pub type PUPDR9_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR9`"]
        pub struct PUPDR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR9_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR8_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR8`"]
        pub type PUPDR8_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR8`"]
        pub struct PUPDR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR8_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR7_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR7`"]
        pub type PUPDR7_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR7`"]
        pub struct PUPDR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR7_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR6_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR6`"]
        pub type PUPDR6_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR6`"]
        pub struct PUPDR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR6_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR5_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR5`"]
        pub type PUPDR5_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR5`"]
        pub struct PUPDR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR5_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR4_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR4`"]
        pub type PUPDR4_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR4`"]
        pub struct PUPDR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR4_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR3_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR3`"]
        pub type PUPDR3_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR3`"]
        pub struct PUPDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR3_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR2_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR2`"]
        pub type PUPDR2_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR2`"]
        pub struct PUPDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR2_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR1_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR1`"]
        pub type PUPDR1_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR1`"]
        pub struct PUPDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR1_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR0_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR0`"]
        pub type PUPDR0_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR0`"]
        pub struct PUPDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR0_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr15(&self) -> PUPDR15_R {
                PUPDR15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr14(&self) -> PUPDR14_R {
                PUPDR14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr13(&self) -> PUPDR13_R {
                PUPDR13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr12(&self) -> PUPDR12_R {
                PUPDR12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr11(&self) -> PUPDR11_R {
                PUPDR11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr10(&self) -> PUPDR10_R {
                PUPDR10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr9(&self) -> PUPDR9_R {
                PUPDR9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr8(&self) -> PUPDR8_R {
                PUPDR8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr7(&self) -> PUPDR7_R {
                PUPDR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr6(&self) -> PUPDR6_R {
                PUPDR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr5(&self) -> PUPDR5_R {
                PUPDR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr4(&self) -> PUPDR4_R {
                PUPDR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr3(&self) -> PUPDR3_R {
                PUPDR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr2(&self) -> PUPDR2_R {
                PUPDR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr1(&self) -> PUPDR1_R {
                PUPDR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr0(&self) -> PUPDR0_R {
                PUPDR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr15(&mut self) -> PUPDR15_W {
                PUPDR15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr14(&mut self) -> PUPDR14_W {
                PUPDR14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr13(&mut self) -> PUPDR13_W {
                PUPDR13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr12(&mut self) -> PUPDR12_W {
                PUPDR12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr11(&mut self) -> PUPDR11_W {
                PUPDR11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr10(&mut self) -> PUPDR10_W {
                PUPDR10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr9(&mut self) -> PUPDR9_W {
                PUPDR9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr8(&mut self) -> PUPDR8_W {
                PUPDR8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr7(&mut self) -> PUPDR7_W {
                PUPDR7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr6(&mut self) -> PUPDR6_W {
                PUPDR6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr5(&mut self) -> PUPDR5_W {
                PUPDR5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr4(&mut self) -> PUPDR4_W {
                PUPDR4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr3(&mut self) -> PUPDR3_W {
                PUPDR3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr2(&mut self) -> PUPDR2_W {
                PUPDR2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr1(&mut self) -> PUPDR1_W {
                PUPDR1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr0(&mut self) -> PUPDR0_W {
                PUPDR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port input data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idr](idr) module"]
    pub type IDR = crate::Reg<u32, _IDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IDR;
    #[doc = "`read()` method returns [idr::R](idr::R) reader structure"]
    impl crate::Readable for IDR {}
    #[doc = "GPIO port input data register"]
    pub mod idr {
        #[doc = "Reader of register IDR"]
        pub type R = crate::R<u32, super::IDR>;
        #[doc = "Port input data (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IDR15_A {
            #[doc = "1: Input is logic high"]
            HIGH = 1,
            #[doc = "0: Input is logic low"]
            LOW = 0,
        }
        impl From<IDR15_A> for bool {
            #[inline(always)]
            fn from(variant: IDR15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IDR15`"]
        pub type IDR15_R = crate::R<bool, IDR15_A>;
        impl IDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IDR15_A {
                match self.bits {
                    true => IDR15_A::HIGH,
                    false => IDR15_A::LOW,
                }
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == IDR15_A::HIGH
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == IDR15_A::LOW
            }
        }
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR14_A = IDR15_A;
        #[doc = "Reader of field `IDR14`"]
        pub type IDR14_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR13_A = IDR15_A;
        #[doc = "Reader of field `IDR13`"]
        pub type IDR13_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR12_A = IDR15_A;
        #[doc = "Reader of field `IDR12`"]
        pub type IDR12_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR11_A = IDR15_A;
        #[doc = "Reader of field `IDR11`"]
        pub type IDR11_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR10_A = IDR15_A;
        #[doc = "Reader of field `IDR10`"]
        pub type IDR10_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR9_A = IDR15_A;
        #[doc = "Reader of field `IDR9`"]
        pub type IDR9_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR8_A = IDR15_A;
        #[doc = "Reader of field `IDR8`"]
        pub type IDR8_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR7_A = IDR15_A;
        #[doc = "Reader of field `IDR7`"]
        pub type IDR7_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR6_A = IDR15_A;
        #[doc = "Reader of field `IDR6`"]
        pub type IDR6_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR5_A = IDR15_A;
        #[doc = "Reader of field `IDR5`"]
        pub type IDR5_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR4_A = IDR15_A;
        #[doc = "Reader of field `IDR4`"]
        pub type IDR4_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR3_A = IDR15_A;
        #[doc = "Reader of field `IDR3`"]
        pub type IDR3_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR2_A = IDR15_A;
        #[doc = "Reader of field `IDR2`"]
        pub type IDR2_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR1_A = IDR15_A;
        #[doc = "Reader of field `IDR1`"]
        pub type IDR1_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR0_A = IDR15_A;
        #[doc = "Reader of field `IDR0`"]
        pub type IDR0_R = crate::R<bool, IDR15_A>;
        impl R {
            #[doc = "Bit 15 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr15(&self) -> IDR15_R {
                IDR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr14(&self) -> IDR14_R {
                IDR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr13(&self) -> IDR13_R {
                IDR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr12(&self) -> IDR12_R {
                IDR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr11(&self) -> IDR11_R {
                IDR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr10(&self) -> IDR10_R {
                IDR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr9(&self) -> IDR9_R {
                IDR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr8(&self) -> IDR8_R {
                IDR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr7(&self) -> IDR7_R {
                IDR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr6(&self) -> IDR6_R {
                IDR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr5(&self) -> IDR5_R {
                IDR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr4(&self) -> IDR4_R {
                IDR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr3(&self) -> IDR3_R {
                IDR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr2(&self) -> IDR2_R {
                IDR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr1(&self) -> IDR1_R {
                IDR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr0(&self) -> IDR0_R {
                IDR0_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "GPIO port output data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [odr](odr) module"]
    pub type ODR = crate::Reg<u32, _ODR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ODR;
    #[doc = "`read()` method returns [odr::R](odr::R) reader structure"]
    impl crate::Readable for ODR {}
    #[doc = "`write(|w| ..)` method takes [odr::W](odr::W) writer structure"]
    impl crate::Writable for ODR {}
    #[doc = "GPIO port output data register"]
    pub mod odr {
        #[doc = "Reader of register ODR"]
        pub type R = crate::R<u32, super::ODR>;
        #[doc = "Writer for register ODR"]
        pub type W = crate::W<u32, super::ODR>;
        #[doc = "Register ODR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ODR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port output data (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ODR15_A {
            #[doc = "1: Set output to logic high"]
            HIGH = 1,
            #[doc = "0: Set output to logic low"]
            LOW = 0,
        }
        impl From<ODR15_A> for bool {
            #[inline(always)]
            fn from(variant: ODR15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ODR15`"]
        pub type ODR15_R = crate::R<bool, ODR15_A>;
        impl ODR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ODR15_A {
                match self.bits {
                    true => ODR15_A::HIGH,
                    false => ODR15_A::LOW,
                }
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == ODR15_A::HIGH
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == ODR15_A::LOW
            }
        }
        #[doc = "Write proxy for field `ODR15`"]
        pub struct ODR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR14_A = ODR15_A;
        #[doc = "Reader of field `ODR14`"]
        pub type ODR14_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR14`"]
        pub struct ODR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR13_A = ODR15_A;
        #[doc = "Reader of field `ODR13`"]
        pub type ODR13_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR13`"]
        pub struct ODR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR12_A = ODR15_A;
        #[doc = "Reader of field `ODR12`"]
        pub type ODR12_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR12`"]
        pub struct ODR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR11_A = ODR15_A;
        #[doc = "Reader of field `ODR11`"]
        pub type ODR11_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR11`"]
        pub struct ODR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR10_A = ODR15_A;
        #[doc = "Reader of field `ODR10`"]
        pub type ODR10_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR10`"]
        pub struct ODR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR9_A = ODR15_A;
        #[doc = "Reader of field `ODR9`"]
        pub type ODR9_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR9`"]
        pub struct ODR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR8_A = ODR15_A;
        #[doc = "Reader of field `ODR8`"]
        pub type ODR8_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR8`"]
        pub struct ODR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR7_A = ODR15_A;
        #[doc = "Reader of field `ODR7`"]
        pub type ODR7_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR7`"]
        pub struct ODR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR6_A = ODR15_A;
        #[doc = "Reader of field `ODR6`"]
        pub type ODR6_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR6`"]
        pub struct ODR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR5_A = ODR15_A;
        #[doc = "Reader of field `ODR5`"]
        pub type ODR5_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR5`"]
        pub struct ODR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR4_A = ODR15_A;
        #[doc = "Reader of field `ODR4`"]
        pub type ODR4_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR4`"]
        pub struct ODR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR3_A = ODR15_A;
        #[doc = "Reader of field `ODR3`"]
        pub type ODR3_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR3`"]
        pub struct ODR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR2_A = ODR15_A;
        #[doc = "Reader of field `ODR2`"]
        pub type ODR2_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR2`"]
        pub struct ODR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR1_A = ODR15_A;
        #[doc = "Reader of field `ODR1`"]
        pub type ODR1_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR1`"]
        pub struct ODR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR0_A = ODR15_A;
        #[doc = "Reader of field `ODR0`"]
        pub type ODR0_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR0`"]
        pub struct ODR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr15(&self) -> ODR15_R {
                ODR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr14(&self) -> ODR14_R {
                ODR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr13(&self) -> ODR13_R {
                ODR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr12(&self) -> ODR12_R {
                ODR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr11(&self) -> ODR11_R {
                ODR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr10(&self) -> ODR10_R {
                ODR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr9(&self) -> ODR9_R {
                ODR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr8(&self) -> ODR8_R {
                ODR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr7(&self) -> ODR7_R {
                ODR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr6(&self) -> ODR6_R {
                ODR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr5(&self) -> ODR5_R {
                ODR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr4(&self) -> ODR4_R {
                ODR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr3(&self) -> ODR3_R {
                ODR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr2(&self) -> ODR2_R {
                ODR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr1(&self) -> ODR1_R {
                ODR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr0(&self) -> ODR0_R {
                ODR0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr15(&mut self) -> ODR15_W {
                ODR15_W { w: self }
            }
            #[doc = "Bit 14 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr14(&mut self) -> ODR14_W {
                ODR14_W { w: self }
            }
            #[doc = "Bit 13 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr13(&mut self) -> ODR13_W {
                ODR13_W { w: self }
            }
            #[doc = "Bit 12 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr12(&mut self) -> ODR12_W {
                ODR12_W { w: self }
            }
            #[doc = "Bit 11 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr11(&mut self) -> ODR11_W {
                ODR11_W { w: self }
            }
            #[doc = "Bit 10 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr10(&mut self) -> ODR10_W {
                ODR10_W { w: self }
            }
            #[doc = "Bit 9 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr9(&mut self) -> ODR9_W {
                ODR9_W { w: self }
            }
            #[doc = "Bit 8 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr8(&mut self) -> ODR8_W {
                ODR8_W { w: self }
            }
            #[doc = "Bit 7 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr7(&mut self) -> ODR7_W {
                ODR7_W { w: self }
            }
            #[doc = "Bit 6 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr6(&mut self) -> ODR6_W {
                ODR6_W { w: self }
            }
            #[doc = "Bit 5 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr5(&mut self) -> ODR5_W {
                ODR5_W { w: self }
            }
            #[doc = "Bit 4 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr4(&mut self) -> ODR4_W {
                ODR4_W { w: self }
            }
            #[doc = "Bit 3 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr3(&mut self) -> ODR3_W {
                ODR3_W { w: self }
            }
            #[doc = "Bit 2 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr2(&mut self) -> ODR2_W {
                ODR2_W { w: self }
            }
            #[doc = "Bit 1 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr1(&mut self) -> ODR1_W {
                ODR1_W { w: self }
            }
            #[doc = "Bit 0 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr0(&mut self) -> ODR0_W {
                ODR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port bit set/reset register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bsrr](bsrr) module"]
    pub type BSRR = crate::Reg<u32, _BSRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BSRR;
    #[doc = "`write(|w| ..)` method takes [bsrr::W](bsrr::W) writer structure"]
    impl crate::Writable for BSRR {}
    #[doc = "GPIO port bit set/reset register"]
    pub mod bsrr {
        #[doc = "Writer for register BSRR"]
        pub type W = crate::W<u32, super::BSRR>;
        #[doc = "Register BSRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BSRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BR15_AW {
            #[doc = "1: Resets the corresponding ODRx bit"]
            RESET = 1,
        }
        impl From<BR15_AW> for bool {
            #[inline(always)]
            fn from(variant: BR15_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BR15`"]
        pub struct BR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR14_AW = BR15_AW;
        #[doc = "Write proxy for field `BR14`"]
        pub struct BR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR13_AW = BR15_AW;
        #[doc = "Write proxy for field `BR13`"]
        pub struct BR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR12_AW = BR15_AW;
        #[doc = "Write proxy for field `BR12`"]
        pub struct BR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR11_AW = BR15_AW;
        #[doc = "Write proxy for field `BR11`"]
        pub struct BR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR10_AW = BR15_AW;
        #[doc = "Write proxy for field `BR10`"]
        pub struct BR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR9_AW = BR15_AW;
        #[doc = "Write proxy for field `BR9`"]
        pub struct BR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR8_AW = BR15_AW;
        #[doc = "Write proxy for field `BR8`"]
        pub struct BR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR7_AW = BR15_AW;
        #[doc = "Write proxy for field `BR7`"]
        pub struct BR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR6_AW = BR15_AW;
        #[doc = "Write proxy for field `BR6`"]
        pub struct BR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR5_AW = BR15_AW;
        #[doc = "Write proxy for field `BR5`"]
        pub struct BR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR4_AW = BR15_AW;
        #[doc = "Write proxy for field `BR4`"]
        pub struct BR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR3_AW = BR15_AW;
        #[doc = "Write proxy for field `BR3`"]
        pub struct BR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR2_AW = BR15_AW;
        #[doc = "Write proxy for field `BR2`"]
        pub struct BR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR1_AW = BR15_AW;
        #[doc = "Write proxy for field `BR1`"]
        pub struct BR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BR0_AW = BR15_AW;
        #[doc = "Write proxy for field `BR0`"]
        pub struct BR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BS15_AW {
            #[doc = "1: Sets the corresponding ODRx bit"]
            SET = 1,
        }
        impl From<BS15_AW> for bool {
            #[inline(always)]
            fn from(variant: BS15_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BS15`"]
        pub struct BS15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS14_AW = BS15_AW;
        #[doc = "Write proxy for field `BS14`"]
        pub struct BS14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS13_AW = BS15_AW;
        #[doc = "Write proxy for field `BS13`"]
        pub struct BS13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS12_AW = BS15_AW;
        #[doc = "Write proxy for field `BS12`"]
        pub struct BS12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS11_AW = BS15_AW;
        #[doc = "Write proxy for field `BS11`"]
        pub struct BS11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS10_AW = BS15_AW;
        #[doc = "Write proxy for field `BS10`"]
        pub struct BS10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS9_AW = BS15_AW;
        #[doc = "Write proxy for field `BS9`"]
        pub struct BS9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS8_AW = BS15_AW;
        #[doc = "Write proxy for field `BS8`"]
        pub struct BS8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS7_AW = BS15_AW;
        #[doc = "Write proxy for field `BS7`"]
        pub struct BS7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS6_AW = BS15_AW;
        #[doc = "Write proxy for field `BS6`"]
        pub struct BS6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS5_AW = BS15_AW;
        #[doc = "Write proxy for field `BS5`"]
        pub struct BS5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS4_AW = BS15_AW;
        #[doc = "Write proxy for field `BS4`"]
        pub struct BS4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS3_AW = BS15_AW;
        #[doc = "Write proxy for field `BS3`"]
        pub struct BS3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS2_AW = BS15_AW;
        #[doc = "Write proxy for field `BS2`"]
        pub struct BS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS1_AW = BS15_AW;
        #[doc = "Write proxy for field `BS1`"]
        pub struct BS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS0_AW = BS15_AW;
        #[doc = "Write proxy for field `BS0`"]
        pub struct BS0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 31 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br15(&mut self) -> BR15_W {
                BR15_W { w: self }
            }
            #[doc = "Bit 30 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br14(&mut self) -> BR14_W {
                BR14_W { w: self }
            }
            #[doc = "Bit 29 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br13(&mut self) -> BR13_W {
                BR13_W { w: self }
            }
            #[doc = "Bit 28 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br12(&mut self) -> BR12_W {
                BR12_W { w: self }
            }
            #[doc = "Bit 27 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br11(&mut self) -> BR11_W {
                BR11_W { w: self }
            }
            #[doc = "Bit 26 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br10(&mut self) -> BR10_W {
                BR10_W { w: self }
            }
            #[doc = "Bit 25 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br9(&mut self) -> BR9_W {
                BR9_W { w: self }
            }
            #[doc = "Bit 24 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br8(&mut self) -> BR8_W {
                BR8_W { w: self }
            }
            #[doc = "Bit 23 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br7(&mut self) -> BR7_W {
                BR7_W { w: self }
            }
            #[doc = "Bit 22 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br6(&mut self) -> BR6_W {
                BR6_W { w: self }
            }
            #[doc = "Bit 21 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br5(&mut self) -> BR5_W {
                BR5_W { w: self }
            }
            #[doc = "Bit 20 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br4(&mut self) -> BR4_W {
                BR4_W { w: self }
            }
            #[doc = "Bit 19 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br3(&mut self) -> BR3_W {
                BR3_W { w: self }
            }
            #[doc = "Bit 18 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br2(&mut self) -> BR2_W {
                BR2_W { w: self }
            }
            #[doc = "Bit 17 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br1(&mut self) -> BR1_W {
                BR1_W { w: self }
            }
            #[doc = "Bit 16 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn br0(&mut self) -> BR0_W {
                BR0_W { w: self }
            }
            #[doc = "Bit 15 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs15(&mut self) -> BS15_W {
                BS15_W { w: self }
            }
            #[doc = "Bit 14 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs14(&mut self) -> BS14_W {
                BS14_W { w: self }
            }
            #[doc = "Bit 13 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs13(&mut self) -> BS13_W {
                BS13_W { w: self }
            }
            #[doc = "Bit 12 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs12(&mut self) -> BS12_W {
                BS12_W { w: self }
            }
            #[doc = "Bit 11 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs11(&mut self) -> BS11_W {
                BS11_W { w: self }
            }
            #[doc = "Bit 10 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs10(&mut self) -> BS10_W {
                BS10_W { w: self }
            }
            #[doc = "Bit 9 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs9(&mut self) -> BS9_W {
                BS9_W { w: self }
            }
            #[doc = "Bit 8 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs8(&mut self) -> BS8_W {
                BS8_W { w: self }
            }
            #[doc = "Bit 7 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs7(&mut self) -> BS7_W {
                BS7_W { w: self }
            }
            #[doc = "Bit 6 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs6(&mut self) -> BS6_W {
                BS6_W { w: self }
            }
            #[doc = "Bit 5 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs5(&mut self) -> BS5_W {
                BS5_W { w: self }
            }
            #[doc = "Bit 4 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs4(&mut self) -> BS4_W {
                BS4_W { w: self }
            }
            #[doc = "Bit 3 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs3(&mut self) -> BS3_W {
                BS3_W { w: self }
            }
            #[doc = "Bit 2 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs2(&mut self) -> BS2_W {
                BS2_W { w: self }
            }
            #[doc = "Bit 1 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs1(&mut self) -> BS1_W {
                BS1_W { w: self }
            }
            #[doc = "Bit 0 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs0(&mut self) -> BS0_W {
                BS0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port configuration lock register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lckr](lckr) module"]
    pub type LCKR = crate::Reg<u32, _LCKR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LCKR;
    #[doc = "`read()` method returns [lckr::R](lckr::R) reader structure"]
    impl crate::Readable for LCKR {}
    #[doc = "`write(|w| ..)` method takes [lckr::W](lckr::W) writer structure"]
    impl crate::Writable for LCKR {}
    #[doc = "GPIO port configuration lock register"]
    pub mod lckr {
        #[doc = "Reader of register LCKR"]
        pub type R = crate::R<u32, super::LCKR>;
        #[doc = "Writer for register LCKR"]
        pub type W = crate::W<u32, super::LCKR>;
        #[doc = "Register LCKR `reset()`'s with value 0"]
        impl crate::ResetValue for super::LCKR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x lock bit y\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCKK_A {
            #[doc = "0: Port configuration lock key not active"]
            NOTACTIVE = 0,
            #[doc = "1: Port configuration lock key active"]
            ACTIVE = 1,
        }
        impl From<LCKK_A> for bool {
            #[inline(always)]
            fn from(variant: LCKK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCKK`"]
        pub type LCKK_R = crate::R<bool, LCKK_A>;
        impl LCKK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCKK_A {
                match self.bits {
                    false => LCKK_A::NOTACTIVE,
                    true => LCKK_A::ACTIVE,
                }
            }
            #[doc = "Checks if the value of the field is `NOTACTIVE`"]
            #[inline(always)]
            pub fn is_not_active(&self) -> bool {
                *self == LCKK_A::NOTACTIVE
            }
            #[doc = "Checks if the value of the field is `ACTIVE`"]
            #[inline(always)]
            pub fn is_active(&self) -> bool {
                *self == LCKK_A::ACTIVE
            }
        }
        #[doc = "Write proxy for field `LCKK`"]
        pub struct LCKK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCKK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCKK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration lock key not active"]
            #[inline(always)]
            pub fn not_active(self) -> &'a mut W {
                self.variant(LCKK_A::NOTACTIVE)
            }
            #[doc = "Port configuration lock key active"]
            #[inline(always)]
            pub fn active(self) -> &'a mut W {
                self.variant(LCKK_A::ACTIVE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCK15_A {
            #[doc = "0: Port configuration not locked"]
            UNLOCKED = 0,
            #[doc = "1: Port configuration locked"]
            LOCKED = 1,
        }
        impl From<LCK15_A> for bool {
            #[inline(always)]
            fn from(variant: LCK15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCK15`"]
        pub type LCK15_R = crate::R<bool, LCK15_A>;
        impl LCK15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCK15_A {
                match self.bits {
                    false => LCK15_A::UNLOCKED,
                    true => LCK15_A::LOCKED,
                }
            }
            #[doc = "Checks if the value of the field is `UNLOCKED`"]
            #[inline(always)]
            pub fn is_unlocked(&self) -> bool {
                *self == LCK15_A::UNLOCKED
            }
            #[doc = "Checks if the value of the field is `LOCKED`"]
            #[inline(always)]
            pub fn is_locked(&self) -> bool {
                *self == LCK15_A::LOCKED
            }
        }
        #[doc = "Write proxy for field `LCK15`"]
        pub struct LCK15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK14_A = LCK15_A;
        #[doc = "Reader of field `LCK14`"]
        pub type LCK14_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK14`"]
        pub struct LCK14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK13_A = LCK15_A;
        #[doc = "Reader of field `LCK13`"]
        pub type LCK13_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK13`"]
        pub struct LCK13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK12_A = LCK15_A;
        #[doc = "Reader of field `LCK12`"]
        pub type LCK12_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK12`"]
        pub struct LCK12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK11_A = LCK15_A;
        #[doc = "Reader of field `LCK11`"]
        pub type LCK11_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK11`"]
        pub struct LCK11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK10_A = LCK15_A;
        #[doc = "Reader of field `LCK10`"]
        pub type LCK10_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK10`"]
        pub struct LCK10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCK9_A {
            #[doc = "0: Port configuration not locked"]
            UNLOCKED = 0,
            #[doc = "1: Port configuration locked"]
            LOCKED = 1,
        }
        impl From<LCK9_A> for bool {
            #[inline(always)]
            fn from(variant: LCK9_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCK9`"]
        pub type LCK9_R = crate::R<bool, LCK9_A>;
        impl LCK9_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCK9_A {
                match self.bits {
                    false => LCK9_A::UNLOCKED,
                    true => LCK9_A::LOCKED,
                }
            }
            #[doc = "Checks if the value of the field is `UNLOCKED`"]
            #[inline(always)]
            pub fn is_unlocked(&self) -> bool {
                *self == LCK9_A::UNLOCKED
            }
            #[doc = "Checks if the value of the field is `LOCKED`"]
            #[inline(always)]
            pub fn is_locked(&self) -> bool {
                *self == LCK9_A::LOCKED
            }
        }
        #[doc = "Write proxy for field `LCK9`"]
        pub struct LCK9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK8_A = LCK9_A;
        #[doc = "Reader of field `LCK8`"]
        pub type LCK8_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK8`"]
        pub struct LCK8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK7_A = LCK9_A;
        #[doc = "Reader of field `LCK7`"]
        pub type LCK7_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK7`"]
        pub struct LCK7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK6_A = LCK9_A;
        #[doc = "Reader of field `LCK6`"]
        pub type LCK6_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK6`"]
        pub struct LCK6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK5_A = LCK9_A;
        #[doc = "Reader of field `LCK5`"]
        pub type LCK5_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK5`"]
        pub struct LCK5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK4_A = LCK9_A;
        #[doc = "Reader of field `LCK4`"]
        pub type LCK4_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK4`"]
        pub struct LCK4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK3_A = LCK9_A;
        #[doc = "Reader of field `LCK3`"]
        pub type LCK3_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK3`"]
        pub struct LCK3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK2_A = LCK9_A;
        #[doc = "Reader of field `LCK2`"]
        pub type LCK2_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK2`"]
        pub struct LCK2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK1_A = LCK9_A;
        #[doc = "Reader of field `LCK1`"]
        pub type LCK1_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK1`"]
        pub struct LCK1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK0_A = LCK9_A;
        #[doc = "Reader of field `LCK0`"]
        pub type LCK0_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK0`"]
        pub struct LCK0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - Port x lock bit y"]
            #[inline(always)]
            pub fn lckk(&self) -> LCKK_R {
                LCKK_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck15(&self) -> LCK15_R {
                LCK15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck14(&self) -> LCK14_R {
                LCK14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck13(&self) -> LCK13_R {
                LCK13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck12(&self) -> LCK12_R {
                LCK12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck11(&self) -> LCK11_R {
                LCK11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck10(&self) -> LCK10_R {
                LCK10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck9(&self) -> LCK9_R {
                LCK9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck8(&self) -> LCK8_R {
                LCK8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck7(&self) -> LCK7_R {
                LCK7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck6(&self) -> LCK6_R {
                LCK6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck5(&self) -> LCK5_R {
                LCK5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck4(&self) -> LCK4_R {
                LCK4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck3(&self) -> LCK3_R {
                LCK3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck2(&self) -> LCK2_R {
                LCK2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck1(&self) -> LCK1_R {
                LCK1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck0(&self) -> LCK0_R {
                LCK0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - Port x lock bit y"]
            #[inline(always)]
            pub fn lckk(&mut self) -> LCKK_W {
                LCKK_W { w: self }
            }
            #[doc = "Bit 15 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck15(&mut self) -> LCK15_W {
                LCK15_W { w: self }
            }
            #[doc = "Bit 14 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck14(&mut self) -> LCK14_W {
                LCK14_W { w: self }
            }
            #[doc = "Bit 13 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck13(&mut self) -> LCK13_W {
                LCK13_W { w: self }
            }
            #[doc = "Bit 12 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck12(&mut self) -> LCK12_W {
                LCK12_W { w: self }
            }
            #[doc = "Bit 11 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck11(&mut self) -> LCK11_W {
                LCK11_W { w: self }
            }
            #[doc = "Bit 10 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck10(&mut self) -> LCK10_W {
                LCK10_W { w: self }
            }
            #[doc = "Bit 9 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck9(&mut self) -> LCK9_W {
                LCK9_W { w: self }
            }
            #[doc = "Bit 8 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck8(&mut self) -> LCK8_W {
                LCK8_W { w: self }
            }
            #[doc = "Bit 7 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck7(&mut self) -> LCK7_W {
                LCK7_W { w: self }
            }
            #[doc = "Bit 6 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck6(&mut self) -> LCK6_W {
                LCK6_W { w: self }
            }
            #[doc = "Bit 5 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck5(&mut self) -> LCK5_W {
                LCK5_W { w: self }
            }
            #[doc = "Bit 4 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck4(&mut self) -> LCK4_W {
                LCK4_W { w: self }
            }
            #[doc = "Bit 3 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck3(&mut self) -> LCK3_W {
                LCK3_W { w: self }
            }
            #[doc = "Bit 2 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck2(&mut self) -> LCK2_W {
                LCK2_W { w: self }
            }
            #[doc = "Bit 1 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck1(&mut self) -> LCK1_W {
                LCK1_W { w: self }
            }
            #[doc = "Bit 0 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck0(&mut self) -> LCK0_W {
                LCK0_W { w: self }
            }
        }
    }
    #[doc = "GPIO alternate function low register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [afrl](afrl) module"]
    pub type AFRL = crate::Reg<u32, _AFRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AFRL;
    #[doc = "`read()` method returns [afrl::R](afrl::R) reader structure"]
    impl crate::Readable for AFRL {}
    #[doc = "`write(|w| ..)` method takes [afrl::W](afrl::W) writer structure"]
    impl crate::Writable for AFRL {}
    #[doc = "GPIO alternate function low register"]
    pub mod afrl {
        #[doc = "Reader of register AFRL"]
        pub type R = crate::R<u32, super::AFRL>;
        #[doc = "Writer for register AFRL"]
        pub type W = crate::W<u32, super::AFRL>;
        #[doc = "Register AFRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::AFRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum AFRL7_A {
            #[doc = "0: AF0"]
            AF0 = 0,
            #[doc = "1: AF1"]
            AF1 = 1,
            #[doc = "2: AF2"]
            AF2 = 2,
            #[doc = "3: AF3"]
            AF3 = 3,
            #[doc = "4: AF4"]
            AF4 = 4,
            #[doc = "5: AF5"]
            AF5 = 5,
            #[doc = "6: AF6"]
            AF6 = 6,
            #[doc = "7: AF7"]
            AF7 = 7,
            #[doc = "8: AF8"]
            AF8 = 8,
            #[doc = "9: AF9"]
            AF9 = 9,
            #[doc = "10: AF10"]
            AF10 = 10,
            #[doc = "11: AF11"]
            AF11 = 11,
            #[doc = "12: AF12"]
            AF12 = 12,
            #[doc = "13: AF13"]
            AF13 = 13,
            #[doc = "14: AF14"]
            AF14 = 14,
            #[doc = "15: AF15"]
            AF15 = 15,
        }
        impl From<AFRL7_A> for u8 {
            #[inline(always)]
            fn from(variant: AFRL7_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `AFRL7`"]
        pub type AFRL7_R = crate::R<u8, AFRL7_A>;
        impl AFRL7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AFRL7_A {
                match self.bits {
                    0 => AFRL7_A::AF0,
                    1 => AFRL7_A::AF1,
                    2 => AFRL7_A::AF2,
                    3 => AFRL7_A::AF3,
                    4 => AFRL7_A::AF4,
                    5 => AFRL7_A::AF5,
                    6 => AFRL7_A::AF6,
                    7 => AFRL7_A::AF7,
                    8 => AFRL7_A::AF8,
                    9 => AFRL7_A::AF9,
                    10 => AFRL7_A::AF10,
                    11 => AFRL7_A::AF11,
                    12 => AFRL7_A::AF12,
                    13 => AFRL7_A::AF13,
                    14 => AFRL7_A::AF14,
                    15 => AFRL7_A::AF15,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `AF0`"]
            #[inline(always)]
            pub fn is_af0(&self) -> bool {
                *self == AFRL7_A::AF0
            }
            #[doc = "Checks if the value of the field is `AF1`"]
            #[inline(always)]
            pub fn is_af1(&self) -> bool {
                *self == AFRL7_A::AF1
            }
            #[doc = "Checks if the value of the field is `AF2`"]
            #[inline(always)]
            pub fn is_af2(&self) -> bool {
                *self == AFRL7_A::AF2
            }
            #[doc = "Checks if the value of the field is `AF3`"]
            #[inline(always)]
            pub fn is_af3(&self) -> bool {
                *self == AFRL7_A::AF3
            }
            #[doc = "Checks if the value of the field is `AF4`"]
            #[inline(always)]
            pub fn is_af4(&self) -> bool {
                *self == AFRL7_A::AF4
            }
            #[doc = "Checks if the value of the field is `AF5`"]
            #[inline(always)]
            pub fn is_af5(&self) -> bool {
                *self == AFRL7_A::AF5
            }
            #[doc = "Checks if the value of the field is `AF6`"]
            #[inline(always)]
            pub fn is_af6(&self) -> bool {
                *self == AFRL7_A::AF6
            }
            #[doc = "Checks if the value of the field is `AF7`"]
            #[inline(always)]
            pub fn is_af7(&self) -> bool {
                *self == AFRL7_A::AF7
            }
            #[doc = "Checks if the value of the field is `AF8`"]
            #[inline(always)]
            pub fn is_af8(&self) -> bool {
                *self == AFRL7_A::AF8
            }
            #[doc = "Checks if the value of the field is `AF9`"]
            #[inline(always)]
            pub fn is_af9(&self) -> bool {
                *self == AFRL7_A::AF9
            }
            #[doc = "Checks if the value of the field is `AF10`"]
            #[inline(always)]
            pub fn is_af10(&self) -> bool {
                *self == AFRL7_A::AF10
            }
            #[doc = "Checks if the value of the field is `AF11`"]
            #[inline(always)]
            pub fn is_af11(&self) -> bool {
                *self == AFRL7_A::AF11
            }
            #[doc = "Checks if the value of the field is `AF12`"]
            #[inline(always)]
            pub fn is_af12(&self) -> bool {
                *self == AFRL7_A::AF12
            }
            #[doc = "Checks if the value of the field is `AF13`"]
            #[inline(always)]
            pub fn is_af13(&self) -> bool {
                *self == AFRL7_A::AF13
            }
            #[doc = "Checks if the value of the field is `AF14`"]
            #[inline(always)]
            pub fn is_af14(&self) -> bool {
                *self == AFRL7_A::AF14
            }
            #[doc = "Checks if the value of the field is `AF15`"]
            #[inline(always)]
            pub fn is_af15(&self) -> bool {
                *self == AFRL7_A::AF15
            }
        }
        #[doc = "Write proxy for field `AFRL7`"]
        pub struct AFRL7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL6_A = AFRL7_A;
        #[doc = "Reader of field `AFRL6`"]
        pub type AFRL6_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL6`"]
        pub struct AFRL6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL5_A = AFRL7_A;
        #[doc = "Reader of field `AFRL5`"]
        pub type AFRL5_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL5`"]
        pub struct AFRL5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL4_A = AFRL7_A;
        #[doc = "Reader of field `AFRL4`"]
        pub type AFRL4_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL4`"]
        pub struct AFRL4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL3_A = AFRL7_A;
        #[doc = "Reader of field `AFRL3`"]
        pub type AFRL3_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL3`"]
        pub struct AFRL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL2_A = AFRL7_A;
        #[doc = "Reader of field `AFRL2`"]
        pub type AFRL2_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL2`"]
        pub struct AFRL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL1_A = AFRL7_A;
        #[doc = "Reader of field `AFRL1`"]
        pub type AFRL1_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL1`"]
        pub struct AFRL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL0_A = AFRL7_A;
        #[doc = "Reader of field `AFRL0`"]
        pub type AFRL0_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL0`"]
        pub struct AFRL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl7(&self) -> AFRL7_R {
                AFRL7_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl6(&self) -> AFRL6_R {
                AFRL6_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl5(&self) -> AFRL5_R {
                AFRL5_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl4(&self) -> AFRL4_R {
                AFRL4_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl3(&self) -> AFRL3_R {
                AFRL3_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl2(&self) -> AFRL2_R {
                AFRL2_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl1(&self) -> AFRL1_R {
                AFRL1_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl0(&self) -> AFRL0_R {
                AFRL0_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl7(&mut self) -> AFRL7_W {
                AFRL7_W { w: self }
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl6(&mut self) -> AFRL6_W {
                AFRL6_W { w: self }
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl5(&mut self) -> AFRL5_W {
                AFRL5_W { w: self }
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl4(&mut self) -> AFRL4_W {
                AFRL4_W { w: self }
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl3(&mut self) -> AFRL3_W {
                AFRL3_W { w: self }
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl2(&mut self) -> AFRL2_W {
                AFRL2_W { w: self }
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl1(&mut self) -> AFRL1_W {
                AFRL1_W { w: self }
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl0(&mut self) -> AFRL0_W {
                AFRL0_W { w: self }
            }
        }
    }
    #[doc = "GPIO alternate function high register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [afrh](afrh) module"]
    pub type AFRH = crate::Reg<u32, _AFRH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AFRH;
    #[doc = "`read()` method returns [afrh::R](afrh::R) reader structure"]
    impl crate::Readable for AFRH {}
    #[doc = "`write(|w| ..)` method takes [afrh::W](afrh::W) writer structure"]
    impl crate::Writable for AFRH {}
    #[doc = "GPIO alternate function high register"]
    pub mod afrh {
        #[doc = "Reader of register AFRH"]
        pub type R = crate::R<u32, super::AFRH>;
        #[doc = "Writer for register AFRH"]
        pub type W = crate::W<u32, super::AFRH>;
        #[doc = "Register AFRH `reset()`'s with value 0"]
        impl crate::ResetValue for super::AFRH {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum AFRH15_A {
            #[doc = "0: AF0"]
            AF0 = 0,
            #[doc = "1: AF1"]
            AF1 = 1,
            #[doc = "2: AF2"]
            AF2 = 2,
            #[doc = "3: AF3"]
            AF3 = 3,
            #[doc = "4: AF4"]
            AF4 = 4,
            #[doc = "5: AF5"]
            AF5 = 5,
            #[doc = "6: AF6"]
            AF6 = 6,
            #[doc = "7: AF7"]
            AF7 = 7,
            #[doc = "8: AF8"]
            AF8 = 8,
            #[doc = "9: AF9"]
            AF9 = 9,
            #[doc = "10: AF10"]
            AF10 = 10,
            #[doc = "11: AF11"]
            AF11 = 11,
            #[doc = "12: AF12"]
            AF12 = 12,
            #[doc = "13: AF13"]
            AF13 = 13,
            #[doc = "14: AF14"]
            AF14 = 14,
            #[doc = "15: AF15"]
            AF15 = 15,
        }
        impl From<AFRH15_A> for u8 {
            #[inline(always)]
            fn from(variant: AFRH15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `AFRH15`"]
        pub type AFRH15_R = crate::R<u8, AFRH15_A>;
        impl AFRH15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AFRH15_A {
                match self.bits {
                    0 => AFRH15_A::AF0,
                    1 => AFRH15_A::AF1,
                    2 => AFRH15_A::AF2,
                    3 => AFRH15_A::AF3,
                    4 => AFRH15_A::AF4,
                    5 => AFRH15_A::AF5,
                    6 => AFRH15_A::AF6,
                    7 => AFRH15_A::AF7,
                    8 => AFRH15_A::AF8,
                    9 => AFRH15_A::AF9,
                    10 => AFRH15_A::AF10,
                    11 => AFRH15_A::AF11,
                    12 => AFRH15_A::AF12,
                    13 => AFRH15_A::AF13,
                    14 => AFRH15_A::AF14,
                    15 => AFRH15_A::AF15,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `AF0`"]
            #[inline(always)]
            pub fn is_af0(&self) -> bool {
                *self == AFRH15_A::AF0
            }
            #[doc = "Checks if the value of the field is `AF1`"]
            #[inline(always)]
            pub fn is_af1(&self) -> bool {
                *self == AFRH15_A::AF1
            }
            #[doc = "Checks if the value of the field is `AF2`"]
            #[inline(always)]
            pub fn is_af2(&self) -> bool {
                *self == AFRH15_A::AF2
            }
            #[doc = "Checks if the value of the field is `AF3`"]
            #[inline(always)]
            pub fn is_af3(&self) -> bool {
                *self == AFRH15_A::AF3
            }
            #[doc = "Checks if the value of the field is `AF4`"]
            #[inline(always)]
            pub fn is_af4(&self) -> bool {
                *self == AFRH15_A::AF4
            }
            #[doc = "Checks if the value of the field is `AF5`"]
            #[inline(always)]
            pub fn is_af5(&self) -> bool {
                *self == AFRH15_A::AF5
            }
            #[doc = "Checks if the value of the field is `AF6`"]
            #[inline(always)]
            pub fn is_af6(&self) -> bool {
                *self == AFRH15_A::AF6
            }
            #[doc = "Checks if the value of the field is `AF7`"]
            #[inline(always)]
            pub fn is_af7(&self) -> bool {
                *self == AFRH15_A::AF7
            }
            #[doc = "Checks if the value of the field is `AF8`"]
            #[inline(always)]
            pub fn is_af8(&self) -> bool {
                *self == AFRH15_A::AF8
            }
            #[doc = "Checks if the value of the field is `AF9`"]
            #[inline(always)]
            pub fn is_af9(&self) -> bool {
                *self == AFRH15_A::AF9
            }
            #[doc = "Checks if the value of the field is `AF10`"]
            #[inline(always)]
            pub fn is_af10(&self) -> bool {
                *self == AFRH15_A::AF10
            }
            #[doc = "Checks if the value of the field is `AF11`"]
            #[inline(always)]
            pub fn is_af11(&self) -> bool {
                *self == AFRH15_A::AF11
            }
            #[doc = "Checks if the value of the field is `AF12`"]
            #[inline(always)]
            pub fn is_af12(&self) -> bool {
                *self == AFRH15_A::AF12
            }
            #[doc = "Checks if the value of the field is `AF13`"]
            #[inline(always)]
            pub fn is_af13(&self) -> bool {
                *self == AFRH15_A::AF13
            }
            #[doc = "Checks if the value of the field is `AF14`"]
            #[inline(always)]
            pub fn is_af14(&self) -> bool {
                *self == AFRH15_A::AF14
            }
            #[doc = "Checks if the value of the field is `AF15`"]
            #[inline(always)]
            pub fn is_af15(&self) -> bool {
                *self == AFRH15_A::AF15
            }
        }
        #[doc = "Write proxy for field `AFRH15`"]
        pub struct AFRH15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH14_A = AFRH15_A;
        #[doc = "Reader of field `AFRH14`"]
        pub type AFRH14_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH14`"]
        pub struct AFRH14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH13_A = AFRH15_A;
        #[doc = "Reader of field `AFRH13`"]
        pub type AFRH13_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH13`"]
        pub struct AFRH13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH12_A = AFRH15_A;
        #[doc = "Reader of field `AFRH12`"]
        pub type AFRH12_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH12`"]
        pub struct AFRH12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH11_A = AFRH15_A;
        #[doc = "Reader of field `AFRH11`"]
        pub type AFRH11_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH11`"]
        pub struct AFRH11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH10_A = AFRH15_A;
        #[doc = "Reader of field `AFRH10`"]
        pub type AFRH10_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH10`"]
        pub struct AFRH10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH9_A = AFRH15_A;
        #[doc = "Reader of field `AFRH9`"]
        pub type AFRH9_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH9`"]
        pub struct AFRH9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH8_A = AFRH15_A;
        #[doc = "Reader of field `AFRH8`"]
        pub type AFRH8_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH8`"]
        pub struct AFRH8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh15(&self) -> AFRH15_R {
                AFRH15_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh14(&self) -> AFRH14_R {
                AFRH14_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh13(&self) -> AFRH13_R {
                AFRH13_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh12(&self) -> AFRH12_R {
                AFRH12_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh11(&self) -> AFRH11_R {
                AFRH11_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh10(&self) -> AFRH10_R {
                AFRH10_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh9(&self) -> AFRH9_R {
                AFRH9_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh8(&self) -> AFRH8_R {
                AFRH8_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh15(&mut self) -> AFRH15_W {
                AFRH15_W { w: self }
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh14(&mut self) -> AFRH14_W {
                AFRH14_W { w: self }
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh13(&mut self) -> AFRH13_W {
                AFRH13_W { w: self }
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh12(&mut self) -> AFRH12_W {
                AFRH12_W { w: self }
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh11(&mut self) -> AFRH11_W {
                AFRH11_W { w: self }
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh10(&mut self) -> AFRH10_W {
                AFRH10_W { w: self }
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh9(&mut self) -> AFRH9_W {
                AFRH9_W { w: self }
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh8(&mut self) -> AFRH8_W {
                AFRH8_W { w: self }
            }
        }
    }
    #[doc = "Port bit reset register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [brr](brr) module"]
    pub type BRR = crate::Reg<u32, _BRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BRR;
    #[doc = "`write(|w| ..)` method takes [brr::W](brr::W) writer structure"]
    impl crate::Writable for BRR {}
    #[doc = "Port bit reset register"]
    pub mod brr {
        #[doc = "Writer for register BRR"]
        pub type W = crate::W<u32, super::BRR>;
        #[doc = "Register BRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x Reset bit y\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BR0_AW {
            #[doc = "0: No action on the corresponding ODx bit"]
            NOACTION = 0,
            #[doc = "1: Reset the ODx bit"]
            RESET = 1,
        }
        impl From<BR0_AW> for bool {
            #[inline(always)]
            fn from(variant: BR0_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BR0`"]
        pub struct BR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR1_AW = BR0_AW;
        #[doc = "Write proxy for field `BR1`"]
        pub struct BR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR2_AW = BR0_AW;
        #[doc = "Write proxy for field `BR2`"]
        pub struct BR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR3_AW = BR0_AW;
        #[doc = "Write proxy for field `BR3`"]
        pub struct BR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR4_AW = BR0_AW;
        #[doc = "Write proxy for field `BR4`"]
        pub struct BR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR5_AW = BR0_AW;
        #[doc = "Write proxy for field `BR5`"]
        pub struct BR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR6_AW = BR0_AW;
        #[doc = "Write proxy for field `BR6`"]
        pub struct BR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR7_AW = BR0_AW;
        #[doc = "Write proxy for field `BR7`"]
        pub struct BR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR8_AW = BR0_AW;
        #[doc = "Write proxy for field `BR8`"]
        pub struct BR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR9_AW = BR0_AW;
        #[doc = "Write proxy for field `BR9`"]
        pub struct BR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x Reset bit y\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BR10_AW {
            #[doc = "0: No action on the corresponding ODx bit"]
            NOACTION = 0,
            #[doc = "1: Reset the ODx bit"]
            RESET = 1,
        }
        impl From<BR10_AW> for bool {
            #[inline(always)]
            fn from(variant: BR10_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BR10`"]
        pub struct BR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR10_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR10_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR11_AW = BR10_AW;
        #[doc = "Write proxy for field `BR11`"]
        pub struct BR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR10_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR10_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR12_AW = BR10_AW;
        #[doc = "Write proxy for field `BR12`"]
        pub struct BR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR10_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR10_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR13_AW = BR10_AW;
        #[doc = "Write proxy for field `BR13`"]
        pub struct BR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR10_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR10_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR14_AW = BR10_AW;
        #[doc = "Write proxy for field `BR14`"]
        pub struct BR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR10_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR10_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR15_AW = BR10_AW;
        #[doc = "Write proxy for field `BR15`"]
        pub struct BR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR10_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR10_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br0(&mut self) -> BR0_W {
                BR0_W { w: self }
            }
            #[doc = "Bit 1 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br1(&mut self) -> BR1_W {
                BR1_W { w: self }
            }
            #[doc = "Bit 2 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br2(&mut self) -> BR2_W {
                BR2_W { w: self }
            }
            #[doc = "Bit 3 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br3(&mut self) -> BR3_W {
                BR3_W { w: self }
            }
            #[doc = "Bit 4 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br4(&mut self) -> BR4_W {
                BR4_W { w: self }
            }
            #[doc = "Bit 5 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br5(&mut self) -> BR5_W {
                BR5_W { w: self }
            }
            #[doc = "Bit 6 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br6(&mut self) -> BR6_W {
                BR6_W { w: self }
            }
            #[doc = "Bit 7 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br7(&mut self) -> BR7_W {
                BR7_W { w: self }
            }
            #[doc = "Bit 8 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br8(&mut self) -> BR8_W {
                BR8_W { w: self }
            }
            #[doc = "Bit 9 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br9(&mut self) -> BR9_W {
                BR9_W { w: self }
            }
            #[doc = "Bit 10 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br10(&mut self) -> BR10_W {
                BR10_W { w: self }
            }
            #[doc = "Bit 11 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br11(&mut self) -> BR11_W {
                BR11_W { w: self }
            }
            #[doc = "Bit 12 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br12(&mut self) -> BR12_W {
                BR12_W { w: self }
            }
            #[doc = "Bit 13 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br13(&mut self) -> BR13_W {
                BR13_W { w: self }
            }
            #[doc = "Bit 14 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br14(&mut self) -> BR14_W {
                BR14_W { w: self }
            }
            #[doc = "Bit 15 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br15(&mut self) -> BR15_W {
                BR15_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOD {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOD {}
impl GPIOD {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpiof::RegisterBlock {
        0x4800_0c00 as *const _
    }
}
impl Deref for GPIOD {
    type Target = gpiof::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOD::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOC {}
impl GPIOC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpiof::RegisterBlock {
        0x4800_0800 as *const _
    }
}
impl Deref for GPIOC {
    type Target = gpiof::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOC::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOB {}
impl GPIOB {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpiof::RegisterBlock {
        0x4800_0400 as *const _
    }
}
impl Deref for GPIOB {
    type Target = gpiof::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOB::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOA {}
impl GPIOA {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        0x4800_0000 as *const _
    }
}
impl Deref for GPIOA {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOA::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpioa {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - GPIO port mode register"]
        pub moder: MODER,
        #[doc = "0x04 - GPIO port output type register"]
        pub otyper: OTYPER,
        #[doc = "0x08 - GPIO port output speed register"]
        pub ospeedr: OSPEEDR,
        #[doc = "0x0c - GPIO port pull-up/pull-down register"]
        pub pupdr: PUPDR,
        #[doc = "0x10 - GPIO port input data register"]
        pub idr: IDR,
        #[doc = "0x14 - GPIO port output data register"]
        pub odr: ODR,
        #[doc = "0x18 - GPIO port bit set/reset register"]
        pub bsrr: BSRR,
        #[doc = "0x1c - GPIO port configuration lock register"]
        pub lckr: LCKR,
        #[doc = "0x20 - GPIO alternate function low register"]
        pub afrl: AFRL,
        #[doc = "0x24 - GPIO alternate function high register"]
        pub afrh: AFRH,
        #[doc = "0x28 - Port bit reset register"]
        pub brr: BRR,
    }
    #[doc = "GPIO port mode register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [moder](moder) module"]
    pub type MODER = crate::Reg<u32, _MODER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MODER;
    #[doc = "`read()` method returns [moder::R](moder::R) reader structure"]
    impl crate::Readable for MODER {}
    #[doc = "`write(|w| ..)` method takes [moder::W](moder::W) writer structure"]
    impl crate::Writable for MODER {}
    #[doc = "GPIO port mode register"]
    pub mod moder {
        #[doc = "Reader of register MODER"]
        pub type R = crate::R<u32, super::MODER>;
        #[doc = "Writer for register MODER"]
        pub type W = crate::W<u32, super::MODER>;
        #[doc = "Register MODER `reset()`'s with value 0x2800_0000"]
        impl crate::ResetValue for super::MODER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x2800_0000
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MODER15_A {
            #[doc = "0: Input mode (reset state)"]
            INPUT = 0,
            #[doc = "1: General purpose output mode"]
            OUTPUT = 1,
            #[doc = "2: Alternate function mode"]
            ALTERNATE = 2,
            #[doc = "3: Analog mode"]
            ANALOG = 3,
        }
        impl From<MODER15_A> for u8 {
            #[inline(always)]
            fn from(variant: MODER15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MODER15`"]
        pub type MODER15_R = crate::R<u8, MODER15_A>;
        impl MODER15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MODER15_A {
                match self.bits {
                    0 => MODER15_A::INPUT,
                    1 => MODER15_A::OUTPUT,
                    2 => MODER15_A::ALTERNATE,
                    3 => MODER15_A::ANALOG,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                *self == MODER15_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == MODER15_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `ALTERNATE`"]
            #[inline(always)]
            pub fn is_alternate(&self) -> bool {
                *self == MODER15_A::ALTERNATE
            }
            #[doc = "Checks if the value of the field is `ANALOG`"]
            #[inline(always)]
            pub fn is_analog(&self) -> bool {
                *self == MODER15_A::ANALOG
            }
        }
        #[doc = "Write proxy for field `MODER15`"]
        pub struct MODER15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER14_A = MODER15_A;
        #[doc = "Reader of field `MODER14`"]
        pub type MODER14_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER14`"]
        pub struct MODER14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER13_A = MODER15_A;
        #[doc = "Reader of field `MODER13`"]
        pub type MODER13_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER13`"]
        pub struct MODER13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER12_A = MODER15_A;
        #[doc = "Reader of field `MODER12`"]
        pub type MODER12_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER12`"]
        pub struct MODER12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER11_A = MODER15_A;
        #[doc = "Reader of field `MODER11`"]
        pub type MODER11_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER11`"]
        pub struct MODER11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER10_A = MODER15_A;
        #[doc = "Reader of field `MODER10`"]
        pub type MODER10_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER10`"]
        pub struct MODER10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER9_A = MODER15_A;
        #[doc = "Reader of field `MODER9`"]
        pub type MODER9_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER9`"]
        pub struct MODER9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER8_A = MODER15_A;
        #[doc = "Reader of field `MODER8`"]
        pub type MODER8_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER8`"]
        pub struct MODER8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER7_A = MODER15_A;
        #[doc = "Reader of field `MODER7`"]
        pub type MODER7_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER7`"]
        pub struct MODER7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER6_A = MODER15_A;
        #[doc = "Reader of field `MODER6`"]
        pub type MODER6_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER6`"]
        pub struct MODER6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER5_A = MODER15_A;
        #[doc = "Reader of field `MODER5`"]
        pub type MODER5_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER5`"]
        pub struct MODER5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER4_A = MODER15_A;
        #[doc = "Reader of field `MODER4`"]
        pub type MODER4_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER4`"]
        pub struct MODER4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER3_A = MODER15_A;
        #[doc = "Reader of field `MODER3`"]
        pub type MODER3_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER3`"]
        pub struct MODER3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER2_A = MODER15_A;
        #[doc = "Reader of field `MODER2`"]
        pub type MODER2_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER2`"]
        pub struct MODER2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER1_A = MODER15_A;
        #[doc = "Reader of field `MODER1`"]
        pub type MODER1_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER1`"]
        pub struct MODER1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type MODER0_A = MODER15_A;
        #[doc = "Reader of field `MODER0`"]
        pub type MODER0_R = crate::R<u8, MODER15_A>;
        #[doc = "Write proxy for field `MODER0`"]
        pub struct MODER0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODER0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Input mode (reset state)"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(MODER15_A::INPUT)
            }
            #[doc = "General purpose output mode"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(MODER15_A::OUTPUT)
            }
            #[doc = "Alternate function mode"]
            #[inline(always)]
            pub fn alternate(self) -> &'a mut W {
                self.variant(MODER15_A::ALTERNATE)
            }
            #[doc = "Analog mode"]
            #[inline(always)]
            pub fn analog(self) -> &'a mut W {
                self.variant(MODER15_A::ANALOG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder15(&self) -> MODER15_R {
                MODER15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder14(&self) -> MODER14_R {
                MODER14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder13(&self) -> MODER13_R {
                MODER13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder12(&self) -> MODER12_R {
                MODER12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder11(&self) -> MODER11_R {
                MODER11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder10(&self) -> MODER10_R {
                MODER10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder9(&self) -> MODER9_R {
                MODER9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder8(&self) -> MODER8_R {
                MODER8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder7(&self) -> MODER7_R {
                MODER7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder6(&self) -> MODER6_R {
                MODER6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder5(&self) -> MODER5_R {
                MODER5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder4(&self) -> MODER4_R {
                MODER4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder3(&self) -> MODER3_R {
                MODER3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder2(&self) -> MODER2_R {
                MODER2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder1(&self) -> MODER1_R {
                MODER1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder0(&self) -> MODER0_R {
                MODER0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder15(&mut self) -> MODER15_W {
                MODER15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder14(&mut self) -> MODER14_W {
                MODER14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder13(&mut self) -> MODER13_W {
                MODER13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder12(&mut self) -> MODER12_W {
                MODER12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder11(&mut self) -> MODER11_W {
                MODER11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder10(&mut self) -> MODER10_W {
                MODER10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder9(&mut self) -> MODER9_W {
                MODER9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder8(&mut self) -> MODER8_W {
                MODER8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder7(&mut self) -> MODER7_W {
                MODER7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder6(&mut self) -> MODER6_W {
                MODER6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder5(&mut self) -> MODER5_W {
                MODER5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder4(&mut self) -> MODER4_W {
                MODER4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder3(&mut self) -> MODER3_W {
                MODER3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder2(&mut self) -> MODER2_W {
                MODER2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder1(&mut self) -> MODER1_W {
                MODER1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder0(&mut self) -> MODER0_W {
                MODER0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port output type register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [otyper](otyper) module"]
    pub type OTYPER = crate::Reg<u32, _OTYPER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OTYPER;
    #[doc = "`read()` method returns [otyper::R](otyper::R) reader structure"]
    impl crate::Readable for OTYPER {}
    #[doc = "`write(|w| ..)` method takes [otyper::W](otyper::W) writer structure"]
    impl crate::Writable for OTYPER {}
    #[doc = "GPIO port output type register"]
    pub mod otyper {
        #[doc = "Reader of register OTYPER"]
        pub type R = crate::R<u32, super::OTYPER>;
        #[doc = "Writer for register OTYPER"]
        pub type W = crate::W<u32, super::OTYPER>;
        #[doc = "Register OTYPER `reset()`'s with value 0"]
        impl crate::ResetValue for super::OTYPER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OT15_A {
            #[doc = "0: Output push-pull (reset state)"]
            PUSHPULL = 0,
            #[doc = "1: Output open-drain"]
            OPENDRAIN = 1,
        }
        impl From<OT15_A> for bool {
            #[inline(always)]
            fn from(variant: OT15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OT15`"]
        pub type OT15_R = crate::R<bool, OT15_A>;
        impl OT15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OT15_A {
                match self.bits {
                    false => OT15_A::PUSHPULL,
                    true => OT15_A::OPENDRAIN,
                }
            }
            #[doc = "Checks if the value of the field is `PUSHPULL`"]
            #[inline(always)]
            pub fn is_push_pull(&self) -> bool {
                *self == OT15_A::PUSHPULL
            }
            #[doc = "Checks if the value of the field is `OPENDRAIN`"]
            #[inline(always)]
            pub fn is_open_drain(&self) -> bool {
                *self == OT15_A::OPENDRAIN
            }
        }
        #[doc = "Write proxy for field `OT15`"]
        pub struct OT15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT14_A = OT15_A;
        #[doc = "Reader of field `OT14`"]
        pub type OT14_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT14`"]
        pub struct OT14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT13_A = OT15_A;
        #[doc = "Reader of field `OT13`"]
        pub type OT13_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT13`"]
        pub struct OT13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT12_A = OT15_A;
        #[doc = "Reader of field `OT12`"]
        pub type OT12_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT12`"]
        pub struct OT12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT11_A = OT15_A;
        #[doc = "Reader of field `OT11`"]
        pub type OT11_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT11`"]
        pub struct OT11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT10_A = OT15_A;
        #[doc = "Reader of field `OT10`"]
        pub type OT10_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT10`"]
        pub struct OT10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT9_A = OT15_A;
        #[doc = "Reader of field `OT9`"]
        pub type OT9_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT9`"]
        pub struct OT9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT8_A = OT15_A;
        #[doc = "Reader of field `OT8`"]
        pub type OT8_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT8`"]
        pub struct OT8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT7_A = OT15_A;
        #[doc = "Reader of field `OT7`"]
        pub type OT7_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT7`"]
        pub struct OT7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT6_A = OT15_A;
        #[doc = "Reader of field `OT6`"]
        pub type OT6_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT6`"]
        pub struct OT6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT5_A = OT15_A;
        #[doc = "Reader of field `OT5`"]
        pub type OT5_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT5`"]
        pub struct OT5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT4_A = OT15_A;
        #[doc = "Reader of field `OT4`"]
        pub type OT4_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT4`"]
        pub struct OT4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT3_A = OT15_A;
        #[doc = "Reader of field `OT3`"]
        pub type OT3_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT3`"]
        pub struct OT3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT2_A = OT15_A;
        #[doc = "Reader of field `OT2`"]
        pub type OT2_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT2`"]
        pub struct OT2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT1_A = OT15_A;
        #[doc = "Reader of field `OT1`"]
        pub type OT1_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT1`"]
        pub struct OT1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OT0_A = OT15_A;
        #[doc = "Reader of field `OT0`"]
        pub type OT0_R = crate::R<bool, OT15_A>;
        #[doc = "Write proxy for field `OT0`"]
        pub struct OT0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OT0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output push-pull (reset state)"]
            #[inline(always)]
            pub fn push_pull(self) -> &'a mut W {
                self.variant(OT15_A::PUSHPULL)
            }
            #[doc = "Output open-drain"]
            #[inline(always)]
            pub fn open_drain(self) -> &'a mut W {
                self.variant(OT15_A::OPENDRAIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot15(&self) -> OT15_R {
                OT15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot14(&self) -> OT14_R {
                OT14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot13(&self) -> OT13_R {
                OT13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot12(&self) -> OT12_R {
                OT12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot11(&self) -> OT11_R {
                OT11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot10(&self) -> OT10_R {
                OT10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot9(&self) -> OT9_R {
                OT9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot8(&self) -> OT8_R {
                OT8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot7(&self) -> OT7_R {
                OT7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot6(&self) -> OT6_R {
                OT6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot5(&self) -> OT5_R {
                OT5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot4(&self) -> OT4_R {
                OT4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot3(&self) -> OT3_R {
                OT3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot2(&self) -> OT2_R {
                OT2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot1(&self) -> OT1_R {
                OT1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot0(&self) -> OT0_R {
                OT0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot15(&mut self) -> OT15_W {
                OT15_W { w: self }
            }
            #[doc = "Bit 14 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot14(&mut self) -> OT14_W {
                OT14_W { w: self }
            }
            #[doc = "Bit 13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot13(&mut self) -> OT13_W {
                OT13_W { w: self }
            }
            #[doc = "Bit 12 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot12(&mut self) -> OT12_W {
                OT12_W { w: self }
            }
            #[doc = "Bit 11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot11(&mut self) -> OT11_W {
                OT11_W { w: self }
            }
            #[doc = "Bit 10 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot10(&mut self) -> OT10_W {
                OT10_W { w: self }
            }
            #[doc = "Bit 9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot9(&mut self) -> OT9_W {
                OT9_W { w: self }
            }
            #[doc = "Bit 8 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot8(&mut self) -> OT8_W {
                OT8_W { w: self }
            }
            #[doc = "Bit 7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot7(&mut self) -> OT7_W {
                OT7_W { w: self }
            }
            #[doc = "Bit 6 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot6(&mut self) -> OT6_W {
                OT6_W { w: self }
            }
            #[doc = "Bit 5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot5(&mut self) -> OT5_W {
                OT5_W { w: self }
            }
            #[doc = "Bit 4 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot4(&mut self) -> OT4_W {
                OT4_W { w: self }
            }
            #[doc = "Bit 3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot3(&mut self) -> OT3_W {
                OT3_W { w: self }
            }
            #[doc = "Bit 2 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot2(&mut self) -> OT2_W {
                OT2_W { w: self }
            }
            #[doc = "Bit 1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot1(&mut self) -> OT1_W {
                OT1_W { w: self }
            }
            #[doc = "Bit 0 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot0(&mut self) -> OT0_W {
                OT0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port output speed register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ospeedr](ospeedr) module"]
    pub type OSPEEDR = crate::Reg<u32, _OSPEEDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OSPEEDR;
    #[doc = "`read()` method returns [ospeedr::R](ospeedr::R) reader structure"]
    impl crate::Readable for OSPEEDR {}
    #[doc = "`write(|w| ..)` method takes [ospeedr::W](ospeedr::W) writer structure"]
    impl crate::Writable for OSPEEDR {}
    #[doc = "GPIO port output speed register"]
    pub mod ospeedr {
        #[doc = "Reader of register OSPEEDR"]
        pub type R = crate::R<u32, super::OSPEEDR>;
        #[doc = "Writer for register OSPEEDR"]
        pub type W = crate::W<u32, super::OSPEEDR>;
        #[doc = "Register OSPEEDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::OSPEEDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OSPEEDR15_A {
            #[doc = "0: Low speed"]
            LOWSPEED = 0,
            #[doc = "1: Medium speed"]
            MEDIUMSPEED = 1,
            #[doc = "2: High speed"]
            HIGHSPEED = 2,
            #[doc = "3: Very high speed"]
            VERYHIGHSPEED = 3,
        }
        impl From<OSPEEDR15_A> for u8 {
            #[inline(always)]
            fn from(variant: OSPEEDR15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `OSPEEDR15`"]
        pub type OSPEEDR15_R = crate::R<u8, OSPEEDR15_A>;
        impl OSPEEDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OSPEEDR15_A {
                match self.bits {
                    0 => OSPEEDR15_A::LOWSPEED,
                    1 => OSPEEDR15_A::MEDIUMSPEED,
                    2 => OSPEEDR15_A::HIGHSPEED,
                    3 => OSPEEDR15_A::VERYHIGHSPEED,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `LOWSPEED`"]
            #[inline(always)]
            pub fn is_low_speed(&self) -> bool {
                *self == OSPEEDR15_A::LOWSPEED
            }
            #[doc = "Checks if the value of the field is `MEDIUMSPEED`"]
            #[inline(always)]
            pub fn is_medium_speed(&self) -> bool {
                *self == OSPEEDR15_A::MEDIUMSPEED
            }
            #[doc = "Checks if the value of the field is `HIGHSPEED`"]
            #[inline(always)]
            pub fn is_high_speed(&self) -> bool {
                *self == OSPEEDR15_A::HIGHSPEED
            }
            #[doc = "Checks if the value of the field is `VERYHIGHSPEED`"]
            #[inline(always)]
            pub fn is_very_high_speed(&self) -> bool {
                *self == OSPEEDR15_A::VERYHIGHSPEED
            }
        }
        #[doc = "Write proxy for field `OSPEEDR15`"]
        pub struct OSPEEDR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR14_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR14`"]
        pub type OSPEEDR14_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR14`"]
        pub struct OSPEEDR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR13_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR13`"]
        pub type OSPEEDR13_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR13`"]
        pub struct OSPEEDR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR12_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR12`"]
        pub type OSPEEDR12_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR12`"]
        pub struct OSPEEDR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR11_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR11`"]
        pub type OSPEEDR11_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR11`"]
        pub struct OSPEEDR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR10_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR10`"]
        pub type OSPEEDR10_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR10`"]
        pub struct OSPEEDR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR9_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR9`"]
        pub type OSPEEDR9_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR9`"]
        pub struct OSPEEDR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR8_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR8`"]
        pub type OSPEEDR8_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR8`"]
        pub struct OSPEEDR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR7_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR7`"]
        pub type OSPEEDR7_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR7`"]
        pub struct OSPEEDR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR6_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR6`"]
        pub type OSPEEDR6_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR6`"]
        pub struct OSPEEDR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR5_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR5`"]
        pub type OSPEEDR5_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR5`"]
        pub struct OSPEEDR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR4_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR4`"]
        pub type OSPEEDR4_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR4`"]
        pub struct OSPEEDR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR3_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR3`"]
        pub type OSPEEDR3_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR3`"]
        pub struct OSPEEDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR2_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR2`"]
        pub type OSPEEDR2_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR2`"]
        pub struct OSPEEDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR1_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR1`"]
        pub type OSPEEDR1_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR1`"]
        pub struct OSPEEDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type OSPEEDR0_A = OSPEEDR15_A;
        #[doc = "Reader of field `OSPEEDR0`"]
        pub type OSPEEDR0_R = crate::R<u8, OSPEEDR15_A>;
        #[doc = "Write proxy for field `OSPEEDR0`"]
        pub struct OSPEEDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSPEEDR0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low speed"]
            #[inline(always)]
            pub fn low_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::LOWSPEED)
            }
            #[doc = "Medium speed"]
            #[inline(always)]
            pub fn medium_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::MEDIUMSPEED)
            }
            #[doc = "High speed"]
            #[inline(always)]
            pub fn high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::HIGHSPEED)
            }
            #[doc = "Very high speed"]
            #[inline(always)]
            pub fn very_high_speed(self) -> &'a mut W {
                self.variant(OSPEEDR15_A::VERYHIGHSPEED)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr15(&self) -> OSPEEDR15_R {
                OSPEEDR15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr14(&self) -> OSPEEDR14_R {
                OSPEEDR14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr13(&self) -> OSPEEDR13_R {
                OSPEEDR13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr12(&self) -> OSPEEDR12_R {
                OSPEEDR12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr11(&self) -> OSPEEDR11_R {
                OSPEEDR11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr10(&self) -> OSPEEDR10_R {
                OSPEEDR10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr9(&self) -> OSPEEDR9_R {
                OSPEEDR9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr8(&self) -> OSPEEDR8_R {
                OSPEEDR8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr7(&self) -> OSPEEDR7_R {
                OSPEEDR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr6(&self) -> OSPEEDR6_R {
                OSPEEDR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr5(&self) -> OSPEEDR5_R {
                OSPEEDR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr4(&self) -> OSPEEDR4_R {
                OSPEEDR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr3(&self) -> OSPEEDR3_R {
                OSPEEDR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr2(&self) -> OSPEEDR2_R {
                OSPEEDR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr1(&self) -> OSPEEDR1_R {
                OSPEEDR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr0(&self) -> OSPEEDR0_R {
                OSPEEDR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr15(&mut self) -> OSPEEDR15_W {
                OSPEEDR15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr14(&mut self) -> OSPEEDR14_W {
                OSPEEDR14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr13(&mut self) -> OSPEEDR13_W {
                OSPEEDR13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr12(&mut self) -> OSPEEDR12_W {
                OSPEEDR12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr11(&mut self) -> OSPEEDR11_W {
                OSPEEDR11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr10(&mut self) -> OSPEEDR10_W {
                OSPEEDR10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr9(&mut self) -> OSPEEDR9_W {
                OSPEEDR9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr8(&mut self) -> OSPEEDR8_W {
                OSPEEDR8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr7(&mut self) -> OSPEEDR7_W {
                OSPEEDR7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr6(&mut self) -> OSPEEDR6_W {
                OSPEEDR6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr5(&mut self) -> OSPEEDR5_W {
                OSPEEDR5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr4(&mut self) -> OSPEEDR4_W {
                OSPEEDR4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr3(&mut self) -> OSPEEDR3_W {
                OSPEEDR3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr2(&mut self) -> OSPEEDR2_W {
                OSPEEDR2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr1(&mut self) -> OSPEEDR1_W {
                OSPEEDR1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr0(&mut self) -> OSPEEDR0_W {
                OSPEEDR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port pull-up/pull-down register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pupdr](pupdr) module"]
    pub type PUPDR = crate::Reg<u32, _PUPDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PUPDR;
    #[doc = "`read()` method returns [pupdr::R](pupdr::R) reader structure"]
    impl crate::Readable for PUPDR {}
    #[doc = "`write(|w| ..)` method takes [pupdr::W](pupdr::W) writer structure"]
    impl crate::Writable for PUPDR {}
    #[doc = "GPIO port pull-up/pull-down register"]
    pub mod pupdr {
        #[doc = "Reader of register PUPDR"]
        pub type R = crate::R<u32, super::PUPDR>;
        #[doc = "Writer for register PUPDR"]
        pub type W = crate::W<u32, super::PUPDR>;
        #[doc = "Register PUPDR `reset()`'s with value 0x2400_0000"]
        impl crate::ResetValue for super::PUPDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x2400_0000
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PUPDR15_A {
            #[doc = "0: No pull-up, pull-down"]
            FLOATING = 0,
            #[doc = "1: Pull-up"]
            PULLUP = 1,
            #[doc = "2: Pull-down"]
            PULLDOWN = 2,
        }
        impl From<PUPDR15_A> for u8 {
            #[inline(always)]
            fn from(variant: PUPDR15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PUPDR15`"]
        pub type PUPDR15_R = crate::R<u8, PUPDR15_A>;
        impl PUPDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, PUPDR15_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(PUPDR15_A::FLOATING),
                    1 => Val(PUPDR15_A::PULLUP),
                    2 => Val(PUPDR15_A::PULLDOWN),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `FLOATING`"]
            #[inline(always)]
            pub fn is_floating(&self) -> bool {
                *self == PUPDR15_A::FLOATING
            }
            #[doc = "Checks if the value of the field is `PULLUP`"]
            #[inline(always)]
            pub fn is_pull_up(&self) -> bool {
                *self == PUPDR15_A::PULLUP
            }
            #[doc = "Checks if the value of the field is `PULLDOWN`"]
            #[inline(always)]
            pub fn is_pull_down(&self) -> bool {
                *self == PUPDR15_A::PULLDOWN
            }
        }
        #[doc = "Write proxy for field `PUPDR15`"]
        pub struct PUPDR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR15_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR14_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR14`"]
        pub type PUPDR14_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR14`"]
        pub struct PUPDR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR14_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR13_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR13`"]
        pub type PUPDR13_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR13`"]
        pub struct PUPDR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR13_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR12_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR12`"]
        pub type PUPDR12_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR12`"]
        pub struct PUPDR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR12_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR11_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR11`"]
        pub type PUPDR11_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR11`"]
        pub struct PUPDR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR11_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR10_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR10`"]
        pub type PUPDR10_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR10`"]
        pub struct PUPDR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR10_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR9_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR9`"]
        pub type PUPDR9_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR9`"]
        pub struct PUPDR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR9_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR8_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR8`"]
        pub type PUPDR8_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR8`"]
        pub struct PUPDR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR8_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR7_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR7`"]
        pub type PUPDR7_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR7`"]
        pub struct PUPDR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR7_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR6_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR6`"]
        pub type PUPDR6_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR6`"]
        pub struct PUPDR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR6_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR5_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR5`"]
        pub type PUPDR5_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR5`"]
        pub struct PUPDR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR5_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR4_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR4`"]
        pub type PUPDR4_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR4`"]
        pub struct PUPDR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR4_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR3_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR3`"]
        pub type PUPDR3_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR3`"]
        pub struct PUPDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR3_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR2_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR2`"]
        pub type PUPDR2_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR2`"]
        pub struct PUPDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR2_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR1_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR1`"]
        pub type PUPDR1_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR1`"]
        pub struct PUPDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR1_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Port x configuration bits (y = 0..15)"]
        pub type PUPDR0_A = PUPDR15_A;
        #[doc = "Reader of field `PUPDR0`"]
        pub type PUPDR0_R = crate::R<u8, PUPDR15_A>;
        #[doc = "Write proxy for field `PUPDR0`"]
        pub struct PUPDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PUPDR0_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull-up, pull-down"]
            #[inline(always)]
            pub fn floating(self) -> &'a mut W {
                self.variant(PUPDR15_A::FLOATING)
            }
            #[doc = "Pull-up"]
            #[inline(always)]
            pub fn pull_up(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLUP)
            }
            #[doc = "Pull-down"]
            #[inline(always)]
            pub fn pull_down(self) -> &'a mut W {
                self.variant(PUPDR15_A::PULLDOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr15(&self) -> PUPDR15_R {
                PUPDR15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr14(&self) -> PUPDR14_R {
                PUPDR14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr13(&self) -> PUPDR13_R {
                PUPDR13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr12(&self) -> PUPDR12_R {
                PUPDR12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr11(&self) -> PUPDR11_R {
                PUPDR11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr10(&self) -> PUPDR10_R {
                PUPDR10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr9(&self) -> PUPDR9_R {
                PUPDR9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr8(&self) -> PUPDR8_R {
                PUPDR8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr7(&self) -> PUPDR7_R {
                PUPDR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr6(&self) -> PUPDR6_R {
                PUPDR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr5(&self) -> PUPDR5_R {
                PUPDR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr4(&self) -> PUPDR4_R {
                PUPDR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr3(&self) -> PUPDR3_R {
                PUPDR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr2(&self) -> PUPDR2_R {
                PUPDR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr1(&self) -> PUPDR1_R {
                PUPDR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr0(&self) -> PUPDR0_R {
                PUPDR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr15(&mut self) -> PUPDR15_W {
                PUPDR15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr14(&mut self) -> PUPDR14_W {
                PUPDR14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr13(&mut self) -> PUPDR13_W {
                PUPDR13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr12(&mut self) -> PUPDR12_W {
                PUPDR12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr11(&mut self) -> PUPDR11_W {
                PUPDR11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr10(&mut self) -> PUPDR10_W {
                PUPDR10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr9(&mut self) -> PUPDR9_W {
                PUPDR9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr8(&mut self) -> PUPDR8_W {
                PUPDR8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr7(&mut self) -> PUPDR7_W {
                PUPDR7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr6(&mut self) -> PUPDR6_W {
                PUPDR6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr5(&mut self) -> PUPDR5_W {
                PUPDR5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr4(&mut self) -> PUPDR4_W {
                PUPDR4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr3(&mut self) -> PUPDR3_W {
                PUPDR3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr2(&mut self) -> PUPDR2_W {
                PUPDR2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr1(&mut self) -> PUPDR1_W {
                PUPDR1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr0(&mut self) -> PUPDR0_W {
                PUPDR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port input data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idr](idr) module"]
    pub type IDR = crate::Reg<u32, _IDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IDR;
    #[doc = "`read()` method returns [idr::R](idr::R) reader structure"]
    impl crate::Readable for IDR {}
    #[doc = "GPIO port input data register"]
    pub mod idr {
        #[doc = "Reader of register IDR"]
        pub type R = crate::R<u32, super::IDR>;
        #[doc = "Port input data (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IDR15_A {
            #[doc = "1: Input is logic high"]
            HIGH = 1,
            #[doc = "0: Input is logic low"]
            LOW = 0,
        }
        impl From<IDR15_A> for bool {
            #[inline(always)]
            fn from(variant: IDR15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IDR15`"]
        pub type IDR15_R = crate::R<bool, IDR15_A>;
        impl IDR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IDR15_A {
                match self.bits {
                    true => IDR15_A::HIGH,
                    false => IDR15_A::LOW,
                }
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == IDR15_A::HIGH
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == IDR15_A::LOW
            }
        }
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR14_A = IDR15_A;
        #[doc = "Reader of field `IDR14`"]
        pub type IDR14_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR13_A = IDR15_A;
        #[doc = "Reader of field `IDR13`"]
        pub type IDR13_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR12_A = IDR15_A;
        #[doc = "Reader of field `IDR12`"]
        pub type IDR12_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR11_A = IDR15_A;
        #[doc = "Reader of field `IDR11`"]
        pub type IDR11_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR10_A = IDR15_A;
        #[doc = "Reader of field `IDR10`"]
        pub type IDR10_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR9_A = IDR15_A;
        #[doc = "Reader of field `IDR9`"]
        pub type IDR9_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR8_A = IDR15_A;
        #[doc = "Reader of field `IDR8`"]
        pub type IDR8_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR7_A = IDR15_A;
        #[doc = "Reader of field `IDR7`"]
        pub type IDR7_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR6_A = IDR15_A;
        #[doc = "Reader of field `IDR6`"]
        pub type IDR6_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR5_A = IDR15_A;
        #[doc = "Reader of field `IDR5`"]
        pub type IDR5_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR4_A = IDR15_A;
        #[doc = "Reader of field `IDR4`"]
        pub type IDR4_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR3_A = IDR15_A;
        #[doc = "Reader of field `IDR3`"]
        pub type IDR3_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR2_A = IDR15_A;
        #[doc = "Reader of field `IDR2`"]
        pub type IDR2_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR1_A = IDR15_A;
        #[doc = "Reader of field `IDR1`"]
        pub type IDR1_R = crate::R<bool, IDR15_A>;
        #[doc = "Port input data (y = 0..15)"]
        pub type IDR0_A = IDR15_A;
        #[doc = "Reader of field `IDR0`"]
        pub type IDR0_R = crate::R<bool, IDR15_A>;
        impl R {
            #[doc = "Bit 15 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr15(&self) -> IDR15_R {
                IDR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr14(&self) -> IDR14_R {
                IDR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr13(&self) -> IDR13_R {
                IDR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr12(&self) -> IDR12_R {
                IDR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr11(&self) -> IDR11_R {
                IDR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr10(&self) -> IDR10_R {
                IDR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr9(&self) -> IDR9_R {
                IDR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr8(&self) -> IDR8_R {
                IDR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr7(&self) -> IDR7_R {
                IDR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr6(&self) -> IDR6_R {
                IDR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr5(&self) -> IDR5_R {
                IDR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr4(&self) -> IDR4_R {
                IDR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr3(&self) -> IDR3_R {
                IDR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr2(&self) -> IDR2_R {
                IDR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr1(&self) -> IDR1_R {
                IDR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr0(&self) -> IDR0_R {
                IDR0_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "GPIO port output data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [odr](odr) module"]
    pub type ODR = crate::Reg<u32, _ODR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ODR;
    #[doc = "`read()` method returns [odr::R](odr::R) reader structure"]
    impl crate::Readable for ODR {}
    #[doc = "`write(|w| ..)` method takes [odr::W](odr::W) writer structure"]
    impl crate::Writable for ODR {}
    #[doc = "GPIO port output data register"]
    pub mod odr {
        #[doc = "Reader of register ODR"]
        pub type R = crate::R<u32, super::ODR>;
        #[doc = "Writer for register ODR"]
        pub type W = crate::W<u32, super::ODR>;
        #[doc = "Register ODR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ODR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port output data (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ODR15_A {
            #[doc = "1: Set output to logic high"]
            HIGH = 1,
            #[doc = "0: Set output to logic low"]
            LOW = 0,
        }
        impl From<ODR15_A> for bool {
            #[inline(always)]
            fn from(variant: ODR15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ODR15`"]
        pub type ODR15_R = crate::R<bool, ODR15_A>;
        impl ODR15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ODR15_A {
                match self.bits {
                    true => ODR15_A::HIGH,
                    false => ODR15_A::LOW,
                }
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == ODR15_A::HIGH
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == ODR15_A::LOW
            }
        }
        #[doc = "Write proxy for field `ODR15`"]
        pub struct ODR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR14_A = ODR15_A;
        #[doc = "Reader of field `ODR14`"]
        pub type ODR14_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR14`"]
        pub struct ODR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR13_A = ODR15_A;
        #[doc = "Reader of field `ODR13`"]
        pub type ODR13_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR13`"]
        pub struct ODR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR12_A = ODR15_A;
        #[doc = "Reader of field `ODR12`"]
        pub type ODR12_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR12`"]
        pub struct ODR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR11_A = ODR15_A;
        #[doc = "Reader of field `ODR11`"]
        pub type ODR11_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR11`"]
        pub struct ODR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR10_A = ODR15_A;
        #[doc = "Reader of field `ODR10`"]
        pub type ODR10_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR10`"]
        pub struct ODR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR9_A = ODR15_A;
        #[doc = "Reader of field `ODR9`"]
        pub type ODR9_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR9`"]
        pub struct ODR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR8_A = ODR15_A;
        #[doc = "Reader of field `ODR8`"]
        pub type ODR8_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR8`"]
        pub struct ODR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR7_A = ODR15_A;
        #[doc = "Reader of field `ODR7`"]
        pub type ODR7_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR7`"]
        pub struct ODR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR6_A = ODR15_A;
        #[doc = "Reader of field `ODR6`"]
        pub type ODR6_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR6`"]
        pub struct ODR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR5_A = ODR15_A;
        #[doc = "Reader of field `ODR5`"]
        pub type ODR5_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR5`"]
        pub struct ODR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR4_A = ODR15_A;
        #[doc = "Reader of field `ODR4`"]
        pub type ODR4_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR4`"]
        pub struct ODR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR3_A = ODR15_A;
        #[doc = "Reader of field `ODR3`"]
        pub type ODR3_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR3`"]
        pub struct ODR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR2_A = ODR15_A;
        #[doc = "Reader of field `ODR2`"]
        pub type ODR2_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR2`"]
        pub struct ODR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR1_A = ODR15_A;
        #[doc = "Reader of field `ODR1`"]
        pub type ODR1_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR1`"]
        pub struct ODR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port output data (y = 0..15)"]
        pub type ODR0_A = ODR15_A;
        #[doc = "Reader of field `ODR0`"]
        pub type ODR0_R = crate::R<bool, ODR15_A>;
        #[doc = "Write proxy for field `ODR0`"]
        pub struct ODR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set output to logic high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(ODR15_A::HIGH)
            }
            #[doc = "Set output to logic low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(ODR15_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr15(&self) -> ODR15_R {
                ODR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr14(&self) -> ODR14_R {
                ODR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr13(&self) -> ODR13_R {
                ODR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr12(&self) -> ODR12_R {
                ODR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr11(&self) -> ODR11_R {
                ODR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr10(&self) -> ODR10_R {
                ODR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr9(&self) -> ODR9_R {
                ODR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr8(&self) -> ODR8_R {
                ODR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr7(&self) -> ODR7_R {
                ODR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr6(&self) -> ODR6_R {
                ODR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr5(&self) -> ODR5_R {
                ODR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr4(&self) -> ODR4_R {
                ODR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr3(&self) -> ODR3_R {
                ODR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr2(&self) -> ODR2_R {
                ODR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr1(&self) -> ODR1_R {
                ODR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr0(&self) -> ODR0_R {
                ODR0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr15(&mut self) -> ODR15_W {
                ODR15_W { w: self }
            }
            #[doc = "Bit 14 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr14(&mut self) -> ODR14_W {
                ODR14_W { w: self }
            }
            #[doc = "Bit 13 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr13(&mut self) -> ODR13_W {
                ODR13_W { w: self }
            }
            #[doc = "Bit 12 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr12(&mut self) -> ODR12_W {
                ODR12_W { w: self }
            }
            #[doc = "Bit 11 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr11(&mut self) -> ODR11_W {
                ODR11_W { w: self }
            }
            #[doc = "Bit 10 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr10(&mut self) -> ODR10_W {
                ODR10_W { w: self }
            }
            #[doc = "Bit 9 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr9(&mut self) -> ODR9_W {
                ODR9_W { w: self }
            }
            #[doc = "Bit 8 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr8(&mut self) -> ODR8_W {
                ODR8_W { w: self }
            }
            #[doc = "Bit 7 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr7(&mut self) -> ODR7_W {
                ODR7_W { w: self }
            }
            #[doc = "Bit 6 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr6(&mut self) -> ODR6_W {
                ODR6_W { w: self }
            }
            #[doc = "Bit 5 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr5(&mut self) -> ODR5_W {
                ODR5_W { w: self }
            }
            #[doc = "Bit 4 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr4(&mut self) -> ODR4_W {
                ODR4_W { w: self }
            }
            #[doc = "Bit 3 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr3(&mut self) -> ODR3_W {
                ODR3_W { w: self }
            }
            #[doc = "Bit 2 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr2(&mut self) -> ODR2_W {
                ODR2_W { w: self }
            }
            #[doc = "Bit 1 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr1(&mut self) -> ODR1_W {
                ODR1_W { w: self }
            }
            #[doc = "Bit 0 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr0(&mut self) -> ODR0_W {
                ODR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port bit set/reset register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bsrr](bsrr) module"]
    pub type BSRR = crate::Reg<u32, _BSRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BSRR;
    #[doc = "`write(|w| ..)` method takes [bsrr::W](bsrr::W) writer structure"]
    impl crate::Writable for BSRR {}
    #[doc = "GPIO port bit set/reset register"]
    pub mod bsrr {
        #[doc = "Writer for register BSRR"]
        pub type W = crate::W<u32, super::BSRR>;
        #[doc = "Register BSRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BSRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BR15_AW {
            #[doc = "1: Resets the corresponding ODRx bit"]
            RESET = 1,
        }
        impl From<BR15_AW> for bool {
            #[inline(always)]
            fn from(variant: BR15_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BR15`"]
        pub struct BR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR14_AW = BR15_AW;
        #[doc = "Write proxy for field `BR14`"]
        pub struct BR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR13_AW = BR15_AW;
        #[doc = "Write proxy for field `BR13`"]
        pub struct BR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR12_AW = BR15_AW;
        #[doc = "Write proxy for field `BR12`"]
        pub struct BR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR11_AW = BR15_AW;
        #[doc = "Write proxy for field `BR11`"]
        pub struct BR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR10_AW = BR15_AW;
        #[doc = "Write proxy for field `BR10`"]
        pub struct BR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR9_AW = BR15_AW;
        #[doc = "Write proxy for field `BR9`"]
        pub struct BR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR8_AW = BR15_AW;
        #[doc = "Write proxy for field `BR8`"]
        pub struct BR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR7_AW = BR15_AW;
        #[doc = "Write proxy for field `BR7`"]
        pub struct BR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR6_AW = BR15_AW;
        #[doc = "Write proxy for field `BR6`"]
        pub struct BR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR5_AW = BR15_AW;
        #[doc = "Write proxy for field `BR5`"]
        pub struct BR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR4_AW = BR15_AW;
        #[doc = "Write proxy for field `BR4`"]
        pub struct BR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR3_AW = BR15_AW;
        #[doc = "Write proxy for field `BR3`"]
        pub struct BR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR2_AW = BR15_AW;
        #[doc = "Write proxy for field `BR2`"]
        pub struct BR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Port x reset bit y (y = 0..15)"]
        pub type BR1_AW = BR15_AW;
        #[doc = "Write proxy for field `BR1`"]
        pub struct BR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BR0_AW = BR15_AW;
        #[doc = "Write proxy for field `BR0`"]
        pub struct BR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR15_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BS15_AW {
            #[doc = "1: Sets the corresponding ODRx bit"]
            SET = 1,
        }
        impl From<BS15_AW> for bool {
            #[inline(always)]
            fn from(variant: BS15_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BS15`"]
        pub struct BS15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS14_AW = BS15_AW;
        #[doc = "Write proxy for field `BS14`"]
        pub struct BS14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS13_AW = BS15_AW;
        #[doc = "Write proxy for field `BS13`"]
        pub struct BS13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS12_AW = BS15_AW;
        #[doc = "Write proxy for field `BS12`"]
        pub struct BS12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS11_AW = BS15_AW;
        #[doc = "Write proxy for field `BS11`"]
        pub struct BS11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS10_AW = BS15_AW;
        #[doc = "Write proxy for field `BS10`"]
        pub struct BS10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS9_AW = BS15_AW;
        #[doc = "Write proxy for field `BS9`"]
        pub struct BS9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS8_AW = BS15_AW;
        #[doc = "Write proxy for field `BS8`"]
        pub struct BS8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS7_AW = BS15_AW;
        #[doc = "Write proxy for field `BS7`"]
        pub struct BS7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS6_AW = BS15_AW;
        #[doc = "Write proxy for field `BS6`"]
        pub struct BS6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS5_AW = BS15_AW;
        #[doc = "Write proxy for field `BS5`"]
        pub struct BS5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS4_AW = BS15_AW;
        #[doc = "Write proxy for field `BS4`"]
        pub struct BS4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS3_AW = BS15_AW;
        #[doc = "Write proxy for field `BS3`"]
        pub struct BS3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS2_AW = BS15_AW;
        #[doc = "Write proxy for field `BS2`"]
        pub struct BS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS1_AW = BS15_AW;
        #[doc = "Write proxy for field `BS1`"]
        pub struct BS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x set bit y (y= 0..15)"]
        pub type BS0_AW = BS15_AW;
        #[doc = "Write proxy for field `BS0`"]
        pub struct BS0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BS0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Sets the corresponding ODRx bit"]
            #[inline(always)]
            pub fn set(self) -> &'a mut W {
                self.variant(BS15_AW::SET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 31 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br15(&mut self) -> BR15_W {
                BR15_W { w: self }
            }
            #[doc = "Bit 30 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br14(&mut self) -> BR14_W {
                BR14_W { w: self }
            }
            #[doc = "Bit 29 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br13(&mut self) -> BR13_W {
                BR13_W { w: self }
            }
            #[doc = "Bit 28 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br12(&mut self) -> BR12_W {
                BR12_W { w: self }
            }
            #[doc = "Bit 27 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br11(&mut self) -> BR11_W {
                BR11_W { w: self }
            }
            #[doc = "Bit 26 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br10(&mut self) -> BR10_W {
                BR10_W { w: self }
            }
            #[doc = "Bit 25 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br9(&mut self) -> BR9_W {
                BR9_W { w: self }
            }
            #[doc = "Bit 24 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br8(&mut self) -> BR8_W {
                BR8_W { w: self }
            }
            #[doc = "Bit 23 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br7(&mut self) -> BR7_W {
                BR7_W { w: self }
            }
            #[doc = "Bit 22 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br6(&mut self) -> BR6_W {
                BR6_W { w: self }
            }
            #[doc = "Bit 21 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br5(&mut self) -> BR5_W {
                BR5_W { w: self }
            }
            #[doc = "Bit 20 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br4(&mut self) -> BR4_W {
                BR4_W { w: self }
            }
            #[doc = "Bit 19 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br3(&mut self) -> BR3_W {
                BR3_W { w: self }
            }
            #[doc = "Bit 18 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br2(&mut self) -> BR2_W {
                BR2_W { w: self }
            }
            #[doc = "Bit 17 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br1(&mut self) -> BR1_W {
                BR1_W { w: self }
            }
            #[doc = "Bit 16 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn br0(&mut self) -> BR0_W {
                BR0_W { w: self }
            }
            #[doc = "Bit 15 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs15(&mut self) -> BS15_W {
                BS15_W { w: self }
            }
            #[doc = "Bit 14 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs14(&mut self) -> BS14_W {
                BS14_W { w: self }
            }
            #[doc = "Bit 13 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs13(&mut self) -> BS13_W {
                BS13_W { w: self }
            }
            #[doc = "Bit 12 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs12(&mut self) -> BS12_W {
                BS12_W { w: self }
            }
            #[doc = "Bit 11 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs11(&mut self) -> BS11_W {
                BS11_W { w: self }
            }
            #[doc = "Bit 10 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs10(&mut self) -> BS10_W {
                BS10_W { w: self }
            }
            #[doc = "Bit 9 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs9(&mut self) -> BS9_W {
                BS9_W { w: self }
            }
            #[doc = "Bit 8 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs8(&mut self) -> BS8_W {
                BS8_W { w: self }
            }
            #[doc = "Bit 7 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs7(&mut self) -> BS7_W {
                BS7_W { w: self }
            }
            #[doc = "Bit 6 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs6(&mut self) -> BS6_W {
                BS6_W { w: self }
            }
            #[doc = "Bit 5 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs5(&mut self) -> BS5_W {
                BS5_W { w: self }
            }
            #[doc = "Bit 4 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs4(&mut self) -> BS4_W {
                BS4_W { w: self }
            }
            #[doc = "Bit 3 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs3(&mut self) -> BS3_W {
                BS3_W { w: self }
            }
            #[doc = "Bit 2 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs2(&mut self) -> BS2_W {
                BS2_W { w: self }
            }
            #[doc = "Bit 1 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs1(&mut self) -> BS1_W {
                BS1_W { w: self }
            }
            #[doc = "Bit 0 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs0(&mut self) -> BS0_W {
                BS0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port configuration lock register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lckr](lckr) module"]
    pub type LCKR = crate::Reg<u32, _LCKR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LCKR;
    #[doc = "`read()` method returns [lckr::R](lckr::R) reader structure"]
    impl crate::Readable for LCKR {}
    #[doc = "`write(|w| ..)` method takes [lckr::W](lckr::W) writer structure"]
    impl crate::Writable for LCKR {}
    #[doc = "GPIO port configuration lock register"]
    pub mod lckr {
        #[doc = "Reader of register LCKR"]
        pub type R = crate::R<u32, super::LCKR>;
        #[doc = "Writer for register LCKR"]
        pub type W = crate::W<u32, super::LCKR>;
        #[doc = "Register LCKR `reset()`'s with value 0"]
        impl crate::ResetValue for super::LCKR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCKK_A {
            #[doc = "0: Port configuration lock key not active"]
            NOTACTIVE = 0,
            #[doc = "1: Port configuration lock key active"]
            ACTIVE = 1,
        }
        impl From<LCKK_A> for bool {
            #[inline(always)]
            fn from(variant: LCKK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCKK`"]
        pub type LCKK_R = crate::R<bool, LCKK_A>;
        impl LCKK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCKK_A {
                match self.bits {
                    false => LCKK_A::NOTACTIVE,
                    true => LCKK_A::ACTIVE,
                }
            }
            #[doc = "Checks if the value of the field is `NOTACTIVE`"]
            #[inline(always)]
            pub fn is_not_active(&self) -> bool {
                *self == LCKK_A::NOTACTIVE
            }
            #[doc = "Checks if the value of the field is `ACTIVE`"]
            #[inline(always)]
            pub fn is_active(&self) -> bool {
                *self == LCKK_A::ACTIVE
            }
        }
        #[doc = "Write proxy for field `LCKK`"]
        pub struct LCKK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCKK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCKK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration lock key not active"]
            #[inline(always)]
            pub fn not_active(self) -> &'a mut W {
                self.variant(LCKK_A::NOTACTIVE)
            }
            #[doc = "Port configuration lock key active"]
            #[inline(always)]
            pub fn active(self) -> &'a mut W {
                self.variant(LCKK_A::ACTIVE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCK15_A {
            #[doc = "0: Port configuration not locked"]
            UNLOCKED = 0,
            #[doc = "1: Port configuration locked"]
            LOCKED = 1,
        }
        impl From<LCK15_A> for bool {
            #[inline(always)]
            fn from(variant: LCK15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCK15`"]
        pub type LCK15_R = crate::R<bool, LCK15_A>;
        impl LCK15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCK15_A {
                match self.bits {
                    false => LCK15_A::UNLOCKED,
                    true => LCK15_A::LOCKED,
                }
            }
            #[doc = "Checks if the value of the field is `UNLOCKED`"]
            #[inline(always)]
            pub fn is_unlocked(&self) -> bool {
                *self == LCK15_A::UNLOCKED
            }
            #[doc = "Checks if the value of the field is `LOCKED`"]
            #[inline(always)]
            pub fn is_locked(&self) -> bool {
                *self == LCK15_A::LOCKED
            }
        }
        #[doc = "Write proxy for field `LCK15`"]
        pub struct LCK15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK14_A = LCK15_A;
        #[doc = "Reader of field `LCK14`"]
        pub type LCK14_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK14`"]
        pub struct LCK14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK13_A = LCK15_A;
        #[doc = "Reader of field `LCK13`"]
        pub type LCK13_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK13`"]
        pub struct LCK13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK12_A = LCK15_A;
        #[doc = "Reader of field `LCK12`"]
        pub type LCK12_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK12`"]
        pub struct LCK12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK11_A = LCK15_A;
        #[doc = "Reader of field `LCK11`"]
        pub type LCK11_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK11`"]
        pub struct LCK11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK10_A = LCK15_A;
        #[doc = "Reader of field `LCK10`"]
        pub type LCK10_R = crate::R<bool, LCK15_A>;
        #[doc = "Write proxy for field `LCK10`"]
        pub struct LCK10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK15_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK15_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCK9_A {
            #[doc = "0: Port configuration not locked"]
            UNLOCKED = 0,
            #[doc = "1: Port configuration locked"]
            LOCKED = 1,
        }
        impl From<LCK9_A> for bool {
            #[inline(always)]
            fn from(variant: LCK9_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCK9`"]
        pub type LCK9_R = crate::R<bool, LCK9_A>;
        impl LCK9_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LCK9_A {
                match self.bits {
                    false => LCK9_A::UNLOCKED,
                    true => LCK9_A::LOCKED,
                }
            }
            #[doc = "Checks if the value of the field is `UNLOCKED`"]
            #[inline(always)]
            pub fn is_unlocked(&self) -> bool {
                *self == LCK9_A::UNLOCKED
            }
            #[doc = "Checks if the value of the field is `LOCKED`"]
            #[inline(always)]
            pub fn is_locked(&self) -> bool {
                *self == LCK9_A::LOCKED
            }
        }
        #[doc = "Write proxy for field `LCK9`"]
        pub struct LCK9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK8_A = LCK9_A;
        #[doc = "Reader of field `LCK8`"]
        pub type LCK8_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK8`"]
        pub struct LCK8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK7_A = LCK9_A;
        #[doc = "Reader of field `LCK7`"]
        pub type LCK7_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK7`"]
        pub struct LCK7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK6_A = LCK9_A;
        #[doc = "Reader of field `LCK6`"]
        pub type LCK6_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK6`"]
        pub struct LCK6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK5_A = LCK9_A;
        #[doc = "Reader of field `LCK5`"]
        pub type LCK5_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK5`"]
        pub struct LCK5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK4_A = LCK9_A;
        #[doc = "Reader of field `LCK4`"]
        pub type LCK4_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK4`"]
        pub struct LCK4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK3_A = LCK9_A;
        #[doc = "Reader of field `LCK3`"]
        pub type LCK3_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK3`"]
        pub struct LCK3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK2_A = LCK9_A;
        #[doc = "Reader of field `LCK2`"]
        pub type LCK2_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK2`"]
        pub struct LCK2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK1_A = LCK9_A;
        #[doc = "Reader of field `LCK1`"]
        pub type LCK1_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK1`"]
        pub struct LCK1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x lock bit y (y= 0..15)"]
        pub type LCK0_A = LCK9_A;
        #[doc = "Reader of field `LCK0`"]
        pub type LCK0_R = crate::R<bool, LCK9_A>;
        #[doc = "Write proxy for field `LCK0`"]
        pub struct LCK0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LCK0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Port configuration not locked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LCK9_A::UNLOCKED)
            }
            #[doc = "Port configuration locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LCK9_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lckk(&self) -> LCKK_R {
                LCKK_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck15(&self) -> LCK15_R {
                LCK15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck14(&self) -> LCK14_R {
                LCK14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck13(&self) -> LCK13_R {
                LCK13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck12(&self) -> LCK12_R {
                LCK12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck11(&self) -> LCK11_R {
                LCK11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck10(&self) -> LCK10_R {
                LCK10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck9(&self) -> LCK9_R {
                LCK9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck8(&self) -> LCK8_R {
                LCK8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck7(&self) -> LCK7_R {
                LCK7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck6(&self) -> LCK6_R {
                LCK6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck5(&self) -> LCK5_R {
                LCK5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck4(&self) -> LCK4_R {
                LCK4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck3(&self) -> LCK3_R {
                LCK3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck2(&self) -> LCK2_R {
                LCK2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck1(&self) -> LCK1_R {
                LCK1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck0(&self) -> LCK0_R {
                LCK0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lckk(&mut self) -> LCKK_W {
                LCKK_W { w: self }
            }
            #[doc = "Bit 15 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck15(&mut self) -> LCK15_W {
                LCK15_W { w: self }
            }
            #[doc = "Bit 14 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck14(&mut self) -> LCK14_W {
                LCK14_W { w: self }
            }
            #[doc = "Bit 13 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck13(&mut self) -> LCK13_W {
                LCK13_W { w: self }
            }
            #[doc = "Bit 12 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck12(&mut self) -> LCK12_W {
                LCK12_W { w: self }
            }
            #[doc = "Bit 11 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck11(&mut self) -> LCK11_W {
                LCK11_W { w: self }
            }
            #[doc = "Bit 10 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck10(&mut self) -> LCK10_W {
                LCK10_W { w: self }
            }
            #[doc = "Bit 9 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck9(&mut self) -> LCK9_W {
                LCK9_W { w: self }
            }
            #[doc = "Bit 8 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck8(&mut self) -> LCK8_W {
                LCK8_W { w: self }
            }
            #[doc = "Bit 7 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck7(&mut self) -> LCK7_W {
                LCK7_W { w: self }
            }
            #[doc = "Bit 6 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck6(&mut self) -> LCK6_W {
                LCK6_W { w: self }
            }
            #[doc = "Bit 5 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck5(&mut self) -> LCK5_W {
                LCK5_W { w: self }
            }
            #[doc = "Bit 4 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck4(&mut self) -> LCK4_W {
                LCK4_W { w: self }
            }
            #[doc = "Bit 3 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck3(&mut self) -> LCK3_W {
                LCK3_W { w: self }
            }
            #[doc = "Bit 2 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck2(&mut self) -> LCK2_W {
                LCK2_W { w: self }
            }
            #[doc = "Bit 1 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck1(&mut self) -> LCK1_W {
                LCK1_W { w: self }
            }
            #[doc = "Bit 0 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck0(&mut self) -> LCK0_W {
                LCK0_W { w: self }
            }
        }
    }
    #[doc = "GPIO alternate function low register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [afrl](afrl) module"]
    pub type AFRL = crate::Reg<u32, _AFRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AFRL;
    #[doc = "`read()` method returns [afrl::R](afrl::R) reader structure"]
    impl crate::Readable for AFRL {}
    #[doc = "`write(|w| ..)` method takes [afrl::W](afrl::W) writer structure"]
    impl crate::Writable for AFRL {}
    #[doc = "GPIO alternate function low register"]
    pub mod afrl {
        #[doc = "Reader of register AFRL"]
        pub type R = crate::R<u32, super::AFRL>;
        #[doc = "Writer for register AFRL"]
        pub type W = crate::W<u32, super::AFRL>;
        #[doc = "Register AFRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::AFRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum AFRL7_A {
            #[doc = "0: AF0"]
            AF0 = 0,
            #[doc = "1: AF1"]
            AF1 = 1,
            #[doc = "2: AF2"]
            AF2 = 2,
            #[doc = "3: AF3"]
            AF3 = 3,
            #[doc = "4: AF4"]
            AF4 = 4,
            #[doc = "5: AF5"]
            AF5 = 5,
            #[doc = "6: AF6"]
            AF6 = 6,
            #[doc = "7: AF7"]
            AF7 = 7,
            #[doc = "8: AF8"]
            AF8 = 8,
            #[doc = "9: AF9"]
            AF9 = 9,
            #[doc = "10: AF10"]
            AF10 = 10,
            #[doc = "11: AF11"]
            AF11 = 11,
            #[doc = "12: AF12"]
            AF12 = 12,
            #[doc = "13: AF13"]
            AF13 = 13,
            #[doc = "14: AF14"]
            AF14 = 14,
            #[doc = "15: AF15"]
            AF15 = 15,
        }
        impl From<AFRL7_A> for u8 {
            #[inline(always)]
            fn from(variant: AFRL7_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `AFRL7`"]
        pub type AFRL7_R = crate::R<u8, AFRL7_A>;
        impl AFRL7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AFRL7_A {
                match self.bits {
                    0 => AFRL7_A::AF0,
                    1 => AFRL7_A::AF1,
                    2 => AFRL7_A::AF2,
                    3 => AFRL7_A::AF3,
                    4 => AFRL7_A::AF4,
                    5 => AFRL7_A::AF5,
                    6 => AFRL7_A::AF6,
                    7 => AFRL7_A::AF7,
                    8 => AFRL7_A::AF8,
                    9 => AFRL7_A::AF9,
                    10 => AFRL7_A::AF10,
                    11 => AFRL7_A::AF11,
                    12 => AFRL7_A::AF12,
                    13 => AFRL7_A::AF13,
                    14 => AFRL7_A::AF14,
                    15 => AFRL7_A::AF15,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `AF0`"]
            #[inline(always)]
            pub fn is_af0(&self) -> bool {
                *self == AFRL7_A::AF0
            }
            #[doc = "Checks if the value of the field is `AF1`"]
            #[inline(always)]
            pub fn is_af1(&self) -> bool {
                *self == AFRL7_A::AF1
            }
            #[doc = "Checks if the value of the field is `AF2`"]
            #[inline(always)]
            pub fn is_af2(&self) -> bool {
                *self == AFRL7_A::AF2
            }
            #[doc = "Checks if the value of the field is `AF3`"]
            #[inline(always)]
            pub fn is_af3(&self) -> bool {
                *self == AFRL7_A::AF3
            }
            #[doc = "Checks if the value of the field is `AF4`"]
            #[inline(always)]
            pub fn is_af4(&self) -> bool {
                *self == AFRL7_A::AF4
            }
            #[doc = "Checks if the value of the field is `AF5`"]
            #[inline(always)]
            pub fn is_af5(&self) -> bool {
                *self == AFRL7_A::AF5
            }
            #[doc = "Checks if the value of the field is `AF6`"]
            #[inline(always)]
            pub fn is_af6(&self) -> bool {
                *self == AFRL7_A::AF6
            }
            #[doc = "Checks if the value of the field is `AF7`"]
            #[inline(always)]
            pub fn is_af7(&self) -> bool {
                *self == AFRL7_A::AF7
            }
            #[doc = "Checks if the value of the field is `AF8`"]
            #[inline(always)]
            pub fn is_af8(&self) -> bool {
                *self == AFRL7_A::AF8
            }
            #[doc = "Checks if the value of the field is `AF9`"]
            #[inline(always)]
            pub fn is_af9(&self) -> bool {
                *self == AFRL7_A::AF9
            }
            #[doc = "Checks if the value of the field is `AF10`"]
            #[inline(always)]
            pub fn is_af10(&self) -> bool {
                *self == AFRL7_A::AF10
            }
            #[doc = "Checks if the value of the field is `AF11`"]
            #[inline(always)]
            pub fn is_af11(&self) -> bool {
                *self == AFRL7_A::AF11
            }
            #[doc = "Checks if the value of the field is `AF12`"]
            #[inline(always)]
            pub fn is_af12(&self) -> bool {
                *self == AFRL7_A::AF12
            }
            #[doc = "Checks if the value of the field is `AF13`"]
            #[inline(always)]
            pub fn is_af13(&self) -> bool {
                *self == AFRL7_A::AF13
            }
            #[doc = "Checks if the value of the field is `AF14`"]
            #[inline(always)]
            pub fn is_af14(&self) -> bool {
                *self == AFRL7_A::AF14
            }
            #[doc = "Checks if the value of the field is `AF15`"]
            #[inline(always)]
            pub fn is_af15(&self) -> bool {
                *self == AFRL7_A::AF15
            }
        }
        #[doc = "Write proxy for field `AFRL7`"]
        pub struct AFRL7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL7_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL6_A = AFRL7_A;
        #[doc = "Reader of field `AFRL6`"]
        pub type AFRL6_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL6`"]
        pub struct AFRL6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL6_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL5_A = AFRL7_A;
        #[doc = "Reader of field `AFRL5`"]
        pub type AFRL5_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL5`"]
        pub struct AFRL5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL5_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL4_A = AFRL7_A;
        #[doc = "Reader of field `AFRL4`"]
        pub type AFRL4_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL4`"]
        pub struct AFRL4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL4_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL3_A = AFRL7_A;
        #[doc = "Reader of field `AFRL3`"]
        pub type AFRL3_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL3`"]
        pub struct AFRL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL2_A = AFRL7_A;
        #[doc = "Reader of field `AFRL2`"]
        pub type AFRL2_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL2`"]
        pub struct AFRL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL1_A = AFRL7_A;
        #[doc = "Reader of field `AFRL1`"]
        pub type AFRL1_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL1`"]
        pub struct AFRL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 0..7)"]
        pub type AFRL0_A = AFRL7_A;
        #[doc = "Reader of field `AFRL0`"]
        pub type AFRL0_R = crate::R<u8, AFRL7_A>;
        #[doc = "Write proxy for field `AFRL0`"]
        pub struct AFRL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRL0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRL0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRL7_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRL7_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRL7_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRL7_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRL7_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRL7_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRL7_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRL7_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRL7_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRL7_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRL7_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRL7_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRL7_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRL7_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRL7_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRL7_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl7(&self) -> AFRL7_R {
                AFRL7_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl6(&self) -> AFRL6_R {
                AFRL6_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl5(&self) -> AFRL5_R {
                AFRL5_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl4(&self) -> AFRL4_R {
                AFRL4_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl3(&self) -> AFRL3_R {
                AFRL3_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl2(&self) -> AFRL2_R {
                AFRL2_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl1(&self) -> AFRL1_R {
                AFRL1_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl0(&self) -> AFRL0_R {
                AFRL0_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl7(&mut self) -> AFRL7_W {
                AFRL7_W { w: self }
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl6(&mut self) -> AFRL6_W {
                AFRL6_W { w: self }
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl5(&mut self) -> AFRL5_W {
                AFRL5_W { w: self }
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl4(&mut self) -> AFRL4_W {
                AFRL4_W { w: self }
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl3(&mut self) -> AFRL3_W {
                AFRL3_W { w: self }
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl2(&mut self) -> AFRL2_W {
                AFRL2_W { w: self }
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl1(&mut self) -> AFRL1_W {
                AFRL1_W { w: self }
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afrl0(&mut self) -> AFRL0_W {
                AFRL0_W { w: self }
            }
        }
    }
    #[doc = "GPIO alternate function high register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [afrh](afrh) module"]
    pub type AFRH = crate::Reg<u32, _AFRH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AFRH;
    #[doc = "`read()` method returns [afrh::R](afrh::R) reader structure"]
    impl crate::Readable for AFRH {}
    #[doc = "`write(|w| ..)` method takes [afrh::W](afrh::W) writer structure"]
    impl crate::Writable for AFRH {}
    #[doc = "GPIO alternate function high register"]
    pub mod afrh {
        #[doc = "Reader of register AFRH"]
        pub type R = crate::R<u32, super::AFRH>;
        #[doc = "Writer for register AFRH"]
        pub type W = crate::W<u32, super::AFRH>;
        #[doc = "Register AFRH `reset()`'s with value 0"]
        impl crate::ResetValue for super::AFRH {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum AFRH15_A {
            #[doc = "0: AF0"]
            AF0 = 0,
            #[doc = "1: AF1"]
            AF1 = 1,
            #[doc = "2: AF2"]
            AF2 = 2,
            #[doc = "3: AF3"]
            AF3 = 3,
            #[doc = "4: AF4"]
            AF4 = 4,
            #[doc = "5: AF5"]
            AF5 = 5,
            #[doc = "6: AF6"]
            AF6 = 6,
            #[doc = "7: AF7"]
            AF7 = 7,
            #[doc = "8: AF8"]
            AF8 = 8,
            #[doc = "9: AF9"]
            AF9 = 9,
            #[doc = "10: AF10"]
            AF10 = 10,
            #[doc = "11: AF11"]
            AF11 = 11,
            #[doc = "12: AF12"]
            AF12 = 12,
            #[doc = "13: AF13"]
            AF13 = 13,
            #[doc = "14: AF14"]
            AF14 = 14,
            #[doc = "15: AF15"]
            AF15 = 15,
        }
        impl From<AFRH15_A> for u8 {
            #[inline(always)]
            fn from(variant: AFRH15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `AFRH15`"]
        pub type AFRH15_R = crate::R<u8, AFRH15_A>;
        impl AFRH15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AFRH15_A {
                match self.bits {
                    0 => AFRH15_A::AF0,
                    1 => AFRH15_A::AF1,
                    2 => AFRH15_A::AF2,
                    3 => AFRH15_A::AF3,
                    4 => AFRH15_A::AF4,
                    5 => AFRH15_A::AF5,
                    6 => AFRH15_A::AF6,
                    7 => AFRH15_A::AF7,
                    8 => AFRH15_A::AF8,
                    9 => AFRH15_A::AF9,
                    10 => AFRH15_A::AF10,
                    11 => AFRH15_A::AF11,
                    12 => AFRH15_A::AF12,
                    13 => AFRH15_A::AF13,
                    14 => AFRH15_A::AF14,
                    15 => AFRH15_A::AF15,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `AF0`"]
            #[inline(always)]
            pub fn is_af0(&self) -> bool {
                *self == AFRH15_A::AF0
            }
            #[doc = "Checks if the value of the field is `AF1`"]
            #[inline(always)]
            pub fn is_af1(&self) -> bool {
                *self == AFRH15_A::AF1
            }
            #[doc = "Checks if the value of the field is `AF2`"]
            #[inline(always)]
            pub fn is_af2(&self) -> bool {
                *self == AFRH15_A::AF2
            }
            #[doc = "Checks if the value of the field is `AF3`"]
            #[inline(always)]
            pub fn is_af3(&self) -> bool {
                *self == AFRH15_A::AF3
            }
            #[doc = "Checks if the value of the field is `AF4`"]
            #[inline(always)]
            pub fn is_af4(&self) -> bool {
                *self == AFRH15_A::AF4
            }
            #[doc = "Checks if the value of the field is `AF5`"]
            #[inline(always)]
            pub fn is_af5(&self) -> bool {
                *self == AFRH15_A::AF5
            }
            #[doc = "Checks if the value of the field is `AF6`"]
            #[inline(always)]
            pub fn is_af6(&self) -> bool {
                *self == AFRH15_A::AF6
            }
            #[doc = "Checks if the value of the field is `AF7`"]
            #[inline(always)]
            pub fn is_af7(&self) -> bool {
                *self == AFRH15_A::AF7
            }
            #[doc = "Checks if the value of the field is `AF8`"]
            #[inline(always)]
            pub fn is_af8(&self) -> bool {
                *self == AFRH15_A::AF8
            }
            #[doc = "Checks if the value of the field is `AF9`"]
            #[inline(always)]
            pub fn is_af9(&self) -> bool {
                *self == AFRH15_A::AF9
            }
            #[doc = "Checks if the value of the field is `AF10`"]
            #[inline(always)]
            pub fn is_af10(&self) -> bool {
                *self == AFRH15_A::AF10
            }
            #[doc = "Checks if the value of the field is `AF11`"]
            #[inline(always)]
            pub fn is_af11(&self) -> bool {
                *self == AFRH15_A::AF11
            }
            #[doc = "Checks if the value of the field is `AF12`"]
            #[inline(always)]
            pub fn is_af12(&self) -> bool {
                *self == AFRH15_A::AF12
            }
            #[doc = "Checks if the value of the field is `AF13`"]
            #[inline(always)]
            pub fn is_af13(&self) -> bool {
                *self == AFRH15_A::AF13
            }
            #[doc = "Checks if the value of the field is `AF14`"]
            #[inline(always)]
            pub fn is_af14(&self) -> bool {
                *self == AFRH15_A::AF14
            }
            #[doc = "Checks if the value of the field is `AF15`"]
            #[inline(always)]
            pub fn is_af15(&self) -> bool {
                *self == AFRH15_A::AF15
            }
        }
        #[doc = "Write proxy for field `AFRH15`"]
        pub struct AFRH15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH15_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH14_A = AFRH15_A;
        #[doc = "Reader of field `AFRH14`"]
        pub type AFRH14_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH14`"]
        pub struct AFRH14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH14_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH13_A = AFRH15_A;
        #[doc = "Reader of field `AFRH13`"]
        pub type AFRH13_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH13`"]
        pub struct AFRH13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH13_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH12_A = AFRH15_A;
        #[doc = "Reader of field `AFRH12`"]
        pub type AFRH12_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH12`"]
        pub struct AFRH12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH12_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH11_A = AFRH15_A;
        #[doc = "Reader of field `AFRH11`"]
        pub type AFRH11_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH11`"]
        pub struct AFRH11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH11_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH10_A = AFRH15_A;
        #[doc = "Reader of field `AFRH10`"]
        pub type AFRH10_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH10`"]
        pub struct AFRH10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH10_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH9_A = AFRH15_A;
        #[doc = "Reader of field `AFRH9`"]
        pub type AFRH9_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH9`"]
        pub struct AFRH9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH9_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Alternate function selection for port x bit y (y = 8..15)"]
        pub type AFRH8_A = AFRH15_A;
        #[doc = "Reader of field `AFRH8`"]
        pub type AFRH8_R = crate::R<u8, AFRH15_A>;
        #[doc = "Write proxy for field `AFRH8`"]
        pub struct AFRH8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFRH8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFRH8_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "AF0"]
            #[inline(always)]
            pub fn af0(self) -> &'a mut W {
                self.variant(AFRH15_A::AF0)
            }
            #[doc = "AF1"]
            #[inline(always)]
            pub fn af1(self) -> &'a mut W {
                self.variant(AFRH15_A::AF1)
            }
            #[doc = "AF2"]
            #[inline(always)]
            pub fn af2(self) -> &'a mut W {
                self.variant(AFRH15_A::AF2)
            }
            #[doc = "AF3"]
            #[inline(always)]
            pub fn af3(self) -> &'a mut W {
                self.variant(AFRH15_A::AF3)
            }
            #[doc = "AF4"]
            #[inline(always)]
            pub fn af4(self) -> &'a mut W {
                self.variant(AFRH15_A::AF4)
            }
            #[doc = "AF5"]
            #[inline(always)]
            pub fn af5(self) -> &'a mut W {
                self.variant(AFRH15_A::AF5)
            }
            #[doc = "AF6"]
            #[inline(always)]
            pub fn af6(self) -> &'a mut W {
                self.variant(AFRH15_A::AF6)
            }
            #[doc = "AF7"]
            #[inline(always)]
            pub fn af7(self) -> &'a mut W {
                self.variant(AFRH15_A::AF7)
            }
            #[doc = "AF8"]
            #[inline(always)]
            pub fn af8(self) -> &'a mut W {
                self.variant(AFRH15_A::AF8)
            }
            #[doc = "AF9"]
            #[inline(always)]
            pub fn af9(self) -> &'a mut W {
                self.variant(AFRH15_A::AF9)
            }
            #[doc = "AF10"]
            #[inline(always)]
            pub fn af10(self) -> &'a mut W {
                self.variant(AFRH15_A::AF10)
            }
            #[doc = "AF11"]
            #[inline(always)]
            pub fn af11(self) -> &'a mut W {
                self.variant(AFRH15_A::AF11)
            }
            #[doc = "AF12"]
            #[inline(always)]
            pub fn af12(self) -> &'a mut W {
                self.variant(AFRH15_A::AF12)
            }
            #[doc = "AF13"]
            #[inline(always)]
            pub fn af13(self) -> &'a mut W {
                self.variant(AFRH15_A::AF13)
            }
            #[doc = "AF14"]
            #[inline(always)]
            pub fn af14(self) -> &'a mut W {
                self.variant(AFRH15_A::AF14)
            }
            #[doc = "AF15"]
            #[inline(always)]
            pub fn af15(self) -> &'a mut W {
                self.variant(AFRH15_A::AF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh15(&self) -> AFRH15_R {
                AFRH15_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh14(&self) -> AFRH14_R {
                AFRH14_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh13(&self) -> AFRH13_R {
                AFRH13_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh12(&self) -> AFRH12_R {
                AFRH12_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh11(&self) -> AFRH11_R {
                AFRH11_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh10(&self) -> AFRH10_R {
                AFRH10_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh9(&self) -> AFRH9_R {
                AFRH9_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh8(&self) -> AFRH8_R {
                AFRH8_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh15(&mut self) -> AFRH15_W {
                AFRH15_W { w: self }
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh14(&mut self) -> AFRH14_W {
                AFRH14_W { w: self }
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh13(&mut self) -> AFRH13_W {
                AFRH13_W { w: self }
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh12(&mut self) -> AFRH12_W {
                AFRH12_W { w: self }
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh11(&mut self) -> AFRH11_W {
                AFRH11_W { w: self }
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh10(&mut self) -> AFRH10_W {
                AFRH10_W { w: self }
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh9(&mut self) -> AFRH9_W {
                AFRH9_W { w: self }
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afrh8(&mut self) -> AFRH8_W {
                AFRH8_W { w: self }
            }
        }
    }
    #[doc = "Port bit reset register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [brr](brr) module"]
    pub type BRR = crate::Reg<u32, _BRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BRR;
    #[doc = "`write(|w| ..)` method takes [brr::W](brr::W) writer structure"]
    impl crate::Writable for BRR {}
    #[doc = "Port bit reset register"]
    pub mod brr {
        #[doc = "Writer for register BRR"]
        pub type W = crate::W<u32, super::BRR>;
        #[doc = "Register BRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port x Reset bit y\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BR0_AW {
            #[doc = "0: No action on the corresponding ODx bit"]
            NOACTION = 0,
            #[doc = "1: Reset the ODx bit"]
            RESET = 1,
        }
        impl From<BR0_AW> for bool {
            #[inline(always)]
            fn from(variant: BR0_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BR0`"]
        pub struct BR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR1_AW = BR0_AW;
        #[doc = "Write proxy for field `BR1`"]
        pub struct BR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR2_AW = BR0_AW;
        #[doc = "Write proxy for field `BR2`"]
        pub struct BR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR3_AW = BR0_AW;
        #[doc = "Write proxy for field `BR3`"]
        pub struct BR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR4_AW = BR0_AW;
        #[doc = "Write proxy for field `BR4`"]
        pub struct BR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR5_AW = BR0_AW;
        #[doc = "Write proxy for field `BR5`"]
        pub struct BR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR6_AW = BR0_AW;
        #[doc = "Write proxy for field `BR6`"]
        pub struct BR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR7_AW = BR0_AW;
        #[doc = "Write proxy for field `BR7`"]
        pub struct BR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR8_AW = BR0_AW;
        #[doc = "Write proxy for field `BR8`"]
        pub struct BR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR9_AW = BR0_AW;
        #[doc = "Write proxy for field `BR9`"]
        pub struct BR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR0_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR0_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port x Reset bit y\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BR10_AW {
            #[doc = "0: No action on the corresponding ODx bit"]
            NOACTION = 0,
            #[doc = "1: Reset the ODx bit"]
            RESET = 1,
        }
        impl From<BR10_AW> for bool {
            #[inline(always)]
            fn from(variant: BR10_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BR10`"]
        pub struct BR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR10_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR10_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR11_AW = BR10_AW;
        #[doc = "Write proxy for field `BR11`"]
        pub struct BR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR10_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR10_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR12_AW = BR10_AW;
        #[doc = "Write proxy for field `BR12`"]
        pub struct BR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR10_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR10_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR13_AW = BR10_AW;
        #[doc = "Write proxy for field `BR13`"]
        pub struct BR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR10_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR10_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR14_AW = BR10_AW;
        #[doc = "Write proxy for field `BR14`"]
        pub struct BR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR10_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR10_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port x Reset bit y"]
        pub type BR15_AW = BR10_AW;
        #[doc = "Write proxy for field `BR15`"]
        pub struct BR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action on the corresponding ODx bit"]
            #[inline(always)]
            pub fn no_action(self) -> &'a mut W {
                self.variant(BR10_AW::NOACTION)
            }
            #[doc = "Reset the ODx bit"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(BR10_AW::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br0(&mut self) -> BR0_W {
                BR0_W { w: self }
            }
            #[doc = "Bit 1 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br1(&mut self) -> BR1_W {
                BR1_W { w: self }
            }
            #[doc = "Bit 2 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br2(&mut self) -> BR2_W {
                BR2_W { w: self }
            }
            #[doc = "Bit 3 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br3(&mut self) -> BR3_W {
                BR3_W { w: self }
            }
            #[doc = "Bit 4 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br4(&mut self) -> BR4_W {
                BR4_W { w: self }
            }
            #[doc = "Bit 5 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br5(&mut self) -> BR5_W {
                BR5_W { w: self }
            }
            #[doc = "Bit 6 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br6(&mut self) -> BR6_W {
                BR6_W { w: self }
            }
            #[doc = "Bit 7 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br7(&mut self) -> BR7_W {
                BR7_W { w: self }
            }
            #[doc = "Bit 8 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br8(&mut self) -> BR8_W {
                BR8_W { w: self }
            }
            #[doc = "Bit 9 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br9(&mut self) -> BR9_W {
                BR9_W { w: self }
            }
            #[doc = "Bit 10 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br10(&mut self) -> BR10_W {
                BR10_W { w: self }
            }
            #[doc = "Bit 11 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br11(&mut self) -> BR11_W {
                BR11_W { w: self }
            }
            #[doc = "Bit 12 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br12(&mut self) -> BR12_W {
                BR12_W { w: self }
            }
            #[doc = "Bit 13 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br13(&mut self) -> BR13_W {
                BR13_W { w: self }
            }
            #[doc = "Bit 14 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br14(&mut self) -> BR14_W {
                BR14_W { w: self }
            }
            #[doc = "Bit 15 - Port x Reset bit y"]
            #[inline(always)]
            pub fn br15(&mut self) -> BR15_W {
                BR15_W { w: self }
            }
        }
    }
}
#[doc = "Serial peripheral interface"]
pub struct SPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI1 {}
impl SPI1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        0x4001_3000 as *const _
    }
}
impl Deref for SPI1 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SPI1::ptr() }
    }
}
#[doc = "Serial peripheral interface"]
pub mod spi1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - status register"]
        pub sr: SR,
        #[doc = "0x0c - data register"]
        pub dr: DR,
        #[doc = "0x10 - CRC polynomial register"]
        pub crcpr: CRCPR,
        #[doc = "0x14 - RX CRC register"]
        pub rxcrcr: RXCRCR,
        #[doc = "0x18 - TX CRC register"]
        pub txcrcr: TXCRCR,
        #[doc = "0x1c - I2S configuration register"]
        pub i2scfgr: I2SCFGR,
        #[doc = "0x20 - I2S prescaler register"]
        pub i2spr: I2SPR,
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Bidirectional data mode enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BIDIMODE_A {
            #[doc = "0: 2-line unidirectional data mode selected"]
            UNIDIRECTIONAL = 0,
            #[doc = "1: 1-line bidirectional data mode selected"]
            BIDIRECTIONAL = 1,
        }
        impl From<BIDIMODE_A> for bool {
            #[inline(always)]
            fn from(variant: BIDIMODE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BIDIMODE`"]
        pub type BIDIMODE_R = crate::R<bool, BIDIMODE_A>;
        impl BIDIMODE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BIDIMODE_A {
                match self.bits {
                    false => BIDIMODE_A::UNIDIRECTIONAL,
                    true => BIDIMODE_A::BIDIRECTIONAL,
                }
            }
            #[doc = "Checks if the value of the field is `UNIDIRECTIONAL`"]
            #[inline(always)]
            pub fn is_unidirectional(&self) -> bool {
                *self == BIDIMODE_A::UNIDIRECTIONAL
            }
            #[doc = "Checks if the value of the field is `BIDIRECTIONAL`"]
            #[inline(always)]
            pub fn is_bidirectional(&self) -> bool {
                *self == BIDIMODE_A::BIDIRECTIONAL
            }
        }
        #[doc = "Write proxy for field `BIDIMODE`"]
        pub struct BIDIMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIDIMODE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BIDIMODE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "2-line unidirectional data mode selected"]
            #[inline(always)]
            pub fn unidirectional(self) -> &'a mut W {
                self.variant(BIDIMODE_A::UNIDIRECTIONAL)
            }
            #[doc = "1-line bidirectional data mode selected"]
            #[inline(always)]
            pub fn bidirectional(self) -> &'a mut W {
                self.variant(BIDIMODE_A::BIDIRECTIONAL)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Output enable in bidirectional mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BIDIOE_A {
            #[doc = "0: Output disabled (receive-only mode)"]
            OUTPUTDISABLED = 0,
            #[doc = "1: Output enabled (transmit-only mode)"]
            OUTPUTENABLED = 1,
        }
        impl From<BIDIOE_A> for bool {
            #[inline(always)]
            fn from(variant: BIDIOE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BIDIOE`"]
        pub type BIDIOE_R = crate::R<bool, BIDIOE_A>;
        impl BIDIOE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BIDIOE_A {
                match self.bits {
                    false => BIDIOE_A::OUTPUTDISABLED,
                    true => BIDIOE_A::OUTPUTENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `OUTPUTDISABLED`"]
            #[inline(always)]
            pub fn is_output_disabled(&self) -> bool {
                *self == BIDIOE_A::OUTPUTDISABLED
            }
            #[doc = "Checks if the value of the field is `OUTPUTENABLED`"]
            #[inline(always)]
            pub fn is_output_enabled(&self) -> bool {
                *self == BIDIOE_A::OUTPUTENABLED
            }
        }
        #[doc = "Write proxy for field `BIDIOE`"]
        pub struct BIDIOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIDIOE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BIDIOE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output disabled (receive-only mode)"]
            #[inline(always)]
            pub fn output_disabled(self) -> &'a mut W {
                self.variant(BIDIOE_A::OUTPUTDISABLED)
            }
            #[doc = "Output enabled (transmit-only mode)"]
            #[inline(always)]
            pub fn output_enabled(self) -> &'a mut W {
                self.variant(BIDIOE_A::OUTPUTENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Hardware CRC calculation enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CRCEN_A {
            #[doc = "0: CRC calculation disabled"]
            DISABLED = 0,
            #[doc = "1: CRC calculation enabled"]
            ENABLED = 1,
        }
        impl From<CRCEN_A> for bool {
            #[inline(always)]
            fn from(variant: CRCEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CRCEN`"]
        pub type CRCEN_R = crate::R<bool, CRCEN_A>;
        impl CRCEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CRCEN_A {
                match self.bits {
                    false => CRCEN_A::DISABLED,
                    true => CRCEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CRCEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CRCEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CRCEN`"]
        pub struct CRCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CRCEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CRC calculation disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CRCEN_A::DISABLED)
            }
            #[doc = "CRC calculation enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CRCEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "CRC transfer next\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CRCNEXT_A {
            #[doc = "0: Next transmit value is from Tx buffer"]
            TXBUFFER = 0,
            #[doc = "1: Next transmit value is from Tx CRC register"]
            CRC = 1,
        }
        impl From<CRCNEXT_A> for bool {
            #[inline(always)]
            fn from(variant: CRCNEXT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CRCNEXT`"]
        pub type CRCNEXT_R = crate::R<bool, CRCNEXT_A>;
        impl CRCNEXT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CRCNEXT_A {
                match self.bits {
                    false => CRCNEXT_A::TXBUFFER,
                    true => CRCNEXT_A::CRC,
                }
            }
            #[doc = "Checks if the value of the field is `TXBUFFER`"]
            #[inline(always)]
            pub fn is_tx_buffer(&self) -> bool {
                *self == CRCNEXT_A::TXBUFFER
            }
            #[doc = "Checks if the value of the field is `CRC`"]
            #[inline(always)]
            pub fn is_crc(&self) -> bool {
                *self == CRCNEXT_A::CRC
            }
        }
        #[doc = "Write proxy for field `CRCNEXT`"]
        pub struct CRCNEXT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCNEXT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CRCNEXT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Next transmit value is from Tx buffer"]
            #[inline(always)]
            pub fn tx_buffer(self) -> &'a mut W {
                self.variant(CRCNEXT_A::TXBUFFER)
            }
            #[doc = "Next transmit value is from Tx CRC register"]
            #[inline(always)]
            pub fn crc(self) -> &'a mut W {
                self.variant(CRCNEXT_A::CRC)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "CRC length\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CRCL_A {
            #[doc = "0: 8-bit CRC length"]
            EIGHTBIT = 0,
            #[doc = "1: 16-bit CRC length"]
            SIXTEENBIT = 1,
        }
        impl From<CRCL_A> for bool {
            #[inline(always)]
            fn from(variant: CRCL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CRCL`"]
        pub type CRCL_R = crate::R<bool, CRCL_A>;
        impl CRCL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CRCL_A {
                match self.bits {
                    false => CRCL_A::EIGHTBIT,
                    true => CRCL_A::SIXTEENBIT,
                }
            }
            #[doc = "Checks if the value of the field is `EIGHTBIT`"]
            #[inline(always)]
            pub fn is_eight_bit(&self) -> bool {
                *self == CRCL_A::EIGHTBIT
            }
            #[doc = "Checks if the value of the field is `SIXTEENBIT`"]
            #[inline(always)]
            pub fn is_sixteen_bit(&self) -> bool {
                *self == CRCL_A::SIXTEENBIT
            }
        }
        #[doc = "Write proxy for field `CRCL`"]
        pub struct CRCL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CRCL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "8-bit CRC length"]
            #[inline(always)]
            pub fn eight_bit(self) -> &'a mut W {
                self.variant(CRCL_A::EIGHTBIT)
            }
            #[doc = "16-bit CRC length"]
            #[inline(always)]
            pub fn sixteen_bit(self) -> &'a mut W {
                self.variant(CRCL_A::SIXTEENBIT)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Receive only\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXONLY_A {
            #[doc = "0: Full duplex (Transmit and receive)"]
            FULLDUPLEX = 0,
            #[doc = "1: Output disabled (Receive-only mode)"]
            OUTPUTDISABLED = 1,
        }
        impl From<RXONLY_A> for bool {
            #[inline(always)]
            fn from(variant: RXONLY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXONLY`"]
        pub type RXONLY_R = crate::R<bool, RXONLY_A>;
        impl RXONLY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXONLY_A {
                match self.bits {
                    false => RXONLY_A::FULLDUPLEX,
                    true => RXONLY_A::OUTPUTDISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `FULLDUPLEX`"]
            #[inline(always)]
            pub fn is_full_duplex(&self) -> bool {
                *self == RXONLY_A::FULLDUPLEX
            }
            #[doc = "Checks if the value of the field is `OUTPUTDISABLED`"]
            #[inline(always)]
            pub fn is_output_disabled(&self) -> bool {
                *self == RXONLY_A::OUTPUTDISABLED
            }
        }
        #[doc = "Write proxy for field `RXONLY`"]
        pub struct RXONLY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXONLY_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RXONLY_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Full duplex (Transmit and receive)"]
            #[inline(always)]
            pub fn full_duplex(self) -> &'a mut W {
                self.variant(RXONLY_A::FULLDUPLEX)
            }
            #[doc = "Output disabled (Receive-only mode)"]
            #[inline(always)]
            pub fn output_disabled(self) -> &'a mut W {
                self.variant(RXONLY_A::OUTPUTDISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Software slave management\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SSM_A {
            #[doc = "0: Software slave management disabled"]
            DISABLED = 0,
            #[doc = "1: Software slave management enabled"]
            ENABLED = 1,
        }
        impl From<SSM_A> for bool {
            #[inline(always)]
            fn from(variant: SSM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SSM`"]
        pub type SSM_R = crate::R<bool, SSM_A>;
        impl SSM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SSM_A {
                match self.bits {
                    false => SSM_A::DISABLED,
                    true => SSM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SSM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == SSM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `SSM`"]
        pub struct SSM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SSM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Software slave management disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SSM_A::DISABLED)
            }
            #[doc = "Software slave management enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SSM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Internal slave select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SSI_A {
            #[doc = "0: 0 is forced onto the NSS pin and the I/O value of the NSS pin is ignored"]
            SLAVESELECTED = 0,
            #[doc = "1: 1 is forced onto the NSS pin and the I/O value of the NSS pin is ignored"]
            SLAVENOTSELECTED = 1,
        }
        impl From<SSI_A> for bool {
            #[inline(always)]
            fn from(variant: SSI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SSI`"]
        pub type SSI_R = crate::R<bool, SSI_A>;
        impl SSI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SSI_A {
                match self.bits {
                    false => SSI_A::SLAVESELECTED,
                    true => SSI_A::SLAVENOTSELECTED,
                }
            }
            #[doc = "Checks if the value of the field is `SLAVESELECTED`"]
            #[inline(always)]
            pub fn is_slave_selected(&self) -> bool {
                *self == SSI_A::SLAVESELECTED
            }
            #[doc = "Checks if the value of the field is `SLAVENOTSELECTED`"]
            #[inline(always)]
            pub fn is_slave_not_selected(&self) -> bool {
                *self == SSI_A::SLAVENOTSELECTED
            }
        }
        #[doc = "Write proxy for field `SSI`"]
        pub struct SSI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SSI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "0 is forced onto the NSS pin and the I/O value of the NSS pin is ignored"]
            #[inline(always)]
            pub fn slave_selected(self) -> &'a mut W {
                self.variant(SSI_A::SLAVESELECTED)
            }
            #[doc = "1 is forced onto the NSS pin and the I/O value of the NSS pin is ignored"]
            #[inline(always)]
            pub fn slave_not_selected(self) -> &'a mut W {
                self.variant(SSI_A::SLAVENOTSELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Frame format\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LSBFIRST_A {
            #[doc = "0: Data is transmitted/received with the MSB first"]
            MSBFIRST = 0,
            #[doc = "1: Data is transmitted/received with the LSB first"]
            LSBFIRST = 1,
        }
        impl From<LSBFIRST_A> for bool {
            #[inline(always)]
            fn from(variant: LSBFIRST_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LSBFIRST`"]
        pub type LSBFIRST_R = crate::R<bool, LSBFIRST_A>;
        impl LSBFIRST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LSBFIRST_A {
                match self.bits {
                    false => LSBFIRST_A::MSBFIRST,
                    true => LSBFIRST_A::LSBFIRST,
                }
            }
            #[doc = "Checks if the value of the field is `MSBFIRST`"]
            #[inline(always)]
            pub fn is_msbfirst(&self) -> bool {
                *self == LSBFIRST_A::MSBFIRST
            }
            #[doc = "Checks if the value of the field is `LSBFIRST`"]
            #[inline(always)]
            pub fn is_lsbfirst(&self) -> bool {
                *self == LSBFIRST_A::LSBFIRST
            }
        }
        #[doc = "Write proxy for field `LSBFIRST`"]
        pub struct LSBFIRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSBFIRST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LSBFIRST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Data is transmitted/received with the MSB first"]
            #[inline(always)]
            pub fn msbfirst(self) -> &'a mut W {
                self.variant(LSBFIRST_A::MSBFIRST)
            }
            #[doc = "Data is transmitted/received with the LSB first"]
            #[inline(always)]
            pub fn lsbfirst(self) -> &'a mut W {
                self.variant(LSBFIRST_A::LSBFIRST)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "SPI enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SPE_A {
            #[doc = "0: Peripheral disabled"]
            DISABLED = 0,
            #[doc = "1: Peripheral enabled"]
            ENABLED = 1,
        }
        impl From<SPE_A> for bool {
            #[inline(always)]
            fn from(variant: SPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SPE`"]
        pub type SPE_R = crate::R<bool, SPE_A>;
        impl SPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SPE_A {
                match self.bits {
                    false => SPE_A::DISABLED,
                    true => SPE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SPE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == SPE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `SPE`"]
        pub struct SPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Peripheral disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SPE_A::DISABLED)
            }
            #[doc = "Peripheral enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SPE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Baud rate control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum BR_A {
            #[doc = "0: f_PCLK / 2"]
            DIV2 = 0,
            #[doc = "1: f_PCLK / 4"]
            DIV4 = 1,
            #[doc = "2: f_PCLK / 8"]
            DIV8 = 2,
            #[doc = "3: f_PCLK / 16"]
            DIV16 = 3,
            #[doc = "4: f_PCLK / 32"]
            DIV32 = 4,
            #[doc = "5: f_PCLK / 64"]
            DIV64 = 5,
            #[doc = "6: f_PCLK / 128"]
            DIV128 = 6,
            #[doc = "7: f_PCLK / 256"]
            DIV256 = 7,
        }
        impl From<BR_A> for u8 {
            #[inline(always)]
            fn from(variant: BR_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `BR`"]
        pub type BR_R = crate::R<u8, BR_A>;
        impl BR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BR_A {
                match self.bits {
                    0 => BR_A::DIV2,
                    1 => BR_A::DIV4,
                    2 => BR_A::DIV8,
                    3 => BR_A::DIV16,
                    4 => BR_A::DIV32,
                    5 => BR_A::DIV64,
                    6 => BR_A::DIV128,
                    7 => BR_A::DIV256,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == BR_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == BR_A::DIV4
            }
            #[doc = "Checks if the value of the field is `DIV8`"]
            #[inline(always)]
            pub fn is_div8(&self) -> bool {
                *self == BR_A::DIV8
            }
            #[doc = "Checks if the value of the field is `DIV16`"]
            #[inline(always)]
            pub fn is_div16(&self) -> bool {
                *self == BR_A::DIV16
            }
            #[doc = "Checks if the value of the field is `DIV32`"]
            #[inline(always)]
            pub fn is_div32(&self) -> bool {
                *self == BR_A::DIV32
            }
            #[doc = "Checks if the value of the field is `DIV64`"]
            #[inline(always)]
            pub fn is_div64(&self) -> bool {
                *self == BR_A::DIV64
            }
            #[doc = "Checks if the value of the field is `DIV128`"]
            #[inline(always)]
            pub fn is_div128(&self) -> bool {
                *self == BR_A::DIV128
            }
            #[doc = "Checks if the value of the field is `DIV256`"]
            #[inline(always)]
            pub fn is_div256(&self) -> bool {
                *self == BR_A::DIV256
            }
        }
        #[doc = "Write proxy for field `BR`"]
        pub struct BR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BR_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "f_PCLK / 2"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(BR_A::DIV2)
            }
            #[doc = "f_PCLK / 4"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(BR_A::DIV4)
            }
            #[doc = "f_PCLK / 8"]
            #[inline(always)]
            pub fn div8(self) -> &'a mut W {
                self.variant(BR_A::DIV8)
            }
            #[doc = "f_PCLK / 16"]
            #[inline(always)]
            pub fn div16(self) -> &'a mut W {
                self.variant(BR_A::DIV16)
            }
            #[doc = "f_PCLK / 32"]
            #[inline(always)]
            pub fn div32(self) -> &'a mut W {
                self.variant(BR_A::DIV32)
            }
            #[doc = "f_PCLK / 64"]
            #[inline(always)]
            pub fn div64(self) -> &'a mut W {
                self.variant(BR_A::DIV64)
            }
            #[doc = "f_PCLK / 128"]
            #[inline(always)]
            pub fn div128(self) -> &'a mut W {
                self.variant(BR_A::DIV128)
            }
            #[doc = "f_PCLK / 256"]
            #[inline(always)]
            pub fn div256(self) -> &'a mut W {
                self.variant(BR_A::DIV256)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 3)) | (((value as u32) & 0x07) << 3);
                self.w
            }
        }
        #[doc = "Master selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MSTR_A {
            #[doc = "0: Slave configuration"]
            SLAVE = 0,
            #[doc = "1: Master configuration"]
            MASTER = 1,
        }
        impl From<MSTR_A> for bool {
            #[inline(always)]
            fn from(variant: MSTR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MSTR`"]
        pub type MSTR_R = crate::R<bool, MSTR_A>;
        impl MSTR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MSTR_A {
                match self.bits {
                    false => MSTR_A::SLAVE,
                    true => MSTR_A::MASTER,
                }
            }
            #[doc = "Checks if the value of the field is `SLAVE`"]
            #[inline(always)]
            pub fn is_slave(&self) -> bool {
                *self == MSTR_A::SLAVE
            }
            #[doc = "Checks if the value of the field is `MASTER`"]
            #[inline(always)]
            pub fn is_master(&self) -> bool {
                *self == MSTR_A::MASTER
            }
        }
        #[doc = "Write proxy for field `MSTR`"]
        pub struct MSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSTR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MSTR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Slave configuration"]
            #[inline(always)]
            pub fn slave(self) -> &'a mut W {
                self.variant(MSTR_A::SLAVE)
            }
            #[doc = "Master configuration"]
            #[inline(always)]
            pub fn master(self) -> &'a mut W {
                self.variant(MSTR_A::MASTER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Clock polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CPOL_A {
            #[doc = "0: CK to 0 when idle"]
            IDLELOW = 0,
            #[doc = "1: CK to 1 when idle"]
            IDLEHIGH = 1,
        }
        impl From<CPOL_A> for bool {
            #[inline(always)]
            fn from(variant: CPOL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CPOL`"]
        pub type CPOL_R = crate::R<bool, CPOL_A>;
        impl CPOL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CPOL_A {
                match self.bits {
                    false => CPOL_A::IDLELOW,
                    true => CPOL_A::IDLEHIGH,
                }
            }
            #[doc = "Checks if the value of the field is `IDLELOW`"]
            #[inline(always)]
            pub fn is_idle_low(&self) -> bool {
                *self == CPOL_A::IDLELOW
            }
            #[doc = "Checks if the value of the field is `IDLEHIGH`"]
            #[inline(always)]
            pub fn is_idle_high(&self) -> bool {
                *self == CPOL_A::IDLEHIGH
            }
        }
        #[doc = "Write proxy for field `CPOL`"]
        pub struct CPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPOL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CPOL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CK to 0 when idle"]
            #[inline(always)]
            pub fn idle_low(self) -> &'a mut W {
                self.variant(CPOL_A::IDLELOW)
            }
            #[doc = "CK to 1 when idle"]
            #[inline(always)]
            pub fn idle_high(self) -> &'a mut W {
                self.variant(CPOL_A::IDLEHIGH)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Clock phase\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CPHA_A {
            #[doc = "0: The first clock transition is the first data capture edge"]
            FIRSTEDGE = 0,
            #[doc = "1: The second clock transition is the first data capture edge"]
            SECONDEDGE = 1,
        }
        impl From<CPHA_A> for bool {
            #[inline(always)]
            fn from(variant: CPHA_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CPHA`"]
        pub type CPHA_R = crate::R<bool, CPHA_A>;
        impl CPHA_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CPHA_A {
                match self.bits {
                    false => CPHA_A::FIRSTEDGE,
                    true => CPHA_A::SECONDEDGE,
                }
            }
            #[doc = "Checks if the value of the field is `FIRSTEDGE`"]
            #[inline(always)]
            pub fn is_first_edge(&self) -> bool {
                *self == CPHA_A::FIRSTEDGE
            }
            #[doc = "Checks if the value of the field is `SECONDEDGE`"]
            #[inline(always)]
            pub fn is_second_edge(&self) -> bool {
                *self == CPHA_A::SECONDEDGE
            }
        }
        #[doc = "Write proxy for field `CPHA`"]
        pub struct CPHA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPHA_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CPHA_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The first clock transition is the first data capture edge"]
            #[inline(always)]
            pub fn first_edge(self) -> &'a mut W {
                self.variant(CPHA_A::FIRSTEDGE)
            }
            #[doc = "The second clock transition is the first data capture edge"]
            #[inline(always)]
            pub fn second_edge(self) -> &'a mut W {
                self.variant(CPHA_A::SECONDEDGE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Bidirectional data mode enable"]
            #[inline(always)]
            pub fn bidimode(&self) -> BIDIMODE_R {
                BIDIMODE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Output enable in bidirectional mode"]
            #[inline(always)]
            pub fn bidioe(&self) -> BIDIOE_R {
                BIDIOE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Hardware CRC calculation enable"]
            #[inline(always)]
            pub fn crcen(&self) -> CRCEN_R {
                CRCEN_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - CRC transfer next"]
            #[inline(always)]
            pub fn crcnext(&self) -> CRCNEXT_R {
                CRCNEXT_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - CRC length"]
            #[inline(always)]
            pub fn crcl(&self) -> CRCL_R {
                CRCL_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Receive only"]
            #[inline(always)]
            pub fn rxonly(&self) -> RXONLY_R {
                RXONLY_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Software slave management"]
            #[inline(always)]
            pub fn ssm(&self) -> SSM_R {
                SSM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Internal slave select"]
            #[inline(always)]
            pub fn ssi(&self) -> SSI_R {
                SSI_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Frame format"]
            #[inline(always)]
            pub fn lsbfirst(&self) -> LSBFIRST_R {
                LSBFIRST_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SPI enable"]
            #[inline(always)]
            pub fn spe(&self) -> SPE_R {
                SPE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 3:5 - Baud rate control"]
            #[inline(always)]
            pub fn br(&self) -> BR_R {
                BR_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bit 2 - Master selection"]
            #[inline(always)]
            pub fn mstr(&self) -> MSTR_R {
                MSTR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&self) -> CPOL_R {
                CPOL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&self) -> CPHA_R {
                CPHA_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Bidirectional data mode enable"]
            #[inline(always)]
            pub fn bidimode(&mut self) -> BIDIMODE_W {
                BIDIMODE_W { w: self }
            }
            #[doc = "Bit 14 - Output enable in bidirectional mode"]
            #[inline(always)]
            pub fn bidioe(&mut self) -> BIDIOE_W {
                BIDIOE_W { w: self }
            }
            #[doc = "Bit 13 - Hardware CRC calculation enable"]
            #[inline(always)]
            pub fn crcen(&mut self) -> CRCEN_W {
                CRCEN_W { w: self }
            }
            #[doc = "Bit 12 - CRC transfer next"]
            #[inline(always)]
            pub fn crcnext(&mut self) -> CRCNEXT_W {
                CRCNEXT_W { w: self }
            }
            #[doc = "Bit 11 - CRC length"]
            #[inline(always)]
            pub fn crcl(&mut self) -> CRCL_W {
                CRCL_W { w: self }
            }
            #[doc = "Bit 10 - Receive only"]
            #[inline(always)]
            pub fn rxonly(&mut self) -> RXONLY_W {
                RXONLY_W { w: self }
            }
            #[doc = "Bit 9 - Software slave management"]
            #[inline(always)]
            pub fn ssm(&mut self) -> SSM_W {
                SSM_W { w: self }
            }
            #[doc = "Bit 8 - Internal slave select"]
            #[inline(always)]
            pub fn ssi(&mut self) -> SSI_W {
                SSI_W { w: self }
            }
            #[doc = "Bit 7 - Frame format"]
            #[inline(always)]
            pub fn lsbfirst(&mut self) -> LSBFIRST_W {
                LSBFIRST_W { w: self }
            }
            #[doc = "Bit 6 - SPI enable"]
            #[inline(always)]
            pub fn spe(&mut self) -> SPE_W {
                SPE_W { w: self }
            }
            #[doc = "Bits 3:5 - Baud rate control"]
            #[inline(always)]
            pub fn br(&mut self) -> BR_W {
                BR_W { w: self }
            }
            #[doc = "Bit 2 - Master selection"]
            #[inline(always)]
            pub fn mstr(&mut self) -> MSTR_W {
                MSTR_W { w: self }
            }
            #[doc = "Bit 1 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&mut self) -> CPOL_W {
                CPOL_W { w: self }
            }
            #[doc = "Bit 0 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&mut self) -> CPHA_W {
                CPHA_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Rx buffer DMA enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXDMAEN_A {
            #[doc = "0: Rx buffer DMA disabled"]
            DISABLED = 0,
            #[doc = "1: Rx buffer DMA enabled"]
            ENABLED = 1,
        }
        impl From<RXDMAEN_A> for bool {
            #[inline(always)]
            fn from(variant: RXDMAEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXDMAEN`"]
        pub type RXDMAEN_R = crate::R<bool, RXDMAEN_A>;
        impl RXDMAEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXDMAEN_A {
                match self.bits {
                    false => RXDMAEN_A::DISABLED,
                    true => RXDMAEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == RXDMAEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == RXDMAEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `RXDMAEN`"]
        pub struct RXDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXDMAEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RXDMAEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rx buffer DMA disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(RXDMAEN_A::DISABLED)
            }
            #[doc = "Rx buffer DMA enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(RXDMAEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Tx buffer DMA enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXDMAEN_A {
            #[doc = "0: Tx buffer DMA disabled"]
            DISABLED = 0,
            #[doc = "1: Tx buffer DMA enabled"]
            ENABLED = 1,
        }
        impl From<TXDMAEN_A> for bool {
            #[inline(always)]
            fn from(variant: TXDMAEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TXDMAEN`"]
        pub type TXDMAEN_R = crate::R<bool, TXDMAEN_A>;
        impl TXDMAEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TXDMAEN_A {
                match self.bits {
                    false => TXDMAEN_A::DISABLED,
                    true => TXDMAEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TXDMAEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TXDMAEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TXDMAEN`"]
        pub struct TXDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDMAEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TXDMAEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Tx buffer DMA disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TXDMAEN_A::DISABLED)
            }
            #[doc = "Tx buffer DMA enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TXDMAEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "SS output enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SSOE_A {
            #[doc = "0: SS output is disabled in master mode"]
            DISABLED = 0,
            #[doc = "1: SS output is enabled in master mode"]
            ENABLED = 1,
        }
        impl From<SSOE_A> for bool {
            #[inline(always)]
            fn from(variant: SSOE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SSOE`"]
        pub type SSOE_R = crate::R<bool, SSOE_A>;
        impl SSOE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SSOE_A {
                match self.bits {
                    false => SSOE_A::DISABLED,
                    true => SSOE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SSOE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == SSOE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `SSOE`"]
        pub struct SSOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSOE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SSOE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SS output is disabled in master mode"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SSOE_A::DISABLED)
            }
            #[doc = "SS output is enabled in master mode"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SSOE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "NSS pulse management\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NSSP_A {
            #[doc = "0: No NSS pulse"]
            NOPULSE = 0,
            #[doc = "1: NSS pulse generated"]
            PULSEGENERATED = 1,
        }
        impl From<NSSP_A> for bool {
            #[inline(always)]
            fn from(variant: NSSP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `NSSP`"]
        pub type NSSP_R = crate::R<bool, NSSP_A>;
        impl NSSP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> NSSP_A {
                match self.bits {
                    false => NSSP_A::NOPULSE,
                    true => NSSP_A::PULSEGENERATED,
                }
            }
            #[doc = "Checks if the value of the field is `NOPULSE`"]
            #[inline(always)]
            pub fn is_no_pulse(&self) -> bool {
                *self == NSSP_A::NOPULSE
            }
            #[doc = "Checks if the value of the field is `PULSEGENERATED`"]
            #[inline(always)]
            pub fn is_pulse_generated(&self) -> bool {
                *self == NSSP_A::PULSEGENERATED
            }
        }
        #[doc = "Write proxy for field `NSSP`"]
        pub struct NSSP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NSSP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: NSSP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No NSS pulse"]
            #[inline(always)]
            pub fn no_pulse(self) -> &'a mut W {
                self.variant(NSSP_A::NOPULSE)
            }
            #[doc = "NSS pulse generated"]
            #[inline(always)]
            pub fn pulse_generated(self) -> &'a mut W {
                self.variant(NSSP_A::PULSEGENERATED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Frame format\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FRF_A {
            #[doc = "0: SPI Motorola mode"]
            MOTOROLA = 0,
            #[doc = "1: SPI TI mode"]
            TI = 1,
        }
        impl From<FRF_A> for bool {
            #[inline(always)]
            fn from(variant: FRF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FRF`"]
        pub type FRF_R = crate::R<bool, FRF_A>;
        impl FRF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FRF_A {
                match self.bits {
                    false => FRF_A::MOTOROLA,
                    true => FRF_A::TI,
                }
            }
            #[doc = "Checks if the value of the field is `MOTOROLA`"]
            #[inline(always)]
            pub fn is_motorola(&self) -> bool {
                *self == FRF_A::MOTOROLA
            }
            #[doc = "Checks if the value of the field is `TI`"]
            #[inline(always)]
            pub fn is_ti(&self) -> bool {
                *self == FRF_A::TI
            }
        }
        #[doc = "Write proxy for field `FRF`"]
        pub struct FRF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FRF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SPI Motorola mode"]
            #[inline(always)]
            pub fn motorola(self) -> &'a mut W {
                self.variant(FRF_A::MOTOROLA)
            }
            #[doc = "SPI TI mode"]
            #[inline(always)]
            pub fn ti(self) -> &'a mut W {
                self.variant(FRF_A::TI)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Error interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ERRIE_A {
            #[doc = "0: Error interrupt masked"]
            MASKED = 0,
            #[doc = "1: Error interrupt not masked"]
            NOTMASKED = 1,
        }
        impl From<ERRIE_A> for bool {
            #[inline(always)]
            fn from(variant: ERRIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ERRIE`"]
        pub type ERRIE_R = crate::R<bool, ERRIE_A>;
        impl ERRIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ERRIE_A {
                match self.bits {
                    false => ERRIE_A::MASKED,
                    true => ERRIE_A::NOTMASKED,
                }
            }
            #[doc = "Checks if the value of the field is `MASKED`"]
            #[inline(always)]
            pub fn is_masked(&self) -> bool {
                *self == ERRIE_A::MASKED
            }
            #[doc = "Checks if the value of the field is `NOTMASKED`"]
            #[inline(always)]
            pub fn is_not_masked(&self) -> bool {
                *self == ERRIE_A::NOTMASKED
            }
        }
        #[doc = "Write proxy for field `ERRIE`"]
        pub struct ERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERRIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ERRIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Error interrupt masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(ERRIE_A::MASKED)
            }
            #[doc = "Error interrupt not masked"]
            #[inline(always)]
            pub fn not_masked(self) -> &'a mut W {
                self.variant(ERRIE_A::NOTMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "RX buffer not empty interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXNEIE_A {
            #[doc = "0: RXE interrupt masked"]
            MASKED = 0,
            #[doc = "1: RXE interrupt not masked"]
            NOTMASKED = 1,
        }
        impl From<RXNEIE_A> for bool {
            #[inline(always)]
            fn from(variant: RXNEIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXNEIE`"]
        pub type RXNEIE_R = crate::R<bool, RXNEIE_A>;
        impl RXNEIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXNEIE_A {
                match self.bits {
                    false => RXNEIE_A::MASKED,
                    true => RXNEIE_A::NOTMASKED,
                }
            }
            #[doc = "Checks if the value of the field is `MASKED`"]
            #[inline(always)]
            pub fn is_masked(&self) -> bool {
                *self == RXNEIE_A::MASKED
            }
            #[doc = "Checks if the value of the field is `NOTMASKED`"]
            #[inline(always)]
            pub fn is_not_masked(&self) -> bool {
                *self == RXNEIE_A::NOTMASKED
            }
        }
        #[doc = "Write proxy for field `RXNEIE`"]
        pub struct RXNEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXNEIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RXNEIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "RXE interrupt masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(RXNEIE_A::MASKED)
            }
            #[doc = "RXE interrupt not masked"]
            #[inline(always)]
            pub fn not_masked(self) -> &'a mut W {
                self.variant(RXNEIE_A::NOTMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Tx buffer empty interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXEIE_A {
            #[doc = "0: TXE interrupt masked"]
            MASKED = 0,
            #[doc = "1: TXE interrupt not masked"]
            NOTMASKED = 1,
        }
        impl From<TXEIE_A> for bool {
            #[inline(always)]
            fn from(variant: TXEIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TXEIE`"]
        pub type TXEIE_R = crate::R<bool, TXEIE_A>;
        impl TXEIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TXEIE_A {
                match self.bits {
                    false => TXEIE_A::MASKED,
                    true => TXEIE_A::NOTMASKED,
                }
            }
            #[doc = "Checks if the value of the field is `MASKED`"]
            #[inline(always)]
            pub fn is_masked(&self) -> bool {
                *self == TXEIE_A::MASKED
            }
            #[doc = "Checks if the value of the field is `NOTMASKED`"]
            #[inline(always)]
            pub fn is_not_masked(&self) -> bool {
                *self == TXEIE_A::NOTMASKED
            }
        }
        #[doc = "Write proxy for field `TXEIE`"]
        pub struct TXEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXEIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TXEIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TXE interrupt masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(TXEIE_A::MASKED)
            }
            #[doc = "TXE interrupt not masked"]
            #[inline(always)]
            pub fn not_masked(self) -> &'a mut W {
                self.variant(TXEIE_A::NOTMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Data size\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum DS_A {
            #[doc = "3: 4-bit"]
            FOURBIT = 3,
            #[doc = "4: 5-bit"]
            FIVEBIT = 4,
            #[doc = "5: 6-bit"]
            SIXBIT = 5,
            #[doc = "6: 7-bit"]
            SEVENBIT = 6,
            #[doc = "7: 8-bit"]
            EIGHTBIT = 7,
            #[doc = "8: 9-bit"]
            NINEBIT = 8,
            #[doc = "9: 10-bit"]
            TENBIT = 9,
            #[doc = "10: 11-bit"]
            ELEVENBIT = 10,
            #[doc = "11: 12-bit"]
            TWELVEBIT = 11,
            #[doc = "12: 13-bit"]
            THIRTEENBIT = 12,
            #[doc = "13: 14-bit"]
            FOURTEENBIT = 13,
            #[doc = "14: 15-bit"]
            FIFTEENBIT = 14,
            #[doc = "15: 16-bit"]
            SIXTEENBIT = 15,
        }
        impl From<DS_A> for u8 {
            #[inline(always)]
            fn from(variant: DS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `DS`"]
        pub type DS_R = crate::R<u8, DS_A>;
        impl DS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, DS_A> {
                use crate::Variant::*;
                match self.bits {
                    3 => Val(DS_A::FOURBIT),
                    4 => Val(DS_A::FIVEBIT),
                    5 => Val(DS_A::SIXBIT),
                    6 => Val(DS_A::SEVENBIT),
                    7 => Val(DS_A::EIGHTBIT),
                    8 => Val(DS_A::NINEBIT),
                    9 => Val(DS_A::TENBIT),
                    10 => Val(DS_A::ELEVENBIT),
                    11 => Val(DS_A::TWELVEBIT),
                    12 => Val(DS_A::THIRTEENBIT),
                    13 => Val(DS_A::FOURTEENBIT),
                    14 => Val(DS_A::FIFTEENBIT),
                    15 => Val(DS_A::SIXTEENBIT),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `FOURBIT`"]
            #[inline(always)]
            pub fn is_four_bit(&self) -> bool {
                *self == DS_A::FOURBIT
            }
            #[doc = "Checks if the value of the field is `FIVEBIT`"]
            #[inline(always)]
            pub fn is_five_bit(&self) -> bool {
                *self == DS_A::FIVEBIT
            }
            #[doc = "Checks if the value of the field is `SIXBIT`"]
            #[inline(always)]
            pub fn is_six_bit(&self) -> bool {
                *self == DS_A::SIXBIT
            }
            #[doc = "Checks if the value of the field is `SEVENBIT`"]
            #[inline(always)]
            pub fn is_seven_bit(&self) -> bool {
                *self == DS_A::SEVENBIT
            }
            #[doc = "Checks if the value of the field is `EIGHTBIT`"]
            #[inline(always)]
            pub fn is_eight_bit(&self) -> bool {
                *self == DS_A::EIGHTBIT
            }
            #[doc = "Checks if the value of the field is `NINEBIT`"]
            #[inline(always)]
            pub fn is_nine_bit(&self) -> bool {
                *self == DS_A::NINEBIT
            }
            #[doc = "Checks if the value of the field is `TENBIT`"]
            #[inline(always)]
            pub fn is_ten_bit(&self) -> bool {
                *self == DS_A::TENBIT
            }
            #[doc = "Checks if the value of the field is `ELEVENBIT`"]
            #[inline(always)]
            pub fn is_eleven_bit(&self) -> bool {
                *self == DS_A::ELEVENBIT
            }
            #[doc = "Checks if the value of the field is `TWELVEBIT`"]
            #[inline(always)]
            pub fn is_twelve_bit(&self) -> bool {
                *self == DS_A::TWELVEBIT
            }
            #[doc = "Checks if the value of the field is `THIRTEENBIT`"]
            #[inline(always)]
            pub fn is_thirteen_bit(&self) -> bool {
                *self == DS_A::THIRTEENBIT
            }
            #[doc = "Checks if the value of the field is `FOURTEENBIT`"]
            #[inline(always)]
            pub fn is_fourteen_bit(&self) -> bool {
                *self == DS_A::FOURTEENBIT
            }
            #[doc = "Checks if the value of the field is `FIFTEENBIT`"]
            #[inline(always)]
            pub fn is_fifteen_bit(&self) -> bool {
                *self == DS_A::FIFTEENBIT
            }
            #[doc = "Checks if the value of the field is `SIXTEENBIT`"]
            #[inline(always)]
            pub fn is_sixteen_bit(&self) -> bool {
                *self == DS_A::SIXTEENBIT
            }
        }
        #[doc = "Write proxy for field `DS`"]
        pub struct DS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DS_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "4-bit"]
            #[inline(always)]
            pub fn four_bit(self) -> &'a mut W {
                self.variant(DS_A::FOURBIT)
            }
            #[doc = "5-bit"]
            #[inline(always)]
            pub fn five_bit(self) -> &'a mut W {
                self.variant(DS_A::FIVEBIT)
            }
            #[doc = "6-bit"]
            #[inline(always)]
            pub fn six_bit(self) -> &'a mut W {
                self.variant(DS_A::SIXBIT)
            }
            #[doc = "7-bit"]
            #[inline(always)]
            pub fn seven_bit(self) -> &'a mut W {
                self.variant(DS_A::SEVENBIT)
            }
            #[doc = "8-bit"]
            #[inline(always)]
            pub fn eight_bit(self) -> &'a mut W {
                self.variant(DS_A::EIGHTBIT)
            }
            #[doc = "9-bit"]
            #[inline(always)]
            pub fn nine_bit(self) -> &'a mut W {
                self.variant(DS_A::NINEBIT)
            }
            #[doc = "10-bit"]
            #[inline(always)]
            pub fn ten_bit(self) -> &'a mut W {
                self.variant(DS_A::TENBIT)
            }
            #[doc = "11-bit"]
            #[inline(always)]
            pub fn eleven_bit(self) -> &'a mut W {
                self.variant(DS_A::ELEVENBIT)
            }
            #[doc = "12-bit"]
            #[inline(always)]
            pub fn twelve_bit(self) -> &'a mut W {
                self.variant(DS_A::TWELVEBIT)
            }
            #[doc = "13-bit"]
            #[inline(always)]
            pub fn thirteen_bit(self) -> &'a mut W {
                self.variant(DS_A::THIRTEENBIT)
            }
            #[doc = "14-bit"]
            #[inline(always)]
            pub fn fourteen_bit(self) -> &'a mut W {
                self.variant(DS_A::FOURTEENBIT)
            }
            #[doc = "15-bit"]
            #[inline(always)]
            pub fn fifteen_bit(self) -> &'a mut W {
                self.variant(DS_A::FIFTEENBIT)
            }
            #[doc = "16-bit"]
            #[inline(always)]
            pub fn sixteen_bit(self) -> &'a mut W {
                self.variant(DS_A::SIXTEENBIT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "FIFO reception threshold\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FRXTH_A {
            #[doc = "0: RXNE event is generated if the FIFO level is greater than or equal to 1/2 (16-bit)"]
            HALF = 0,
            #[doc = "1: RXNE event is generated if the FIFO level is greater than or equal to 1/4 (8-bit)"]
            QUARTER = 1,
        }
        impl From<FRXTH_A> for bool {
            #[inline(always)]
            fn from(variant: FRXTH_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FRXTH`"]
        pub type FRXTH_R = crate::R<bool, FRXTH_A>;
        impl FRXTH_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FRXTH_A {
                match self.bits {
                    false => FRXTH_A::HALF,
                    true => FRXTH_A::QUARTER,
                }
            }
            #[doc = "Checks if the value of the field is `HALF`"]
            #[inline(always)]
            pub fn is_half(&self) -> bool {
                *self == FRXTH_A::HALF
            }
            #[doc = "Checks if the value of the field is `QUARTER`"]
            #[inline(always)]
            pub fn is_quarter(&self) -> bool {
                *self == FRXTH_A::QUARTER
            }
        }
        #[doc = "Write proxy for field `FRXTH`"]
        pub struct FRXTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRXTH_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FRXTH_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "RXNE event is generated if the FIFO level is greater than or equal to 1/2 (16-bit)"]
            #[inline(always)]
            pub fn half(self) -> &'a mut W {
                self.variant(FRXTH_A::HALF)
            }
            #[doc = "RXNE event is generated if the FIFO level is greater than or equal to 1/4 (8-bit)"]
            #[inline(always)]
            pub fn quarter(self) -> &'a mut W {
                self.variant(FRXTH_A::QUARTER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Last DMA transfer for reception\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LDMA_RX_A {
            #[doc = "0: Number of data to transfer for receive is even"]
            EVEN = 0,
            #[doc = "1: Number of data to transfer for receive is odd"]
            ODD = 1,
        }
        impl From<LDMA_RX_A> for bool {
            #[inline(always)]
            fn from(variant: LDMA_RX_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LDMA_RX`"]
        pub type LDMA_RX_R = crate::R<bool, LDMA_RX_A>;
        impl LDMA_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LDMA_RX_A {
                match self.bits {
                    false => LDMA_RX_A::EVEN,
                    true => LDMA_RX_A::ODD,
                }
            }
            #[doc = "Checks if the value of the field is `EVEN`"]
            #[inline(always)]
            pub fn is_even(&self) -> bool {
                *self == LDMA_RX_A::EVEN
            }
            #[doc = "Checks if the value of the field is `ODD`"]
            #[inline(always)]
            pub fn is_odd(&self) -> bool {
                *self == LDMA_RX_A::ODD
            }
        }
        #[doc = "Write proxy for field `LDMA_RX`"]
        pub struct LDMA_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LDMA_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LDMA_RX_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Number of data to transfer for receive is even"]
            #[inline(always)]
            pub fn even(self) -> &'a mut W {
                self.variant(LDMA_RX_A::EVEN)
            }
            #[doc = "Number of data to transfer for receive is odd"]
            #[inline(always)]
            pub fn odd(self) -> &'a mut W {
                self.variant(LDMA_RX_A::ODD)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Last DMA transfer for transmission\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LDMA_TX_A {
            #[doc = "0: Number of data to transfer for transmit is even"]
            EVEN = 0,
            #[doc = "1: Number of data to transfer for transmit is odd"]
            ODD = 1,
        }
        impl From<LDMA_TX_A> for bool {
            #[inline(always)]
            fn from(variant: LDMA_TX_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LDMA_TX`"]
        pub type LDMA_TX_R = crate::R<bool, LDMA_TX_A>;
        impl LDMA_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LDMA_TX_A {
                match self.bits {
                    false => LDMA_TX_A::EVEN,
                    true => LDMA_TX_A::ODD,
                }
            }
            #[doc = "Checks if the value of the field is `EVEN`"]
            #[inline(always)]
            pub fn is_even(&self) -> bool {
                *self == LDMA_TX_A::EVEN
            }
            #[doc = "Checks if the value of the field is `ODD`"]
            #[inline(always)]
            pub fn is_odd(&self) -> bool {
                *self == LDMA_TX_A::ODD
            }
        }
        #[doc = "Write proxy for field `LDMA_TX`"]
        pub struct LDMA_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LDMA_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LDMA_TX_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Number of data to transfer for transmit is even"]
            #[inline(always)]
            pub fn even(self) -> &'a mut W {
                self.variant(LDMA_TX_A::EVEN)
            }
            #[doc = "Number of data to transfer for transmit is odd"]
            #[inline(always)]
            pub fn odd(self) -> &'a mut W {
                self.variant(LDMA_TX_A::ODD)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Rx buffer DMA enable"]
            #[inline(always)]
            pub fn rxdmaen(&self) -> RXDMAEN_R {
                RXDMAEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Tx buffer DMA enable"]
            #[inline(always)]
            pub fn txdmaen(&self) -> TXDMAEN_R {
                TXDMAEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - SS output enable"]
            #[inline(always)]
            pub fn ssoe(&self) -> SSOE_R {
                SSOE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - NSS pulse management"]
            #[inline(always)]
            pub fn nssp(&self) -> NSSP_R {
                NSSP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Frame format"]
            #[inline(always)]
            pub fn frf(&self) -> FRF_R {
                FRF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&self) -> ERRIE_R {
                ERRIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RX buffer not empty interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&self) -> RXNEIE_R {
                RXNEIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Tx buffer empty interrupt enable"]
            #[inline(always)]
            pub fn txeie(&self) -> TXEIE_R {
                TXEIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:11 - Data size"]
            #[inline(always)]
            pub fn ds(&self) -> DS_R {
                DS_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 12 - FIFO reception threshold"]
            #[inline(always)]
            pub fn frxth(&self) -> FRXTH_R {
                FRXTH_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Last DMA transfer for reception"]
            #[inline(always)]
            pub fn ldma_rx(&self) -> LDMA_RX_R {
                LDMA_RX_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Last DMA transfer for transmission"]
            #[inline(always)]
            pub fn ldma_tx(&self) -> LDMA_TX_R {
                LDMA_TX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Rx buffer DMA enable"]
            #[inline(always)]
            pub fn rxdmaen(&mut self) -> RXDMAEN_W {
                RXDMAEN_W { w: self }
            }
            #[doc = "Bit 1 - Tx buffer DMA enable"]
            #[inline(always)]
            pub fn txdmaen(&mut self) -> TXDMAEN_W {
                TXDMAEN_W { w: self }
            }
            #[doc = "Bit 2 - SS output enable"]
            #[inline(always)]
            pub fn ssoe(&mut self) -> SSOE_W {
                SSOE_W { w: self }
            }
            #[doc = "Bit 3 - NSS pulse management"]
            #[inline(always)]
            pub fn nssp(&mut self) -> NSSP_W {
                NSSP_W { w: self }
            }
            #[doc = "Bit 4 - Frame format"]
            #[inline(always)]
            pub fn frf(&mut self) -> FRF_W {
                FRF_W { w: self }
            }
            #[doc = "Bit 5 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&mut self) -> ERRIE_W {
                ERRIE_W { w: self }
            }
            #[doc = "Bit 6 - RX buffer not empty interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&mut self) -> RXNEIE_W {
                RXNEIE_W { w: self }
            }
            #[doc = "Bit 7 - Tx buffer empty interrupt enable"]
            #[inline(always)]
            pub fn txeie(&mut self) -> TXEIE_W {
                TXEIE_W { w: self }
            }
            #[doc = "Bits 8:11 - Data size"]
            #[inline(always)]
            pub fn ds(&mut self) -> DS_W {
                DS_W { w: self }
            }
            #[doc = "Bit 12 - FIFO reception threshold"]
            #[inline(always)]
            pub fn frxth(&mut self) -> FRXTH_W {
                FRXTH_W { w: self }
            }
            #[doc = "Bit 13 - Last DMA transfer for reception"]
            #[inline(always)]
            pub fn ldma_rx(&mut self) -> LDMA_RX_W {
                LDMA_RX_W { w: self }
            }
            #[doc = "Bit 14 - Last DMA transfer for transmission"]
            #[inline(always)]
            pub fn ldma_tx(&mut self) -> LDMA_TX_W {
                LDMA_TX_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0x02"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x02
            }
        }
        #[doc = "Receive buffer not empty\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXNE_A {
            #[doc = "0: Rx buffer empty"]
            EMPTY = 0,
            #[doc = "1: Rx buffer not empty"]
            NOTEMPTY = 1,
        }
        impl From<RXNE_A> for bool {
            #[inline(always)]
            fn from(variant: RXNE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXNE`"]
        pub type RXNE_R = crate::R<bool, RXNE_A>;
        impl RXNE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXNE_A {
                match self.bits {
                    false => RXNE_A::EMPTY,
                    true => RXNE_A::NOTEMPTY,
                }
            }
            #[doc = "Checks if the value of the field is `EMPTY`"]
            #[inline(always)]
            pub fn is_empty(&self) -> bool {
                *self == RXNE_A::EMPTY
            }
            #[doc = "Checks if the value of the field is `NOTEMPTY`"]
            #[inline(always)]
            pub fn is_not_empty(&self) -> bool {
                *self == RXNE_A::NOTEMPTY
            }
        }
        #[doc = "Transmit buffer empty\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXE_A {
            #[doc = "0: Tx buffer not empty"]
            NOTEMPTY = 0,
            #[doc = "1: Tx buffer empty"]
            EMPTY = 1,
        }
        impl From<TXE_A> for bool {
            #[inline(always)]
            fn from(variant: TXE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TXE`"]
        pub type TXE_R = crate::R<bool, TXE_A>;
        impl TXE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TXE_A {
                match self.bits {
                    false => TXE_A::NOTEMPTY,
                    true => TXE_A::EMPTY,
                }
            }
            #[doc = "Checks if the value of the field is `NOTEMPTY`"]
            #[inline(always)]
            pub fn is_not_empty(&self) -> bool {
                *self == TXE_A::NOTEMPTY
            }
            #[doc = "Checks if the value of the field is `EMPTY`"]
            #[inline(always)]
            pub fn is_empty(&self) -> bool {
                *self == TXE_A::EMPTY
            }
        }
        #[doc = "CRC error flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CRCERR_A {
            #[doc = "0: CRC value received matches the SPIx_RXCRCR value"]
            MATCH = 0,
            #[doc = "1: CRC value received does not match the SPIx_RXCRCR value"]
            NOMATCH = 1,
        }
        impl From<CRCERR_A> for bool {
            #[inline(always)]
            fn from(variant: CRCERR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CRCERR`"]
        pub type CRCERR_R = crate::R<bool, CRCERR_A>;
        impl CRCERR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CRCERR_A {
                match self.bits {
                    false => CRCERR_A::MATCH,
                    true => CRCERR_A::NOMATCH,
                }
            }
            #[doc = "Checks if the value of the field is `MATCH`"]
            #[inline(always)]
            pub fn is_match_(&self) -> bool {
                *self == CRCERR_A::MATCH
            }
            #[doc = "Checks if the value of the field is `NOMATCH`"]
            #[inline(always)]
            pub fn is_no_match(&self) -> bool {
                *self == CRCERR_A::NOMATCH
            }
        }
        #[doc = "Write proxy for field `CRCERR`"]
        pub struct CRCERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCERR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CRCERR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CRC value received matches the SPIx_RXCRCR value"]
            #[inline(always)]
            pub fn match_(self) -> &'a mut W {
                self.variant(CRCERR_A::MATCH)
            }
            #[doc = "CRC value received does not match the SPIx_RXCRCR value"]
            #[inline(always)]
            pub fn no_match(self) -> &'a mut W {
                self.variant(CRCERR_A::NOMATCH)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Mode fault\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MODF_A {
            #[doc = "0: No mode fault occurred"]
            NOFAULT = 0,
            #[doc = "1: Mode fault occurred"]
            FAULT = 1,
        }
        impl From<MODF_A> for bool {
            #[inline(always)]
            fn from(variant: MODF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MODF`"]
        pub type MODF_R = crate::R<bool, MODF_A>;
        impl MODF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MODF_A {
                match self.bits {
                    false => MODF_A::NOFAULT,
                    true => MODF_A::FAULT,
                }
            }
            #[doc = "Checks if the value of the field is `NOFAULT`"]
            #[inline(always)]
            pub fn is_no_fault(&self) -> bool {
                *self == MODF_A::NOFAULT
            }
            #[doc = "Checks if the value of the field is `FAULT`"]
            #[inline(always)]
            pub fn is_fault(&self) -> bool {
                *self == MODF_A::FAULT
            }
        }
        #[doc = "Overrun flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OVR_A {
            #[doc = "0: No overrun occurred"]
            NOOVERRUN = 0,
            #[doc = "1: Overrun occurred"]
            OVERRUN = 1,
        }
        impl From<OVR_A> for bool {
            #[inline(always)]
            fn from(variant: OVR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OVR`"]
        pub type OVR_R = crate::R<bool, OVR_A>;
        impl OVR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OVR_A {
                match self.bits {
                    false => OVR_A::NOOVERRUN,
                    true => OVR_A::OVERRUN,
                }
            }
            #[doc = "Checks if the value of the field is `NOOVERRUN`"]
            #[inline(always)]
            pub fn is_no_overrun(&self) -> bool {
                *self == OVR_A::NOOVERRUN
            }
            #[doc = "Checks if the value of the field is `OVERRUN`"]
            #[inline(always)]
            pub fn is_overrun(&self) -> bool {
                *self == OVR_A::OVERRUN
            }
        }
        #[doc = "Busy flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BSY_A {
            #[doc = "0: SPI not busy"]
            NOTBUSY = 0,
            #[doc = "1: SPI busy"]
            BUSY = 1,
        }
        impl From<BSY_A> for bool {
            #[inline(always)]
            fn from(variant: BSY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BSY`"]
        pub type BSY_R = crate::R<bool, BSY_A>;
        impl BSY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BSY_A {
                match self.bits {
                    false => BSY_A::NOTBUSY,
                    true => BSY_A::BUSY,
                }
            }
            #[doc = "Checks if the value of the field is `NOTBUSY`"]
            #[inline(always)]
            pub fn is_not_busy(&self) -> bool {
                *self == BSY_A::NOTBUSY
            }
            #[doc = "Checks if the value of the field is `BUSY`"]
            #[inline(always)]
            pub fn is_busy(&self) -> bool {
                *self == BSY_A::BUSY
            }
        }
        #[doc = "Frame format error\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FRE_A {
            #[doc = "0: No frame format error"]
            NOERROR = 0,
            #[doc = "1: A frame format error occurred"]
            ERROR = 1,
        }
        impl From<FRE_A> for bool {
            #[inline(always)]
            fn from(variant: FRE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FRE`"]
        pub type FRE_R = crate::R<bool, FRE_A>;
        impl FRE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FRE_A {
                match self.bits {
                    false => FRE_A::NOERROR,
                    true => FRE_A::ERROR,
                }
            }
            #[doc = "Checks if the value of the field is `NOERROR`"]
            #[inline(always)]
            pub fn is_no_error(&self) -> bool {
                *self == FRE_A::NOERROR
            }
            #[doc = "Checks if the value of the field is `ERROR`"]
            #[inline(always)]
            pub fn is_error(&self) -> bool {
                *self == FRE_A::ERROR
            }
        }
        #[doc = "FIFO reception level\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FRLVL_A {
            #[doc = "0: Rx FIFO Empty"]
            EMPTY = 0,
            #[doc = "1: Rx 1/4 FIFO"]
            QUARTER = 1,
            #[doc = "2: Rx 1/2 FIFO"]
            HALF = 2,
            #[doc = "3: Rx FIFO full"]
            FULL = 3,
        }
        impl From<FRLVL_A> for u8 {
            #[inline(always)]
            fn from(variant: FRLVL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FRLVL`"]
        pub type FRLVL_R = crate::R<u8, FRLVL_A>;
        impl FRLVL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FRLVL_A {
                match self.bits {
                    0 => FRLVL_A::EMPTY,
                    1 => FRLVL_A::QUARTER,
                    2 => FRLVL_A::HALF,
                    3 => FRLVL_A::FULL,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `EMPTY`"]
            #[inline(always)]
            pub fn is_empty(&self) -> bool {
                *self == FRLVL_A::EMPTY
            }
            #[doc = "Checks if the value of the field is `QUARTER`"]
            #[inline(always)]
            pub fn is_quarter(&self) -> bool {
                *self == FRLVL_A::QUARTER
            }
            #[doc = "Checks if the value of the field is `HALF`"]
            #[inline(always)]
            pub fn is_half(&self) -> bool {
                *self == FRLVL_A::HALF
            }
            #[doc = "Checks if the value of the field is `FULL`"]
            #[inline(always)]
            pub fn is_full(&self) -> bool {
                *self == FRLVL_A::FULL
            }
        }
        #[doc = "FIFO transmission level\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FTLVL_A {
            #[doc = "0: Tx FIFO Empty"]
            EMPTY = 0,
            #[doc = "1: Tx 1/4 FIFO"]
            QUARTER = 1,
            #[doc = "2: Tx 1/2 FIFO"]
            HALF = 2,
            #[doc = "3: Tx FIFO full"]
            FULL = 3,
        }
        impl From<FTLVL_A> for u8 {
            #[inline(always)]
            fn from(variant: FTLVL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FTLVL`"]
        pub type FTLVL_R = crate::R<u8, FTLVL_A>;
        impl FTLVL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FTLVL_A {
                match self.bits {
                    0 => FTLVL_A::EMPTY,
                    1 => FTLVL_A::QUARTER,
                    2 => FTLVL_A::HALF,
                    3 => FTLVL_A::FULL,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `EMPTY`"]
            #[inline(always)]
            pub fn is_empty(&self) -> bool {
                *self == FTLVL_A::EMPTY
            }
            #[doc = "Checks if the value of the field is `QUARTER`"]
            #[inline(always)]
            pub fn is_quarter(&self) -> bool {
                *self == FTLVL_A::QUARTER
            }
            #[doc = "Checks if the value of the field is `HALF`"]
            #[inline(always)]
            pub fn is_half(&self) -> bool {
                *self == FTLVL_A::HALF
            }
            #[doc = "Checks if the value of the field is `FULL`"]
            #[inline(always)]
            pub fn is_full(&self) -> bool {
                *self == FTLVL_A::FULL
            }
        }
        impl R {
            #[doc = "Bit 0 - Receive buffer not empty"]
            #[inline(always)]
            pub fn rxne(&self) -> RXNE_R {
                RXNE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Transmit buffer empty"]
            #[inline(always)]
            pub fn txe(&self) -> TXE_R {
                TXE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 4 - CRC error flag"]
            #[inline(always)]
            pub fn crcerr(&self) -> CRCERR_R {
                CRCERR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Mode fault"]
            #[inline(always)]
            pub fn modf(&self) -> MODF_R {
                MODF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Overrun flag"]
            #[inline(always)]
            pub fn ovr(&self) -> OVR_R {
                OVR_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Busy flag"]
            #[inline(always)]
            pub fn bsy(&self) -> BSY_R {
                BSY_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Frame format error"]
            #[inline(always)]
            pub fn fre(&self) -> FRE_R {
                FRE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - FIFO reception level"]
            #[inline(always)]
            pub fn frlvl(&self) -> FRLVL_R {
                FRLVL_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bits 11:12 - FIFO transmission level"]
            #[inline(always)]
            pub fn ftlvl(&self) -> FTLVL_R {
                FTLVL_R::new(((self.bits >> 11) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 4 - CRC error flag"]
            #[inline(always)]
            pub fn crcerr(&mut self) -> CRCERR_W {
                CRCERR_W { w: self }
            }
        }
    }
    #[doc = "data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "`write(|w| ..)` method takes [dr::W](dr::W) writer structure"]
    impl crate::Writable for DR {}
    #[doc = "data register"]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Writer for register DR"]
        pub type W = crate::W<u32, super::DR>;
        #[doc = "Register DR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DR`"]
        pub type DR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DR`"]
        pub struct DR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Data register"]
            #[inline(always)]
            pub fn dr(&self) -> DR_R {
                DR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Data register"]
            #[inline(always)]
            pub fn dr(&mut self) -> DR_W {
                DR_W { w: self }
            }
        }
    }
    #[doc = "CRC polynomial register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [crcpr](crcpr) module"]
    pub type CRCPR = crate::Reg<u32, _CRCPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CRCPR;
    #[doc = "`read()` method returns [crcpr::R](crcpr::R) reader structure"]
    impl crate::Readable for CRCPR {}
    #[doc = "`write(|w| ..)` method takes [crcpr::W](crcpr::W) writer structure"]
    impl crate::Writable for CRCPR {}
    #[doc = "CRC polynomial register"]
    pub mod crcpr {
        #[doc = "Reader of register CRCPR"]
        pub type R = crate::R<u32, super::CRCPR>;
        #[doc = "Writer for register CRCPR"]
        pub type W = crate::W<u32, super::CRCPR>;
        #[doc = "Register CRCPR `reset()`'s with value 0x07"]
        impl crate::ResetValue for super::CRCPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x07
            }
        }
        #[doc = "Reader of field `CRCPOLY`"]
        pub type CRCPOLY_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CRCPOLY`"]
        pub struct CRCPOLY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCPOLY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - CRC polynomial register"]
            #[inline(always)]
            pub fn crcpoly(&self) -> CRCPOLY_R {
                CRCPOLY_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - CRC polynomial register"]
            #[inline(always)]
            pub fn crcpoly(&mut self) -> CRCPOLY_W {
                CRCPOLY_W { w: self }
            }
        }
    }
    #[doc = "RX CRC register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxcrcr](rxcrcr) module"]
    pub type RXCRCR = crate::Reg<u32, _RXCRCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RXCRCR;
    #[doc = "`read()` method returns [rxcrcr::R](rxcrcr::R) reader structure"]
    impl crate::Readable for RXCRCR {}
    #[doc = "RX CRC register"]
    pub mod rxcrcr {
        #[doc = "Reader of register RXCRCR"]
        pub type R = crate::R<u32, super::RXCRCR>;
        #[doc = "Reader of field `RxCRC`"]
        pub type RXCRC_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Rx CRC register"]
            #[inline(always)]
            pub fn rx_crc(&self) -> RXCRC_R {
                RXCRC_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "TX CRC register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [txcrcr](txcrcr) module"]
    pub type TXCRCR = crate::Reg<u32, _TXCRCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TXCRCR;
    #[doc = "`read()` method returns [txcrcr::R](txcrcr::R) reader structure"]
    impl crate::Readable for TXCRCR {}
    #[doc = "TX CRC register"]
    pub mod txcrcr {
        #[doc = "Reader of register TXCRCR"]
        pub type R = crate::R<u32, super::TXCRCR>;
        #[doc = "Reader of field `TxCRC`"]
        pub type TXCRC_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Tx CRC register"]
            #[inline(always)]
            pub fn tx_crc(&self) -> TXCRC_R {
                TXCRC_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "I2S configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2scfgr](i2scfgr) module"]
    pub type I2SCFGR = crate::Reg<u32, _I2SCFGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SCFGR;
    #[doc = "`read()` method returns [i2scfgr::R](i2scfgr::R) reader structure"]
    impl crate::Readable for I2SCFGR {}
    #[doc = "`write(|w| ..)` method takes [i2scfgr::W](i2scfgr::W) writer structure"]
    impl crate::Writable for I2SCFGR {}
    #[doc = "I2S configuration register"]
    pub mod i2scfgr {
        #[doc = "Reader of register I2SCFGR"]
        pub type R = crate::R<u32, super::I2SCFGR>;
        #[doc = "Writer for register I2SCFGR"]
        pub type W = crate::W<u32, super::I2SCFGR>;
        #[doc = "Register I2SCFGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2SCFGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "I2S mode selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum I2SMOD_A {
            #[doc = "0: SPI mode is selected"]
            SPIMODE = 0,
            #[doc = "1: I2S mode is selected"]
            I2SMODE = 1,
        }
        impl From<I2SMOD_A> for bool {
            #[inline(always)]
            fn from(variant: I2SMOD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `I2SMOD`"]
        pub type I2SMOD_R = crate::R<bool, I2SMOD_A>;
        impl I2SMOD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> I2SMOD_A {
                match self.bits {
                    false => I2SMOD_A::SPIMODE,
                    true => I2SMOD_A::I2SMODE,
                }
            }
            #[doc = "Checks if the value of the field is `SPIMODE`"]
            #[inline(always)]
            pub fn is_spimode(&self) -> bool {
                *self == I2SMOD_A::SPIMODE
            }
            #[doc = "Checks if the value of the field is `I2SMODE`"]
            #[inline(always)]
            pub fn is_i2smode(&self) -> bool {
                *self == I2SMOD_A::I2SMODE
            }
        }
        #[doc = "Write proxy for field `I2SMOD`"]
        pub struct I2SMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2SMOD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2SMOD_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SPI mode is selected"]
            #[inline(always)]
            pub fn spimode(self) -> &'a mut W {
                self.variant(I2SMOD_A::SPIMODE)
            }
            #[doc = "I2S mode is selected"]
            #[inline(always)]
            pub fn i2smode(self) -> &'a mut W {
                self.variant(I2SMOD_A::I2SMODE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "I2S Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum I2SE_A {
            #[doc = "0: I2S peripheral is disabled"]
            DISABLED = 0,
            #[doc = "1: I2S peripheral is enabled"]
            ENABLED = 1,
        }
        impl From<I2SE_A> for bool {
            #[inline(always)]
            fn from(variant: I2SE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `I2SE`"]
        pub type I2SE_R = crate::R<bool, I2SE_A>;
        impl I2SE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> I2SE_A {
                match self.bits {
                    false => I2SE_A::DISABLED,
                    true => I2SE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == I2SE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == I2SE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `I2SE`"]
        pub struct I2SE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2SE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2SE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "I2S peripheral is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(I2SE_A::DISABLED)
            }
            #[doc = "I2S peripheral is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(I2SE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "I2S configuration mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum I2SCFG_A {
            #[doc = "0: Slave - transmit"]
            SLAVETX = 0,
            #[doc = "1: Slave - receive"]
            SLAVERX = 1,
            #[doc = "2: Master - transmit"]
            MASTERTX = 2,
            #[doc = "3: Master - receive"]
            MASTERRX = 3,
        }
        impl From<I2SCFG_A> for u8 {
            #[inline(always)]
            fn from(variant: I2SCFG_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `I2SCFG`"]
        pub type I2SCFG_R = crate::R<u8, I2SCFG_A>;
        impl I2SCFG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> I2SCFG_A {
                match self.bits {
                    0 => I2SCFG_A::SLAVETX,
                    1 => I2SCFG_A::SLAVERX,
                    2 => I2SCFG_A::MASTERTX,
                    3 => I2SCFG_A::MASTERRX,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `SLAVETX`"]
            #[inline(always)]
            pub fn is_slave_tx(&self) -> bool {
                *self == I2SCFG_A::SLAVETX
            }
            #[doc = "Checks if the value of the field is `SLAVERX`"]
            #[inline(always)]
            pub fn is_slave_rx(&self) -> bool {
                *self == I2SCFG_A::SLAVERX
            }
            #[doc = "Checks if the value of the field is `MASTERTX`"]
            #[inline(always)]
            pub fn is_master_tx(&self) -> bool {
                *self == I2SCFG_A::MASTERTX
            }
            #[doc = "Checks if the value of the field is `MASTERRX`"]
            #[inline(always)]
            pub fn is_master_rx(&self) -> bool {
                *self == I2SCFG_A::MASTERRX
            }
        }
        #[doc = "Write proxy for field `I2SCFG`"]
        pub struct I2SCFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2SCFG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2SCFG_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Slave - transmit"]
            #[inline(always)]
            pub fn slave_tx(self) -> &'a mut W {
                self.variant(I2SCFG_A::SLAVETX)
            }
            #[doc = "Slave - receive"]
            #[inline(always)]
            pub fn slave_rx(self) -> &'a mut W {
                self.variant(I2SCFG_A::SLAVERX)
            }
            #[doc = "Master - transmit"]
            #[inline(always)]
            pub fn master_tx(self) -> &'a mut W {
                self.variant(I2SCFG_A::MASTERTX)
            }
            #[doc = "Master - receive"]
            #[inline(always)]
            pub fn master_rx(self) -> &'a mut W {
                self.variant(I2SCFG_A::MASTERRX)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "PCM frame synchronization\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PCMSYNC_A {
            #[doc = "0: Short frame synchronisation"]
            SHORT = 0,
            #[doc = "1: Long frame synchronisation"]
            LONG = 1,
        }
        impl From<PCMSYNC_A> for bool {
            #[inline(always)]
            fn from(variant: PCMSYNC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PCMSYNC`"]
        pub type PCMSYNC_R = crate::R<bool, PCMSYNC_A>;
        impl PCMSYNC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PCMSYNC_A {
                match self.bits {
                    false => PCMSYNC_A::SHORT,
                    true => PCMSYNC_A::LONG,
                }
            }
            #[doc = "Checks if the value of the field is `SHORT`"]
            #[inline(always)]
            pub fn is_short(&self) -> bool {
                *self == PCMSYNC_A::SHORT
            }
            #[doc = "Checks if the value of the field is `LONG`"]
            #[inline(always)]
            pub fn is_long(&self) -> bool {
                *self == PCMSYNC_A::LONG
            }
        }
        #[doc = "Write proxy for field `PCMSYNC`"]
        pub struct PCMSYNC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PCMSYNC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PCMSYNC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Short frame synchronisation"]
            #[inline(always)]
            pub fn short(self) -> &'a mut W {
                self.variant(PCMSYNC_A::SHORT)
            }
            #[doc = "Long frame synchronisation"]
            #[inline(always)]
            pub fn long(self) -> &'a mut W {
                self.variant(PCMSYNC_A::LONG)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "I2S standard selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum I2SSTD_A {
            #[doc = "0: I2S Philips standard"]
            PHILIPS = 0,
            #[doc = "1: MSB justified standard"]
            MSB = 1,
            #[doc = "2: LSB justified standard"]
            LSB = 2,
            #[doc = "3: PCM standard"]
            PCM = 3,
        }
        impl From<I2SSTD_A> for u8 {
            #[inline(always)]
            fn from(variant: I2SSTD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `I2SSTD`"]
        pub type I2SSTD_R = crate::R<u8, I2SSTD_A>;
        impl I2SSTD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> I2SSTD_A {
                match self.bits {
                    0 => I2SSTD_A::PHILIPS,
                    1 => I2SSTD_A::MSB,
                    2 => I2SSTD_A::LSB,
                    3 => I2SSTD_A::PCM,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `PHILIPS`"]
            #[inline(always)]
            pub fn is_philips(&self) -> bool {
                *self == I2SSTD_A::PHILIPS
            }
            #[doc = "Checks if the value of the field is `MSB`"]
            #[inline(always)]
            pub fn is_msb(&self) -> bool {
                *self == I2SSTD_A::MSB
            }
            #[doc = "Checks if the value of the field is `LSB`"]
            #[inline(always)]
            pub fn is_lsb(&self) -> bool {
                *self == I2SSTD_A::LSB
            }
            #[doc = "Checks if the value of the field is `PCM`"]
            #[inline(always)]
            pub fn is_pcm(&self) -> bool {
                *self == I2SSTD_A::PCM
            }
        }
        #[doc = "Write proxy for field `I2SSTD`"]
        pub struct I2SSTD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2SSTD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2SSTD_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "I2S Philips standard"]
            #[inline(always)]
            pub fn philips(self) -> &'a mut W {
                self.variant(I2SSTD_A::PHILIPS)
            }
            #[doc = "MSB justified standard"]
            #[inline(always)]
            pub fn msb(self) -> &'a mut W {
                self.variant(I2SSTD_A::MSB)
            }
            #[doc = "LSB justified standard"]
            #[inline(always)]
            pub fn lsb(self) -> &'a mut W {
                self.variant(I2SSTD_A::LSB)
            }
            #[doc = "PCM standard"]
            #[inline(always)]
            pub fn pcm(self) -> &'a mut W {
                self.variant(I2SSTD_A::PCM)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Steady state clock polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CKPOL_A {
            #[doc = "0: I2S clock inactive state is low level"]
            IDLELOW = 0,
            #[doc = "1: I2S clock inactive state is high level"]
            IDLEHIGH = 1,
        }
        impl From<CKPOL_A> for bool {
            #[inline(always)]
            fn from(variant: CKPOL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CKPOL`"]
        pub type CKPOL_R = crate::R<bool, CKPOL_A>;
        impl CKPOL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CKPOL_A {
                match self.bits {
                    false => CKPOL_A::IDLELOW,
                    true => CKPOL_A::IDLEHIGH,
                }
            }
            #[doc = "Checks if the value of the field is `IDLELOW`"]
            #[inline(always)]
            pub fn is_idle_low(&self) -> bool {
                *self == CKPOL_A::IDLELOW
            }
            #[doc = "Checks if the value of the field is `IDLEHIGH`"]
            #[inline(always)]
            pub fn is_idle_high(&self) -> bool {
                *self == CKPOL_A::IDLEHIGH
            }
        }
        #[doc = "Write proxy for field `CKPOL`"]
        pub struct CKPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKPOL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CKPOL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "I2S clock inactive state is low level"]
            #[inline(always)]
            pub fn idle_low(self) -> &'a mut W {
                self.variant(CKPOL_A::IDLELOW)
            }
            #[doc = "I2S clock inactive state is high level"]
            #[inline(always)]
            pub fn idle_high(self) -> &'a mut W {
                self.variant(CKPOL_A::IDLEHIGH)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Data length to be transferred\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum DATLEN_A {
            #[doc = "0: 16-bit data length"]
            SIXTEENBIT = 0,
            #[doc = "1: 24-bit data length"]
            TWENTYFOURBIT = 1,
            #[doc = "2: 32-bit data length"]
            THIRTYTWOBIT = 2,
        }
        impl From<DATLEN_A> for u8 {
            #[inline(always)]
            fn from(variant: DATLEN_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `DATLEN`"]
        pub type DATLEN_R = crate::R<u8, DATLEN_A>;
        impl DATLEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, DATLEN_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(DATLEN_A::SIXTEENBIT),
                    1 => Val(DATLEN_A::TWENTYFOURBIT),
                    2 => Val(DATLEN_A::THIRTYTWOBIT),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `SIXTEENBIT`"]
            #[inline(always)]
            pub fn is_sixteen_bit(&self) -> bool {
                *self == DATLEN_A::SIXTEENBIT
            }
            #[doc = "Checks if the value of the field is `TWENTYFOURBIT`"]
            #[inline(always)]
            pub fn is_twenty_four_bit(&self) -> bool {
                *self == DATLEN_A::TWENTYFOURBIT
            }
            #[doc = "Checks if the value of the field is `THIRTYTWOBIT`"]
            #[inline(always)]
            pub fn is_thirty_two_bit(&self) -> bool {
                *self == DATLEN_A::THIRTYTWOBIT
            }
        }
        #[doc = "Write proxy for field `DATLEN`"]
        pub struct DATLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATLEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DATLEN_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "16-bit data length"]
            #[inline(always)]
            pub fn sixteen_bit(self) -> &'a mut W {
                self.variant(DATLEN_A::SIXTEENBIT)
            }
            #[doc = "24-bit data length"]
            #[inline(always)]
            pub fn twenty_four_bit(self) -> &'a mut W {
                self.variant(DATLEN_A::TWENTYFOURBIT)
            }
            #[doc = "32-bit data length"]
            #[inline(always)]
            pub fn thirty_two_bit(self) -> &'a mut W {
                self.variant(DATLEN_A::THIRTYTWOBIT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 1)) | (((value as u32) & 0x03) << 1);
                self.w
            }
        }
        #[doc = "Channel length (number of bits per audio channel)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CHLEN_A {
            #[doc = "0: 16-bit wide"]
            SIXTEENBIT = 0,
            #[doc = "1: 32-bit wide"]
            THIRTYTWOBIT = 1,
        }
        impl From<CHLEN_A> for bool {
            #[inline(always)]
            fn from(variant: CHLEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CHLEN`"]
        pub type CHLEN_R = crate::R<bool, CHLEN_A>;
        impl CHLEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CHLEN_A {
                match self.bits {
                    false => CHLEN_A::SIXTEENBIT,
                    true => CHLEN_A::THIRTYTWOBIT,
                }
            }
            #[doc = "Checks if the value of the field is `SIXTEENBIT`"]
            #[inline(always)]
            pub fn is_sixteen_bit(&self) -> bool {
                *self == CHLEN_A::SIXTEENBIT
            }
            #[doc = "Checks if the value of the field is `THIRTYTWOBIT`"]
            #[inline(always)]
            pub fn is_thirty_two_bit(&self) -> bool {
                *self == CHLEN_A::THIRTYTWOBIT
            }
        }
        #[doc = "Write proxy for field `CHLEN`"]
        pub struct CHLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHLEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHLEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "16-bit wide"]
            #[inline(always)]
            pub fn sixteen_bit(self) -> &'a mut W {
                self.variant(CHLEN_A::SIXTEENBIT)
            }
            #[doc = "32-bit wide"]
            #[inline(always)]
            pub fn thirty_two_bit(self) -> &'a mut W {
                self.variant(CHLEN_A::THIRTYTWOBIT)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 11 - I2S mode selection"]
            #[inline(always)]
            pub fn i2smod(&self) -> I2SMOD_R {
                I2SMOD_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - I2S Enable"]
            #[inline(always)]
            pub fn i2se(&self) -> I2SE_R {
                I2SE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - I2S configuration mode"]
            #[inline(always)]
            pub fn i2scfg(&self) -> I2SCFG_R {
                I2SCFG_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - PCM frame synchronization"]
            #[inline(always)]
            pub fn pcmsync(&self) -> PCMSYNC_R {
                PCMSYNC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:5 - I2S standard selection"]
            #[inline(always)]
            pub fn i2sstd(&self) -> I2SSTD_R {
                I2SSTD_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 3 - Steady state clock polarity"]
            #[inline(always)]
            pub fn ckpol(&self) -> CKPOL_R {
                CKPOL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 1:2 - Data length to be transferred"]
            #[inline(always)]
            pub fn datlen(&self) -> DATLEN_R {
                DATLEN_R::new(((self.bits >> 1) & 0x03) as u8)
            }
            #[doc = "Bit 0 - Channel length (number of bits per audio channel)"]
            #[inline(always)]
            pub fn chlen(&self) -> CHLEN_R {
                CHLEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 11 - I2S mode selection"]
            #[inline(always)]
            pub fn i2smod(&mut self) -> I2SMOD_W {
                I2SMOD_W { w: self }
            }
            #[doc = "Bit 10 - I2S Enable"]
            #[inline(always)]
            pub fn i2se(&mut self) -> I2SE_W {
                I2SE_W { w: self }
            }
            #[doc = "Bits 8:9 - I2S configuration mode"]
            #[inline(always)]
            pub fn i2scfg(&mut self) -> I2SCFG_W {
                I2SCFG_W { w: self }
            }
            #[doc = "Bit 7 - PCM frame synchronization"]
            #[inline(always)]
            pub fn pcmsync(&mut self) -> PCMSYNC_W {
                PCMSYNC_W { w: self }
            }
            #[doc = "Bits 4:5 - I2S standard selection"]
            #[inline(always)]
            pub fn i2sstd(&mut self) -> I2SSTD_W {
                I2SSTD_W { w: self }
            }
            #[doc = "Bit 3 - Steady state clock polarity"]
            #[inline(always)]
            pub fn ckpol(&mut self) -> CKPOL_W {
                CKPOL_W { w: self }
            }
            #[doc = "Bits 1:2 - Data length to be transferred"]
            #[inline(always)]
            pub fn datlen(&mut self) -> DATLEN_W {
                DATLEN_W { w: self }
            }
            #[doc = "Bit 0 - Channel length (number of bits per audio channel)"]
            #[inline(always)]
            pub fn chlen(&mut self) -> CHLEN_W {
                CHLEN_W { w: self }
            }
        }
    }
    #[doc = "I2S prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2spr](i2spr) module"]
    pub type I2SPR = crate::Reg<u32, _I2SPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SPR;
    #[doc = "`read()` method returns [i2spr::R](i2spr::R) reader structure"]
    impl crate::Readable for I2SPR {}
    #[doc = "`write(|w| ..)` method takes [i2spr::W](i2spr::W) writer structure"]
    impl crate::Writable for I2SPR {}
    #[doc = "I2S prescaler register"]
    pub mod i2spr {
        #[doc = "Reader of register I2SPR"]
        pub type R = crate::R<u32, super::I2SPR>;
        #[doc = "Writer for register I2SPR"]
        pub type W = crate::W<u32, super::I2SPR>;
        #[doc = "Register I2SPR `reset()`'s with value 0x10"]
        impl crate::ResetValue for super::I2SPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x10
            }
        }
        #[doc = "Master clock output enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MCKOE_A {
            #[doc = "0: Master clock output is disabled"]
            DISABLED = 0,
            #[doc = "1: Master clock output is enabled"]
            ENABLED = 1,
        }
        impl From<MCKOE_A> for bool {
            #[inline(always)]
            fn from(variant: MCKOE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MCKOE`"]
        pub type MCKOE_R = crate::R<bool, MCKOE_A>;
        impl MCKOE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MCKOE_A {
                match self.bits {
                    false => MCKOE_A::DISABLED,
                    true => MCKOE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == MCKOE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == MCKOE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `MCKOE`"]
        pub struct MCKOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCKOE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MCKOE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Master clock output is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(MCKOE_A::DISABLED)
            }
            #[doc = "Master clock output is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(MCKOE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Odd factor for the prescaler\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ODD_A {
            #[doc = "0: Real divider value is I2SDIV * 2"]
            EVEN = 0,
            #[doc = "1: Real divider value is (I2SDIV * 2) + 1"]
            ODD = 1,
        }
        impl From<ODD_A> for bool {
            #[inline(always)]
            fn from(variant: ODD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ODD`"]
        pub type ODD_R = crate::R<bool, ODD_A>;
        impl ODD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ODD_A {
                match self.bits {
                    false => ODD_A::EVEN,
                    true => ODD_A::ODD,
                }
            }
            #[doc = "Checks if the value of the field is `EVEN`"]
            #[inline(always)]
            pub fn is_even(&self) -> bool {
                *self == ODD_A::EVEN
            }
            #[doc = "Checks if the value of the field is `ODD`"]
            #[inline(always)]
            pub fn is_odd(&self) -> bool {
                *self == ODD_A::ODD
            }
        }
        #[doc = "Write proxy for field `ODD`"]
        pub struct ODD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ODD_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Real divider value is I2SDIV * 2"]
            #[inline(always)]
            pub fn even(self) -> &'a mut W {
                self.variant(ODD_A::EVEN)
            }
            #[doc = "Real divider value is (I2SDIV * 2) + 1"]
            #[inline(always)]
            pub fn odd(self) -> &'a mut W {
                self.variant(ODD_A::ODD)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `I2SDIV`"]
        pub type I2SDIV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `I2SDIV`"]
        pub struct I2SDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2SDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 9 - Master clock output enable"]
            #[inline(always)]
            pub fn mckoe(&self) -> MCKOE_R {
                MCKOE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Odd factor for the prescaler"]
            #[inline(always)]
            pub fn odd(&self) -> ODD_R {
                ODD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - I2S Linear prescaler"]
            #[inline(always)]
            pub fn i2sdiv(&self) -> I2SDIV_R {
                I2SDIV_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 9 - Master clock output enable"]
            #[inline(always)]
            pub fn mckoe(&mut self) -> MCKOE_W {
                MCKOE_W { w: self }
            }
            #[doc = "Bit 8 - Odd factor for the prescaler"]
            #[inline(always)]
            pub fn odd(&mut self) -> ODD_W {
                ODD_W { w: self }
            }
            #[doc = "Bits 0:7 - I2S Linear prescaler"]
            #[inline(always)]
            pub fn i2sdiv(&mut self) -> I2SDIV_W {
                I2SDIV_W { w: self }
            }
        }
    }
}
#[doc = "Serial peripheral interface"]
pub struct SPI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI2 {}
impl SPI2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        0x4000_3800 as *const _
    }
}
impl Deref for SPI2 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SPI2::ptr() }
    }
}
#[doc = "Power control"]
pub struct PWR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWR {}
impl PWR {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwr::RegisterBlock {
        0x4000_7000 as *const _
    }
}
impl Deref for PWR {
    type Target = pwr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*PWR::ptr() }
    }
}
#[doc = "Power control"]
pub mod pwr {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - power control register"]
        pub cr: CR,
        #[doc = "0x04 - power control/status register"]
        pub csr: CSR,
    }
    #[doc = "power control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "power control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBP`"]
        pub type DBP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBP`"]
        pub struct DBP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CSBF`"]
        pub type CSBF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CSBF`"]
        pub struct CSBF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSBF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CWUF`"]
        pub type CWUF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CWUF`"]
        pub struct CWUF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CWUF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Power down deepsleep\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDDS_A {
            #[doc = "0: Enter Stop mode when the CPU enters deepsleep"]
            STOP_MODE = 0,
            #[doc = "1: Enter Standby mode when the CPU enters deepsleep"]
            STANDBY_MODE = 1,
        }
        impl From<PDDS_A> for bool {
            #[inline(always)]
            fn from(variant: PDDS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDDS`"]
        pub type PDDS_R = crate::R<bool, PDDS_A>;
        impl PDDS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDDS_A {
                match self.bits {
                    false => PDDS_A::STOP_MODE,
                    true => PDDS_A::STANDBY_MODE,
                }
            }
            #[doc = "Checks if the value of the field is `STOP_MODE`"]
            #[inline(always)]
            pub fn is_stop_mode(&self) -> bool {
                *self == PDDS_A::STOP_MODE
            }
            #[doc = "Checks if the value of the field is `STANDBY_MODE`"]
            #[inline(always)]
            pub fn is_standby_mode(&self) -> bool {
                *self == PDDS_A::STANDBY_MODE
            }
        }
        #[doc = "Write proxy for field `PDDS`"]
        pub struct PDDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDDS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDDS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Enter Stop mode when the CPU enters deepsleep"]
            #[inline(always)]
            pub fn stop_mode(self) -> &'a mut W {
                self.variant(PDDS_A::STOP_MODE)
            }
            #[doc = "Enter Standby mode when the CPU enters deepsleep"]
            #[inline(always)]
            pub fn standby_mode(self) -> &'a mut W {
                self.variant(PDDS_A::STANDBY_MODE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `LPDS`"]
        pub type LPDS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPDS`"]
        pub struct LPDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPDS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - Disable backup domain write protection"]
            #[inline(always)]
            pub fn dbp(&self) -> DBP_R {
                DBP_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Clear standby flag"]
            #[inline(always)]
            pub fn csbf(&self) -> CSBF_R {
                CSBF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Clear wakeup flag"]
            #[inline(always)]
            pub fn cwuf(&self) -> CWUF_R {
                CWUF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Power down deepsleep"]
            #[inline(always)]
            pub fn pdds(&self) -> PDDS_R {
                PDDS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Low-power deep sleep"]
            #[inline(always)]
            pub fn lpds(&self) -> LPDS_R {
                LPDS_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - Disable backup domain write protection"]
            #[inline(always)]
            pub fn dbp(&mut self) -> DBP_W {
                DBP_W { w: self }
            }
            #[doc = "Bit 3 - Clear standby flag"]
            #[inline(always)]
            pub fn csbf(&mut self) -> CSBF_W {
                CSBF_W { w: self }
            }
            #[doc = "Bit 2 - Clear wakeup flag"]
            #[inline(always)]
            pub fn cwuf(&mut self) -> CWUF_W {
                CWUF_W { w: self }
            }
            #[doc = "Bit 1 - Power down deepsleep"]
            #[inline(always)]
            pub fn pdds(&mut self) -> PDDS_W {
                PDDS_W { w: self }
            }
            #[doc = "Bit 0 - Low-power deep sleep"]
            #[inline(always)]
            pub fn lpds(&mut self) -> LPDS_W {
                LPDS_W { w: self }
            }
        }
    }
    #[doc = "power control/status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr](csr) module"]
    pub type CSR = crate::Reg<u32, _CSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CSR;
    #[doc = "`read()` method returns [csr::R](csr::R) reader structure"]
    impl crate::Readable for CSR {}
    #[doc = "`write(|w| ..)` method takes [csr::W](csr::W) writer structure"]
    impl crate::Writable for CSR {}
    #[doc = "power control/status register"]
    pub mod csr {
        #[doc = "Reader of register CSR"]
        pub type R = crate::R<u32, super::CSR>;
        #[doc = "Writer for register CSR"]
        pub type W = crate::W<u32, super::CSR>;
        #[doc = "Register CSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WUF`"]
        pub type WUF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SBF`"]
        pub type SBF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EWUP1`"]
        pub type EWUP1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWUP1`"]
        pub struct EWUP1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `EWUP2`"]
        pub type EWUP2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWUP2`"]
        pub struct EWUP2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `EWUP4`"]
        pub type EWUP4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWUP4`"]
        pub struct EWUP4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `EWUP5`"]
        pub type EWUP5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWUP5`"]
        pub struct EWUP5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `EWUP6`"]
        pub type EWUP6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWUP6`"]
        pub struct EWUP6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `EWUP7`"]
        pub type EWUP7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWUP7`"]
        pub struct EWUP7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Wakeup flag"]
            #[inline(always)]
            pub fn wuf(&self) -> WUF_R {
                WUF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Standby flag"]
            #[inline(always)]
            pub fn sbf(&self) -> SBF_R {
                SBF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Enable WKUP pin 1"]
            #[inline(always)]
            pub fn ewup1(&self) -> EWUP1_R {
                EWUP1_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Enable WKUP pin 2"]
            #[inline(always)]
            pub fn ewup2(&self) -> EWUP2_R {
                EWUP2_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Enable WKUP pin 4"]
            #[inline(always)]
            pub fn ewup4(&self) -> EWUP4_R {
                EWUP4_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Enable WKUP pin 5"]
            #[inline(always)]
            pub fn ewup5(&self) -> EWUP5_R {
                EWUP5_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Enable WKUP pin 6"]
            #[inline(always)]
            pub fn ewup6(&self) -> EWUP6_R {
                EWUP6_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Enable WKUP pin 7"]
            #[inline(always)]
            pub fn ewup7(&self) -> EWUP7_R {
                EWUP7_R::new(((self.bits >> 14) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - Enable WKUP pin 1"]
            #[inline(always)]
            pub fn ewup1(&mut self) -> EWUP1_W {
                EWUP1_W { w: self }
            }
            #[doc = "Bit 9 - Enable WKUP pin 2"]
            #[inline(always)]
            pub fn ewup2(&mut self) -> EWUP2_W {
                EWUP2_W { w: self }
            }
            #[doc = "Bit 11 - Enable WKUP pin 4"]
            #[inline(always)]
            pub fn ewup4(&mut self) -> EWUP4_W {
                EWUP4_W { w: self }
            }
            #[doc = "Bit 12 - Enable WKUP pin 5"]
            #[inline(always)]
            pub fn ewup5(&mut self) -> EWUP5_W {
                EWUP5_W { w: self }
            }
            #[doc = "Bit 13 - Enable WKUP pin 6"]
            #[inline(always)]
            pub fn ewup6(&mut self) -> EWUP6_W {
                EWUP6_W { w: self }
            }
            #[doc = "Bit 14 - Enable WKUP pin 7"]
            #[inline(always)]
            pub fn ewup7(&mut self) -> EWUP7_W {
                EWUP7_W { w: self }
            }
        }
    }
}
#[doc = "Inter-integrated circuit"]
pub struct I2C1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C1 {}
impl I2C1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        0x4000_5400 as *const _
    }
}
impl Deref for I2C1 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*I2C1::ptr() }
    }
}
#[doc = "Inter-integrated circuit"]
pub mod i2c1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - Control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - Own address register 1"]
        pub oar1: OAR1,
        #[doc = "0x0c - Own address register 2"]
        pub oar2: OAR2,
        #[doc = "0x10 - Timing register"]
        pub timingr: TIMINGR,
        #[doc = "0x14 - Status register 1"]
        pub timeoutr: TIMEOUTR,
        #[doc = "0x18 - Interrupt and Status register"]
        pub isr: ISR,
        #[doc = "0x1c - Interrupt clear register"]
        pub icr: ICR,
        #[doc = "0x20 - PEC register"]
        pub pecr: PECR,
        #[doc = "0x24 - Receive data register"]
        pub rxdr: RXDR,
        #[doc = "0x28 - Transmit data register"]
        pub txdr: TXDR,
    }
    #[doc = "Control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "Control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Peripheral enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PE_A {
            #[doc = "0: Peripheral disabled"]
            DISABLED = 0,
            #[doc = "1: Peripheral enabled"]
            ENABLED = 1,
        }
        impl From<PE_A> for bool {
            #[inline(always)]
            fn from(variant: PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PE`"]
        pub type PE_R = crate::R<bool, PE_A>;
        impl PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PE_A {
                match self.bits {
                    false => PE_A::DISABLED,
                    true => PE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == PE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == PE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `PE`"]
        pub struct PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Peripheral disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(PE_A::DISABLED)
            }
            #[doc = "Peripheral enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(PE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "TX Interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXIE_A {
            #[doc = "0: Transmit (TXIS) interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Transmit (TXIS) interrupt enabled"]
            ENABLED = 1,
        }
        impl From<TXIE_A> for bool {
            #[inline(always)]
            fn from(variant: TXIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TXIE`"]
        pub type TXIE_R = crate::R<bool, TXIE_A>;
        impl TXIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TXIE_A {
                match self.bits {
                    false => TXIE_A::DISABLED,
                    true => TXIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TXIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TXIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TXIE`"]
        pub struct TXIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TXIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Transmit (TXIS) interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TXIE_A::DISABLED)
            }
            #[doc = "Transmit (TXIS) interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TXIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "RX Interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXIE_A {
            #[doc = "0: Receive (RXNE) interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Receive (RXNE) interrupt enabled"]
            ENABLED = 1,
        }
        impl From<RXIE_A> for bool {
            #[inline(always)]
            fn from(variant: RXIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXIE`"]
        pub type RXIE_R = crate::R<bool, RXIE_A>;
        impl RXIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXIE_A {
                match self.bits {
                    false => RXIE_A::DISABLED,
                    true => RXIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == RXIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == RXIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `RXIE`"]
        pub struct RXIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RXIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Receive (RXNE) interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(RXIE_A::DISABLED)
            }
            #[doc = "Receive (RXNE) interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(RXIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Address match interrupt enable (slave only)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADDRIE_A {
            #[doc = "0: Address match (ADDR) interrupts disabled"]
            DISABLED = 0,
            #[doc = "1: Address match (ADDR) interrupts enabled"]
            ENABLED = 1,
        }
        impl From<ADDRIE_A> for bool {
            #[inline(always)]
            fn from(variant: ADDRIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADDRIE`"]
        pub type ADDRIE_R = crate::R<bool, ADDRIE_A>;
        impl ADDRIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADDRIE_A {
                match self.bits {
                    false => ADDRIE_A::DISABLED,
                    true => ADDRIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ADDRIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ADDRIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ADDRIE`"]
        pub struct ADDRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDRIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADDRIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Address match (ADDR) interrupts disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ADDRIE_A::DISABLED)
            }
            #[doc = "Address match (ADDR) interrupts enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ADDRIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Not acknowledge received interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NACKIE_A {
            #[doc = "0: Not acknowledge (NACKF) received interrupts disabled"]
            DISABLED = 0,
            #[doc = "1: Not acknowledge (NACKF) received interrupts enabled"]
            ENABLED = 1,
        }
        impl From<NACKIE_A> for bool {
            #[inline(always)]
            fn from(variant: NACKIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `NACKIE`"]
        pub type NACKIE_R = crate::R<bool, NACKIE_A>;
        impl NACKIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> NACKIE_A {
                match self.bits {
                    false => NACKIE_A::DISABLED,
                    true => NACKIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == NACKIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == NACKIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `NACKIE`"]
        pub struct NACKIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NACKIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: NACKIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Not acknowledge (NACKF) received interrupts disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(NACKIE_A::DISABLED)
            }
            #[doc = "Not acknowledge (NACKF) received interrupts enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(NACKIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "STOP detection Interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum STOPIE_A {
            #[doc = "0: Stop detection (STOPF) interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Stop detection (STOPF) interrupt enabled"]
            ENABLED = 1,
        }
        impl From<STOPIE_A> for bool {
            #[inline(always)]
            fn from(variant: STOPIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `STOPIE`"]
        pub type STOPIE_R = crate::R<bool, STOPIE_A>;
        impl STOPIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STOPIE_A {
                match self.bits {
                    false => STOPIE_A::DISABLED,
                    true => STOPIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STOPIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == STOPIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `STOPIE`"]
        pub struct STOPIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOPIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STOPIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Stop detection (STOPF) interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STOPIE_A::DISABLED)
            }
            #[doc = "Stop detection (STOPF) interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(STOPIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Transfer Complete interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TCIE_A {
            #[doc = "0: Transfer Complete interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Transfer Complete interrupt enabled"]
            ENABLED = 1,
        }
        impl From<TCIE_A> for bool {
            #[inline(always)]
            fn from(variant: TCIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TCIE`"]
        pub type TCIE_R = crate::R<bool, TCIE_A>;
        impl TCIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TCIE_A {
                match self.bits {
                    false => TCIE_A::DISABLED,
                    true => TCIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TCIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TCIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TCIE`"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TCIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Transfer Complete interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TCIE_A::DISABLED)
            }
            #[doc = "Transfer Complete interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TCIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Error interrupts enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ERRIE_A {
            #[doc = "0: Error detection interrupts disabled"]
            DISABLED = 0,
            #[doc = "1: Error detection interrupts enabled"]
            ENABLED = 1,
        }
        impl From<ERRIE_A> for bool {
            #[inline(always)]
            fn from(variant: ERRIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ERRIE`"]
        pub type ERRIE_R = crate::R<bool, ERRIE_A>;
        impl ERRIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ERRIE_A {
                match self.bits {
                    false => ERRIE_A::DISABLED,
                    true => ERRIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ERRIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ERRIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ERRIE`"]
        pub struct ERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERRIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ERRIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Error detection interrupts disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ERRIE_A::DISABLED)
            }
            #[doc = "Error detection interrupts enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ERRIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Digital noise filter\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum DNF_A {
            #[doc = "0: Digital filter disabled"]
            NOFILTER = 0,
            #[doc = "1: Digital filter enabled and filtering capability up to 1 tI2CCLK"]
            FILTER1 = 1,
            #[doc = "2: Digital filter enabled and filtering capability up to 2 tI2CCLK"]
            FILTER2 = 2,
            #[doc = "3: Digital filter enabled and filtering capability up to 3 tI2CCLK"]
            FILTER3 = 3,
            #[doc = "4: Digital filter enabled and filtering capability up to 4 tI2CCLK"]
            FILTER4 = 4,
            #[doc = "5: Digital filter enabled and filtering capability up to 5 tI2CCLK"]
            FILTER5 = 5,
            #[doc = "6: Digital filter enabled and filtering capability up to 6 tI2CCLK"]
            FILTER6 = 6,
            #[doc = "7: Digital filter enabled and filtering capability up to 7 tI2CCLK"]
            FILTER7 = 7,
            #[doc = "8: Digital filter enabled and filtering capability up to 8 tI2CCLK"]
            FILTER8 = 8,
            #[doc = "9: Digital filter enabled and filtering capability up to 9 tI2CCLK"]
            FILTER9 = 9,
            #[doc = "10: Digital filter enabled and filtering capability up to 10 tI2CCLK"]
            FILTER10 = 10,
            #[doc = "11: Digital filter enabled and filtering capability up to 11 tI2CCLK"]
            FILTER11 = 11,
            #[doc = "12: Digital filter enabled and filtering capability up to 12 tI2CCLK"]
            FILTER12 = 12,
            #[doc = "13: Digital filter enabled and filtering capability up to 13 tI2CCLK"]
            FILTER13 = 13,
            #[doc = "14: Digital filter enabled and filtering capability up to 14 tI2CCLK"]
            FILTER14 = 14,
            #[doc = "15: Digital filter enabled and filtering capability up to 15 tI2CCLK"]
            FILTER15 = 15,
        }
        impl From<DNF_A> for u8 {
            #[inline(always)]
            fn from(variant: DNF_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `DNF`"]
        pub type DNF_R = crate::R<u8, DNF_A>;
        impl DNF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DNF_A {
                match self.bits {
                    0 => DNF_A::NOFILTER,
                    1 => DNF_A::FILTER1,
                    2 => DNF_A::FILTER2,
                    3 => DNF_A::FILTER3,
                    4 => DNF_A::FILTER4,
                    5 => DNF_A::FILTER5,
                    6 => DNF_A::FILTER6,
                    7 => DNF_A::FILTER7,
                    8 => DNF_A::FILTER8,
                    9 => DNF_A::FILTER9,
                    10 => DNF_A::FILTER10,
                    11 => DNF_A::FILTER11,
                    12 => DNF_A::FILTER12,
                    13 => DNF_A::FILTER13,
                    14 => DNF_A::FILTER14,
                    15 => DNF_A::FILTER15,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `NOFILTER`"]
            #[inline(always)]
            pub fn is_no_filter(&self) -> bool {
                *self == DNF_A::NOFILTER
            }
            #[doc = "Checks if the value of the field is `FILTER1`"]
            #[inline(always)]
            pub fn is_filter1(&self) -> bool {
                *self == DNF_A::FILTER1
            }
            #[doc = "Checks if the value of the field is `FILTER2`"]
            #[inline(always)]
            pub fn is_filter2(&self) -> bool {
                *self == DNF_A::FILTER2
            }
            #[doc = "Checks if the value of the field is `FILTER3`"]
            #[inline(always)]
            pub fn is_filter3(&self) -> bool {
                *self == DNF_A::FILTER3
            }
            #[doc = "Checks if the value of the field is `FILTER4`"]
            #[inline(always)]
            pub fn is_filter4(&self) -> bool {
                *self == DNF_A::FILTER4
            }
            #[doc = "Checks if the value of the field is `FILTER5`"]
            #[inline(always)]
            pub fn is_filter5(&self) -> bool {
                *self == DNF_A::FILTER5
            }
            #[doc = "Checks if the value of the field is `FILTER6`"]
            #[inline(always)]
            pub fn is_filter6(&self) -> bool {
                *self == DNF_A::FILTER6
            }
            #[doc = "Checks if the value of the field is `FILTER7`"]
            #[inline(always)]
            pub fn is_filter7(&self) -> bool {
                *self == DNF_A::FILTER7
            }
            #[doc = "Checks if the value of the field is `FILTER8`"]
            #[inline(always)]
            pub fn is_filter8(&self) -> bool {
                *self == DNF_A::FILTER8
            }
            #[doc = "Checks if the value of the field is `FILTER9`"]
            #[inline(always)]
            pub fn is_filter9(&self) -> bool {
                *self == DNF_A::FILTER9
            }
            #[doc = "Checks if the value of the field is `FILTER10`"]
            #[inline(always)]
            pub fn is_filter10(&self) -> bool {
                *self == DNF_A::FILTER10
            }
            #[doc = "Checks if the value of the field is `FILTER11`"]
            #[inline(always)]
            pub fn is_filter11(&self) -> bool {
                *self == DNF_A::FILTER11
            }
            #[doc = "Checks if the value of the field is `FILTER12`"]
            #[inline(always)]
            pub fn is_filter12(&self) -> bool {
                *self == DNF_A::FILTER12
            }
            #[doc = "Checks if the value of the field is `FILTER13`"]
            #[inline(always)]
            pub fn is_filter13(&self) -> bool {
                *self == DNF_A::FILTER13
            }
            #[doc = "Checks if the value of the field is `FILTER14`"]
            #[inline(always)]
            pub fn is_filter14(&self) -> bool {
                *self == DNF_A::FILTER14
            }
            #[doc = "Checks if the value of the field is `FILTER15`"]
            #[inline(always)]
            pub fn is_filter15(&self) -> bool {
                *self == DNF_A::FILTER15
            }
        }
        #[doc = "Write proxy for field `DNF`"]
        pub struct DNF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DNF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DNF_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Digital filter disabled"]
            #[inline(always)]
            pub fn no_filter(self) -> &'a mut W {
                self.variant(DNF_A::NOFILTER)
            }
            #[doc = "Digital filter enabled and filtering capability up to 1 tI2CCLK"]
            #[inline(always)]
            pub fn filter1(self) -> &'a mut W {
                self.variant(DNF_A::FILTER1)
            }
            #[doc = "Digital filter enabled and filtering capability up to 2 tI2CCLK"]
            #[inline(always)]
            pub fn filter2(self) -> &'a mut W {
                self.variant(DNF_A::FILTER2)
            }
            #[doc = "Digital filter enabled and filtering capability up to 3 tI2CCLK"]
            #[inline(always)]
            pub fn filter3(self) -> &'a mut W {
                self.variant(DNF_A::FILTER3)
            }
            #[doc = "Digital filter enabled and filtering capability up to 4 tI2CCLK"]
            #[inline(always)]
            pub fn filter4(self) -> &'a mut W {
                self.variant(DNF_A::FILTER4)
            }
            #[doc = "Digital filter enabled and filtering capability up to 5 tI2CCLK"]
            #[inline(always)]
            pub fn filter5(self) -> &'a mut W {
                self.variant(DNF_A::FILTER5)
            }
            #[doc = "Digital filter enabled and filtering capability up to 6 tI2CCLK"]
            #[inline(always)]
            pub fn filter6(self) -> &'a mut W {
                self.variant(DNF_A::FILTER6)
            }
            #[doc = "Digital filter enabled and filtering capability up to 7 tI2CCLK"]
            #[inline(always)]
            pub fn filter7(self) -> &'a mut W {
                self.variant(DNF_A::FILTER7)
            }
            #[doc = "Digital filter enabled and filtering capability up to 8 tI2CCLK"]
            #[inline(always)]
            pub fn filter8(self) -> &'a mut W {
                self.variant(DNF_A::FILTER8)
            }
            #[doc = "Digital filter enabled and filtering capability up to 9 tI2CCLK"]
            #[inline(always)]
            pub fn filter9(self) -> &'a mut W {
                self.variant(DNF_A::FILTER9)
            }
            #[doc = "Digital filter enabled and filtering capability up to 10 tI2CCLK"]
            #[inline(always)]
            pub fn filter10(self) -> &'a mut W {
                self.variant(DNF_A::FILTER10)
            }
            #[doc = "Digital filter enabled and filtering capability up to 11 tI2CCLK"]
            #[inline(always)]
            pub fn filter11(self) -> &'a mut W {
                self.variant(DNF_A::FILTER11)
            }
            #[doc = "Digital filter enabled and filtering capability up to 12 tI2CCLK"]
            #[inline(always)]
            pub fn filter12(self) -> &'a mut W {
                self.variant(DNF_A::FILTER12)
            }
            #[doc = "Digital filter enabled and filtering capability up to 13 tI2CCLK"]
            #[inline(always)]
            pub fn filter13(self) -> &'a mut W {
                self.variant(DNF_A::FILTER13)
            }
            #[doc = "Digital filter enabled and filtering capability up to 14 tI2CCLK"]
            #[inline(always)]
            pub fn filter14(self) -> &'a mut W {
                self.variant(DNF_A::FILTER14)
            }
            #[doc = "Digital filter enabled and filtering capability up to 15 tI2CCLK"]
            #[inline(always)]
            pub fn filter15(self) -> &'a mut W {
                self.variant(DNF_A::FILTER15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Analog noise filter OFF\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ANFOFF_A {
            #[doc = "0: Analog noise filter enabled"]
            ENABLED = 0,
            #[doc = "1: Analog noise filter disabled"]
            DISABLED = 1,
        }
        impl From<ANFOFF_A> for bool {
            #[inline(always)]
            fn from(variant: ANFOFF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ANFOFF`"]
        pub type ANFOFF_R = crate::R<bool, ANFOFF_A>;
        impl ANFOFF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ANFOFF_A {
                match self.bits {
                    false => ANFOFF_A::ENABLED,
                    true => ANFOFF_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ANFOFF_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ANFOFF_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `ANFOFF`"]
        pub struct ANFOFF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ANFOFF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ANFOFF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Analog noise filter enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ANFOFF_A::ENABLED)
            }
            #[doc = "Analog noise filter disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ANFOFF_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Write proxy for field `SWRST`"]
        pub struct SWRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "DMA transmission requests enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXDMAEN_A {
            #[doc = "0: DMA mode disabled for transmission"]
            DISABLED = 0,
            #[doc = "1: DMA mode enabled for transmission"]
            ENABLED = 1,
        }
        impl From<TXDMAEN_A> for bool {
            #[inline(always)]
            fn from(variant: TXDMAEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TXDMAEN`"]
        pub type TXDMAEN_R = crate::R<bool, TXDMAEN_A>;
        impl TXDMAEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TXDMAEN_A {
                match self.bits {
                    false => TXDMAEN_A::DISABLED,
                    true => TXDMAEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TXDMAEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TXDMAEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TXDMAEN`"]
        pub struct TXDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDMAEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TXDMAEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DMA mode disabled for transmission"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TXDMAEN_A::DISABLED)
            }
            #[doc = "DMA mode enabled for transmission"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TXDMAEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "DMA reception requests enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXDMAEN_A {
            #[doc = "0: DMA mode disabled for reception"]
            DISABLED = 0,
            #[doc = "1: DMA mode enabled for reception"]
            ENABLED = 1,
        }
        impl From<RXDMAEN_A> for bool {
            #[inline(always)]
            fn from(variant: RXDMAEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXDMAEN`"]
        pub type RXDMAEN_R = crate::R<bool, RXDMAEN_A>;
        impl RXDMAEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXDMAEN_A {
                match self.bits {
                    false => RXDMAEN_A::DISABLED,
                    true => RXDMAEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == RXDMAEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == RXDMAEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `RXDMAEN`"]
        pub struct RXDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXDMAEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RXDMAEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DMA mode disabled for reception"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(RXDMAEN_A::DISABLED)
            }
            #[doc = "DMA mode enabled for reception"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(RXDMAEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Slave byte control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SBC_A {
            #[doc = "0: Slave byte control disabled"]
            DISABLED = 0,
            #[doc = "1: Slave byte control enabled"]
            ENABLED = 1,
        }
        impl From<SBC_A> for bool {
            #[inline(always)]
            fn from(variant: SBC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SBC`"]
        pub type SBC_R = crate::R<bool, SBC_A>;
        impl SBC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SBC_A {
                match self.bits {
                    false => SBC_A::DISABLED,
                    true => SBC_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SBC_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == SBC_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `SBC`"]
        pub struct SBC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SBC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Slave byte control disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SBC_A::DISABLED)
            }
            #[doc = "Slave byte control enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SBC_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Clock stretching disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NOSTRETCH_A {
            #[doc = "0: Clock stretching enabled"]
            ENABLED = 0,
            #[doc = "1: Clock stretching disabled"]
            DISABLED = 1,
        }
        impl From<NOSTRETCH_A> for bool {
            #[inline(always)]
            fn from(variant: NOSTRETCH_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `NOSTRETCH`"]
        pub type NOSTRETCH_R = crate::R<bool, NOSTRETCH_A>;
        impl NOSTRETCH_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> NOSTRETCH_A {
                match self.bits {
                    false => NOSTRETCH_A::ENABLED,
                    true => NOSTRETCH_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == NOSTRETCH_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == NOSTRETCH_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `NOSTRETCH`"]
        pub struct NOSTRETCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NOSTRETCH_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: NOSTRETCH_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clock stretching enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(NOSTRETCH_A::ENABLED)
            }
            #[doc = "Clock stretching disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(NOSTRETCH_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Wakeup from STOP enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WUPEN_A {
            #[doc = "0: Wakeup from Stop mode disabled"]
            DISABLED = 0,
            #[doc = "1: Wakeup from Stop mode enabled"]
            ENABLED = 1,
        }
        impl From<WUPEN_A> for bool {
            #[inline(always)]
            fn from(variant: WUPEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WUPEN`"]
        pub type WUPEN_R = crate::R<bool, WUPEN_A>;
        impl WUPEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WUPEN_A {
                match self.bits {
                    false => WUPEN_A::DISABLED,
                    true => WUPEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == WUPEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == WUPEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `WUPEN`"]
        pub struct WUPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUPEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WUPEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Wakeup from Stop mode disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(WUPEN_A::DISABLED)
            }
            #[doc = "Wakeup from Stop mode enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(WUPEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "General call enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum GCEN_A {
            #[doc = "0: General call disabled. Address 0b00000000 is NACKed"]
            DISABLED = 0,
            #[doc = "1: General call enabled. Address 0b00000000 is ACKed"]
            ENABLED = 1,
        }
        impl From<GCEN_A> for bool {
            #[inline(always)]
            fn from(variant: GCEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `GCEN`"]
        pub type GCEN_R = crate::R<bool, GCEN_A>;
        impl GCEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> GCEN_A {
                match self.bits {
                    false => GCEN_A::DISABLED,
                    true => GCEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == GCEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == GCEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `GCEN`"]
        pub struct GCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GCEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GCEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "General call disabled. Address 0b00000000 is NACKed"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(GCEN_A::DISABLED)
            }
            #[doc = "General call enabled. Address 0b00000000 is ACKed"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(GCEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "SMBus Host address enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SMBHEN_A {
            #[doc = "0: Host address disabled. Address 0b0001000x is NACKed"]
            DISABLED = 0,
            #[doc = "1: Host address enabled. Address 0b0001000x is ACKed"]
            ENABLED = 1,
        }
        impl From<SMBHEN_A> for bool {
            #[inline(always)]
            fn from(variant: SMBHEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SMBHEN`"]
        pub type SMBHEN_R = crate::R<bool, SMBHEN_A>;
        impl SMBHEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SMBHEN_A {
                match self.bits {
                    false => SMBHEN_A::DISABLED,
                    true => SMBHEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SMBHEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == SMBHEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `SMBHEN`"]
        pub struct SMBHEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMBHEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SMBHEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Host address disabled. Address 0b0001000x is NACKed"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SMBHEN_A::DISABLED)
            }
            #[doc = "Host address enabled. Address 0b0001000x is ACKed"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SMBHEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "SMBus Device Default address enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SMBDEN_A {
            #[doc = "0: Device default address disabled. Address 0b1100001x is NACKed"]
            DISABLED = 0,
            #[doc = "1: Device default address enabled. Address 0b1100001x is ACKed"]
            ENABLED = 1,
        }
        impl From<SMBDEN_A> for bool {
            #[inline(always)]
            fn from(variant: SMBDEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SMBDEN`"]
        pub type SMBDEN_R = crate::R<bool, SMBDEN_A>;
        impl SMBDEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SMBDEN_A {
                match self.bits {
                    false => SMBDEN_A::DISABLED,
                    true => SMBDEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SMBDEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == SMBDEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `SMBDEN`"]
        pub struct SMBDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMBDEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SMBDEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Device default address disabled. Address 0b1100001x is NACKed"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SMBDEN_A::DISABLED)
            }
            #[doc = "Device default address enabled. Address 0b1100001x is ACKed"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SMBDEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "SMBUS alert enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ALERTEN_A {
            #[doc = "0: In device mode (SMBHEN=Disabled) Releases SMBA pin high and Alert Response Address Header disabled (0001100x) followed by NACK. In host mode (SMBHEN=Enabled) SMBus Alert pin (SMBA) not supported"]
            DISABLED = 0,
            #[doc = "1: In device mode (SMBHEN=Disabled) Drives SMBA pin low and Alert Response Address Header enabled (0001100x) followed by ACK.In host mode (SMBHEN=Enabled) SMBus Alert pin (SMBA) supported"]
            ENABLED = 1,
        }
        impl From<ALERTEN_A> for bool {
            #[inline(always)]
            fn from(variant: ALERTEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ALERTEN`"]
        pub type ALERTEN_R = crate::R<bool, ALERTEN_A>;
        impl ALERTEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ALERTEN_A {
                match self.bits {
                    false => ALERTEN_A::DISABLED,
                    true => ALERTEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ALERTEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ALERTEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ALERTEN`"]
        pub struct ALERTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALERTEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ALERTEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "In device mode (SMBHEN=Disabled) Releases SMBA pin high and Alert Response Address Header disabled (0001100x) followed by NACK. In host mode (SMBHEN=Enabled) SMBus Alert pin (SMBA) not supported"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ALERTEN_A::DISABLED)
            }
            #[doc = "In device mode (SMBHEN=Disabled) Drives SMBA pin low and Alert Response Address Header enabled (0001100x) followed by ACK.In host mode (SMBHEN=Enabled) SMBus Alert pin (SMBA) supported"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ALERTEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "PEC enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PECEN_A {
            #[doc = "0: PEC calculation disabled"]
            DISABLED = 0,
            #[doc = "1: PEC calculation enabled"]
            ENABLED = 1,
        }
        impl From<PECEN_A> for bool {
            #[inline(always)]
            fn from(variant: PECEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PECEN`"]
        pub type PECEN_R = crate::R<bool, PECEN_A>;
        impl PECEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PECEN_A {
                match self.bits {
                    false => PECEN_A::DISABLED,
                    true => PECEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == PECEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == PECEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `PECEN`"]
        pub struct PECEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PECEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PECEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PEC calculation disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(PECEN_A::DISABLED)
            }
            #[doc = "PEC calculation enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(PECEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Peripheral enable"]
            #[inline(always)]
            pub fn pe(&self) -> PE_R {
                PE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - TX Interrupt enable"]
            #[inline(always)]
            pub fn txie(&self) -> TXIE_R {
                TXIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RX Interrupt enable"]
            #[inline(always)]
            pub fn rxie(&self) -> RXIE_R {
                RXIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Address match interrupt enable (slave only)"]
            #[inline(always)]
            pub fn addrie(&self) -> ADDRIE_R {
                ADDRIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Not acknowledge received interrupt enable"]
            #[inline(always)]
            pub fn nackie(&self) -> NACKIE_R {
                NACKIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - STOP detection Interrupt enable"]
            #[inline(always)]
            pub fn stopie(&self) -> STOPIE_R {
                STOPIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Transfer Complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Error interrupts enable"]
            #[inline(always)]
            pub fn errie(&self) -> ERRIE_R {
                ERRIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:11 - Digital noise filter"]
            #[inline(always)]
            pub fn dnf(&self) -> DNF_R {
                DNF_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 12 - Analog noise filter OFF"]
            #[inline(always)]
            pub fn anfoff(&self) -> ANFOFF_R {
                ANFOFF_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 14 - DMA transmission requests enable"]
            #[inline(always)]
            pub fn txdmaen(&self) -> TXDMAEN_R {
                TXDMAEN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - DMA reception requests enable"]
            #[inline(always)]
            pub fn rxdmaen(&self) -> RXDMAEN_R {
                RXDMAEN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Slave byte control"]
            #[inline(always)]
            pub fn sbc(&self) -> SBC_R {
                SBC_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Clock stretching disable"]
            #[inline(always)]
            pub fn nostretch(&self) -> NOSTRETCH_R {
                NOSTRETCH_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Wakeup from STOP enable"]
            #[inline(always)]
            pub fn wupen(&self) -> WUPEN_R {
                WUPEN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - General call enable"]
            #[inline(always)]
            pub fn gcen(&self) -> GCEN_R {
                GCEN_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - SMBus Host address enable"]
            #[inline(always)]
            pub fn smbhen(&self) -> SMBHEN_R {
                SMBHEN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - SMBus Device Default address enable"]
            #[inline(always)]
            pub fn smbden(&self) -> SMBDEN_R {
                SMBDEN_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - SMBUS alert enable"]
            #[inline(always)]
            pub fn alerten(&self) -> ALERTEN_R {
                ALERTEN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - PEC enable"]
            #[inline(always)]
            pub fn pecen(&self) -> PECEN_R {
                PECEN_R::new(((self.bits >> 23) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Peripheral enable"]
            #[inline(always)]
            pub fn pe(&mut self) -> PE_W {
                PE_W { w: self }
            }
            #[doc = "Bit 1 - TX Interrupt enable"]
            #[inline(always)]
            pub fn txie(&mut self) -> TXIE_W {
                TXIE_W { w: self }
            }
            #[doc = "Bit 2 - RX Interrupt enable"]
            #[inline(always)]
            pub fn rxie(&mut self) -> RXIE_W {
                RXIE_W { w: self }
            }
            #[doc = "Bit 3 - Address match interrupt enable (slave only)"]
            #[inline(always)]
            pub fn addrie(&mut self) -> ADDRIE_W {
                ADDRIE_W { w: self }
            }
            #[doc = "Bit 4 - Not acknowledge received interrupt enable"]
            #[inline(always)]
            pub fn nackie(&mut self) -> NACKIE_W {
                NACKIE_W { w: self }
            }
            #[doc = "Bit 5 - STOP detection Interrupt enable"]
            #[inline(always)]
            pub fn stopie(&mut self) -> STOPIE_W {
                STOPIE_W { w: self }
            }
            #[doc = "Bit 6 - Transfer Complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 7 - Error interrupts enable"]
            #[inline(always)]
            pub fn errie(&mut self) -> ERRIE_W {
                ERRIE_W { w: self }
            }
            #[doc = "Bits 8:11 - Digital noise filter"]
            #[inline(always)]
            pub fn dnf(&mut self) -> DNF_W {
                DNF_W { w: self }
            }
            #[doc = "Bit 12 - Analog noise filter OFF"]
            #[inline(always)]
            pub fn anfoff(&mut self) -> ANFOFF_W {
                ANFOFF_W { w: self }
            }
            #[doc = "Bit 13 - Software reset"]
            #[inline(always)]
            pub fn swrst(&mut self) -> SWRST_W {
                SWRST_W { w: self }
            }
            #[doc = "Bit 14 - DMA transmission requests enable"]
            #[inline(always)]
            pub fn txdmaen(&mut self) -> TXDMAEN_W {
                TXDMAEN_W { w: self }
            }
            #[doc = "Bit 15 - DMA reception requests enable"]
            #[inline(always)]
            pub fn rxdmaen(&mut self) -> RXDMAEN_W {
                RXDMAEN_W { w: self }
            }
            #[doc = "Bit 16 - Slave byte control"]
            #[inline(always)]
            pub fn sbc(&mut self) -> SBC_W {
                SBC_W { w: self }
            }
            #[doc = "Bit 17 - Clock stretching disable"]
            #[inline(always)]
            pub fn nostretch(&mut self) -> NOSTRETCH_W {
                NOSTRETCH_W { w: self }
            }
            #[doc = "Bit 18 - Wakeup from STOP enable"]
            #[inline(always)]
            pub fn wupen(&mut self) -> WUPEN_W {
                WUPEN_W { w: self }
            }
            #[doc = "Bit 19 - General call enable"]
            #[inline(always)]
            pub fn gcen(&mut self) -> GCEN_W {
                GCEN_W { w: self }
            }
            #[doc = "Bit 20 - SMBus Host address enable"]
            #[inline(always)]
            pub fn smbhen(&mut self) -> SMBHEN_W {
                SMBHEN_W { w: self }
            }
            #[doc = "Bit 21 - SMBus Device Default address enable"]
            #[inline(always)]
            pub fn smbden(&mut self) -> SMBDEN_W {
                SMBDEN_W { w: self }
            }
            #[doc = "Bit 22 - SMBUS alert enable"]
            #[inline(always)]
            pub fn alerten(&mut self) -> ALERTEN_W {
                ALERTEN_W { w: self }
            }
            #[doc = "Bit 23 - PEC enable"]
            #[inline(always)]
            pub fn pecen(&mut self) -> PECEN_W {
                PECEN_W { w: self }
            }
        }
    }
    #[doc = "Control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "Control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Packet error checking byte\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PECBYTE_A {
            #[doc = "0: No PEC transfer"]
            NOPEC = 0,
            #[doc = "1: PEC transmission/reception is requested"]
            PEC = 1,
        }
        impl From<PECBYTE_A> for bool {
            #[inline(always)]
            fn from(variant: PECBYTE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PECBYTE`"]
        pub type PECBYTE_R = crate::R<bool, PECBYTE_A>;
        impl PECBYTE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PECBYTE_A {
                match self.bits {
                    false => PECBYTE_A::NOPEC,
                    true => PECBYTE_A::PEC,
                }
            }
            #[doc = "Checks if the value of the field is `NOPEC`"]
            #[inline(always)]
            pub fn is_no_pec(&self) -> bool {
                *self == PECBYTE_A::NOPEC
            }
            #[doc = "Checks if the value of the field is `PEC`"]
            #[inline(always)]
            pub fn is_pec(&self) -> bool {
                *self == PECBYTE_A::PEC
            }
        }
        #[doc = "Write proxy for field `PECBYTE`"]
        pub struct PECBYTE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PECBYTE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PECBYTE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No PEC transfer"]
            #[inline(always)]
            pub fn no_pec(self) -> &'a mut W {
                self.variant(PECBYTE_A::NOPEC)
            }
            #[doc = "PEC transmission/reception is requested"]
            #[inline(always)]
            pub fn pec(self) -> &'a mut W {
                self.variant(PECBYTE_A::PEC)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Automatic end mode (master mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum AUTOEND_A {
            #[doc = "0: Software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low"]
            SOFTWARE = 0,
            #[doc = "1: Automatic end mode: a STOP condition is automatically sent when NBYTES data are transferred"]
            AUTOMATIC = 1,
        }
        impl From<AUTOEND_A> for bool {
            #[inline(always)]
            fn from(variant: AUTOEND_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `AUTOEND`"]
        pub type AUTOEND_R = crate::R<bool, AUTOEND_A>;
        impl AUTOEND_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AUTOEND_A {
                match self.bits {
                    false => AUTOEND_A::SOFTWARE,
                    true => AUTOEND_A::AUTOMATIC,
                }
            }
            #[doc = "Checks if the value of the field is `SOFTWARE`"]
            #[inline(always)]
            pub fn is_software(&self) -> bool {
                *self == AUTOEND_A::SOFTWARE
            }
            #[doc = "Checks if the value of the field is `AUTOMATIC`"]
            #[inline(always)]
            pub fn is_automatic(&self) -> bool {
                *self == AUTOEND_A::AUTOMATIC
            }
        }
        #[doc = "Write proxy for field `AUTOEND`"]
        pub struct AUTOEND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUTOEND_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AUTOEND_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low"]
            #[inline(always)]
            pub fn software(self) -> &'a mut W {
                self.variant(AUTOEND_A::SOFTWARE)
            }
            #[doc = "Automatic end mode: a STOP condition is automatically sent when NBYTES data are transferred"]
            #[inline(always)]
            pub fn automatic(self) -> &'a mut W {
                self.variant(AUTOEND_A::AUTOMATIC)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "NBYTES reload mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RELOAD_A {
            #[doc = "0: The transfer is completed after the NBYTES data transfer (STOP or RESTART will follow)"]
            COMPLETED = 0,
            #[doc = "1: The transfer is not completed after the NBYTES data transfer (NBYTES will be reloaded)"]
            NOTCOMPLETED = 1,
        }
        impl From<RELOAD_A> for bool {
            #[inline(always)]
            fn from(variant: RELOAD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RELOAD`"]
        pub type RELOAD_R = crate::R<bool, RELOAD_A>;
        impl RELOAD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RELOAD_A {
                match self.bits {
                    false => RELOAD_A::COMPLETED,
                    true => RELOAD_A::NOTCOMPLETED,
                }
            }
            #[doc = "Checks if the value of the field is `COMPLETED`"]
            #[inline(always)]
            pub fn is_completed(&self) -> bool {
                *self == RELOAD_A::COMPLETED
            }
            #[doc = "Checks if the value of the field is `NOTCOMPLETED`"]
            #[inline(always)]
            pub fn is_not_completed(&self) -> bool {
                *self == RELOAD_A::NOTCOMPLETED
            }
        }
        #[doc = "Write proxy for field `RELOAD`"]
        pub struct RELOAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RELOAD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RELOAD_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The transfer is completed after the NBYTES data transfer (STOP or RESTART will follow)"]
            #[inline(always)]
            pub fn completed(self) -> &'a mut W {
                self.variant(RELOAD_A::COMPLETED)
            }
            #[doc = "The transfer is not completed after the NBYTES data transfer (NBYTES will be reloaded)"]
            #[inline(always)]
            pub fn not_completed(self) -> &'a mut W {
                self.variant(RELOAD_A::NOTCOMPLETED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `NBYTES`"]
        pub type NBYTES_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `NBYTES`"]
        pub struct NBYTES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NBYTES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 16)) | (((value as u32) & 0xff) << 16);
                self.w
            }
        }
        #[doc = "NACK generation (slave mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NACK_A {
            #[doc = "0: an ACK is sent after current received byte"]
            ACK = 0,
            #[doc = "1: a NACK is sent after current received byte"]
            NACK = 1,
        }
        impl From<NACK_A> for bool {
            #[inline(always)]
            fn from(variant: NACK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `NACK`"]
        pub type NACK_R = crate::R<bool, NACK_A>;
        impl NACK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> NACK_A {
                match self.bits {
                    false => NACK_A::ACK,
                    true => NACK_A::NACK,
                }
            }
            #[doc = "Checks if the value of the field is `ACK`"]
            #[inline(always)]
            pub fn is_ack(&self) -> bool {
                *self == NACK_A::ACK
            }
            #[doc = "Checks if the value of the field is `NACK`"]
            #[inline(always)]
            pub fn is_nack(&self) -> bool {
                *self == NACK_A::NACK
            }
        }
        #[doc = "Write proxy for field `NACK`"]
        pub struct NACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NACK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: NACK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "an ACK is sent after current received byte"]
            #[inline(always)]
            pub fn ack(self) -> &'a mut W {
                self.variant(NACK_A::ACK)
            }
            #[doc = "a NACK is sent after current received byte"]
            #[inline(always)]
            pub fn nack(self) -> &'a mut W {
                self.variant(NACK_A::NACK)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Stop generation (master mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum STOP_A {
            #[doc = "0: No Stop generation"]
            NOSTOP = 0,
            #[doc = "1: Stop generation after current byte transfer"]
            STOP = 1,
        }
        impl From<STOP_A> for bool {
            #[inline(always)]
            fn from(variant: STOP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `STOP`"]
        pub type STOP_R = crate::R<bool, STOP_A>;
        impl STOP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STOP_A {
                match self.bits {
                    false => STOP_A::NOSTOP,
                    true => STOP_A::STOP,
                }
            }
            #[doc = "Checks if the value of the field is `NOSTOP`"]
            #[inline(always)]
            pub fn is_no_stop(&self) -> bool {
                *self == STOP_A::NOSTOP
            }
            #[doc = "Checks if the value of the field is `STOP`"]
            #[inline(always)]
            pub fn is_stop(&self) -> bool {
                *self == STOP_A::STOP
            }
        }
        #[doc = "Write proxy for field `STOP`"]
        pub struct STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STOP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No Stop generation"]
            #[inline(always)]
            pub fn no_stop(self) -> &'a mut W {
                self.variant(STOP_A::NOSTOP)
            }
            #[doc = "Stop generation after current byte transfer"]
            #[inline(always)]
            pub fn stop(self) -> &'a mut W {
                self.variant(STOP_A::STOP)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Start generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum START_A {
            #[doc = "0: No Start generation"]
            NOSTART = 0,
            #[doc = "1: Restart/Start generation"]
            START = 1,
        }
        impl From<START_A> for bool {
            #[inline(always)]
            fn from(variant: START_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `START`"]
        pub type START_R = crate::R<bool, START_A>;
        impl START_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> START_A {
                match self.bits {
                    false => START_A::NOSTART,
                    true => START_A::START,
                }
            }
            #[doc = "Checks if the value of the field is `NOSTART`"]
            #[inline(always)]
            pub fn is_no_start(&self) -> bool {
                *self == START_A::NOSTART
            }
            #[doc = "Checks if the value of the field is `START`"]
            #[inline(always)]
            pub fn is_start(&self) -> bool {
                *self == START_A::START
            }
        }
        #[doc = "Write proxy for field `START`"]
        pub struct START_W<'a> {
            w: &'a mut W,
        }
        impl<'a> START_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: START_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No Start generation"]
            #[inline(always)]
            pub fn no_start(self) -> &'a mut W {
                self.variant(START_A::NOSTART)
            }
            #[doc = "Restart/Start generation"]
            #[inline(always)]
            pub fn start(self) -> &'a mut W {
                self.variant(START_A::START)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "10-bit address header only read direction (master receiver mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HEAD10R_A {
            #[doc = "0: The master sends the complete 10 bit slave address read sequence"]
            COMPLETE = 0,
            #[doc = "1: The master only sends the 1st 7 bits of the 10 bit address, followed by Read direction"]
            PARTIAL = 1,
        }
        impl From<HEAD10R_A> for bool {
            #[inline(always)]
            fn from(variant: HEAD10R_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HEAD10R`"]
        pub type HEAD10R_R = crate::R<bool, HEAD10R_A>;
        impl HEAD10R_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HEAD10R_A {
                match self.bits {
                    false => HEAD10R_A::COMPLETE,
                    true => HEAD10R_A::PARTIAL,
                }
            }
            #[doc = "Checks if the value of the field is `COMPLETE`"]
            #[inline(always)]
            pub fn is_complete(&self) -> bool {
                *self == HEAD10R_A::COMPLETE
            }
            #[doc = "Checks if the value of the field is `PARTIAL`"]
            #[inline(always)]
            pub fn is_partial(&self) -> bool {
                *self == HEAD10R_A::PARTIAL
            }
        }
        #[doc = "Write proxy for field `HEAD10R`"]
        pub struct HEAD10R_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEAD10R_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HEAD10R_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The master sends the complete 10 bit slave address read sequence"]
            #[inline(always)]
            pub fn complete(self) -> &'a mut W {
                self.variant(HEAD10R_A::COMPLETE)
            }
            #[doc = "The master only sends the 1st 7 bits of the 10 bit address, followed by Read direction"]
            #[inline(always)]
            pub fn partial(self) -> &'a mut W {
                self.variant(HEAD10R_A::PARTIAL)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "10-bit addressing mode (master mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADD10_A {
            #[doc = "0: The master operates in 7-bit addressing mode"]
            BIT7 = 0,
            #[doc = "1: The master operates in 10-bit addressing mode"]
            BIT10 = 1,
        }
        impl From<ADD10_A> for bool {
            #[inline(always)]
            fn from(variant: ADD10_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADD10`"]
        pub type ADD10_R = crate::R<bool, ADD10_A>;
        impl ADD10_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADD10_A {
                match self.bits {
                    false => ADD10_A::BIT7,
                    true => ADD10_A::BIT10,
                }
            }
            #[doc = "Checks if the value of the field is `BIT7`"]
            #[inline(always)]
            pub fn is_bit7(&self) -> bool {
                *self == ADD10_A::BIT7
            }
            #[doc = "Checks if the value of the field is `BIT10`"]
            #[inline(always)]
            pub fn is_bit10(&self) -> bool {
                *self == ADD10_A::BIT10
            }
        }
        #[doc = "Write proxy for field `ADD10`"]
        pub struct ADD10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADD10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The master operates in 7-bit addressing mode"]
            #[inline(always)]
            pub fn bit7(self) -> &'a mut W {
                self.variant(ADD10_A::BIT7)
            }
            #[doc = "The master operates in 10-bit addressing mode"]
            #[inline(always)]
            pub fn bit10(self) -> &'a mut W {
                self.variant(ADD10_A::BIT10)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Transfer direction (master mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RD_WRN_A {
            #[doc = "0: Master requests a write transfer"]
            WRITE = 0,
            #[doc = "1: Master requests a read transfer"]
            READ = 1,
        }
        impl From<RD_WRN_A> for bool {
            #[inline(always)]
            fn from(variant: RD_WRN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RD_WRN`"]
        pub type RD_WRN_R = crate::R<bool, RD_WRN_A>;
        impl RD_WRN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RD_WRN_A {
                match self.bits {
                    false => RD_WRN_A::WRITE,
                    true => RD_WRN_A::READ,
                }
            }
            #[doc = "Checks if the value of the field is `WRITE`"]
            #[inline(always)]
            pub fn is_write(&self) -> bool {
                *self == RD_WRN_A::WRITE
            }
            #[doc = "Checks if the value of the field is `READ`"]
            #[inline(always)]
            pub fn is_read(&self) -> bool {
                *self == RD_WRN_A::READ
            }
        }
        #[doc = "Write proxy for field `RD_WRN`"]
        pub struct RD_WRN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RD_WRN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RD_WRN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Master requests a write transfer"]
            #[inline(always)]
            pub fn write(self) -> &'a mut W {
                self.variant(RD_WRN_A::WRITE)
            }
            #[doc = "Master requests a read transfer"]
            #[inline(always)]
            pub fn read(self) -> &'a mut W {
                self.variant(RD_WRN_A::READ)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `SADD`"]
        pub type SADD_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `SADD`"]
        pub struct SADD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SADD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03ff) | ((value as u32) & 0x03ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 26 - Packet error checking byte"]
            #[inline(always)]
            pub fn pecbyte(&self) -> PECBYTE_R {
                PECBYTE_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Automatic end mode (master mode)"]
            #[inline(always)]
            pub fn autoend(&self) -> AUTOEND_R {
                AUTOEND_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - NBYTES reload mode"]
            #[inline(always)]
            pub fn reload(&self) -> RELOAD_R {
                RELOAD_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bits 16:23 - Number of bytes"]
            #[inline(always)]
            pub fn nbytes(&self) -> NBYTES_R {
                NBYTES_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bit 15 - NACK generation (slave mode)"]
            #[inline(always)]
            pub fn nack(&self) -> NACK_R {
                NACK_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Stop generation (master mode)"]
            #[inline(always)]
            pub fn stop(&self) -> STOP_R {
                STOP_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Start generation"]
            #[inline(always)]
            pub fn start(&self) -> START_R {
                START_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - 10-bit address header only read direction (master receiver mode)"]
            #[inline(always)]
            pub fn head10r(&self) -> HEAD10R_R {
                HEAD10R_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - 10-bit addressing mode (master mode)"]
            #[inline(always)]
            pub fn add10(&self) -> ADD10_R {
                ADD10_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Transfer direction (master mode)"]
            #[inline(always)]
            pub fn rd_wrn(&self) -> RD_WRN_R {
                RD_WRN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 0:9 - Slave address bit 9:8 (master mode)"]
            #[inline(always)]
            pub fn sadd(&self) -> SADD_R {
                SADD_R::new((self.bits & 0x03ff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 26 - Packet error checking byte"]
            #[inline(always)]
            pub fn pecbyte(&mut self) -> PECBYTE_W {
                PECBYTE_W { w: self }
            }
            #[doc = "Bit 25 - Automatic end mode (master mode)"]
            #[inline(always)]
            pub fn autoend(&mut self) -> AUTOEND_W {
                AUTOEND_W { w: self }
            }
            #[doc = "Bit 24 - NBYTES reload mode"]
            #[inline(always)]
            pub fn reload(&mut self) -> RELOAD_W {
                RELOAD_W { w: self }
            }
            #[doc = "Bits 16:23 - Number of bytes"]
            #[inline(always)]
            pub fn nbytes(&mut self) -> NBYTES_W {
                NBYTES_W { w: self }
            }
            #[doc = "Bit 15 - NACK generation (slave mode)"]
            #[inline(always)]
            pub fn nack(&mut self) -> NACK_W {
                NACK_W { w: self }
            }
            #[doc = "Bit 14 - Stop generation (master mode)"]
            #[inline(always)]
            pub fn stop(&mut self) -> STOP_W {
                STOP_W { w: self }
            }
            #[doc = "Bit 13 - Start generation"]
            #[inline(always)]
            pub fn start(&mut self) -> START_W {
                START_W { w: self }
            }
            #[doc = "Bit 12 - 10-bit address header only read direction (master receiver mode)"]
            #[inline(always)]
            pub fn head10r(&mut self) -> HEAD10R_W {
                HEAD10R_W { w: self }
            }
            #[doc = "Bit 11 - 10-bit addressing mode (master mode)"]
            #[inline(always)]
            pub fn add10(&mut self) -> ADD10_W {
                ADD10_W { w: self }
            }
            #[doc = "Bit 10 - Transfer direction (master mode)"]
            #[inline(always)]
            pub fn rd_wrn(&mut self) -> RD_WRN_W {
                RD_WRN_W { w: self }
            }
            #[doc = "Bits 0:9 - Slave address bit 9:8 (master mode)"]
            #[inline(always)]
            pub fn sadd(&mut self) -> SADD_W {
                SADD_W { w: self }
            }
        }
    }
    #[doc = "Own address register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [oar1](oar1) module"]
    pub type OAR1 = crate::Reg<u32, _OAR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OAR1;
    #[doc = "`read()` method returns [oar1::R](oar1::R) reader structure"]
    impl crate::Readable for OAR1 {}
    #[doc = "`write(|w| ..)` method takes [oar1::W](oar1::W) writer structure"]
    impl crate::Writable for OAR1 {}
    #[doc = "Own address register 1"]
    pub mod oar1 {
        #[doc = "Reader of register OAR1"]
        pub type R = crate::R<u32, super::OAR1>;
        #[doc = "Writer for register OAR1"]
        pub type W = crate::W<u32, super::OAR1>;
        #[doc = "Register OAR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::OAR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Own Address 1 10-bit mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OA1MODE_A {
            #[doc = "0: Own address 1 is a 7-bit address"]
            BIT7 = 0,
            #[doc = "1: Own address 1 is a 10-bit address"]
            BIT10 = 1,
        }
        impl From<OA1MODE_A> for bool {
            #[inline(always)]
            fn from(variant: OA1MODE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OA1MODE`"]
        pub type OA1MODE_R = crate::R<bool, OA1MODE_A>;
        impl OA1MODE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OA1MODE_A {
                match self.bits {
                    false => OA1MODE_A::BIT7,
                    true => OA1MODE_A::BIT10,
                }
            }
            #[doc = "Checks if the value of the field is `BIT7`"]
            #[inline(always)]
            pub fn is_bit7(&self) -> bool {
                *self == OA1MODE_A::BIT7
            }
            #[doc = "Checks if the value of the field is `BIT10`"]
            #[inline(always)]
            pub fn is_bit10(&self) -> bool {
                *self == OA1MODE_A::BIT10
            }
        }
        #[doc = "Write proxy for field `OA1MODE`"]
        pub struct OA1MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OA1MODE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OA1MODE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Own address 1 is a 7-bit address"]
            #[inline(always)]
            pub fn bit7(self) -> &'a mut W {
                self.variant(OA1MODE_A::BIT7)
            }
            #[doc = "Own address 1 is a 10-bit address"]
            #[inline(always)]
            pub fn bit10(self) -> &'a mut W {
                self.variant(OA1MODE_A::BIT10)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Own Address 1 enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OA1EN_A {
            #[doc = "0: Own address 1 disabled. The received slave address OA1 is NACKed"]
            DISABLED = 0,
            #[doc = "1: Own address 1 enabled. The received slave address OA1 is ACKed"]
            ENABLED = 1,
        }
        impl From<OA1EN_A> for bool {
            #[inline(always)]
            fn from(variant: OA1EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OA1EN`"]
        pub type OA1EN_R = crate::R<bool, OA1EN_A>;
        impl OA1EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OA1EN_A {
                match self.bits {
                    false => OA1EN_A::DISABLED,
                    true => OA1EN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OA1EN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OA1EN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OA1EN`"]
        pub struct OA1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OA1EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OA1EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Own address 1 disabled. The received slave address OA1 is NACKed"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OA1EN_A::DISABLED)
            }
            #[doc = "Own address 1 enabled. The received slave address OA1 is ACKed"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OA1EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `OA1`"]
        pub type OA1_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `OA1`"]
        pub struct OA1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OA1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03ff) | ((value as u32) & 0x03ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 10 - Own Address 1 10-bit mode"]
            #[inline(always)]
            pub fn oa1mode(&self) -> OA1MODE_R {
                OA1MODE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Own Address 1 enable"]
            #[inline(always)]
            pub fn oa1en(&self) -> OA1EN_R {
                OA1EN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 0:9 - Interface address"]
            #[inline(always)]
            pub fn oa1(&self) -> OA1_R {
                OA1_R::new((self.bits & 0x03ff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 10 - Own Address 1 10-bit mode"]
            #[inline(always)]
            pub fn oa1mode(&mut self) -> OA1MODE_W {
                OA1MODE_W { w: self }
            }
            #[doc = "Bit 15 - Own Address 1 enable"]
            #[inline(always)]
            pub fn oa1en(&mut self) -> OA1EN_W {
                OA1EN_W { w: self }
            }
            #[doc = "Bits 0:9 - Interface address"]
            #[inline(always)]
            pub fn oa1(&mut self) -> OA1_W {
                OA1_W { w: self }
            }
        }
    }
    #[doc = "Own address register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [oar2](oar2) module"]
    pub type OAR2 = crate::Reg<u32, _OAR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OAR2;
    #[doc = "`read()` method returns [oar2::R](oar2::R) reader structure"]
    impl crate::Readable for OAR2 {}
    #[doc = "`write(|w| ..)` method takes [oar2::W](oar2::W) writer structure"]
    impl crate::Writable for OAR2 {}
    #[doc = "Own address register 2"]
    pub mod oar2 {
        #[doc = "Reader of register OAR2"]
        pub type R = crate::R<u32, super::OAR2>;
        #[doc = "Writer for register OAR2"]
        pub type W = crate::W<u32, super::OAR2>;
        #[doc = "Register OAR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::OAR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OA2`"]
        pub type OA2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OA2`"]
        pub struct OA2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OA2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 1)) | (((value as u32) & 0x7f) << 1);
                self.w
            }
        }
        #[doc = "Own Address 2 masks\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OA2MSK_A {
            #[doc = "0: No mask"]
            NOMASK = 0,
            #[doc = "1: OA2\\[1\\]
is masked and don’t care. Only OA2\\[7:2\\]
are compared"]
            MASK1 = 1,
            #[doc = "2: OA2\\[2:1\\]
are masked and don’t care. Only OA2\\[7:3\\]
are compared"]
            MASK2 = 2,
            #[doc = "3: OA2\\[3:1\\]
are masked and don’t care. Only OA2\\[7:4\\]
are compared"]
            MASK3 = 3,
            #[doc = "4: OA2\\[4:1\\]
are masked and don’t care. Only OA2\\[7:5\\]
are compared"]
            MASK4 = 4,
            #[doc = "5: OA2\\[5:1\\]
are masked and don’t care. Only OA2\\[7:6\\]
are compared"]
            MASK5 = 5,
            #[doc = "6: OA2\\[6:1\\]
are masked and don’t care. Only OA2\\[7\\]
is compared."]
            MASK6 = 6,
            #[doc = "7: OA2\\[7:1\\]
are masked and don’t care. No comparison is done, and all (except reserved) 7-bit received addresses are acknowledged"]
            MASK7 = 7,
        }
        impl From<OA2MSK_A> for u8 {
            #[inline(always)]
            fn from(variant: OA2MSK_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `OA2MSK`"]
        pub type OA2MSK_R = crate::R<u8, OA2MSK_A>;
        impl OA2MSK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OA2MSK_A {
                match self.bits {
                    0 => OA2MSK_A::NOMASK,
                    1 => OA2MSK_A::MASK1,
                    2 => OA2MSK_A::MASK2,
                    3 => OA2MSK_A::MASK3,
                    4 => OA2MSK_A::MASK4,
                    5 => OA2MSK_A::MASK5,
                    6 => OA2MSK_A::MASK6,
                    7 => OA2MSK_A::MASK7,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `NOMASK`"]
            #[inline(always)]
            pub fn is_no_mask(&self) -> bool {
                *self == OA2MSK_A::NOMASK
            }
            #[doc = "Checks if the value of the field is `MASK1`"]
            #[inline(always)]
            pub fn is_mask1(&self) -> bool {
                *self == OA2MSK_A::MASK1
            }
            #[doc = "Checks if the value of the field is `MASK2`"]
            #[inline(always)]
            pub fn is_mask2(&self) -> bool {
                *self == OA2MSK_A::MASK2
            }
            #[doc = "Checks if the value of the field is `MASK3`"]
            #[inline(always)]
            pub fn is_mask3(&self) -> bool {
                *self == OA2MSK_A::MASK3
            }
            #[doc = "Checks if the value of the field is `MASK4`"]
            #[inline(always)]
            pub fn is_mask4(&self) -> bool {
                *self == OA2MSK_A::MASK4
            }
            #[doc = "Checks if the value of the field is `MASK5`"]
            #[inline(always)]
            pub fn is_mask5(&self) -> bool {
                *self == OA2MSK_A::MASK5
            }
            #[doc = "Checks if the value of the field is `MASK6`"]
            #[inline(always)]
            pub fn is_mask6(&self) -> bool {
                *self == OA2MSK_A::MASK6
            }
            #[doc = "Checks if the value of the field is `MASK7`"]
            #[inline(always)]
            pub fn is_mask7(&self) -> bool {
                *self == OA2MSK_A::MASK7
            }
        }
        #[doc = "Write proxy for field `OA2MSK`"]
        pub struct OA2MSK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OA2MSK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OA2MSK_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No mask"]
            #[inline(always)]
            pub fn no_mask(self) -> &'a mut W {
                self.variant(OA2MSK_A::NOMASK)
            }
            #[doc = "OA2\\[1\\]
is masked and don’t care. Only OA2\\[7:2\\]
are compared"]
            #[inline(always)]
            pub fn mask1(self) -> &'a mut W {
                self.variant(OA2MSK_A::MASK1)
            }
            #[doc = "OA2\\[2:1\\]
are masked and don’t care. Only OA2\\[7:3\\]
are compared"]
            #[inline(always)]
            pub fn mask2(self) -> &'a mut W {
                self.variant(OA2MSK_A::MASK2)
            }
            #[doc = "OA2\\[3:1\\]
are masked and don’t care. Only OA2\\[7:4\\]
are compared"]
            #[inline(always)]
            pub fn mask3(self) -> &'a mut W {
                self.variant(OA2MSK_A::MASK3)
            }
            #[doc = "OA2\\[4:1\\]
are masked and don’t care. Only OA2\\[7:5\\]
are compared"]
            #[inline(always)]
            pub fn mask4(self) -> &'a mut W {
                self.variant(OA2MSK_A::MASK4)
            }
            #[doc = "OA2\\[5:1\\]
are masked and don’t care. Only OA2\\[7:6\\]
are compared"]
            #[inline(always)]
            pub fn mask5(self) -> &'a mut W {
                self.variant(OA2MSK_A::MASK5)
            }
            #[doc = "OA2\\[6:1\\]
are masked and don’t care. Only OA2\\[7\\]
is compared."]
            #[inline(always)]
            pub fn mask6(self) -> &'a mut W {
                self.variant(OA2MSK_A::MASK6)
            }
            #[doc = "OA2\\[7:1\\]
are masked and don’t care. No comparison is done, and all (except reserved) 7-bit received addresses are acknowledged"]
            #[inline(always)]
            pub fn mask7(self) -> &'a mut W {
                self.variant(OA2MSK_A::MASK7)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 8)) | (((value as u32) & 0x07) << 8);
                self.w
            }
        }
        #[doc = "Own Address 2 enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OA2EN_A {
            #[doc = "0: Own address 2 disabled. The received slave address OA2 is NACKed"]
            DISABLED = 0,
            #[doc = "1: Own address 2 enabled. The received slave address OA2 is ACKed"]
            ENABLED = 1,
        }
        impl From<OA2EN_A> for bool {
            #[inline(always)]
            fn from(variant: OA2EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OA2EN`"]
        pub type OA2EN_R = crate::R<bool, OA2EN_A>;
        impl OA2EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OA2EN_A {
                match self.bits {
                    false => OA2EN_A::DISABLED,
                    true => OA2EN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OA2EN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OA2EN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OA2EN`"]
        pub struct OA2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OA2EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OA2EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Own address 2 disabled. The received slave address OA2 is NACKed"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OA2EN_A::DISABLED)
            }
            #[doc = "Own address 2 enabled. The received slave address OA2 is ACKed"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OA2EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 1:7 - Interface address"]
            #[inline(always)]
            pub fn oa2(&self) -> OA2_R {
                OA2_R::new(((self.bits >> 1) & 0x7f) as u8)
            }
            #[doc = "Bits 8:10 - Own Address 2 masks"]
            #[inline(always)]
            pub fn oa2msk(&self) -> OA2MSK_R {
                OA2MSK_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bit 15 - Own Address 2 enable"]
            #[inline(always)]
            pub fn oa2en(&self) -> OA2EN_R {
                OA2EN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 1:7 - Interface address"]
            #[inline(always)]
            pub fn oa2(&mut self) -> OA2_W {
                OA2_W { w: self }
            }
            #[doc = "Bits 8:10 - Own Address 2 masks"]
            #[inline(always)]
            pub fn oa2msk(&mut self) -> OA2MSK_W {
                OA2MSK_W { w: self }
            }
            #[doc = "Bit 15 - Own Address 2 enable"]
            #[inline(always)]
            pub fn oa2en(&mut self) -> OA2EN_W {
                OA2EN_W { w: self }
            }
        }
    }
    #[doc = "Timing register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [timingr](timingr) module"]
    pub type TIMINGR = crate::Reg<u32, _TIMINGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TIMINGR;
    #[doc = "`read()` method returns [timingr::R](timingr::R) reader structure"]
    impl crate::Readable for TIMINGR {}
    #[doc = "`write(|w| ..)` method takes [timingr::W](timingr::W) writer structure"]
    impl crate::Writable for TIMINGR {}
    #[doc = "Timing register"]
    pub mod timingr {
        #[doc = "Reader of register TIMINGR"]
        pub type R = crate::R<u32, super::TIMINGR>;
        #[doc = "Writer for register TIMINGR"]
        pub type W = crate::W<u32, super::TIMINGR>;
        #[doc = "Register TIMINGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TIMINGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SCLL`"]
        pub type SCLL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SCLL`"]
        pub struct SCLL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCLL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "Reader of field `SCLH`"]
        pub type SCLH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SCLH`"]
        pub struct SCLH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCLH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `SDADEL`"]
        pub type SDADEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SDADEL`"]
        pub struct SDADEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDADEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SCLDEL`"]
        pub type SCLDEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SCLDEL`"]
        pub struct SCLDEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCLDEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `PRESC`"]
        pub type PRESC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PRESC`"]
        pub struct PRESC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRESC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - SCL low period (master mode)"]
            #[inline(always)]
            pub fn scll(&self) -> SCLL_R {
                SCLL_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - SCL high period (master mode)"]
            #[inline(always)]
            pub fn sclh(&self) -> SCLH_R {
                SCLH_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:19 - Data hold time"]
            #[inline(always)]
            pub fn sdadel(&self) -> SDADEL_R {
                SDADEL_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Data setup time"]
            #[inline(always)]
            pub fn scldel(&self) -> SCLDEL_R {
                SCLDEL_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 28:31 - Timing prescaler"]
            #[inline(always)]
            pub fn presc(&self) -> PRESC_R {
                PRESC_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - SCL low period (master mode)"]
            #[inline(always)]
            pub fn scll(&mut self) -> SCLL_W {
                SCLL_W { w: self }
            }
            #[doc = "Bits 8:15 - SCL high period (master mode)"]
            #[inline(always)]
            pub fn sclh(&mut self) -> SCLH_W {
                SCLH_W { w: self }
            }
            #[doc = "Bits 16:19 - Data hold time"]
            #[inline(always)]
            pub fn sdadel(&mut self) -> SDADEL_W {
                SDADEL_W { w: self }
            }
            #[doc = "Bits 20:23 - Data setup time"]
            #[inline(always)]
            pub fn scldel(&mut self) -> SCLDEL_W {
                SCLDEL_W { w: self }
            }
            #[doc = "Bits 28:31 - Timing prescaler"]
            #[inline(always)]
            pub fn presc(&mut self) -> PRESC_W {
                PRESC_W { w: self }
            }
        }
    }
    #[doc = "Status register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [timeoutr](timeoutr) module"]
    pub type TIMEOUTR = crate::Reg<u32, _TIMEOUTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TIMEOUTR;
    #[doc = "`read()` method returns [timeoutr::R](timeoutr::R) reader structure"]
    impl crate::Readable for TIMEOUTR {}
    #[doc = "`write(|w| ..)` method takes [timeoutr::W](timeoutr::W) writer structure"]
    impl crate::Writable for TIMEOUTR {}
    #[doc = "Status register 1"]
    pub mod timeoutr {
        #[doc = "Reader of register TIMEOUTR"]
        pub type R = crate::R<u32, super::TIMEOUTR>;
        #[doc = "Writer for register TIMEOUTR"]
        pub type W = crate::W<u32, super::TIMEOUTR>;
        #[doc = "Register TIMEOUTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TIMEOUTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TIMEOUTA`"]
        pub type TIMEOUTA_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `TIMEOUTA`"]
        pub struct TIMEOUTA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMEOUTA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        #[doc = "Idle clock timeout detection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIDLE_A {
            #[doc = "0: TIMEOUTA is used to detect SCL low timeout"]
            DISABLED = 0,
            #[doc = "1: TIMEOUTA is used to detect both SCL and SDA high timeout (bus idle condition)"]
            ENABLED = 1,
        }
        impl From<TIDLE_A> for bool {
            #[inline(always)]
            fn from(variant: TIDLE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIDLE`"]
        pub type TIDLE_R = crate::R<bool, TIDLE_A>;
        impl TIDLE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIDLE_A {
                match self.bits {
                    false => TIDLE_A::DISABLED,
                    true => TIDLE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TIDLE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TIDLE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TIDLE`"]
        pub struct TIDLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIDLE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIDLE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIMEOUTA is used to detect SCL low timeout"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIDLE_A::DISABLED)
            }
            #[doc = "TIMEOUTA is used to detect both SCL and SDA high timeout (bus idle condition)"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIDLE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Clock timeout enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIMOUTEN_A {
            #[doc = "0: SCL timeout detection is disabled"]
            DISABLED = 0,
            #[doc = "1: SCL timeout detection is enabled"]
            ENABLED = 1,
        }
        impl From<TIMOUTEN_A> for bool {
            #[inline(always)]
            fn from(variant: TIMOUTEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIMOUTEN`"]
        pub type TIMOUTEN_R = crate::R<bool, TIMOUTEN_A>;
        impl TIMOUTEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIMOUTEN_A {
                match self.bits {
                    false => TIMOUTEN_A::DISABLED,
                    true => TIMOUTEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TIMOUTEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TIMOUTEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TIMOUTEN`"]
        pub struct TIMOUTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMOUTEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIMOUTEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SCL timeout detection is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIMOUTEN_A::DISABLED)
            }
            #[doc = "SCL timeout detection is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIMOUTEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `TIMEOUTB`"]
        pub type TIMEOUTB_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `TIMEOUTB`"]
        pub struct TIMEOUTB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMEOUTB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 16)) | (((value as u32) & 0x0fff) << 16);
                self.w
            }
        }
        #[doc = "Extended clock timeout enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TEXTEN_A {
            #[doc = "0: Extended clock timeout detection is disabled"]
            DISABLED = 0,
            #[doc = "1: Extended clock timeout detection is enabled"]
            ENABLED = 1,
        }
        impl From<TEXTEN_A> for bool {
            #[inline(always)]
            fn from(variant: TEXTEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TEXTEN`"]
        pub type TEXTEN_R = crate::R<bool, TEXTEN_A>;
        impl TEXTEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TEXTEN_A {
                match self.bits {
                    false => TEXTEN_A::DISABLED,
                    true => TEXTEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TEXTEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TEXTEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TEXTEN`"]
        pub struct TEXTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEXTEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TEXTEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Extended clock timeout detection is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TEXTEN_A::DISABLED)
            }
            #[doc = "Extended clock timeout detection is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TEXTEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Bus timeout A"]
            #[inline(always)]
            pub fn timeouta(&self) -> TIMEOUTA_R {
                TIMEOUTA_R::new((self.bits & 0x0fff) as u16)
            }
            #[doc = "Bit 12 - Idle clock timeout detection"]
            #[inline(always)]
            pub fn tidle(&self) -> TIDLE_R {
                TIDLE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Clock timeout enable"]
            #[inline(always)]
            pub fn timouten(&self) -> TIMOUTEN_R {
                TIMOUTEN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 16:27 - Bus timeout B"]
            #[inline(always)]
            pub fn timeoutb(&self) -> TIMEOUTB_R {
                TIMEOUTB_R::new(((self.bits >> 16) & 0x0fff) as u16)
            }
            #[doc = "Bit 31 - Extended clock timeout enable"]
            #[inline(always)]
            pub fn texten(&self) -> TEXTEN_R {
                TEXTEN_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Bus timeout A"]
            #[inline(always)]
            pub fn timeouta(&mut self) -> TIMEOUTA_W {
                TIMEOUTA_W { w: self }
            }
            #[doc = "Bit 12 - Idle clock timeout detection"]
            #[inline(always)]
            pub fn tidle(&mut self) -> TIDLE_W {
                TIDLE_W { w: self }
            }
            #[doc = "Bit 15 - Clock timeout enable"]
            #[inline(always)]
            pub fn timouten(&mut self) -> TIMOUTEN_W {
                TIMOUTEN_W { w: self }
            }
            #[doc = "Bits 16:27 - Bus timeout B"]
            #[inline(always)]
            pub fn timeoutb(&mut self) -> TIMEOUTB_W {
                TIMEOUTB_W { w: self }
            }
            #[doc = "Bit 31 - Extended clock timeout enable"]
            #[inline(always)]
            pub fn texten(&mut self) -> TEXTEN_W {
                TEXTEN_W { w: self }
            }
        }
    }
    #[doc = "Interrupt and Status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr](isr) module"]
    pub type ISR = crate::Reg<u32, _ISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISR;
    #[doc = "`read()` method returns [isr::R](isr::R) reader structure"]
    impl crate::Readable for ISR {}
    #[doc = "`write(|w| ..)` method takes [isr::W](isr::W) writer structure"]
    impl crate::Writable for ISR {}
    #[doc = "Interrupt and Status register"]
    pub mod isr {
        #[doc = "Reader of register ISR"]
        pub type R = crate::R<u32, super::ISR>;
        #[doc = "Writer for register ISR"]
        pub type W = crate::W<u32, super::ISR>;
        #[doc = "Register ISR `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::ISR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `ADDCODE`"]
        pub type ADDCODE_R = crate::R<u8, u8>;
        #[doc = "Transfer direction (Slave mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DIR_A {
            #[doc = "0: Write transfer, slave enters receiver mode"]
            WRITE = 0,
            #[doc = "1: Read transfer, slave enters transmitter mode"]
            READ = 1,
        }
        impl From<DIR_A> for bool {
            #[inline(always)]
            fn from(variant: DIR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, DIR_A>;
        impl DIR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DIR_A {
                match self.bits {
                    false => DIR_A::WRITE,
                    true => DIR_A::READ,
                }
            }
            #[doc = "Checks if the value of the field is `WRITE`"]
            #[inline(always)]
            pub fn is_write(&self) -> bool {
                *self == DIR_A::WRITE
            }
            #[doc = "Checks if the value of the field is `READ`"]
            #[inline(always)]
            pub fn is_read(&self) -> bool {
                *self == DIR_A::READ
            }
        }
        #[doc = "Bus busy\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BUSY_A {
            #[doc = "0: No communication is in progress on the bus"]
            NOTBUSY = 0,
            #[doc = "1: A communication is in progress on the bus"]
            BUSY = 1,
        }
        impl From<BUSY_A> for bool {
            #[inline(always)]
            fn from(variant: BUSY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BUSY`"]
        pub type BUSY_R = crate::R<bool, BUSY_A>;
        impl BUSY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BUSY_A {
                match self.bits {
                    false => BUSY_A::NOTBUSY,
                    true => BUSY_A::BUSY,
                }
            }
            #[doc = "Checks if the value of the field is `NOTBUSY`"]
            #[inline(always)]
            pub fn is_not_busy(&self) -> bool {
                *self == BUSY_A::NOTBUSY
            }
            #[doc = "Checks if the value of the field is `BUSY`"]
            #[inline(always)]
            pub fn is_busy(&self) -> bool {
                *self == BUSY_A::BUSY
            }
        }
        #[doc = "SMBus alert\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ALERT_A {
            #[doc = "0: SMBA alert is not detected"]
            NOALERT = 0,
            #[doc = "1: SMBA alert event is detected on SMBA pin"]
            ALERT = 1,
        }
        impl From<ALERT_A> for bool {
            #[inline(always)]
            fn from(variant: ALERT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ALERT`"]
        pub type ALERT_R = crate::R<bool, ALERT_A>;
        impl ALERT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ALERT_A {
                match self.bits {
                    false => ALERT_A::NOALERT,
                    true => ALERT_A::ALERT,
                }
            }
            #[doc = "Checks if the value of the field is `NOALERT`"]
            #[inline(always)]
            pub fn is_no_alert(&self) -> bool {
                *self == ALERT_A::NOALERT
            }
            #[doc = "Checks if the value of the field is `ALERT`"]
            #[inline(always)]
            pub fn is_alert(&self) -> bool {
                *self == ALERT_A::ALERT
            }
        }
        #[doc = "Timeout or t_low detection flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIMEOUT_A {
            #[doc = "0: No timeout occured"]
            NOTIMEOUT = 0,
            #[doc = "1: Timeout occured"]
            TIMEOUT = 1,
        }
        impl From<TIMEOUT_A> for bool {
            #[inline(always)]
            fn from(variant: TIMEOUT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIMEOUT`"]
        pub type TIMEOUT_R = crate::R<bool, TIMEOUT_A>;
        impl TIMEOUT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIMEOUT_A {
                match self.bits {
                    false => TIMEOUT_A::NOTIMEOUT,
                    true => TIMEOUT_A::TIMEOUT,
                }
            }
            #[doc = "Checks if the value of the field is `NOTIMEOUT`"]
            #[inline(always)]
            pub fn is_no_timeout(&self) -> bool {
                *self == TIMEOUT_A::NOTIMEOUT
            }
            #[doc = "Checks if the value of the field is `TIMEOUT`"]
            #[inline(always)]
            pub fn is_timeout(&self) -> bool {
                *self == TIMEOUT_A::TIMEOUT
            }
        }
        #[doc = "PEC Error in reception\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PECERR_A {
            #[doc = "0: Received PEC does match with PEC register"]
            MATCH = 0,
            #[doc = "1: Received PEC does not match with PEC register"]
            NOMATCH = 1,
        }
        impl From<PECERR_A> for bool {
            #[inline(always)]
            fn from(variant: PECERR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PECERR`"]
        pub type PECERR_R = crate::R<bool, PECERR_A>;
        impl PECERR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PECERR_A {
                match self.bits {
                    false => PECERR_A::MATCH,
                    true => PECERR_A::NOMATCH,
                }
            }
            #[doc = "Checks if the value of the field is `MATCH`"]
            #[inline(always)]
            pub fn is_match_(&self) -> bool {
                *self == PECERR_A::MATCH
            }
            #[doc = "Checks if the value of the field is `NOMATCH`"]
            #[inline(always)]
            pub fn is_no_match(&self) -> bool {
                *self == PECERR_A::NOMATCH
            }
        }
        #[doc = "Overrun/Underrun (slave mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OVR_A {
            #[doc = "0: No overrun/underrun error occurs"]
            NOOVERRUN = 0,
            #[doc = "1: slave mode with NOSTRETCH=1, when an overrun/underrun error occurs"]
            OVERRUN = 1,
        }
        impl From<OVR_A> for bool {
            #[inline(always)]
            fn from(variant: OVR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OVR`"]
        pub type OVR_R = crate::R<bool, OVR_A>;
        impl OVR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OVR_A {
                match self.bits {
                    false => OVR_A::NOOVERRUN,
                    true => OVR_A::OVERRUN,
                }
            }
            #[doc = "Checks if the value of the field is `NOOVERRUN`"]
            #[inline(always)]
            pub fn is_no_overrun(&self) -> bool {
                *self == OVR_A::NOOVERRUN
            }
            #[doc = "Checks if the value of the field is `OVERRUN`"]
            #[inline(always)]
            pub fn is_overrun(&self) -> bool {
                *self == OVR_A::OVERRUN
            }
        }
        #[doc = "Arbitration lost\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARLO_A {
            #[doc = "0: No arbitration lost"]
            NOTLOST = 0,
            #[doc = "1: Arbitration lost"]
            LOST = 1,
        }
        impl From<ARLO_A> for bool {
            #[inline(always)]
            fn from(variant: ARLO_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ARLO`"]
        pub type ARLO_R = crate::R<bool, ARLO_A>;
        impl ARLO_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ARLO_A {
                match self.bits {
                    false => ARLO_A::NOTLOST,
                    true => ARLO_A::LOST,
                }
            }
            #[doc = "Checks if the value of the field is `NOTLOST`"]
            #[inline(always)]
            pub fn is_not_lost(&self) -> bool {
                *self == ARLO_A::NOTLOST
            }
            #[doc = "Checks if the value of the field is `LOST`"]
            #[inline(always)]
            pub fn is_lost(&self) -> bool {
                *self == ARLO_A::LOST
            }
        }
        #[doc = "Bus error\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BERR_A {
            #[doc = "0: No bus error"]
            NOERROR = 0,
            #[doc = "1: Misplaced Start and Stop condition is detected"]
            ERROR = 1,
        }
        impl From<BERR_A> for bool {
            #[inline(always)]
            fn from(variant: BERR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BERR`"]
        pub type BERR_R = crate::R<bool, BERR_A>;
        impl BERR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BERR_A {
                match self.bits {
                    false => BERR_A::NOERROR,
                    true => BERR_A::ERROR,
                }
            }
            #[doc = "Checks if the value of the field is `NOERROR`"]
            #[inline(always)]
            pub fn is_no_error(&self) -> bool {
                *self == BERR_A::NOERROR
            }
            #[doc = "Checks if the value of the field is `ERROR`"]
            #[inline(always)]
            pub fn is_error(&self) -> bool {
                *self == BERR_A::ERROR
            }
        }
        #[doc = "Transfer Complete Reload\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TCR_A {
            #[doc = "0: Transfer is not complete"]
            NOTCOMPLETE = 0,
            #[doc = "1: NBYTES has been transfered"]
            COMPLETE = 1,
        }
        impl From<TCR_A> for bool {
            #[inline(always)]
            fn from(variant: TCR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TCR`"]
        pub type TCR_R = crate::R<bool, TCR_A>;
        impl TCR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TCR_A {
                match self.bits {
                    false => TCR_A::NOTCOMPLETE,
                    true => TCR_A::COMPLETE,
                }
            }
            #[doc = "Checks if the value of the field is `NOTCOMPLETE`"]
            #[inline(always)]
            pub fn is_not_complete(&self) -> bool {
                *self == TCR_A::NOTCOMPLETE
            }
            #[doc = "Checks if the value of the field is `COMPLETE`"]
            #[inline(always)]
            pub fn is_complete(&self) -> bool {
                *self == TCR_A::COMPLETE
            }
        }
        #[doc = "Transfer Complete (master mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TC_A {
            #[doc = "0: Transfer is not complete"]
            NOTCOMPLETE = 0,
            #[doc = "1: NBYTES has been transfered"]
            COMPLETE = 1,
        }
        impl From<TC_A> for bool {
            #[inline(always)]
            fn from(variant: TC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TC`"]
        pub type TC_R = crate::R<bool, TC_A>;
        impl TC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TC_A {
                match self.bits {
                    false => TC_A::NOTCOMPLETE,
                    true => TC_A::COMPLETE,
                }
            }
            #[doc = "Checks if the value of the field is `NOTCOMPLETE`"]
            #[inline(always)]
            pub fn is_not_complete(&self) -> bool {
                *self == TC_A::NOTCOMPLETE
            }
            #[doc = "Checks if the value of the field is `COMPLETE`"]
            #[inline(always)]
            pub fn is_complete(&self) -> bool {
                *self == TC_A::COMPLETE
            }
        }
        #[doc = "Stop detection flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum STOPF_A {
            #[doc = "0: No Stop condition detected"]
            NOSTOP = 0,
            #[doc = "1: Stop condition detected"]
            STOP = 1,
        }
        impl From<STOPF_A> for bool {
            #[inline(always)]
            fn from(variant: STOPF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `STOPF`"]
        pub type STOPF_R = crate::R<bool, STOPF_A>;
        impl STOPF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STOPF_A {
                match self.bits {
                    false => STOPF_A::NOSTOP,
                    true => STOPF_A::STOP,
                }
            }
            #[doc = "Checks if the value of the field is `NOSTOP`"]
            #[inline(always)]
            pub fn is_no_stop(&self) -> bool {
                *self == STOPF_A::NOSTOP
            }
            #[doc = "Checks if the value of the field is `STOP`"]
            #[inline(always)]
            pub fn is_stop(&self) -> bool {
                *self == STOPF_A::STOP
            }
        }
        #[doc = "Not acknowledge received flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NACKF_A {
            #[doc = "0: No NACK has been received"]
            NONACK = 0,
            #[doc = "1: NACK has been received"]
            NACK = 1,
        }
        impl From<NACKF_A> for bool {
            #[inline(always)]
            fn from(variant: NACKF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `NACKF`"]
        pub type NACKF_R = crate::R<bool, NACKF_A>;
        impl NACKF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> NACKF_A {
                match self.bits {
                    false => NACKF_A::NONACK,
                    true => NACKF_A::NACK,
                }
            }
            #[doc = "Checks if the value of the field is `NONACK`"]
            #[inline(always)]
            pub fn is_no_nack(&self) -> bool {
                *self == NACKF_A::NONACK
            }
            #[doc = "Checks if the value of the field is `NACK`"]
            #[inline(always)]
            pub fn is_nack(&self) -> bool {
                *self == NACKF_A::NACK
            }
        }
        #[doc = "Address matched (slave mode)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADDR_A {
            #[doc = "0: Adress mismatched or not received"]
            NOTMATCH = 0,
            #[doc = "1: Received slave address matched with one of the enabled slave addresses"]
            MATCH = 1,
        }
        impl From<ADDR_A> for bool {
            #[inline(always)]
            fn from(variant: ADDR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADDR`"]
        pub type ADDR_R = crate::R<bool, ADDR_A>;
        impl ADDR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADDR_A {
                match self.bits {
                    false => ADDR_A::NOTMATCH,
                    true => ADDR_A::MATCH,
                }
            }
            #[doc = "Checks if the value of the field is `NOTMATCH`"]
            #[inline(always)]
            pub fn is_not_match(&self) -> bool {
                *self == ADDR_A::NOTMATCH
            }
            #[doc = "Checks if the value of the field is `MATCH`"]
            #[inline(always)]
            pub fn is_match_(&self) -> bool {
                *self == ADDR_A::MATCH
            }
        }
        #[doc = "Receive data register not empty (receivers)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXNE_A {
            #[doc = "0: The RXDR register is empty"]
            EMPTY = 0,
            #[doc = "1: Received data is copied into the RXDR register, and is ready to be read"]
            NOTEMPTY = 1,
        }
        impl From<RXNE_A> for bool {
            #[inline(always)]
            fn from(variant: RXNE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXNE`"]
        pub type RXNE_R = crate::R<bool, RXNE_A>;
        impl RXNE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXNE_A {
                match self.bits {
                    false => RXNE_A::EMPTY,
                    true => RXNE_A::NOTEMPTY,
                }
            }
            #[doc = "Checks if the value of the field is `EMPTY`"]
            #[inline(always)]
            pub fn is_empty(&self) -> bool {
                *self == RXNE_A::EMPTY
            }
            #[doc = "Checks if the value of the field is `NOTEMPTY`"]
            #[inline(always)]
            pub fn is_not_empty(&self) -> bool {
                *self == RXNE_A::NOTEMPTY
            }
        }
        #[doc = "Transmit interrupt status (transmitters)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXIS_A {
            #[doc = "0: The TXDR register is not empty"]
            NOTEMPTY = 0,
            #[doc = "1: The TXDR register is empty and the data to be transmitted must be written in the TXDR register"]
            EMPTY = 1,
        }
        impl From<TXIS_A> for bool {
            #[inline(always)]
            fn from(variant: TXIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TXIS`"]
        pub type TXIS_R = crate::R<bool, TXIS_A>;
        impl TXIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TXIS_A {
                match self.bits {
                    false => TXIS_A::NOTEMPTY,
                    true => TXIS_A::EMPTY,
                }
            }
            #[doc = "Checks if the value of the field is `NOTEMPTY`"]
            #[inline(always)]
            pub fn is_not_empty(&self) -> bool {
                *self == TXIS_A::NOTEMPTY
            }
            #[doc = "Checks if the value of the field is `EMPTY`"]
            #[inline(always)]
            pub fn is_empty(&self) -> bool {
                *self == TXIS_A::EMPTY
            }
        }
        #[doc = "Write proxy for field `TXIS`"]
        pub struct TXIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TXIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The TXDR register is not empty"]
            #[inline(always)]
            pub fn not_empty(self) -> &'a mut W {
                self.variant(TXIS_A::NOTEMPTY)
            }
            #[doc = "The TXDR register is empty and the data to be transmitted must be written in the TXDR register"]
            #[inline(always)]
            pub fn empty(self) -> &'a mut W {
                self.variant(TXIS_A::EMPTY)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Transmit data register empty (transmitters)\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXE_A {
            #[doc = "0: TXDR register not empty"]
            NOTEMPTY = 0,
            #[doc = "1: TXDR register empty"]
            EMPTY = 1,
        }
        impl From<TXE_A> for bool {
            #[inline(always)]
            fn from(variant: TXE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TXE`"]
        pub type TXE_R = crate::R<bool, TXE_A>;
        impl TXE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TXE_A {
                match self.bits {
                    false => TXE_A::NOTEMPTY,
                    true => TXE_A::EMPTY,
                }
            }
            #[doc = "Checks if the value of the field is `NOTEMPTY`"]
            #[inline(always)]
            pub fn is_not_empty(&self) -> bool {
                *self == TXE_A::NOTEMPTY
            }
            #[doc = "Checks if the value of the field is `EMPTY`"]
            #[inline(always)]
            pub fn is_empty(&self) -> bool {
                *self == TXE_A::EMPTY
            }
        }
        #[doc = "Write proxy for field `TXE`"]
        pub struct TXE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TXE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TXDR register not empty"]
            #[inline(always)]
            pub fn not_empty(self) -> &'a mut W {
                self.variant(TXE_A::NOTEMPTY)
            }
            #[doc = "TXDR register empty"]
            #[inline(always)]
            pub fn empty(self) -> &'a mut W {
                self.variant(TXE_A::EMPTY)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 17:23 - Address match code (Slave mode)"]
            #[inline(always)]
            pub fn addcode(&self) -> ADDCODE_R {
                ADDCODE_R::new(((self.bits >> 17) & 0x7f) as u8)
            }
            #[doc = "Bit 16 - Transfer direction (Slave mode)"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Bus busy"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 13 - SMBus alert"]
            #[inline(always)]
            pub fn alert(&self) -> ALERT_R {
                ALERT_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Timeout or t_low detection flag"]
            #[inline(always)]
            pub fn timeout(&self) -> TIMEOUT_R {
                TIMEOUT_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - PEC Error in reception"]
            #[inline(always)]
            pub fn pecerr(&self) -> PECERR_R {
                PECERR_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Overrun/Underrun (slave mode)"]
            #[inline(always)]
            pub fn ovr(&self) -> OVR_R {
                OVR_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Arbitration lost"]
            #[inline(always)]
            pub fn arlo(&self) -> ARLO_R {
                ARLO_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Bus error"]
            #[inline(always)]
            pub fn berr(&self) -> BERR_R {
                BERR_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Transfer Complete Reload"]
            #[inline(always)]
            pub fn tcr(&self) -> TCR_R {
                TCR_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Transfer Complete (master mode)"]
            #[inline(always)]
            pub fn tc(&self) -> TC_R {
                TC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Stop detection flag"]
            #[inline(always)]
            pub fn stopf(&self) -> STOPF_R {
                STOPF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Not acknowledge received flag"]
            #[inline(always)]
            pub fn nackf(&self) -> NACKF_R {
                NACKF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Address matched (slave mode)"]
            #[inline(always)]
            pub fn addr(&self) -> ADDR_R {
                ADDR_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Receive data register not empty (receivers)"]
            #[inline(always)]
            pub fn rxne(&self) -> RXNE_R {
                RXNE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Transmit interrupt status (transmitters)"]
            #[inline(always)]
            pub fn txis(&self) -> TXIS_R {
                TXIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Transmit data register empty (transmitters)"]
            #[inline(always)]
            pub fn txe(&self) -> TXE_R {
                TXE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Transmit interrupt status (transmitters)"]
            #[inline(always)]
            pub fn txis(&mut self) -> TXIS_W {
                TXIS_W { w: self }
            }
            #[doc = "Bit 0 - Transmit data register empty (transmitters)"]
            #[inline(always)]
            pub fn txe(&mut self) -> TXE_W {
                TXE_W { w: self }
            }
        }
    }
    #[doc = "Interrupt clear register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](icr) module"]
    pub type ICR = crate::Reg<u32, _ICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICR;
    #[doc = "`write(|w| ..)` method takes [icr::W](icr::W) writer structure"]
    impl crate::Writable for ICR {}
    #[doc = "Interrupt clear register"]
    pub mod icr {
        #[doc = "Writer for register ICR"]
        pub type W = crate::W<u32, super::ICR>;
        #[doc = "Register ICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Alert flag clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ALERTCF_AW {
            #[doc = "1: Clears the ALERT flag in ISR register"]
            CLEAR = 1,
        }
        impl From<ALERTCF_AW> for bool {
            #[inline(always)]
            fn from(variant: ALERTCF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `ALERTCF`"]
        pub struct ALERTCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALERTCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ALERTCF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the ALERT flag in ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(ALERTCF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Timeout detection flag clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIMOUTCF_AW {
            #[doc = "1: Clears the TIMOUT flag in ISR register"]
            CLEAR = 1,
        }
        impl From<TIMOUTCF_AW> for bool {
            #[inline(always)]
            fn from(variant: TIMOUTCF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `TIMOUTCF`"]
        pub struct TIMOUTCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMOUTCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIMOUTCF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TIMOUT flag in ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(TIMOUTCF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "PEC Error flag clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PECCF_AW {
            #[doc = "1: Clears the PEC flag in ISR register"]
            CLEAR = 1,
        }
        impl From<PECCF_AW> for bool {
            #[inline(always)]
            fn from(variant: PECCF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PECCF`"]
        pub struct PECCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PECCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PECCF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the PEC flag in ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PECCF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Overrun/Underrun flag clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OVRCF_AW {
            #[doc = "1: Clears the OVR flag in ISR register"]
            CLEAR = 1,
        }
        impl From<OVRCF_AW> for bool {
            #[inline(always)]
            fn from(variant: OVRCF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `OVRCF`"]
        pub struct OVRCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVRCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OVRCF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the OVR flag in ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(OVRCF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Arbitration lost flag clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARLOCF_AW {
            #[doc = "1: Clears the ARLO flag in ISR register"]
            CLEAR = 1,
        }
        impl From<ARLOCF_AW> for bool {
            #[inline(always)]
            fn from(variant: ARLOCF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `ARLOCF`"]
        pub struct ARLOCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARLOCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ARLOCF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the ARLO flag in ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(ARLOCF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Bus error flag clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BERRCF_AW {
            #[doc = "1: Clears the BERR flag in ISR register"]
            CLEAR = 1,
        }
        impl From<BERRCF_AW> for bool {
            #[inline(always)]
            fn from(variant: BERRCF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `BERRCF`"]
        pub struct BERRCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BERRCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BERRCF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the BERR flag in ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(BERRCF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Stop detection flag clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum STOPCF_AW {
            #[doc = "1: Clears the STOP flag in ISR register"]
            CLEAR = 1,
        }
        impl From<STOPCF_AW> for bool {
            #[inline(always)]
            fn from(variant: STOPCF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `STOPCF`"]
        pub struct STOPCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOPCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STOPCF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the STOP flag in ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(STOPCF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Not Acknowledge flag clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NACKCF_AW {
            #[doc = "1: Clears the NACK flag in ISR register"]
            CLEAR = 1,
        }
        impl From<NACKCF_AW> for bool {
            #[inline(always)]
            fn from(variant: NACKCF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `NACKCF`"]
        pub struct NACKCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NACKCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: NACKCF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the NACK flag in ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(NACKCF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Address Matched flag clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADDRCF_AW {
            #[doc = "1: Clears the ADDR flag in ISR register"]
            CLEAR = 1,
        }
        impl From<ADDRCF_AW> for bool {
            #[inline(always)]
            fn from(variant: ADDRCF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `ADDRCF`"]
        pub struct ADDRCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDRCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADDRCF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the ADDR flag in ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(ADDRCF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 13 - Alert flag clear"]
            #[inline(always)]
            pub fn alertcf(&mut self) -> ALERTCF_W {
                ALERTCF_W { w: self }
            }
            #[doc = "Bit 12 - Timeout detection flag clear"]
            #[inline(always)]
            pub fn timoutcf(&mut self) -> TIMOUTCF_W {
                TIMOUTCF_W { w: self }
            }
            #[doc = "Bit 11 - PEC Error flag clear"]
            #[inline(always)]
            pub fn peccf(&mut self) -> PECCF_W {
                PECCF_W { w: self }
            }
            #[doc = "Bit 10 - Overrun/Underrun flag clear"]
            #[inline(always)]
            pub fn ovrcf(&mut self) -> OVRCF_W {
                OVRCF_W { w: self }
            }
            #[doc = "Bit 9 - Arbitration lost flag clear"]
            #[inline(always)]
            pub fn arlocf(&mut self) -> ARLOCF_W {
                ARLOCF_W { w: self }
            }
            #[doc = "Bit 8 - Bus error flag clear"]
            #[inline(always)]
            pub fn berrcf(&mut self) -> BERRCF_W {
                BERRCF_W { w: self }
            }
            #[doc = "Bit 5 - Stop detection flag clear"]
            #[inline(always)]
            pub fn stopcf(&mut self) -> STOPCF_W {
                STOPCF_W { w: self }
            }
            #[doc = "Bit 4 - Not Acknowledge flag clear"]
            #[inline(always)]
            pub fn nackcf(&mut self) -> NACKCF_W {
                NACKCF_W { w: self }
            }
            #[doc = "Bit 3 - Address Matched flag clear"]
            #[inline(always)]
            pub fn addrcf(&mut self) -> ADDRCF_W {
                ADDRCF_W { w: self }
            }
        }
    }
    #[doc = "PEC register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pecr](pecr) module"]
    pub type PECR = crate::Reg<u32, _PECR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PECR;
    #[doc = "`read()` method returns [pecr::R](pecr::R) reader structure"]
    impl crate::Readable for PECR {}
    #[doc = "PEC register"]
    pub mod pecr {
        #[doc = "Reader of register PECR"]
        pub type R = crate::R<u32, super::PECR>;
        #[doc = "Reader of field `PEC`"]
        pub type PEC_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - Packet error checking register"]
            #[inline(always)]
            pub fn pec(&self) -> PEC_R {
                PEC_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Receive data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxdr](rxdr) module"]
    pub type RXDR = crate::Reg<u32, _RXDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RXDR;
    #[doc = "`read()` method returns [rxdr::R](rxdr::R) reader structure"]
    impl crate::Readable for RXDR {}
    #[doc = "Receive data register"]
    pub mod rxdr {
        #[doc = "Reader of register RXDR"]
        pub type R = crate::R<u32, super::RXDR>;
        #[doc = "Reader of field `RXDATA`"]
        pub type RXDATA_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - 8-bit receive data"]
            #[inline(always)]
            pub fn rxdata(&self) -> RXDATA_R {
                RXDATA_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Transmit data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [txdr](txdr) module"]
    pub type TXDR = crate::Reg<u32, _TXDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TXDR;
    #[doc = "`read()` method returns [txdr::R](txdr::R) reader structure"]
    impl crate::Readable for TXDR {}
    #[doc = "`write(|w| ..)` method takes [txdr::W](txdr::W) writer structure"]
    impl crate::Writable for TXDR {}
    #[doc = "Transmit data register"]
    pub mod txdr {
        #[doc = "Reader of register TXDR"]
        pub type R = crate::R<u32, super::TXDR>;
        #[doc = "Writer for register TXDR"]
        pub type W = crate::W<u32, super::TXDR>;
        #[doc = "Register TXDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TXDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TXDATA`"]
        pub type TXDATA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TXDATA`"]
        pub struct TXDATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - 8-bit transmit data"]
            #[inline(always)]
            pub fn txdata(&self) -> TXDATA_R {
                TXDATA_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - 8-bit transmit data"]
            #[inline(always)]
            pub fn txdata(&mut self) -> TXDATA_W {
                TXDATA_W { w: self }
            }
        }
    }
}
#[doc = "Inter-integrated circuit"]
pub struct I2C2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C2 {}
impl I2C2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        0x4000_5800 as *const _
    }
}
impl Deref for I2C2 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*I2C2::ptr() }
    }
}
#[doc = "Independent watchdog"]
pub struct IWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IWDG {}
impl IWDG {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const iwdg::RegisterBlock {
        0x4000_3000 as *const _
    }
}
impl Deref for IWDG {
    type Target = iwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*IWDG::ptr() }
    }
}
#[doc = "Independent watchdog"]
pub mod iwdg {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Key register"]
        pub kr: KR,
        #[doc = "0x04 - Prescaler register"]
        pub pr: PR,
        #[doc = "0x08 - Reload register"]
        pub rlr: RLR,
        #[doc = "0x0c - Status register"]
        pub sr: SR,
        #[doc = "0x10 - Window register"]
        pub winr: WINR,
    }
    #[doc = "Key register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [kr](kr) module"]
    pub type KR = crate::Reg<u32, _KR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _KR;
    #[doc = "`write(|w| ..)` method takes [kr::W](kr::W) writer structure"]
    impl crate::Writable for KR {}
    #[doc = "Key register"]
    pub mod kr {
        #[doc = "Writer for register KR"]
        pub type W = crate::W<u32, super::KR>;
        #[doc = "Register KR `reset()`'s with value 0"]
        impl crate::ResetValue for super::KR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Key value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u16)]
        pub enum KEY_AW {
            #[doc = "21845: Enable access to PR, RLR and WINR registers (0x5555)"]
            ENABLE = 21845,
            #[doc = "43690: Reset the watchdog value (0xAAAA)"]
            RESET = 43690,
            #[doc = "52428: Start the watchdog (0xCCCC)"]
            START = 52428,
        }
        impl From<KEY_AW> for u16 {
            #[inline(always)]
            fn from(variant: KEY_AW) -> Self {
                variant as _
            }
        }
        #[doc = "Write proxy for field `KEY`"]
        pub struct KEY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEY_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: KEY_AW) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Enable access to PR, RLR and WINR registers (0x5555)"]
            #[inline(always)]
            pub fn enable(self) -> &'a mut W {
                self.variant(KEY_AW::ENABLE)
            }
            #[doc = "Reset the watchdog value (0xAAAA)"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(KEY_AW::RESET)
            }
            #[doc = "Start the watchdog (0xCCCC)"]
            #[inline(always)]
            pub fn start(self) -> &'a mut W {
                self.variant(KEY_AW::START)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Key value"]
            #[inline(always)]
            pub fn key(&mut self) -> KEY_W {
                KEY_W { w: self }
            }
        }
    }
    #[doc = "Prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pr](pr) module"]
    pub type PR = crate::Reg<u32, _PR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PR;
    #[doc = "`read()` method returns [pr::R](pr::R) reader structure"]
    impl crate::Readable for PR {}
    #[doc = "`write(|w| ..)` method takes [pr::W](pr::W) writer structure"]
    impl crate::Writable for PR {}
    #[doc = "Prescaler register"]
    pub mod pr {
        #[doc = "Reader of register PR"]
        pub type R = crate::R<u32, super::PR>;
        #[doc = "Writer for register PR"]
        pub type W = crate::W<u32, super::PR>;
        #[doc = "Register PR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Prescaler divider\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PR_A {
            #[doc = "0: Divider /4"]
            DIVIDEBY4 = 0,
            #[doc = "1: Divider /8"]
            DIVIDEBY8 = 1,
            #[doc = "2: Divider /16"]
            DIVIDEBY16 = 2,
            #[doc = "3: Divider /32"]
            DIVIDEBY32 = 3,
            #[doc = "4: Divider /64"]
            DIVIDEBY64 = 4,
            #[doc = "5: Divider /128"]
            DIVIDEBY128 = 5,
            #[doc = "6: Divider /256"]
            DIVIDEBY256 = 6,
            #[doc = "7: Divider /256"]
            DIVIDEBY256BIS = 7,
        }
        impl From<PR_A> for u8 {
            #[inline(always)]
            fn from(variant: PR_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PR`"]
        pub type PR_R = crate::R<u8, PR_A>;
        impl PR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PR_A {
                match self.bits {
                    0 => PR_A::DIVIDEBY4,
                    1 => PR_A::DIVIDEBY8,
                    2 => PR_A::DIVIDEBY16,
                    3 => PR_A::DIVIDEBY32,
                    4 => PR_A::DIVIDEBY64,
                    5 => PR_A::DIVIDEBY128,
                    6 => PR_A::DIVIDEBY256,
                    7 => PR_A::DIVIDEBY256BIS,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY4`"]
            #[inline(always)]
            pub fn is_divide_by4(&self) -> bool {
                *self == PR_A::DIVIDEBY4
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY8`"]
            #[inline(always)]
            pub fn is_divide_by8(&self) -> bool {
                *self == PR_A::DIVIDEBY8
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY16`"]
            #[inline(always)]
            pub fn is_divide_by16(&self) -> bool {
                *self == PR_A::DIVIDEBY16
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY32`"]
            #[inline(always)]
            pub fn is_divide_by32(&self) -> bool {
                *self == PR_A::DIVIDEBY32
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY64`"]
            #[inline(always)]
            pub fn is_divide_by64(&self) -> bool {
                *self == PR_A::DIVIDEBY64
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY128`"]
            #[inline(always)]
            pub fn is_divide_by128(&self) -> bool {
                *self == PR_A::DIVIDEBY128
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY256`"]
            #[inline(always)]
            pub fn is_divide_by256(&self) -> bool {
                *self == PR_A::DIVIDEBY256
            }
            #[doc = "Checks if the value of the field is `DIVIDEBY256BIS`"]
            #[inline(always)]
            pub fn is_divide_by256bis(&self) -> bool {
                *self == PR_A::DIVIDEBY256BIS
            }
        }
        #[doc = "Write proxy for field `PR`"]
        pub struct PR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Divider /4"]
            #[inline(always)]
            pub fn divide_by4(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY4)
            }
            #[doc = "Divider /8"]
            #[inline(always)]
            pub fn divide_by8(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY8)
            }
            #[doc = "Divider /16"]
            #[inline(always)]
            pub fn divide_by16(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY16)
            }
            #[doc = "Divider /32"]
            #[inline(always)]
            pub fn divide_by32(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY32)
            }
            #[doc = "Divider /64"]
            #[inline(always)]
            pub fn divide_by64(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY64)
            }
            #[doc = "Divider /128"]
            #[inline(always)]
            pub fn divide_by128(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY128)
            }
            #[doc = "Divider /256"]
            #[inline(always)]
            pub fn divide_by256(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY256)
            }
            #[doc = "Divider /256"]
            #[inline(always)]
            pub fn divide_by256bis(self) -> &'a mut W {
                self.variant(PR_A::DIVIDEBY256BIS)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Prescaler divider"]
            #[inline(always)]
            pub fn pr(&self) -> PR_R {
                PR_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Prescaler divider"]
            #[inline(always)]
            pub fn pr(&mut self) -> PR_W {
                PR_W { w: self }
            }
        }
    }
    #[doc = "Reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rlr](rlr) module"]
    pub type RLR = crate::Reg<u32, _RLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RLR;
    #[doc = "`read()` method returns [rlr::R](rlr::R) reader structure"]
    impl crate::Readable for RLR {}
    #[doc = "`write(|w| ..)` method takes [rlr::W](rlr::W) writer structure"]
    impl crate::Writable for RLR {}
    #[doc = "Reload register"]
    pub mod rlr {
        #[doc = "Reader of register RLR"]
        pub type R = crate::R<u32, super::RLR>;
        #[doc = "Writer for register RLR"]
        pub type W = crate::W<u32, super::RLR>;
        #[doc = "Register RLR `reset()`'s with value 0x0fff"]
        impl crate::ResetValue for super::RLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0fff
            }
        }
        #[doc = "Reader of field `RL`"]
        pub type RL_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `RL`"]
        pub struct RL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Watchdog counter reload value"]
            #[inline(always)]
            pub fn rl(&self) -> RL_R {
                RL_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Watchdog counter reload value"]
            #[inline(always)]
            pub fn rl(&mut self) -> RL_W {
                RL_W { w: self }
            }
        }
    }
    #[doc = "Status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "Status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Reader of field `PVU`"]
        pub type PVU_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RVU`"]
        pub type RVU_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WVU`"]
        pub type WVU_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - Watchdog prescaler value update"]
            #[inline(always)]
            pub fn pvu(&self) -> PVU_R {
                PVU_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Watchdog counter reload value update"]
            #[inline(always)]
            pub fn rvu(&self) -> RVU_R {
                RVU_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Watchdog counter window value update"]
            #[inline(always)]
            pub fn wvu(&self) -> WVU_R {
                WVU_R::new(((self.bits >> 2) & 0x01) != 0)
            }
        }
    }
    #[doc = "Window register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [winr](winr) module"]
    pub type WINR = crate::Reg<u32, _WINR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WINR;
    #[doc = "`read()` method returns [winr::R](winr::R) reader structure"]
    impl crate::Readable for WINR {}
    #[doc = "`write(|w| ..)` method takes [winr::W](winr::W) writer structure"]
    impl crate::Writable for WINR {}
    #[doc = "Window register"]
    pub mod winr {
        #[doc = "Reader of register WINR"]
        pub type R = crate::R<u32, super::WINR>;
        #[doc = "Writer for register WINR"]
        pub type W = crate::W<u32, super::WINR>;
        #[doc = "Register WINR `reset()`'s with value 0x0fff"]
        impl crate::ResetValue for super::WINR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0fff
            }
        }
        #[doc = "Reader of field `WIN`"]
        pub type WIN_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `WIN`"]
        pub struct WIN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WIN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Watchdog counter window value"]
            #[inline(always)]
            pub fn win(&self) -> WIN_R {
                WIN_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Watchdog counter window value"]
            #[inline(always)]
            pub fn win(&mut self) -> WIN_W {
                WIN_W { w: self }
            }
        }
    }
}
#[doc = "Window watchdog"]
pub struct WWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WWDG {}
impl WWDG {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wwdg::RegisterBlock {
        0x4000_2c00 as *const _
    }
}
impl Deref for WWDG {
    type Target = wwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*WWDG::ptr() }
    }
}
#[doc = "Window watchdog"]
pub mod wwdg {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control register"]
        pub cr: CR,
        #[doc = "0x04 - Configuration register"]
        pub cfr: CFR,
        #[doc = "0x08 - Status register"]
        pub sr: SR,
    }
    #[doc = "Control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0x7f"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x7f
            }
        }
        #[doc = "Activation bit\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WDGA_A {
            #[doc = "0: Watchdog disabled"]
            DISABLED = 0,
            #[doc = "1: Watchdog enabled"]
            ENABLED = 1,
        }
        impl From<WDGA_A> for bool {
            #[inline(always)]
            fn from(variant: WDGA_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WDGA`"]
        pub type WDGA_R = crate::R<bool, WDGA_A>;
        impl WDGA_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WDGA_A {
                match self.bits {
                    false => WDGA_A::DISABLED,
                    true => WDGA_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == WDGA_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == WDGA_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `WDGA`"]
        pub struct WDGA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDGA_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WDGA_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Watchdog disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(WDGA_A::DISABLED)
            }
            #[doc = "Watchdog enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(WDGA_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `T`"]
        pub type T_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `T`"]
        pub struct T_W<'a> {
            w: &'a mut W,
        }
        impl<'a> T_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - Activation bit"]
            #[inline(always)]
            pub fn wdga(&self) -> WDGA_R {
                WDGA_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:6 - 7-bit counter"]
            #[inline(always)]
            pub fn t(&self) -> T_R {
                T_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 7 - Activation bit"]
            #[inline(always)]
            pub fn wdga(&mut self) -> WDGA_W {
                WDGA_W { w: self }
            }
            #[doc = "Bits 0:6 - 7-bit counter"]
            #[inline(always)]
            pub fn t(&mut self) -> T_W {
                T_W { w: self }
            }
        }
    }
    #[doc = "Configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfr](cfr) module"]
    pub type CFR = crate::Reg<u32, _CFR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFR;
    #[doc = "`read()` method returns [cfr::R](cfr::R) reader structure"]
    impl crate::Readable for CFR {}
    #[doc = "`write(|w| ..)` method takes [cfr::W](cfr::W) writer structure"]
    impl crate::Writable for CFR {}
    #[doc = "Configuration register"]
    pub mod cfr {
        #[doc = "Reader of register CFR"]
        pub type R = crate::R<u32, super::CFR>;
        #[doc = "Writer for register CFR"]
        pub type W = crate::W<u32, super::CFR>;
        #[doc = "Register CFR `reset()`'s with value 0x7f"]
        impl crate::ResetValue for super::CFR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x7f
            }
        }
        #[doc = "Early wakeup interrupt\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EWI_A {
            #[doc = "1: interrupt occurs whenever the counter reaches the value 0x40"]
            ENABLE = 1,
        }
        impl From<EWI_A> for bool {
            #[inline(always)]
            fn from(variant: EWI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EWI`"]
        pub type EWI_R = crate::R<bool, EWI_A>;
        impl EWI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, EWI_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(EWI_A::ENABLE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `ENABLE`"]
            #[inline(always)]
            pub fn is_enable(&self) -> bool {
                *self == EWI_A::ENABLE
            }
        }
        #[doc = "Write proxy for field `EWI`"]
        pub struct EWI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EWI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "interrupt occurs whenever the counter reaches the value 0x40"]
            #[inline(always)]
            pub fn enable(self) -> &'a mut W {
                self.variant(EWI_A::ENABLE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `W`"]
        pub type W_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `W`"]
        pub struct W_W<'a> {
            w: &'a mut W,
        }
        impl<'a> W_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        #[doc = "Timer base\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum WDGTB_A {
            #[doc = "0: Counter clock (PCLK1 div 4096) div 1"]
            DIV1 = 0,
            #[doc = "1: Counter clock (PCLK1 div 4096) div 2"]
            DIV2 = 1,
            #[doc = "2: Counter clock (PCLK1 div 4096) div 4"]
            DIV4 = 2,
            #[doc = "3: Counter clock (PCLK1 div 4096) div 8"]
            DIV8 = 3,
        }
        impl From<WDGTB_A> for u8 {
            #[inline(always)]
            fn from(variant: WDGTB_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `WDGTB`"]
        pub type WDGTB_R = crate::R<u8, WDGTB_A>;
        impl WDGTB_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WDGTB_A {
                match self.bits {
                    0 => WDGTB_A::DIV1,
                    1 => WDGTB_A::DIV2,
                    2 => WDGTB_A::DIV4,
                    3 => WDGTB_A::DIV8,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == WDGTB_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == WDGTB_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == WDGTB_A::DIV4
            }
            #[doc = "Checks if the value of the field is `DIV8`"]
            #[inline(always)]
            pub fn is_div8(&self) -> bool {
                *self == WDGTB_A::DIV8
            }
        }
        #[doc = "Write proxy for field `WDGTB`"]
        pub struct WDGTB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDGTB_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WDGTB_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Counter clock (PCLK1 div 4096) div 1"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(WDGTB_A::DIV1)
            }
            #[doc = "Counter clock (PCLK1 div 4096) div 2"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(WDGTB_A::DIV2)
            }
            #[doc = "Counter clock (PCLK1 div 4096) div 4"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(WDGTB_A::DIV4)
            }
            #[doc = "Counter clock (PCLK1 div 4096) div 8"]
            #[inline(always)]
            pub fn div8(self) -> &'a mut W {
                self.variant(WDGTB_A::DIV8)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 7)) | (((value as u32) & 0x03) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 9 - Early wakeup interrupt"]
            #[inline(always)]
            pub fn ewi(&self) -> EWI_R {
                EWI_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bits 0:6 - 7-bit window value"]
            #[inline(always)]
            pub fn w(&self) -> W_R {
                W_R::new((self.bits & 0x7f) as u8)
            }
            #[doc = "Bits 7:8 - Timer base"]
            #[inline(always)]
            pub fn wdgtb(&self) -> WDGTB_R {
                WDGTB_R::new(((self.bits >> 7) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 9 - Early wakeup interrupt"]
            #[inline(always)]
            pub fn ewi(&mut self) -> EWI_W {
                EWI_W { w: self }
            }
            #[doc = "Bits 0:6 - 7-bit window value"]
            #[inline(always)]
            pub fn w(&mut self) -> W_W {
                W_W { w: self }
            }
            #[doc = "Bits 7:8 - Timer base"]
            #[inline(always)]
            pub fn wdgtb(&mut self) -> WDGTB_W {
                WDGTB_W { w: self }
            }
        }
    }
    #[doc = "Status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "Status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Early wakeup interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EWIF_A {
            #[doc = "1: The EWI Interrupt Service Routine has been triggered"]
            PENDING = 1,
            #[doc = "0: The EWI Interrupt Service Routine has been serviced"]
            FINISHED = 0,
        }
        impl From<EWIF_A> for bool {
            #[inline(always)]
            fn from(variant: EWIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EWIF`"]
        pub type EWIF_R = crate::R<bool, EWIF_A>;
        impl EWIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EWIF_A {
                match self.bits {
                    true => EWIF_A::PENDING,
                    false => EWIF_A::FINISHED,
                }
            }
            #[doc = "Checks if the value of the field is `PENDING`"]
            #[inline(always)]
            pub fn is_pending(&self) -> bool {
                *self == EWIF_A::PENDING
            }
            #[doc = "Checks if the value of the field is `FINISHED`"]
            #[inline(always)]
            pub fn is_finished(&self) -> bool {
                *self == EWIF_A::FINISHED
            }
        }
        #[doc = "Early wakeup interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EWIF_AW {
            #[doc = "0: The EWI Interrupt Service Routine has been serviced"]
            FINISHED = 0,
        }
        impl From<EWIF_AW> for bool {
            #[inline(always)]
            fn from(variant: EWIF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `EWIF`"]
        pub struct EWIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EWIF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The EWI Interrupt Service Routine has been serviced"]
            #[inline(always)]
            pub fn finished(self) -> &'a mut W {
                self.variant(EWIF_AW::FINISHED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Early wakeup interrupt flag"]
            #[inline(always)]
            pub fn ewif(&self) -> EWIF_R {
                EWIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Early wakeup interrupt flag"]
            #[inline(always)]
            pub fn ewif(&mut self) -> EWIF_W {
                EWIF_W { w: self }
            }
        }
    }
}
#[doc = "Advanced-timers"]
pub struct TIM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM1 {}
impl TIM1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim1::RegisterBlock {
        0x4001_2c00 as *const _
    }
}
impl Deref for TIM1 {
    type Target = tim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM1::ptr() }
    }
}
#[doc = "Advanced-timers"]
pub mod tim1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - slave mode control register"]
        pub smcr: SMCR,
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - status register"]
        pub sr: SR,
        #[doc = "0x14 - event generation register"]
        pub egr: EGR,
        _reserved_6_ccmr1: [u8; 4usize],
        _reserved_7_ccmr2: [u8; 4usize],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: CCER,
        #[doc = "0x24 - counter"]
        pub cnt: CNT,
        #[doc = "0x28 - prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - auto-reload register"]
        pub arr: ARR,
        #[doc = "0x30 - repetition counter register"]
        pub rcr: RCR,
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: CCR,
        #[doc = "0x38 - capture/compare register 1"]
        pub ccr2: CCR,
        #[doc = "0x3c - capture/compare register 1"]
        pub ccr3: CCR,
        #[doc = "0x40 - capture/compare register 1"]
        pub ccr4: CCR,
        #[doc = "0x44 - break and dead-time register"]
        pub bdtr: BDTR,
        #[doc = "0x48 - DMA control register"]
        pub dcr: DCR,
        #[doc = "0x4c - DMA address for full transfer"]
        pub dmar: DMAR,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &CCMR1_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input_mut(&self) -> &mut CCMR1_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &CCMR1_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_OUTPUT) }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output_mut(&self) -> &mut CCMR1_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_OUTPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (input mode)"]
        #[inline(always)]
        pub fn ccmr2_input(&self) -> &CCMR2_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(28usize) as *const CCMR2_INPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (input mode)"]
        #[inline(always)]
        pub fn ccmr2_input_mut(&self) -> &mut CCMR2_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(28usize) as *mut CCMR2_INPUT) }
        }
        #[doc = "0x1c - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr2_output(&self) -> &CCMR2_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(28usize) as *const CCMR2_OUTPUT) }
        }
        #[doc = "0x1c - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr2_output_mut(&self) -> &mut CCMR2_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(28usize) as *mut CCMR2_OUTPUT) }
        }
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Clock division\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CKD_A {
            #[doc = "0: t_DTS = t_CK_INT"]
            DIV1 = 0,
            #[doc = "1: t_DTS = 2 × t_CK_INT"]
            DIV2 = 1,
            #[doc = "2: t_DTS = 4 × t_CK_INT"]
            DIV4 = 2,
        }
        impl From<CKD_A> for u8 {
            #[inline(always)]
            fn from(variant: CKD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CKD`"]
        pub type CKD_R = crate::R<u8, CKD_A>;
        impl CKD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CKD_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CKD_A::DIV1),
                    1 => Val(CKD_A::DIV2),
                    2 => Val(CKD_A::DIV4),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == CKD_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == CKD_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == CKD_A::DIV4
            }
        }
        #[doc = "Write proxy for field `CKD`"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CKD_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "t_DTS = t_CK_INT"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(CKD_A::DIV1)
            }
            #[doc = "t_DTS = 2 × t_CK_INT"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(CKD_A::DIV2)
            }
            #[doc = "t_DTS = 4 × t_CK_INT"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(CKD_A::DIV4)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Auto-reload preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARPE_A {
            #[doc = "0: TIMx_APRR register is not buffered"]
            DISABLED = 0,
            #[doc = "1: TIMx_APRR register is buffered"]
            ENABLED = 1,
        }
        impl From<ARPE_A> for bool {
            #[inline(always)]
            fn from(variant: ARPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, ARPE_A>;
        impl ARPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ARPE_A {
                match self.bits {
                    false => ARPE_A::DISABLED,
                    true => ARPE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ARPE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ARPE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ARPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIMx_APRR register is not buffered"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ARPE_A::DISABLED)
            }
            #[doc = "TIMx_APRR register is buffered"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ARPE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Center-aligned mode selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CMS_A {
            #[doc = "0: The counter counts up or down depending on the direction bit"]
            EDGEALIGNED = 0,
            #[doc = "1: The counter counts up and down alternatively. Output compare interrupt flags are set only when the counter is counting down."]
            CENTERALIGNED1 = 1,
            #[doc = "2: The counter counts up and down alternatively. Output compare interrupt flags are set only when the counter is counting up."]
            CENTERALIGNED2 = 2,
            #[doc = "3: The counter counts up and down alternatively. Output compare interrupt flags are set both when the counter is counting up or down."]
            CENTERALIGNED3 = 3,
        }
        impl From<CMS_A> for u8 {
            #[inline(always)]
            fn from(variant: CMS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CMS`"]
        pub type CMS_R = crate::R<u8, CMS_A>;
        impl CMS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CMS_A {
                match self.bits {
                    0 => CMS_A::EDGEALIGNED,
                    1 => CMS_A::CENTERALIGNED1,
                    2 => CMS_A::CENTERALIGNED2,
                    3 => CMS_A::CENTERALIGNED3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `EDGEALIGNED`"]
            #[inline(always)]
            pub fn is_edge_aligned(&self) -> bool {
                *self == CMS_A::EDGEALIGNED
            }
            #[doc = "Checks if the value of the field is `CENTERALIGNED1`"]
            #[inline(always)]
            pub fn is_center_aligned1(&self) -> bool {
                *self == CMS_A::CENTERALIGNED1
            }
            #[doc = "Checks if the value of the field is `CENTERALIGNED2`"]
            #[inline(always)]
            pub fn is_center_aligned2(&self) -> bool {
                *self == CMS_A::CENTERALIGNED2
            }
            #[doc = "Checks if the value of the field is `CENTERALIGNED3`"]
            #[inline(always)]
            pub fn is_center_aligned3(&self) -> bool {
                *self == CMS_A::CENTERALIGNED3
            }
        }
        #[doc = "Write proxy for field `CMS`"]
        pub struct CMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CMS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The counter counts up or down depending on the direction bit"]
            #[inline(always)]
            pub fn edge_aligned(self) -> &'a mut W {
                self.variant(CMS_A::EDGEALIGNED)
            }
            #[doc = "The counter counts up and down alternatively. Output compare interrupt flags are set only when the counter is counting down."]
            #[inline(always)]
            pub fn center_aligned1(self) -> &'a mut W {
                self.variant(CMS_A::CENTERALIGNED1)
            }
            #[doc = "The counter counts up and down alternatively. Output compare interrupt flags are set only when the counter is counting up."]
            #[inline(always)]
            pub fn center_aligned2(self) -> &'a mut W {
                self.variant(CMS_A::CENTERALIGNED2)
            }
            #[doc = "The counter counts up and down alternatively. Output compare interrupt flags are set both when the counter is counting up or down."]
            #[inline(always)]
            pub fn center_aligned3(self) -> &'a mut W {
                self.variant(CMS_A::CENTERALIGNED3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DIR_A {
            #[doc = "0: Counter used as upcounter"]
            UP = 0,
            #[doc = "1: Counter used as downcounter"]
            DOWN = 1,
        }
        impl From<DIR_A> for bool {
            #[inline(always)]
            fn from(variant: DIR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, DIR_A>;
        impl DIR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DIR_A {
                match self.bits {
                    false => DIR_A::UP,
                    true => DIR_A::DOWN,
                }
            }
            #[doc = "Checks if the value of the field is `UP`"]
            #[inline(always)]
            pub fn is_up(&self) -> bool {
                *self == DIR_A::UP
            }
            #[doc = "Checks if the value of the field is `DOWN`"]
            #[inline(always)]
            pub fn is_down(&self) -> bool {
                *self == DIR_A::DOWN
            }
        }
        #[doc = "Write proxy for field `DIR`"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DIR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter used as upcounter"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(DIR_A::UP)
            }
            #[doc = "Counter used as downcounter"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(DIR_A::DOWN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "One-pulse mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OPM_A {
            #[doc = "0: Counter is not stopped at update event"]
            DISABLED = 0,
            #[doc = "1: Counter stops counting at the next update event (clearing the CEN bit)"]
            ENABLED = 1,
        }
        impl From<OPM_A> for bool {
            #[inline(always)]
            fn from(variant: OPM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OPM`"]
        pub type OPM_R = crate::R<bool, OPM_A>;
        impl OPM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OPM_A {
                match self.bits {
                    false => OPM_A::DISABLED,
                    true => OPM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OPM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OPM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OPM`"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OPM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter is not stopped at update event"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OPM_A::DISABLED)
            }
            #[doc = "Counter stops counting at the next update event (clearing the CEN bit)"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OPM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Update request source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum URS_A {
            #[doc = "0: Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            ANYEVENT = 0,
            #[doc = "1: Only counter overflow/underflow generates an update interrupt or DMA request"]
            COUNTERONLY = 1,
        }
        impl From<URS_A> for bool {
            #[inline(always)]
            fn from(variant: URS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, URS_A>;
        impl URS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> URS_A {
                match self.bits {
                    false => URS_A::ANYEVENT,
                    true => URS_A::COUNTERONLY,
                }
            }
            #[doc = "Checks if the value of the field is `ANYEVENT`"]
            #[inline(always)]
            pub fn is_any_event(&self) -> bool {
                *self == URS_A::ANYEVENT
            }
            #[doc = "Checks if the value of the field is `COUNTERONLY`"]
            #[inline(always)]
            pub fn is_counter_only(&self) -> bool {
                *self == URS_A::COUNTERONLY
            }
        }
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: URS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn any_event(self) -> &'a mut W {
                self.variant(URS_A::ANYEVENT)
            }
            #[doc = "Only counter overflow/underflow generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn counter_only(self) -> &'a mut W {
                self.variant(URS_A::COUNTERONLY)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Update disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDIS_A {
            #[doc = "0: Update event enabled"]
            ENABLED = 0,
            #[doc = "1: Update event disabled"]
            DISABLED = 1,
        }
        impl From<UDIS_A> for bool {
            #[inline(always)]
            fn from(variant: UDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, UDIS_A>;
        impl UDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDIS_A {
                match self.bits {
                    false => UDIS_A::ENABLED,
                    true => UDIS_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDIS_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDIS_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update event enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDIS_A::ENABLED)
            }
            #[doc = "Update event disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDIS_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Counter enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CEN_A {
            #[doc = "0: Counter disabled"]
            DISABLED = 0,
            #[doc = "1: Counter enabled"]
            ENABLED = 1,
        }
        impl From<CEN_A> for bool {
            #[inline(always)]
            fn from(variant: CEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, CEN_A>;
        impl CEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CEN_A {
                match self.bits {
                    false => CEN_A::DISABLED,
                    true => CEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CEN_A::DISABLED)
            }
            #[doc = "Counter enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - Center-aligned mode selection"]
            #[inline(always)]
            pub fn cms(&self) -> CMS_R {
                CMS_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bits 5:6 - Center-aligned mode selection"]
            #[inline(always)]
            pub fn cms(&mut self) -> CMS_W {
                CMS_W { w: self }
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OIS4`"]
        pub type OIS4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS4`"]
        pub struct OIS4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `OIS3N`"]
        pub type OIS3N_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS3N`"]
        pub struct OIS3N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS3N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `OIS3`"]
        pub type OIS3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS3`"]
        pub struct OIS3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OIS2N`"]
        pub type OIS2N_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS2N`"]
        pub struct OIS2N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS2N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OIS2`"]
        pub type OIS2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS2`"]
        pub struct OIS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OIS1N`"]
        pub type OIS1N_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS1N`"]
        pub struct OIS1N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS1N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `OIS1`"]
        pub type OIS1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS1`"]
        pub struct OIS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "TI1 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TI1S_A {
            #[doc = "0: The TIMx_CH1 pin is connected to TI1 input"]
            NORMAL = 0,
            #[doc = "1: The TIMx_CH1, CH2, CH3 pins are connected to TI1 input"]
            XOR = 1,
        }
        impl From<TI1S_A> for bool {
            #[inline(always)]
            fn from(variant: TI1S_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TI1S`"]
        pub type TI1S_R = crate::R<bool, TI1S_A>;
        impl TI1S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TI1S_A {
                match self.bits {
                    false => TI1S_A::NORMAL,
                    true => TI1S_A::XOR,
                }
            }
            #[doc = "Checks if the value of the field is `NORMAL`"]
            #[inline(always)]
            pub fn is_normal(&self) -> bool {
                *self == TI1S_A::NORMAL
            }
            #[doc = "Checks if the value of the field is `XOR`"]
            #[inline(always)]
            pub fn is_xor(&self) -> bool {
                *self == TI1S_A::XOR
            }
        }
        #[doc = "Write proxy for field `TI1S`"]
        pub struct TI1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TI1S_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The TIMx_CH1 pin is connected to TI1 input"]
            #[inline(always)]
            pub fn normal(self) -> &'a mut W {
                self.variant(TI1S_A::NORMAL)
            }
            #[doc = "The TIMx_CH1, CH2, CH3 pins are connected to TI1 input"]
            #[inline(always)]
            pub fn xor(self) -> &'a mut W {
                self.variant(TI1S_A::XOR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Master mode selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MMS_A {
            #[doc = "0: The UG bit from the TIMx_EGR register is used as trigger output"]
            RESET = 0,
            #[doc = "1: The counter enable signal, CNT_EN, is used as trigger output"]
            ENABLE = 1,
            #[doc = "2: The update event is selected as trigger output"]
            UPDATE = 2,
            #[doc = "3: The trigger output send a positive pulse when the CC1IF flag it to be set, as soon as a capture or a compare match occurred"]
            COMPAREPULSE = 3,
            #[doc = "4: OC1REF signal is used as trigger output"]
            COMPAREOC1 = 4,
            #[doc = "5: OC2REF signal is used as trigger output"]
            COMPAREOC2 = 5,
            #[doc = "6: OC3REF signal is used as trigger output"]
            COMPAREOC3 = 6,
            #[doc = "7: OC4REF signal is used as trigger output"]
            COMPAREOC4 = 7,
        }
        impl From<MMS_A> for u8 {
            #[inline(always)]
            fn from(variant: MMS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MMS`"]
        pub type MMS_R = crate::R<u8, MMS_A>;
        impl MMS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MMS_A {
                match self.bits {
                    0 => MMS_A::RESET,
                    1 => MMS_A::ENABLE,
                    2 => MMS_A::UPDATE,
                    3 => MMS_A::COMPAREPULSE,
                    4 => MMS_A::COMPAREOC1,
                    5 => MMS_A::COMPAREOC2,
                    6 => MMS_A::COMPAREOC3,
                    7 => MMS_A::COMPAREOC4,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == MMS_A::RESET
            }
            #[doc = "Checks if the value of the field is `ENABLE`"]
            #[inline(always)]
            pub fn is_enable(&self) -> bool {
                *self == MMS_A::ENABLE
            }
            #[doc = "Checks if the value of the field is `UPDATE`"]
            #[inline(always)]
            pub fn is_update(&self) -> bool {
                *self == MMS_A::UPDATE
            }
            #[doc = "Checks if the value of the field is `COMPAREPULSE`"]
            #[inline(always)]
            pub fn is_compare_pulse(&self) -> bool {
                *self == MMS_A::COMPAREPULSE
            }
            #[doc = "Checks if the value of the field is `COMPAREOC1`"]
            #[inline(always)]
            pub fn is_compare_oc1(&self) -> bool {
                *self == MMS_A::COMPAREOC1
            }
            #[doc = "Checks if the value of the field is `COMPAREOC2`"]
            #[inline(always)]
            pub fn is_compare_oc2(&self) -> bool {
                *self == MMS_A::COMPAREOC2
            }
            #[doc = "Checks if the value of the field is `COMPAREOC3`"]
            #[inline(always)]
            pub fn is_compare_oc3(&self) -> bool {
                *self == MMS_A::COMPAREOC3
            }
            #[doc = "Checks if the value of the field is `COMPAREOC4`"]
            #[inline(always)]
            pub fn is_compare_oc4(&self) -> bool {
                *self == MMS_A::COMPAREOC4
            }
        }
        #[doc = "Write proxy for field `MMS`"]
        pub struct MMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MMS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The UG bit from the TIMx_EGR register is used as trigger output"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(MMS_A::RESET)
            }
            #[doc = "The counter enable signal, CNT_EN, is used as trigger output"]
            #[inline(always)]
            pub fn enable(self) -> &'a mut W {
                self.variant(MMS_A::ENABLE)
            }
            #[doc = "The update event is selected as trigger output"]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(MMS_A::UPDATE)
            }
            #[doc = "The trigger output send a positive pulse when the CC1IF flag it to be set, as soon as a capture or a compare match occurred"]
            #[inline(always)]
            pub fn compare_pulse(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREPULSE)
            }
            #[doc = "OC1REF signal is used as trigger output"]
            #[inline(always)]
            pub fn compare_oc1(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREOC1)
            }
            #[doc = "OC2REF signal is used as trigger output"]
            #[inline(always)]
            pub fn compare_oc2(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREOC2)
            }
            #[doc = "OC3REF signal is used as trigger output"]
            #[inline(always)]
            pub fn compare_oc3(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREOC3)
            }
            #[doc = "OC4REF signal is used as trigger output"]
            #[inline(always)]
            pub fn compare_oc4(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREOC4)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Capture/compare DMA selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CCDS_A {
            #[doc = "0: CCx DMA request sent when CCx event occurs"]
            ONCOMPARE = 0,
            #[doc = "1: CCx DMA request sent when update event occurs"]
            ONUPDATE = 1,
        }
        impl From<CCDS_A> for bool {
            #[inline(always)]
            fn from(variant: CCDS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CCDS`"]
        pub type CCDS_R = crate::R<bool, CCDS_A>;
        impl CCDS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CCDS_A {
                match self.bits {
                    false => CCDS_A::ONCOMPARE,
                    true => CCDS_A::ONUPDATE,
                }
            }
            #[doc = "Checks if the value of the field is `ONCOMPARE`"]
            #[inline(always)]
            pub fn is_on_compare(&self) -> bool {
                *self == CCDS_A::ONCOMPARE
            }
            #[doc = "Checks if the value of the field is `ONUPDATE`"]
            #[inline(always)]
            pub fn is_on_update(&self) -> bool {
                *self == CCDS_A::ONUPDATE
            }
        }
        #[doc = "Write proxy for field `CCDS`"]
        pub struct CCDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCDS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CCDS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request sent when CCx event occurs"]
            #[inline(always)]
            pub fn on_compare(self) -> &'a mut W {
                self.variant(CCDS_A::ONCOMPARE)
            }
            #[doc = "CCx DMA request sent when update event occurs"]
            #[inline(always)]
            pub fn on_update(self) -> &'a mut W {
                self.variant(CCDS_A::ONUPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CCUS`"]
        pub type CCUS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCUS`"]
        pub struct CCUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCUS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CCPC`"]
        pub type CCPC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCPC`"]
        pub struct CCPC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCPC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Output Idle state 4"]
            #[inline(always)]
            pub fn ois4(&self) -> OIS4_R {
                OIS4_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Output Idle state 3"]
            #[inline(always)]
            pub fn ois3n(&self) -> OIS3N_R {
                OIS3N_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Output Idle state 3"]
            #[inline(always)]
            pub fn ois3(&self) -> OIS3_R {
                OIS3_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Output Idle state 2"]
            #[inline(always)]
            pub fn ois2n(&self) -> OIS2N_R {
                OIS2N_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output Idle state 2"]
            #[inline(always)]
            pub fn ois2(&self) -> OIS2_R {
                OIS2_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1n(&self) -> OIS1N_R {
                OIS1N_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1(&self) -> OIS1_R {
                OIS1_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TI1 selection"]
            #[inline(always)]
            pub fn ti1s(&self) -> TI1S_R {
                TI1S_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&self) -> MMS_R {
                MMS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&self) -> CCDS_R {
                CCDS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/compare control update selection"]
            #[inline(always)]
            pub fn ccus(&self) -> CCUS_R {
                CCUS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/compare preloaded control"]
            #[inline(always)]
            pub fn ccpc(&self) -> CCPC_R {
                CCPC_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Output Idle state 4"]
            #[inline(always)]
            pub fn ois4(&mut self) -> OIS4_W {
                OIS4_W { w: self }
            }
            #[doc = "Bit 13 - Output Idle state 3"]
            #[inline(always)]
            pub fn ois3n(&mut self) -> OIS3N_W {
                OIS3N_W { w: self }
            }
            #[doc = "Bit 12 - Output Idle state 3"]
            #[inline(always)]
            pub fn ois3(&mut self) -> OIS3_W {
                OIS3_W { w: self }
            }
            #[doc = "Bit 11 - Output Idle state 2"]
            #[inline(always)]
            pub fn ois2n(&mut self) -> OIS2N_W {
                OIS2N_W { w: self }
            }
            #[doc = "Bit 10 - Output Idle state 2"]
            #[inline(always)]
            pub fn ois2(&mut self) -> OIS2_W {
                OIS2_W { w: self }
            }
            #[doc = "Bit 9 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1n(&mut self) -> OIS1N_W {
                OIS1N_W { w: self }
            }
            #[doc = "Bit 8 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1(&mut self) -> OIS1_W {
                OIS1_W { w: self }
            }
            #[doc = "Bit 7 - TI1 selection"]
            #[inline(always)]
            pub fn ti1s(&mut self) -> TI1S_W {
                TI1S_W { w: self }
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&mut self) -> MMS_W {
                MMS_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&mut self) -> CCDS_W {
                CCDS_W { w: self }
            }
            #[doc = "Bit 2 - Capture/compare control update selection"]
            #[inline(always)]
            pub fn ccus(&mut self) -> CCUS_W {
                CCUS_W { w: self }
            }
            #[doc = "Bit 0 - Capture/compare preloaded control"]
            #[inline(always)]
            pub fn ccpc(&mut self) -> CCPC_W {
                CCPC_W { w: self }
            }
        }
    }
    #[doc = "slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcr](smcr) module"]
    pub type SMCR = crate::Reg<u32, _SMCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMCR;
    #[doc = "`read()` method returns [smcr::R](smcr::R) reader structure"]
    impl crate::Readable for SMCR {}
    #[doc = "`write(|w| ..)` method takes [smcr::W](smcr::W) writer structure"]
    impl crate::Writable for SMCR {}
    #[doc = "slave mode control register"]
    pub mod smcr {
        #[doc = "Reader of register SMCR"]
        pub type R = crate::R<u32, super::SMCR>;
        #[doc = "Writer for register SMCR"]
        pub type W = crate::W<u32, super::SMCR>;
        #[doc = "Register SMCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "External trigger polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ETP_A {
            #[doc = "0: ETR is noninverted, active at high level or rising edge"]
            NOTINVERTED = 0,
            #[doc = "1: ETR is inverted, active at low level or falling edge"]
            INVERTED = 1,
        }
        impl From<ETP_A> for bool {
            #[inline(always)]
            fn from(variant: ETP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ETP`"]
        pub type ETP_R = crate::R<bool, ETP_A>;
        impl ETP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ETP_A {
                match self.bits {
                    false => ETP_A::NOTINVERTED,
                    true => ETP_A::INVERTED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTINVERTED`"]
            #[inline(always)]
            pub fn is_not_inverted(&self) -> bool {
                *self == ETP_A::NOTINVERTED
            }
            #[doc = "Checks if the value of the field is `INVERTED`"]
            #[inline(always)]
            pub fn is_inverted(&self) -> bool {
                *self == ETP_A::INVERTED
            }
        }
        #[doc = "Write proxy for field `ETP`"]
        pub struct ETP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ETP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ETR is noninverted, active at high level or rising edge"]
            #[inline(always)]
            pub fn not_inverted(self) -> &'a mut W {
                self.variant(ETP_A::NOTINVERTED)
            }
            #[doc = "ETR is inverted, active at low level or falling edge"]
            #[inline(always)]
            pub fn inverted(self) -> &'a mut W {
                self.variant(ETP_A::INVERTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "External clock enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ECE_A {
            #[doc = "0: External clock mode 2 disabled"]
            DISABLED = 0,
            #[doc = "1: External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF signal."]
            ENABLED = 1,
        }
        impl From<ECE_A> for bool {
            #[inline(always)]
            fn from(variant: ECE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ECE`"]
        pub type ECE_R = crate::R<bool, ECE_A>;
        impl ECE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ECE_A {
                match self.bits {
                    false => ECE_A::DISABLED,
                    true => ECE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ECE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ECE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ECE`"]
        pub struct ECE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ECE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "External clock mode 2 disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ECE_A::DISABLED)
            }
            #[doc = "External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF signal."]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ECE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "External trigger prescaler\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ETPS_A {
            #[doc = "0: Prescaler OFF"]
            DIV1 = 0,
            #[doc = "1: ETRP frequency divided by 2"]
            DIV2 = 1,
            #[doc = "2: ETRP frequency divided by 4"]
            DIV4 = 2,
            #[doc = "3: ETRP frequency divided by 8"]
            DIV8 = 3,
        }
        impl From<ETPS_A> for u8 {
            #[inline(always)]
            fn from(variant: ETPS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ETPS`"]
        pub type ETPS_R = crate::R<u8, ETPS_A>;
        impl ETPS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ETPS_A {
                match self.bits {
                    0 => ETPS_A::DIV1,
                    1 => ETPS_A::DIV2,
                    2 => ETPS_A::DIV4,
                    3 => ETPS_A::DIV8,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == ETPS_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == ETPS_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == ETPS_A::DIV4
            }
            #[doc = "Checks if the value of the field is `DIV8`"]
            #[inline(always)]
            pub fn is_div8(&self) -> bool {
                *self == ETPS_A::DIV8
            }
        }
        #[doc = "Write proxy for field `ETPS`"]
        pub struct ETPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETPS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ETPS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Prescaler OFF"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(ETPS_A::DIV1)
            }
            #[doc = "ETRP frequency divided by 2"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(ETPS_A::DIV2)
            }
            #[doc = "ETRP frequency divided by 4"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(ETPS_A::DIV4)
            }
            #[doc = "ETRP frequency divided by 8"]
            #[inline(always)]
            pub fn div8(self) -> &'a mut W {
                self.variant(ETPS_A::DIV8)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "External trigger filter\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ETF_A {
            #[doc = "0: No filter, sampling is done at fDTS"]
            NOFILTER = 0,
            #[doc = "1: fSAMPLING=fCK_INT, N=2"]
            FCK_INT_N2 = 1,
            #[doc = "2: fSAMPLING=fCK_INT, N=4"]
            FCK_INT_N4 = 2,
            #[doc = "3: fSAMPLING=fCK_INT, N=8"]
            FCK_INT_N8 = 3,
            #[doc = "4: fSAMPLING=fDTS/2, N=6"]
            FDTS_DIV2_N6 = 4,
            #[doc = "5: fSAMPLING=fDTS/2, N=8"]
            FDTS_DIV2_N8 = 5,
            #[doc = "6: fSAMPLING=fDTS/4, N=6"]
            FDTS_DIV4_N6 = 6,
            #[doc = "7: fSAMPLING=fDTS/4, N=8"]
            FDTS_DIV4_N8 = 7,
            #[doc = "8: fSAMPLING=fDTS/8, N=6"]
            FDTS_DIV8_N6 = 8,
            #[doc = "9: fSAMPLING=fDTS/8, N=8"]
            FDTS_DIV8_N8 = 9,
            #[doc = "10: fSAMPLING=fDTS/16, N=5"]
            FDTS_DIV16_N5 = 10,
            #[doc = "11: fSAMPLING=fDTS/16, N=6"]
            FDTS_DIV16_N6 = 11,
            #[doc = "12: fSAMPLING=fDTS/16, N=8"]
            FDTS_DIV16_N8 = 12,
            #[doc = "13: fSAMPLING=fDTS/32, N=5"]
            FDTS_DIV32_N5 = 13,
            #[doc = "14: fSAMPLING=fDTS/32, N=6"]
            FDTS_DIV32_N6 = 14,
            #[doc = "15: fSAMPLING=fDTS/32, N=8"]
            FDTS_DIV32_N8 = 15,
        }
        impl From<ETF_A> for u8 {
            #[inline(always)]
            fn from(variant: ETF_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ETF`"]
        pub type ETF_R = crate::R<u8, ETF_A>;
        impl ETF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ETF_A {
                match self.bits {
                    0 => ETF_A::NOFILTER,
                    1 => ETF_A::FCK_INT_N2,
                    2 => ETF_A::FCK_INT_N4,
                    3 => ETF_A::FCK_INT_N8,
                    4 => ETF_A::FDTS_DIV2_N6,
                    5 => ETF_A::FDTS_DIV2_N8,
                    6 => ETF_A::FDTS_DIV4_N6,
                    7 => ETF_A::FDTS_DIV4_N8,
                    8 => ETF_A::FDTS_DIV8_N6,
                    9 => ETF_A::FDTS_DIV8_N8,
                    10 => ETF_A::FDTS_DIV16_N5,
                    11 => ETF_A::FDTS_DIV16_N6,
                    12 => ETF_A::FDTS_DIV16_N8,
                    13 => ETF_A::FDTS_DIV32_N5,
                    14 => ETF_A::FDTS_DIV32_N6,
                    15 => ETF_A::FDTS_DIV32_N8,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `NOFILTER`"]
            #[inline(always)]
            pub fn is_no_filter(&self) -> bool {
                *self == ETF_A::NOFILTER
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N2`"]
            #[inline(always)]
            pub fn is_fck_int_n2(&self) -> bool {
                *self == ETF_A::FCK_INT_N2
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N4`"]
            #[inline(always)]
            pub fn is_fck_int_n4(&self) -> bool {
                *self == ETF_A::FCK_INT_N4
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N8`"]
            #[inline(always)]
            pub fn is_fck_int_n8(&self) -> bool {
                *self == ETF_A::FCK_INT_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV2_N6`"]
            #[inline(always)]
            pub fn is_fdts_div2_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV2_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV2_N8`"]
            #[inline(always)]
            pub fn is_fdts_div2_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV2_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV4_N6`"]
            #[inline(always)]
            pub fn is_fdts_div4_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV4_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV4_N8`"]
            #[inline(always)]
            pub fn is_fdts_div4_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV4_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV8_N6`"]
            #[inline(always)]
            pub fn is_fdts_div8_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV8_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV8_N8`"]
            #[inline(always)]
            pub fn is_fdts_div8_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV8_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N5`"]
            #[inline(always)]
            pub fn is_fdts_div16_n5(&self) -> bool {
                *self == ETF_A::FDTS_DIV16_N5
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N6`"]
            #[inline(always)]
            pub fn is_fdts_div16_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV16_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N8`"]
            #[inline(always)]
            pub fn is_fdts_div16_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV16_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N5`"]
            #[inline(always)]
            pub fn is_fdts_div32_n5(&self) -> bool {
                *self == ETF_A::FDTS_DIV32_N5
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N6`"]
            #[inline(always)]
            pub fn is_fdts_div32_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV32_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N8`"]
            #[inline(always)]
            pub fn is_fdts_div32_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV32_N8
            }
        }
        #[doc = "Write proxy for field `ETF`"]
        pub struct ETF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ETF_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No filter, sampling is done at fDTS"]
            #[inline(always)]
            pub fn no_filter(self) -> &'a mut W {
                self.variant(ETF_A::NOFILTER)
            }
            #[doc = "fSAMPLING=fCK_INT, N=2"]
            #[inline(always)]
            pub fn fck_int_n2(self) -> &'a mut W {
                self.variant(ETF_A::FCK_INT_N2)
            }
            #[doc = "fSAMPLING=fCK_INT, N=4"]
            #[inline(always)]
            pub fn fck_int_n4(self) -> &'a mut W {
                self.variant(ETF_A::FCK_INT_N4)
            }
            #[doc = "fSAMPLING=fCK_INT, N=8"]
            #[inline(always)]
            pub fn fck_int_n8(self) -> &'a mut W {
                self.variant(ETF_A::FCK_INT_N8)
            }
            #[doc = "fSAMPLING=fDTS/2, N=6"]
            #[inline(always)]
            pub fn fdts_div2_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV2_N6)
            }
            #[doc = "fSAMPLING=fDTS/2, N=8"]
            #[inline(always)]
            pub fn fdts_div2_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV2_N8)
            }
            #[doc = "fSAMPLING=fDTS/4, N=6"]
            #[inline(always)]
            pub fn fdts_div4_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV4_N6)
            }
            #[doc = "fSAMPLING=fDTS/4, N=8"]
            #[inline(always)]
            pub fn fdts_div4_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV4_N8)
            }
            #[doc = "fSAMPLING=fDTS/8, N=6"]
            #[inline(always)]
            pub fn fdts_div8_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV8_N6)
            }
            #[doc = "fSAMPLING=fDTS/8, N=8"]
            #[inline(always)]
            pub fn fdts_div8_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV8_N8)
            }
            #[doc = "fSAMPLING=fDTS/16, N=5"]
            #[inline(always)]
            pub fn fdts_div16_n5(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV16_N5)
            }
            #[doc = "fSAMPLING=fDTS/16, N=6"]
            #[inline(always)]
            pub fn fdts_div16_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV16_N6)
            }
            #[doc = "fSAMPLING=fDTS/16, N=8"]
            #[inline(always)]
            pub fn fdts_div16_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV16_N8)
            }
            #[doc = "fSAMPLING=fDTS/32, N=5"]
            #[inline(always)]
            pub fn fdts_div32_n5(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV32_N5)
            }
            #[doc = "fSAMPLING=fDTS/32, N=6"]
            #[inline(always)]
            pub fn fdts_div32_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV32_N6)
            }
            #[doc = "fSAMPLING=fDTS/32, N=8"]
            #[inline(always)]
            pub fn fdts_div32_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV32_N8)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Master/Slave mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MSM_A {
            #[doc = "0: No action"]
            NOSYNC = 0,
            #[doc = "1: The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event."]
            SYNC = 1,
        }
        impl From<MSM_A> for bool {
            #[inline(always)]
            fn from(variant: MSM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MSM`"]
        pub type MSM_R = crate::R<bool, MSM_A>;
        impl MSM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MSM_A {
                match self.bits {
                    false => MSM_A::NOSYNC,
                    true => MSM_A::SYNC,
                }
            }
            #[doc = "Checks if the value of the field is `NOSYNC`"]
            #[inline(always)]
            pub fn is_no_sync(&self) -> bool {
                *self == MSM_A::NOSYNC
            }
            #[doc = "Checks if the value of the field is `SYNC`"]
            #[inline(always)]
            pub fn is_sync(&self) -> bool {
                *self == MSM_A::SYNC
            }
        }
        #[doc = "Write proxy for field `MSM`"]
        pub struct MSM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MSM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action"]
            #[inline(always)]
            pub fn no_sync(self) -> &'a mut W {
                self.variant(MSM_A::NOSYNC)
            }
            #[doc = "The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event."]
            #[inline(always)]
            pub fn sync(self) -> &'a mut W {
                self.variant(MSM_A::SYNC)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Trigger selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum TS_A {
            #[doc = "0: Internal Trigger 0 (ITR0)"]
            ITR0 = 0,
            #[doc = "1: Internal Trigger 1 (ITR1)"]
            ITR1 = 1,
            #[doc = "2: Internal Trigger 2 (ITR2)"]
            ITR2 = 2,
            #[doc = "4: TI1 Edge Detector (TI1F_ED)"]
            TI1F_ED = 4,
            #[doc = "5: Filtered Timer Input 1 (TI1FP1)"]
            TI1FP1 = 5,
            #[doc = "6: Filtered Timer Input 2 (TI2FP2)"]
            TI2FP2 = 6,
            #[doc = "7: External Trigger input (ETRF)"]
            ETRF = 7,
        }
        impl From<TS_A> for u8 {
            #[inline(always)]
            fn from(variant: TS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `TS`"]
        pub type TS_R = crate::R<u8, TS_A>;
        impl TS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, TS_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(TS_A::ITR0),
                    1 => Val(TS_A::ITR1),
                    2 => Val(TS_A::ITR2),
                    4 => Val(TS_A::TI1F_ED),
                    5 => Val(TS_A::TI1FP1),
                    6 => Val(TS_A::TI2FP2),
                    7 => Val(TS_A::ETRF),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `ITR0`"]
            #[inline(always)]
            pub fn is_itr0(&self) -> bool {
                *self == TS_A::ITR0
            }
            #[doc = "Checks if the value of the field is `ITR1`"]
            #[inline(always)]
            pub fn is_itr1(&self) -> bool {
                *self == TS_A::ITR1
            }
            #[doc = "Checks if the value of the field is `ITR2`"]
            #[inline(always)]
            pub fn is_itr2(&self) -> bool {
                *self == TS_A::ITR2
            }
            #[doc = "Checks if the value of the field is `TI1F_ED`"]
            #[inline(always)]
            pub fn is_ti1f_ed(&self) -> bool {
                *self == TS_A::TI1F_ED
            }
            #[doc = "Checks if the value of the field is `TI1FP1`"]
            #[inline(always)]
            pub fn is_ti1fp1(&self) -> bool {
                *self == TS_A::TI1FP1
            }
            #[doc = "Checks if the value of the field is `TI2FP2`"]
            #[inline(always)]
            pub fn is_ti2fp2(&self) -> bool {
                *self == TS_A::TI2FP2
            }
            #[doc = "Checks if the value of the field is `ETRF`"]
            #[inline(always)]
            pub fn is_etrf(&self) -> bool {
                *self == TS_A::ETRF
            }
        }
        #[doc = "Write proxy for field `TS`"]
        pub struct TS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TS_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Internal Trigger 0 (ITR0)"]
            #[inline(always)]
            pub fn itr0(self) -> &'a mut W {
                self.variant(TS_A::ITR0)
            }
            #[doc = "Internal Trigger 1 (ITR1)"]
            #[inline(always)]
            pub fn itr1(self) -> &'a mut W {
                self.variant(TS_A::ITR1)
            }
            #[doc = "Internal Trigger 2 (ITR2)"]
            #[inline(always)]
            pub fn itr2(self) -> &'a mut W {
                self.variant(TS_A::ITR2)
            }
            #[doc = "TI1 Edge Detector (TI1F_ED)"]
            #[inline(always)]
            pub fn ti1f_ed(self) -> &'a mut W {
                self.variant(TS_A::TI1F_ED)
            }
            #[doc = "Filtered Timer Input 1 (TI1FP1)"]
            #[inline(always)]
            pub fn ti1fp1(self) -> &'a mut W {
                self.variant(TS_A::TI1FP1)
            }
            #[doc = "Filtered Timer Input 2 (TI2FP2)"]
            #[inline(always)]
            pub fn ti2fp2(self) -> &'a mut W {
                self.variant(TS_A::TI2FP2)
            }
            #[doc = "External Trigger input (ETRF)"]
            #[inline(always)]
            pub fn etrf(self) -> &'a mut W {
                self.variant(TS_A::ETRF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Slave mode selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SMS_A {
            #[doc = "0: Slave mode disabled - if CEN = ‘1 then the prescaler is clocked directly by the internal clock."]
            DISABLED = 0,
            #[doc = "1: Encoder mode 1 - Counter counts up/down on TI2FP1 edge depending on TI1FP2 level."]
            ENCODER_MODE_1 = 1,
            #[doc = "2: Encoder mode 2 - Counter counts up/down on TI1FP2 edge depending on TI2FP1 level."]
            ENCODER_MODE_2 = 2,
            #[doc = "3: Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input."]
            ENCODER_MODE_3 = 3,
            #[doc = "4: Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers."]
            RESET_MODE = 4,
            #[doc = "5: Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled."]
            GATED_MODE = 5,
            #[doc = "6: Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled."]
            TRIGGER_MODE = 6,
            #[doc = "7: External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter."]
            EXT_CLOCK_MODE = 7,
        }
        impl From<SMS_A> for u8 {
            #[inline(always)]
            fn from(variant: SMS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `SMS`"]
        pub type SMS_R = crate::R<u8, SMS_A>;
        impl SMS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SMS_A {
                match self.bits {
                    0 => SMS_A::DISABLED,
                    1 => SMS_A::ENCODER_MODE_1,
                    2 => SMS_A::ENCODER_MODE_2,
                    3 => SMS_A::ENCODER_MODE_3,
                    4 => SMS_A::RESET_MODE,
                    5 => SMS_A::GATED_MODE,
                    6 => SMS_A::TRIGGER_MODE,
                    7 => SMS_A::EXT_CLOCK_MODE,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SMS_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENCODER_MODE_1`"]
            #[inline(always)]
            pub fn is_encoder_mode_1(&self) -> bool {
                *self == SMS_A::ENCODER_MODE_1
            }
            #[doc = "Checks if the value of the field is `ENCODER_MODE_2`"]
            #[inline(always)]
            pub fn is_encoder_mode_2(&self) -> bool {
                *self == SMS_A::ENCODER_MODE_2
            }
            #[doc = "Checks if the value of the field is `ENCODER_MODE_3`"]
            #[inline(always)]
            pub fn is_encoder_mode_3(&self) -> bool {
                *self == SMS_A::ENCODER_MODE_3
            }
            #[doc = "Checks if the value of the field is `RESET_MODE`"]
            #[inline(always)]
            pub fn is_reset_mode(&self) -> bool {
                *self == SMS_A::RESET_MODE
            }
            #[doc = "Checks if the value of the field is `GATED_MODE`"]
            #[inline(always)]
            pub fn is_gated_mode(&self) -> bool {
                *self == SMS_A::GATED_MODE
            }
            #[doc = "Checks if the value of the field is `TRIGGER_MODE`"]
            #[inline(always)]
            pub fn is_trigger_mode(&self) -> bool {
                *self == SMS_A::TRIGGER_MODE
            }
            #[doc = "Checks if the value of the field is `EXT_CLOCK_MODE`"]
            #[inline(always)]
            pub fn is_ext_clock_mode(&self) -> bool {
                *self == SMS_A::EXT_CLOCK_MODE
            }
        }
        #[doc = "Write proxy for field `SMS`"]
        pub struct SMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SMS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Slave mode disabled - if CEN = ‘1 then the prescaler is clocked directly by the internal clock."]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SMS_A::DISABLED)
            }
            #[doc = "Encoder mode 1 - Counter counts up/down on TI2FP1 edge depending on TI1FP2 level."]
            #[inline(always)]
            pub fn encoder_mode_1(self) -> &'a mut W {
                self.variant(SMS_A::ENCODER_MODE_1)
            }
            #[doc = "Encoder mode 2 - Counter counts up/down on TI1FP2 edge depending on TI2FP1 level."]
            #[inline(always)]
            pub fn encoder_mode_2(self) -> &'a mut W {
                self.variant(SMS_A::ENCODER_MODE_2)
            }
            #[doc = "Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input."]
            #[inline(always)]
            pub fn encoder_mode_3(self) -> &'a mut W {
                self.variant(SMS_A::ENCODER_MODE_3)
            }
            #[doc = "Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers."]
            #[inline(always)]
            pub fn reset_mode(self) -> &'a mut W {
                self.variant(SMS_A::RESET_MODE)
            }
            #[doc = "Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled."]
            #[inline(always)]
            pub fn gated_mode(self) -> &'a mut W {
                self.variant(SMS_A::GATED_MODE)
            }
            #[doc = "Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled."]
            #[inline(always)]
            pub fn trigger_mode(self) -> &'a mut W {
                self.variant(SMS_A::TRIGGER_MODE)
            }
            #[doc = "External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter."]
            #[inline(always)]
            pub fn ext_clock_mode(self) -> &'a mut W {
                self.variant(SMS_A::EXT_CLOCK_MODE)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&self) -> ETP_R {
                ETP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&self) -> ECE_R {
                ECE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&self) -> ETPS_R {
                ETPS_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&self) -> ETF_R {
                ETF_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&self) -> MSM_R {
                MSM_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&self) -> TS_R {
                TS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&self) -> SMS_R {
                SMS_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&mut self) -> ETP_W {
                ETP_W { w: self }
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&mut self) -> ECE_W {
                ECE_W { w: self }
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&mut self) -> ETPS_W {
                ETPS_W { w: self }
            }
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&mut self) -> ETF_W {
                ETF_W { w: self }
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&mut self) -> MSM_W {
                MSM_W { w: self }
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&mut self) -> TS_W {
                TS_W { w: self }
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&mut self) -> SMS_W {
                SMS_W { w: self }
            }
        }
    }
    #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Trigger DMA request enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TDE_A {
            #[doc = "0: Trigger DMA request disabled"]
            DISABLED = 0,
            #[doc = "1: Trigger DMA request enabled"]
            ENABLED = 1,
        }
        impl From<TDE_A> for bool {
            #[inline(always)]
            fn from(variant: TDE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TDE`"]
        pub type TDE_R = crate::R<bool, TDE_A>;
        impl TDE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TDE_A {
                match self.bits {
                    false => TDE_A::DISABLED,
                    true => TDE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TDE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TDE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TDE`"]
        pub struct TDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TDE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Trigger DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TDE_A::DISABLED)
            }
            #[doc = "Trigger DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TDE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `COMDE`"]
        pub type COMDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMDE`"]
        pub struct COMDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 DMA request enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4DE_A {
            #[doc = "0: CCx DMA request disabled"]
            DISABLED = 0,
            #[doc = "1: CCx DMA request enabled"]
            ENABLED = 1,
        }
        impl From<CC4DE_A> for bool {
            #[inline(always)]
            fn from(variant: CC4DE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC4DE`"]
        pub type CC4DE_R = crate::R<bool, CC4DE_A>;
        impl CC4DE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CC4DE_A {
                match self.bits {
                    false => CC4DE_A::DISABLED,
                    true => CC4DE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CC4DE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CC4DE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CC4DE`"]
        pub struct CC4DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4DE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4DE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4DE_A::DISABLED)
            }
            #[doc = "CCx DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4DE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 DMA request enable"]
        pub type CC3DE_A = CC4DE_A;
        #[doc = "Reader of field `CC3DE`"]
        pub type CC3DE_R = crate::R<bool, CC4DE_A>;
        #[doc = "Write proxy for field `CC3DE`"]
        pub struct CC3DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3DE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3DE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4DE_A::DISABLED)
            }
            #[doc = "CCx DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4DE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Capture/Compare 2 DMA request enable"]
        pub type CC2DE_A = CC4DE_A;
        #[doc = "Reader of field `CC2DE`"]
        pub type CC2DE_R = crate::R<bool, CC4DE_A>;
        #[doc = "Write proxy for field `CC2DE`"]
        pub struct CC2DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2DE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2DE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4DE_A::DISABLED)
            }
            #[doc = "CCx DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4DE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 DMA request enable"]
        pub type CC1DE_A = CC4DE_A;
        #[doc = "Reader of field `CC1DE`"]
        pub type CC1DE_R = crate::R<bool, CC4DE_A>;
        #[doc = "Write proxy for field `CC1DE`"]
        pub struct CC1DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1DE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1DE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4DE_A::DISABLED)
            }
            #[doc = "CCx DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4DE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Update DMA request enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDE_A {
            #[doc = "0: Update DMA request disabled"]
            DISABLED = 0,
            #[doc = "1: Update DMA request enabled"]
            ENABLED = 1,
        }
        impl From<UDE_A> for bool {
            #[inline(always)]
            fn from(variant: UDE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDE`"]
        pub type UDE_R = crate::R<bool, UDE_A>;
        impl UDE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDE_A {
                match self.bits {
                    false => UDE_A::DISABLED,
                    true => UDE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UDE`"]
        pub struct UDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDE_A::DISABLED)
            }
            #[doc = "Update DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `BIE`"]
        pub type BIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BIE`"]
        pub struct BIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Trigger interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIE_A {
            #[doc = "0: Trigger interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Trigger interrupt enabled"]
            ENABLED = 1,
        }
        impl From<TIE_A> for bool {
            #[inline(always)]
            fn from(variant: TIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIE`"]
        pub type TIE_R = crate::R<bool, TIE_A>;
        impl TIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIE_A {
                match self.bits {
                    false => TIE_A::DISABLED,
                    true => TIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TIE`"]
        pub struct TIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Trigger interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIE_A::DISABLED)
            }
            #[doc = "Trigger interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `COMIE`"]
        pub type COMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMIE`"]
        pub struct COMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4IE_A {
            #[doc = "0: CCx interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: CCx interrupt enabled"]
            ENABLED = 1,
        }
        impl From<CC4IE_A> for bool {
            #[inline(always)]
            fn from(variant: CC4IE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC4IE`"]
        pub type CC4IE_R = crate::R<bool, CC4IE_A>;
        impl CC4IE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CC4IE_A {
                match self.bits {
                    false => CC4IE_A::DISABLED,
                    true => CC4IE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CC4IE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CC4IE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CC4IE`"]
        pub struct CC4IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4IE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4IE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4IE_A::DISABLED)
            }
            #[doc = "CCx interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4IE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 interrupt enable"]
        pub type CC3IE_A = CC4IE_A;
        #[doc = "Reader of field `CC3IE`"]
        pub type CC3IE_R = crate::R<bool, CC4IE_A>;
        #[doc = "Write proxy for field `CC3IE`"]
        pub struct CC3IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3IE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3IE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4IE_A::DISABLED)
            }
            #[doc = "CCx interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4IE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Capture/Compare 2 interrupt enable"]
        pub type CC2IE_A = CC4IE_A;
        #[doc = "Reader of field `CC2IE`"]
        pub type CC2IE_R = crate::R<bool, CC4IE_A>;
        #[doc = "Write proxy for field `CC2IE`"]
        pub struct CC2IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2IE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4IE_A::DISABLED)
            }
            #[doc = "CCx interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4IE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 interrupt enable"]
        pub type CC1IE_A = CC4IE_A;
        #[doc = "Reader of field `CC1IE`"]
        pub type CC1IE_R = crate::R<bool, CC4IE_A>;
        #[doc = "Write proxy for field `CC1IE`"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1IE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4IE_A::DISABLED)
            }
            #[doc = "CCx interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4IE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIE_A {
            #[doc = "0: Update interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Update interrupt enabled"]
            ENABLED = 1,
        }
        impl From<UIE_A> for bool {
            #[inline(always)]
            fn from(variant: UIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, UIE_A>;
        impl UIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIE_A {
                match self.bits {
                    false => UIE_A::DISABLED,
                    true => UIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UIE_A::DISABLED)
            }
            #[doc = "Update interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&self) -> TDE_R {
                TDE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - COM DMA request enable"]
            #[inline(always)]
            pub fn comde(&self) -> COMDE_R {
                COMDE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
            #[inline(always)]
            pub fn cc4de(&self) -> CC4DE_R {
                CC4DE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
            #[inline(always)]
            pub fn cc3de(&self) -> CC3DE_R {
                CC3DE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&self) -> CC2DE_R {
                CC2DE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&self) -> CC1DE_R {
                CC1DE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&self) -> UDE_R {
                UDE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Break interrupt enable"]
            #[inline(always)]
            pub fn bie(&self) -> BIE_R {
                BIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&self) -> TIE_R {
                TIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - COM interrupt enable"]
            #[inline(always)]
            pub fn comie(&self) -> COMIE_R {
                COMIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
            #[inline(always)]
            pub fn cc4ie(&self) -> CC4IE_R {
                CC4IE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
            #[inline(always)]
            pub fn cc3ie(&self) -> CC3IE_R {
                CC3IE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&self) -> CC2IE_R {
                CC2IE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&mut self) -> TDE_W {
                TDE_W { w: self }
            }
            #[doc = "Bit 13 - COM DMA request enable"]
            #[inline(always)]
            pub fn comde(&mut self) -> COMDE_W {
                COMDE_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
            #[inline(always)]
            pub fn cc4de(&mut self) -> CC4DE_W {
                CC4DE_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
            #[inline(always)]
            pub fn cc3de(&mut self) -> CC3DE_W {
                CC3DE_W { w: self }
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&mut self) -> CC2DE_W {
                CC2DE_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&mut self) -> CC1DE_W {
                CC1DE_W { w: self }
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&mut self) -> UDE_W {
                UDE_W { w: self }
            }
            #[doc = "Bit 7 - Break interrupt enable"]
            #[inline(always)]
            pub fn bie(&mut self) -> BIE_W {
                BIE_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&mut self) -> TIE_W {
                TIE_W { w: self }
            }
            #[doc = "Bit 5 - COM interrupt enable"]
            #[inline(always)]
            pub fn comie(&mut self) -> COMIE_W {
                COMIE_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
            #[inline(always)]
            pub fn cc4ie(&mut self) -> CC4IE_W {
                CC4IE_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
            #[inline(always)]
            pub fn cc3ie(&mut self) -> CC3IE_W {
                CC3IE_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&mut self) -> CC2IE_W {
                CC2IE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Capture/Compare 4 overcapture flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4OF_A {
            #[doc = "1: The counter value has been captured in TIMx_CCRx register while CCxIF flag was already set"]
            OVERCAPTURE = 1,
        }
        impl From<CC4OF_A> for bool {
            #[inline(always)]
            fn from(variant: CC4OF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC4OF`"]
        pub type CC4OF_R = crate::R<bool, CC4OF_A>;
        impl CC4OF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, CC4OF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(CC4OF_A::OVERCAPTURE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OVERCAPTURE`"]
            #[inline(always)]
            pub fn is_overcapture(&self) -> bool {
                *self == CC4OF_A::OVERCAPTURE
            }
        }
        #[doc = "Capture/Compare 4 overcapture flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4OF_AW {
            #[doc = "0: Clear flag"]
            CLEAR = 0,
        }
        impl From<CC4OF_AW> for bool {
            #[inline(always)]
            fn from(variant: CC4OF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `CC4OF`"]
        pub struct CC4OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4OF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4OF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4OF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 overcapture flag"]
        pub type CC3OF_A = CC4OF_A;
        #[doc = "Reader of field `CC3OF`"]
        pub type CC3OF_R = crate::R<bool, CC4OF_A>;
        #[doc = "Capture/Compare 3 overcapture flag"]
        pub type CC3OF_AW = CC4OF_AW;
        #[doc = "Write proxy for field `CC3OF`"]
        pub struct CC3OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3OF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3OF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4OF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Capture/compare 2 overcapture flag"]
        pub type CC2OF_A = CC4OF_A;
        #[doc = "Reader of field `CC2OF`"]
        pub type CC2OF_R = crate::R<bool, CC4OF_A>;
        #[doc = "Capture/compare 2 overcapture flag"]
        pub type CC2OF_AW = CC4OF_AW;
        #[doc = "Write proxy for field `CC2OF`"]
        pub struct CC2OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2OF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2OF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4OF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 overcapture flag"]
        pub type CC1OF_A = CC4OF_A;
        #[doc = "Reader of field `CC1OF`"]
        pub type CC1OF_R = crate::R<bool, CC4OF_A>;
        #[doc = "Capture/Compare 1 overcapture flag"]
        pub type CC1OF_AW = CC4OF_AW;
        #[doc = "Write proxy for field `CC1OF`"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1OF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4OF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `BIF`"]
        pub type BIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BIF`"]
        pub struct BIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Trigger interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIF_A {
            #[doc = "0: No trigger event occurred"]
            NOTRIGGER = 0,
            #[doc = "1: Trigger interrupt pending"]
            TRIGGER = 1,
        }
        impl From<TIF_A> for bool {
            #[inline(always)]
            fn from(variant: TIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIF`"]
        pub type TIF_R = crate::R<bool, TIF_A>;
        impl TIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIF_A {
                match self.bits {
                    false => TIF_A::NOTRIGGER,
                    true => TIF_A::TRIGGER,
                }
            }
            #[doc = "Checks if the value of the field is `NOTRIGGER`"]
            #[inline(always)]
            pub fn is_no_trigger(&self) -> bool {
                *self == TIF_A::NOTRIGGER
            }
            #[doc = "Checks if the value of the field is `TRIGGER`"]
            #[inline(always)]
            pub fn is_trigger(&self) -> bool {
                *self == TIF_A::TRIGGER
            }
        }
        #[doc = "Trigger interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIF_AW {
            #[doc = "0: Clear flag"]
            CLEAR = 0,
        }
        impl From<TIF_AW> for bool {
            #[inline(always)]
            fn from(variant: TIF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `TIF`"]
        pub struct TIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(TIF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `COMIF`"]
        pub type COMIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMIF`"]
        pub struct COMIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4IF_A {
            #[doc = "1: If CC1 is an output: The content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. If CC1 is an input: The counter value has been captured in TIMx_CCR1 register."]
            MATCH = 1,
        }
        impl From<CC4IF_A> for bool {
            #[inline(always)]
            fn from(variant: CC4IF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC4IF`"]
        pub type CC4IF_R = crate::R<bool, CC4IF_A>;
        impl CC4IF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, CC4IF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(CC4IF_A::MATCH),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `MATCH`"]
            #[inline(always)]
            pub fn is_match_(&self) -> bool {
                *self == CC4IF_A::MATCH
            }
        }
        #[doc = "Capture/Compare 4 interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4IF_AW {
            #[doc = "0: Clear flag"]
            CLEAR = 0,
        }
        impl From<CC4IF_AW> for bool {
            #[inline(always)]
            fn from(variant: CC4IF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `CC4IF`"]
        pub struct CC4IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4IF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4IF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4IF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 interrupt flag"]
        pub type CC3IF_A = CC4IF_A;
        #[doc = "Reader of field `CC3IF`"]
        pub type CC3IF_R = crate::R<bool, CC4IF_A>;
        #[doc = "Capture/Compare 3 interrupt flag"]
        pub type CC3IF_AW = CC4IF_AW;
        #[doc = "Write proxy for field `CC3IF`"]
        pub struct CC3IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3IF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3IF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4IF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Capture/Compare 2 interrupt flag"]
        pub type CC2IF_A = CC4IF_A;
        #[doc = "Reader of field `CC2IF`"]
        pub type CC2IF_R = crate::R<bool, CC4IF_A>;
        #[doc = "Capture/Compare 2 interrupt flag"]
        pub type CC2IF_AW = CC4IF_AW;
        #[doc = "Write proxy for field `CC2IF`"]
        pub struct CC2IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2IF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4IF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/compare 1 interrupt flag"]
        pub type CC1IF_A = CC4IF_A;
        #[doc = "Reader of field `CC1IF`"]
        pub type CC1IF_R = crate::R<bool, CC4IF_A>;
        #[doc = "Capture/compare 1 interrupt flag"]
        pub type CC1IF_AW = CC4IF_AW;
        #[doc = "Write proxy for field `CC1IF`"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1IF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4IF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIF_A {
            #[doc = "0: No update occurred"]
            CLEAR = 0,
            #[doc = "1: Update interrupt pending."]
            UPDATEPENDING = 1,
        }
        impl From<UIF_A> for bool {
            #[inline(always)]
            fn from(variant: UIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, UIF_A>;
        impl UIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIF_A {
                match self.bits {
                    false => UIF_A::CLEAR,
                    true => UIF_A::UPDATEPENDING,
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == UIF_A::CLEAR
            }
            #[doc = "Checks if the value of the field is `UPDATEPENDING`"]
            #[inline(always)]
            pub fn is_update_pending(&self) -> bool {
                *self == UIF_A::UPDATEPENDING
            }
        }
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No update occurred"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(UIF_A::CLEAR)
            }
            #[doc = "Update interrupt pending."]
            #[inline(always)]
            pub fn update_pending(self) -> &'a mut W {
                self.variant(UIF_A::UPDATEPENDING)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
            #[inline(always)]
            pub fn cc4of(&self) -> CC4OF_R {
                CC4OF_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
            #[inline(always)]
            pub fn cc3of(&self) -> CC3OF_R {
                CC3OF_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&self) -> CC2OF_R {
                CC2OF_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Break interrupt flag"]
            #[inline(always)]
            pub fn bif(&self) -> BIF_R {
                BIF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&self) -> TIF_R {
                TIF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - COM interrupt flag"]
            #[inline(always)]
            pub fn comif(&self) -> COMIF_R {
                COMIF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
            #[inline(always)]
            pub fn cc4if(&self) -> CC4IF_R {
                CC4IF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
            #[inline(always)]
            pub fn cc3if(&self) -> CC3IF_R {
                CC3IF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&self) -> CC2IF_R {
                CC2IF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
            #[inline(always)]
            pub fn cc4of(&mut self) -> CC4OF_W {
                CC4OF_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
            #[inline(always)]
            pub fn cc3of(&mut self) -> CC3OF_W {
                CC3OF_W { w: self }
            }
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&mut self) -> CC2OF_W {
                CC2OF_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
            #[doc = "Bit 7 - Break interrupt flag"]
            #[inline(always)]
            pub fn bif(&mut self) -> BIF_W {
                BIF_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&mut self) -> TIF_W {
                TIF_W { w: self }
            }
            #[doc = "Bit 5 - COM interrupt flag"]
            #[inline(always)]
            pub fn comif(&mut self) -> COMIF_W {
                COMIF_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
            #[inline(always)]
            pub fn cc4if(&mut self) -> CC4IF_W {
                CC4IF_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
            #[inline(always)]
            pub fn cc3if(&mut self) -> CC3IF_W {
                CC3IF_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&mut self) -> CC2IF_W {
                CC2IF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
        }
    }
    #[doc = "event generation register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `BG`"]
        pub struct BG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Trigger generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TG_AW {
            #[doc = "1: The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled."]
            TRIGGER = 1,
        }
        impl From<TG_AW> for bool {
            #[inline(always)]
            fn from(variant: TG_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `TG`"]
        pub struct TG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TG_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(TG_AW::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `COMG`"]
        pub struct COMG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Capture/compare 4 generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4G_AW {
            #[doc = "1: If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            TRIGGER = 1,
        }
        impl From<CC4G_AW> for bool {
            #[inline(always)]
            fn from(variant: CC4G_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `CC4G`"]
        pub struct CC4G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4G_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4G_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(CC4G_AW::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Capture/compare 3 generation"]
        pub type CC3G_AW = CC4G_AW;
        #[doc = "Write proxy for field `CC3G`"]
        pub struct CC3G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3G_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3G_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(CC4G_AW::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Capture/compare 2 generation"]
        pub type CC2G_AW = CC4G_AW;
        #[doc = "Write proxy for field `CC2G`"]
        pub struct CC2G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2G_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2G_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(CC4G_AW::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/compare 1 generation"]
        pub type CC1G_AW = CC4G_AW;
        #[doc = "Write proxy for field `CC1G`"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1G_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(CC4G_AW::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UG_AW {
            #[doc = "1: Re-initializes the timer counter and generates an update of the registers."]
            UPDATE = 1,
        }
        impl From<UG_AW> for bool {
            #[inline(always)]
            fn from(variant: UG_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UG_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Re-initializes the timer counter and generates an update of the registers."]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(UG_AW::UPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 7 - Break generation"]
            #[inline(always)]
            pub fn bg(&mut self) -> BG_W {
                BG_W { w: self }
            }
            #[doc = "Bit 6 - Trigger generation"]
            #[inline(always)]
            pub fn tg(&mut self) -> TG_W {
                TG_W { w: self }
            }
            #[doc = "Bit 5 - Capture/Compare control update generation"]
            #[inline(always)]
            pub fn comg(&mut self) -> COMG_W {
                COMG_W { w: self }
            }
            #[doc = "Bit 4 - Capture/compare 4 generation"]
            #[inline(always)]
            pub fn cc4g(&mut self) -> CC4G_W {
                CC4G_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare 3 generation"]
            #[inline(always)]
            pub fn cc3g(&mut self) -> CC3G_W {
                CC3G_W { w: self }
            }
            #[doc = "Bit 2 - Capture/compare 2 generation"]
            #[inline(always)]
            pub fn cc2g(&mut self) -> CC2G_W {
                CC2G_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](ccmr1_output) module"]
    pub type CCMR1_OUTPUT = crate::Reg<u32, _CCMR1_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_OUTPUT;
    #[doc = "`read()` method returns [ccmr1_output::R](ccmr1_output::R) reader structure"]
    impl crate::Readable for CCMR1_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](ccmr1_output::W) writer structure"]
    impl crate::Writable for CCMR1_OUTPUT {}
    #[doc = "capture/compare mode register (output mode)"]
    pub mod ccmr1_output {
        #[doc = "Reader of register CCMR1_Output"]
        pub type R = crate::R<u32, super::CCMR1_OUTPUT>;
        #[doc = "Writer for register CCMR1_Output"]
        pub type W = crate::W<u32, super::CCMR1_OUTPUT>;
        #[doc = "Register CCMR1_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OC2CE`"]
        pub type OC2CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2CE`"]
        pub struct OC2CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Output Compare 2 mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OC2M_A {
            #[doc = "0: The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            FROZEN = 0,
            #[doc = "1: Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            ACTIVEONMATCH = 1,
            #[doc = "2: Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            INACTIVEONMATCH = 2,
            #[doc = "3: OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            TOGGLE = 3,
            #[doc = "4: OCyREF is forced low"]
            FORCEINACTIVE = 4,
            #[doc = "5: OCyREF is forced high"]
            FORCEACTIVE = 5,
            #[doc = "6: In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            PWMMODE1 = 6,
            #[doc = "7: Inversely to PwmMode1"]
            PWMMODE2 = 7,
        }
        impl From<OC2M_A> for u8 {
            #[inline(always)]
            fn from(variant: OC2M_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `OC2M`"]
        pub type OC2M_R = crate::R<u8, OC2M_A>;
        impl OC2M_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC2M_A {
                match self.bits {
                    0 => OC2M_A::FROZEN,
                    1 => OC2M_A::ACTIVEONMATCH,
                    2 => OC2M_A::INACTIVEONMATCH,
                    3 => OC2M_A::TOGGLE,
                    4 => OC2M_A::FORCEINACTIVE,
                    5 => OC2M_A::FORCEACTIVE,
                    6 => OC2M_A::PWMMODE1,
                    7 => OC2M_A::PWMMODE2,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `FROZEN`"]
            #[inline(always)]
            pub fn is_frozen(&self) -> bool {
                *self == OC2M_A::FROZEN
            }
            #[doc = "Checks if the value of the field is `ACTIVEONMATCH`"]
            #[inline(always)]
            pub fn is_active_on_match(&self) -> bool {
                *self == OC2M_A::ACTIVEONMATCH
            }
            #[doc = "Checks if the value of the field is `INACTIVEONMATCH`"]
            #[inline(always)]
            pub fn is_inactive_on_match(&self) -> bool {
                *self == OC2M_A::INACTIVEONMATCH
            }
            #[doc = "Checks if the value of the field is `TOGGLE`"]
            #[inline(always)]
            pub fn is_toggle(&self) -> bool {
                *self == OC2M_A::TOGGLE
            }
            #[doc = "Checks if the value of the field is `FORCEINACTIVE`"]
            #[inline(always)]
            pub fn is_force_inactive(&self) -> bool {
                *self == OC2M_A::FORCEINACTIVE
            }
            #[doc = "Checks if the value of the field is `FORCEACTIVE`"]
            #[inline(always)]
            pub fn is_force_active(&self) -> bool {
                *self == OC2M_A::FORCEACTIVE
            }
            #[doc = "Checks if the value of the field is `PWMMODE1`"]
            #[inline(always)]
            pub fn is_pwm_mode1(&self) -> bool {
                *self == OC2M_A::PWMMODE1
            }
            #[doc = "Checks if the value of the field is `PWMMODE2`"]
            #[inline(always)]
            pub fn is_pwm_mode2(&self) -> bool {
                *self == OC2M_A::PWMMODE2
            }
        }
        #[doc = "Write proxy for field `OC2M`"]
        pub struct OC2M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2M_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC2M_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            #[inline(always)]
            pub fn frozen(self) -> &'a mut W {
                self.variant(OC2M_A::FROZEN)
            }
            #[doc = "Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn active_on_match(self) -> &'a mut W {
                self.variant(OC2M_A::ACTIVEONMATCH)
            }
            #[doc = "Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn inactive_on_match(self) -> &'a mut W {
                self.variant(OC2M_A::INACTIVEONMATCH)
            }
            #[doc = "OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            #[inline(always)]
            pub fn toggle(self) -> &'a mut W {
                self.variant(OC2M_A::TOGGLE)
            }
            #[doc = "OCyREF is forced low"]
            #[inline(always)]
            pub fn force_inactive(self) -> &'a mut W {
                self.variant(OC2M_A::FORCEINACTIVE)
            }
            #[doc = "OCyREF is forced high"]
            #[inline(always)]
            pub fn force_active(self) -> &'a mut W {
                self.variant(OC2M_A::FORCEACTIVE)
            }
            #[doc = "In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            #[inline(always)]
            pub fn pwm_mode1(self) -> &'a mut W {
                self.variant(OC2M_A::PWMMODE1)
            }
            #[doc = "Inversely to PwmMode1"]
            #[inline(always)]
            pub fn pwm_mode2(self) -> &'a mut W {
                self.variant(OC2M_A::PWMMODE2)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Output Compare 2 preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OC2PE_A {
            #[doc = "0: Preload register on CCR2 disabled. New values written to CCR2 are taken into account immediately"]
            DISABLED = 0,
            #[doc = "1: Preload register on CCR2 enabled. Preload value is loaded into active register on each update event"]
            ENABLED = 1,
        }
        impl From<OC2PE_A> for bool {
            #[inline(always)]
            fn from(variant: OC2PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OC2PE`"]
        pub type OC2PE_R = crate::R<bool, OC2PE_A>;
        impl OC2PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC2PE_A {
                match self.bits {
                    false => OC2PE_A::DISABLED,
                    true => OC2PE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OC2PE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OC2PE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OC2PE`"]
        pub struct OC2PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC2PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Preload register on CCR2 disabled. New values written to CCR2 are taken into account immediately"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OC2PE_A::DISABLED)
            }
            #[doc = "Preload register on CCR2 enabled. Preload value is loaded into active register on each update event"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OC2PE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC2FE`"]
        pub type OC2FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2FE`"]
        pub struct OC2FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 2 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC2S_A {
            #[doc = "0: CC2 channel is configured as output"]
            OUTPUT = 0,
        }
        impl From<CC2S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC2S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC2S`"]
        pub type CC2S_R = crate::R<u8, CC2S_A>;
        impl CC2S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC2S_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CC2S_A::OUTPUT),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == CC2S_A::OUTPUT
            }
        }
        #[doc = "Write proxy for field `CC2S`"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC2 channel is configured as output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(CC2S_A::OUTPUT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OC1CE`"]
        pub type OC1CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1CE`"]
        pub struct OC1CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Output Compare 1 mode"]
        pub type OC1M_A = OC2M_A;
        #[doc = "Reader of field `OC1M`"]
        pub type OC1M_R = crate::R<u8, OC2M_A>;
        #[doc = "Write proxy for field `OC1M`"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC1M_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            #[inline(always)]
            pub fn frozen(self) -> &'a mut W {
                self.variant(OC2M_A::FROZEN)
            }
            #[doc = "Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn active_on_match(self) -> &'a mut W {
                self.variant(OC2M_A::ACTIVEONMATCH)
            }
            #[doc = "Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn inactive_on_match(self) -> &'a mut W {
                self.variant(OC2M_A::INACTIVEONMATCH)
            }
            #[doc = "OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            #[inline(always)]
            pub fn toggle(self) -> &'a mut W {
                self.variant(OC2M_A::TOGGLE)
            }
            #[doc = "OCyREF is forced low"]
            #[inline(always)]
            pub fn force_inactive(self) -> &'a mut W {
                self.variant(OC2M_A::FORCEINACTIVE)
            }
            #[doc = "OCyREF is forced high"]
            #[inline(always)]
            pub fn force_active(self) -> &'a mut W {
                self.variant(OC2M_A::FORCEACTIVE)
            }
            #[doc = "In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            #[inline(always)]
            pub fn pwm_mode1(self) -> &'a mut W {
                self.variant(OC2M_A::PWMMODE1)
            }
            #[doc = "Inversely to PwmMode1"]
            #[inline(always)]
            pub fn pwm_mode2(self) -> &'a mut W {
                self.variant(OC2M_A::PWMMODE2)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Output Compare 1 preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OC1PE_A {
            #[doc = "0: Preload register on CCR1 disabled. New values written to CCR1 are taken into account immediately"]
            DISABLED = 0,
            #[doc = "1: Preload register on CCR1 enabled. Preload value is loaded into active register on each update event"]
            ENABLED = 1,
        }
        impl From<OC1PE_A> for bool {
            #[inline(always)]
            fn from(variant: OC1PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OC1PE`"]
        pub type OC1PE_R = crate::R<bool, OC1PE_A>;
        impl OC1PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC1PE_A {
                match self.bits {
                    false => OC1PE_A::DISABLED,
                    true => OC1PE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OC1PE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OC1PE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OC1PE`"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC1PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Preload register on CCR1 disabled. New values written to CCR1 are taken into account immediately"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OC1PE_A::DISABLED)
            }
            #[doc = "Preload register on CCR1 enabled. Preload value is loaded into active register on each update event"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OC1PE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC1FE`"]
        pub type OC1FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1FE`"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC1S_A {
            #[doc = "0: CC1 channel is configured as output"]
            OUTPUT = 0,
        }
        impl From<CC1S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC1S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, CC1S_A>;
        impl CC1S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC1S_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CC1S_A::OUTPUT),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == CC1S_A::OUTPUT
            }
        }
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC1 channel is configured as output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(CC1S_A::OUTPUT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Output Compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&self) -> OC2CE_R {
                OC2CE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Output Compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&self) -> OC2M_R {
                OC2M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 11 - Output Compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&self) -> OC2PE_R {
                OC2PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output Compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&self) -> OC2FE_R {
                OC2FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Output Compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&self) -> OC1CE_R {
                OC1CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Output Compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Output Compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&mut self) -> OC2CE_W {
                OC2CE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output Compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&mut self) -> OC2M_W {
                OC2M_W { w: self }
            }
            #[doc = "Bit 11 - Output Compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&mut self) -> OC2PE_W {
                OC2PE_W { w: self }
            }
            #[doc = "Bit 10 - Output Compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&mut self) -> OC2FE_W {
                OC2FE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bit 7 - Output Compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&mut self) -> OC1CE_W {
                OC1CE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bit 2 - Output Compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](ccmr1_input) module"]
    pub type CCMR1_INPUT = crate::Reg<u32, _CCMR1_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_INPUT;
    #[doc = "`read()` method returns [ccmr1_input::R](ccmr1_input::R) reader structure"]
    impl crate::Readable for CCMR1_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](ccmr1_input::W) writer structure"]
    impl crate::Writable for CCMR1_INPUT {}
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Reader of register CCMR1_Input"]
        pub type R = crate::R<u32, super::CCMR1_INPUT>;
        #[doc = "Writer for register CCMR1_Input"]
        pub type W = crate::W<u32, super::CCMR1_INPUT>;
        #[doc = "Register CCMR1_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC2F`"]
        pub type IC2F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC2F`"]
        pub struct IC2F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IC2PSC`"]
        pub type IC2PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC2PSC`"]
        pub struct IC2PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 2 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC2S_A {
            #[doc = "1: CC2 channel is configured as input, IC2 is mapped on TI2"]
            TI2 = 1,
            #[doc = "2: CC2 channel is configured as input, IC2 is mapped on TI1"]
            TI1 = 2,
            #[doc = "3: CC2 channel is configured as input, IC2 is mapped on TRC"]
            TRC = 3,
        }
        impl From<CC2S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC2S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC2S`"]
        pub type CC2S_R = crate::R<u8, CC2S_A>;
        impl CC2S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC2S_A> {
                use crate::Variant::*;
                match self.bits {
                    1 => Val(CC2S_A::TI2),
                    2 => Val(CC2S_A::TI1),
                    3 => Val(CC2S_A::TRC),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TI2`"]
            #[inline(always)]
            pub fn is_ti2(&self) -> bool {
                *self == CC2S_A::TI2
            }
            #[doc = "Checks if the value of the field is `TI1`"]
            #[inline(always)]
            pub fn is_ti1(&self) -> bool {
                *self == CC2S_A::TI1
            }
            #[doc = "Checks if the value of the field is `TRC`"]
            #[inline(always)]
            pub fn is_trc(&self) -> bool {
                *self == CC2S_A::TRC
            }
        }
        #[doc = "Write proxy for field `CC2S`"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC2 channel is configured as input, IC2 is mapped on TI2"]
            #[inline(always)]
            pub fn ti2(self) -> &'a mut W {
                self.variant(CC2S_A::TI2)
            }
            #[doc = "CC2 channel is configured as input, IC2 is mapped on TI1"]
            #[inline(always)]
            pub fn ti1(self) -> &'a mut W {
                self.variant(CC2S_A::TI1)
            }
            #[doc = "CC2 channel is configured as input, IC2 is mapped on TRC"]
            #[inline(always)]
            pub fn trc(self) -> &'a mut W {
                self.variant(CC2S_A::TRC)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Input capture 1 filter\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum IC1F_A {
            #[doc = "0: No filter, sampling is done at fDTS"]
            NOFILTER = 0,
            #[doc = "1: fSAMPLING=fCK_INT, N=2"]
            FCK_INT_N2 = 1,
            #[doc = "2: fSAMPLING=fCK_INT, N=4"]
            FCK_INT_N4 = 2,
            #[doc = "3: fSAMPLING=fCK_INT, N=8"]
            FCK_INT_N8 = 3,
            #[doc = "4: fSAMPLING=fDTS/2, N=6"]
            FDTS_DIV2_N6 = 4,
            #[doc = "5: fSAMPLING=fDTS/2, N=8"]
            FDTS_DIV2_N8 = 5,
            #[doc = "6: fSAMPLING=fDTS/4, N=6"]
            FDTS_DIV4_N6 = 6,
            #[doc = "7: fSAMPLING=fDTS/4, N=8"]
            FDTS_DIV4_N8 = 7,
            #[doc = "8: fSAMPLING=fDTS/8, N=6"]
            FDTS_DIV8_N6 = 8,
            #[doc = "9: fSAMPLING=fDTS/8, N=8"]
            FDTS_DIV8_N8 = 9,
            #[doc = "10: fSAMPLING=fDTS/16, N=5"]
            FDTS_DIV16_N5 = 10,
            #[doc = "11: fSAMPLING=fDTS/16, N=6"]
            FDTS_DIV16_N6 = 11,
            #[doc = "12: fSAMPLING=fDTS/16, N=8"]
            FDTS_DIV16_N8 = 12,
            #[doc = "13: fSAMPLING=fDTS/32, N=5"]
            FDTS_DIV32_N5 = 13,
            #[doc = "14: fSAMPLING=fDTS/32, N=6"]
            FDTS_DIV32_N6 = 14,
            #[doc = "15: fSAMPLING=fDTS/32, N=8"]
            FDTS_DIV32_N8 = 15,
        }
        impl From<IC1F_A> for u8 {
            #[inline(always)]
            fn from(variant: IC1F_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `IC1F`"]
        pub type IC1F_R = crate::R<u8, IC1F_A>;
        impl IC1F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IC1F_A {
                match self.bits {
                    0 => IC1F_A::NOFILTER,
                    1 => IC1F_A::FCK_INT_N2,
                    2 => IC1F_A::FCK_INT_N4,
                    3 => IC1F_A::FCK_INT_N8,
                    4 => IC1F_A::FDTS_DIV2_N6,
                    5 => IC1F_A::FDTS_DIV2_N8,
                    6 => IC1F_A::FDTS_DIV4_N6,
                    7 => IC1F_A::FDTS_DIV4_N8,
                    8 => IC1F_A::FDTS_DIV8_N6,
                    9 => IC1F_A::FDTS_DIV8_N8,
                    10 => IC1F_A::FDTS_DIV16_N5,
                    11 => IC1F_A::FDTS_DIV16_N6,
                    12 => IC1F_A::FDTS_DIV16_N8,
                    13 => IC1F_A::FDTS_DIV32_N5,
                    14 => IC1F_A::FDTS_DIV32_N6,
                    15 => IC1F_A::FDTS_DIV32_N8,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `NOFILTER`"]
            #[inline(always)]
            pub fn is_no_filter(&self) -> bool {
                *self == IC1F_A::NOFILTER
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N2`"]
            #[inline(always)]
            pub fn is_fck_int_n2(&self) -> bool {
                *self == IC1F_A::FCK_INT_N2
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N4`"]
            #[inline(always)]
            pub fn is_fck_int_n4(&self) -> bool {
                *self == IC1F_A::FCK_INT_N4
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N8`"]
            #[inline(always)]
            pub fn is_fck_int_n8(&self) -> bool {
                *self == IC1F_A::FCK_INT_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV2_N6`"]
            #[inline(always)]
            pub fn is_fdts_div2_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV2_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV2_N8`"]
            #[inline(always)]
            pub fn is_fdts_div2_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV2_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV4_N6`"]
            #[inline(always)]
            pub fn is_fdts_div4_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV4_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV4_N8`"]
            #[inline(always)]
            pub fn is_fdts_div4_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV4_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV8_N6`"]
            #[inline(always)]
            pub fn is_fdts_div8_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV8_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV8_N8`"]
            #[inline(always)]
            pub fn is_fdts_div8_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV8_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N5`"]
            #[inline(always)]
            pub fn is_fdts_div16_n5(&self) -> bool {
                *self == IC1F_A::FDTS_DIV16_N5
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N6`"]
            #[inline(always)]
            pub fn is_fdts_div16_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV16_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N8`"]
            #[inline(always)]
            pub fn is_fdts_div16_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV16_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N5`"]
            #[inline(always)]
            pub fn is_fdts_div32_n5(&self) -> bool {
                *self == IC1F_A::FDTS_DIV32_N5
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N6`"]
            #[inline(always)]
            pub fn is_fdts_div32_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV32_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N8`"]
            #[inline(always)]
            pub fn is_fdts_div32_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV32_N8
            }
        }
        #[doc = "Write proxy for field `IC1F`"]
        pub struct IC1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IC1F_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No filter, sampling is done at fDTS"]
            #[inline(always)]
            pub fn no_filter(self) -> &'a mut W {
                self.variant(IC1F_A::NOFILTER)
            }
            #[doc = "fSAMPLING=fCK_INT, N=2"]
            #[inline(always)]
            pub fn fck_int_n2(self) -> &'a mut W {
                self.variant(IC1F_A::FCK_INT_N2)
            }
            #[doc = "fSAMPLING=fCK_INT, N=4"]
            #[inline(always)]
            pub fn fck_int_n4(self) -> &'a mut W {
                self.variant(IC1F_A::FCK_INT_N4)
            }
            #[doc = "fSAMPLING=fCK_INT, N=8"]
            #[inline(always)]
            pub fn fck_int_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FCK_INT_N8)
            }
            #[doc = "fSAMPLING=fDTS/2, N=6"]
            #[inline(always)]
            pub fn fdts_div2_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV2_N6)
            }
            #[doc = "fSAMPLING=fDTS/2, N=8"]
            #[inline(always)]
            pub fn fdts_div2_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV2_N8)
            }
            #[doc = "fSAMPLING=fDTS/4, N=6"]
            #[inline(always)]
            pub fn fdts_div4_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV4_N6)
            }
            #[doc = "fSAMPLING=fDTS/4, N=8"]
            #[inline(always)]
            pub fn fdts_div4_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV4_N8)
            }
            #[doc = "fSAMPLING=fDTS/8, N=6"]
            #[inline(always)]
            pub fn fdts_div8_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV8_N6)
            }
            #[doc = "fSAMPLING=fDTS/8, N=8"]
            #[inline(always)]
            pub fn fdts_div8_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV8_N8)
            }
            #[doc = "fSAMPLING=fDTS/16, N=5"]
            #[inline(always)]
            pub fn fdts_div16_n5(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV16_N5)
            }
            #[doc = "fSAMPLING=fDTS/16, N=6"]
            #[inline(always)]
            pub fn fdts_div16_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV16_N6)
            }
            #[doc = "fSAMPLING=fDTS/16, N=8"]
            #[inline(always)]
            pub fn fdts_div16_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV16_N8)
            }
            #[doc = "fSAMPLING=fDTS/32, N=5"]
            #[inline(always)]
            pub fn fdts_div32_n5(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV32_N5)
            }
            #[doc = "fSAMPLING=fDTS/32, N=6"]
            #[inline(always)]
            pub fn fdts_div32_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV32_N6)
            }
            #[doc = "fSAMPLING=fDTS/32, N=8"]
            #[inline(always)]
            pub fn fdts_div32_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV32_N8)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC1PSC`"]
        pub type IC1PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1PSC`"]
        pub struct IC1PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC1S_A {
            #[doc = "1: CC1 channel is configured as input, IC1 is mapped on TI1"]
            TI1 = 1,
            #[doc = "2: CC1 channel is configured as input, IC1 is mapped on TI2"]
            TI2 = 2,
            #[doc = "3: CC1 channel is configured as input, IC1 is mapped on TRC"]
            TRC = 3,
        }
        impl From<CC1S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC1S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, CC1S_A>;
        impl CC1S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC1S_A> {
                use crate::Variant::*;
                match self.bits {
                    1 => Val(CC1S_A::TI1),
                    2 => Val(CC1S_A::TI2),
                    3 => Val(CC1S_A::TRC),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TI1`"]
            #[inline(always)]
            pub fn is_ti1(&self) -> bool {
                *self == CC1S_A::TI1
            }
            #[doc = "Checks if the value of the field is `TI2`"]
            #[inline(always)]
            pub fn is_ti2(&self) -> bool {
                *self == CC1S_A::TI2
            }
            #[doc = "Checks if the value of the field is `TRC`"]
            #[inline(always)]
            pub fn is_trc(&self) -> bool {
                *self == CC1S_A::TRC
            }
        }
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC1 channel is configured as input, IC1 is mapped on TI1"]
            #[inline(always)]
            pub fn ti1(self) -> &'a mut W {
                self.variant(CC1S_A::TI1)
            }
            #[doc = "CC1 channel is configured as input, IC1 is mapped on TI2"]
            #[inline(always)]
            pub fn ti2(self) -> &'a mut W {
                self.variant(CC1S_A::TI2)
            }
            #[doc = "CC1 channel is configured as input, IC1 is mapped on TRC"]
            #[inline(always)]
            pub fn trc(self) -> &'a mut W {
                self.variant(CC1S_A::TRC)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&self) -> IC2F_R {
                IC2F_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2psc(&self) -> IC2PSC_R {
                IC2PSC_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&self) -> IC1F_R {
                IC1F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&self) -> IC1PSC_R {
                IC1PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&mut self) -> IC2F_W {
                IC2F_W { w: self }
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2psc(&mut self) -> IC2PSC_W {
                IC2PSC_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&mut self) -> IC1F_W {
                IC1F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&mut self) -> IC1PSC_W {
                IC1PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_output](ccmr2_output) module"]
    pub type CCMR2_OUTPUT = crate::Reg<u32, _CCMR2_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR2_OUTPUT;
    #[doc = "`read()` method returns [ccmr2_output::R](ccmr2_output::R) reader structure"]
    impl crate::Readable for CCMR2_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr2_output::W](ccmr2_output::W) writer structure"]
    impl crate::Writable for CCMR2_OUTPUT {}
    #[doc = "capture/compare mode register (output mode)"]
    pub mod ccmr2_output {
        #[doc = "Reader of register CCMR2_Output"]
        pub type R = crate::R<u32, super::CCMR2_OUTPUT>;
        #[doc = "Writer for register CCMR2_Output"]
        pub type W = crate::W<u32, super::CCMR2_OUTPUT>;
        #[doc = "Register CCMR2_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR2_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OC4CE`"]
        pub type OC4CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4CE`"]
        pub struct OC4CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Output compare 4 mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OC4M_A {
            #[doc = "0: The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            FROZEN = 0,
            #[doc = "1: Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            ACTIVEONMATCH = 1,
            #[doc = "2: Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            INACTIVEONMATCH = 2,
            #[doc = "3: OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            TOGGLE = 3,
            #[doc = "4: OCyREF is forced low"]
            FORCEINACTIVE = 4,
            #[doc = "5: OCyREF is forced high"]
            FORCEACTIVE = 5,
            #[doc = "6: In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            PWMMODE1 = 6,
            #[doc = "7: Inversely to PwmMode1"]
            PWMMODE2 = 7,
        }
        impl From<OC4M_A> for u8 {
            #[inline(always)]
            fn from(variant: OC4M_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `OC4M`"]
        pub type OC4M_R = crate::R<u8, OC4M_A>;
        impl OC4M_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC4M_A {
                match self.bits {
                    0 => OC4M_A::FROZEN,
                    1 => OC4M_A::ACTIVEONMATCH,
                    2 => OC4M_A::INACTIVEONMATCH,
                    3 => OC4M_A::TOGGLE,
                    4 => OC4M_A::FORCEINACTIVE,
                    5 => OC4M_A::FORCEACTIVE,
                    6 => OC4M_A::PWMMODE1,
                    7 => OC4M_A::PWMMODE2,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `FROZEN`"]
            #[inline(always)]
            pub fn is_frozen(&self) -> bool {
                *self == OC4M_A::FROZEN
            }
            #[doc = "Checks if the value of the field is `ACTIVEONMATCH`"]
            #[inline(always)]
            pub fn is_active_on_match(&self) -> bool {
                *self == OC4M_A::ACTIVEONMATCH
            }
            #[doc = "Checks if the value of the field is `INACTIVEONMATCH`"]
            #[inline(always)]
            pub fn is_inactive_on_match(&self) -> bool {
                *self == OC4M_A::INACTIVEONMATCH
            }
            #[doc = "Checks if the value of the field is `TOGGLE`"]
            #[inline(always)]
            pub fn is_toggle(&self) -> bool {
                *self == OC4M_A::TOGGLE
            }
            #[doc = "Checks if the value of the field is `FORCEINACTIVE`"]
            #[inline(always)]
            pub fn is_force_inactive(&self) -> bool {
                *self == OC4M_A::FORCEINACTIVE
            }
            #[doc = "Checks if the value of the field is `FORCEACTIVE`"]
            #[inline(always)]
            pub fn is_force_active(&self) -> bool {
                *self == OC4M_A::FORCEACTIVE
            }
            #[doc = "Checks if the value of the field is `PWMMODE1`"]
            #[inline(always)]
            pub fn is_pwm_mode1(&self) -> bool {
                *self == OC4M_A::PWMMODE1
            }
            #[doc = "Checks if the value of the field is `PWMMODE2`"]
            #[inline(always)]
            pub fn is_pwm_mode2(&self) -> bool {
                *self == OC4M_A::PWMMODE2
            }
        }
        #[doc = "Write proxy for field `OC4M`"]
        pub struct OC4M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4M_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC4M_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            #[inline(always)]
            pub fn frozen(self) -> &'a mut W {
                self.variant(OC4M_A::FROZEN)
            }
            #[doc = "Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn active_on_match(self) -> &'a mut W {
                self.variant(OC4M_A::ACTIVEONMATCH)
            }
            #[doc = "Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn inactive_on_match(self) -> &'a mut W {
                self.variant(OC4M_A::INACTIVEONMATCH)
            }
            #[doc = "OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            #[inline(always)]
            pub fn toggle(self) -> &'a mut W {
                self.variant(OC4M_A::TOGGLE)
            }
            #[doc = "OCyREF is forced low"]
            #[inline(always)]
            pub fn force_inactive(self) -> &'a mut W {
                self.variant(OC4M_A::FORCEINACTIVE)
            }
            #[doc = "OCyREF is forced high"]
            #[inline(always)]
            pub fn force_active(self) -> &'a mut W {
                self.variant(OC4M_A::FORCEACTIVE)
            }
            #[doc = "In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            #[inline(always)]
            pub fn pwm_mode1(self) -> &'a mut W {
                self.variant(OC4M_A::PWMMODE1)
            }
            #[doc = "Inversely to PwmMode1"]
            #[inline(always)]
            pub fn pwm_mode2(self) -> &'a mut W {
                self.variant(OC4M_A::PWMMODE2)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Output compare 4 preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OC4PE_A {
            #[doc = "0: Preload register on CCR4 disabled. New values written to CCR4 are taken into account immediately"]
            DISABLED = 0,
            #[doc = "1: Preload register on CCR4 enabled. Preload value is loaded into active register on each update event"]
            ENABLED = 1,
        }
        impl From<OC4PE_A> for bool {
            #[inline(always)]
            fn from(variant: OC4PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OC4PE`"]
        pub type OC4PE_R = crate::R<bool, OC4PE_A>;
        impl OC4PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC4PE_A {
                match self.bits {
                    false => OC4PE_A::DISABLED,
                    true => OC4PE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OC4PE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OC4PE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OC4PE`"]
        pub struct OC4PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC4PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Preload register on CCR4 disabled. New values written to CCR4 are taken into account immediately"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OC4PE_A::DISABLED)
            }
            #[doc = "Preload register on CCR4 enabled. Preload value is loaded into active register on each update event"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OC4PE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC4FE`"]
        pub type OC4FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4FE`"]
        pub struct OC4FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC4S_A {
            #[doc = "0: CC4 channel is configured as output"]
            OUTPUT = 0,
        }
        impl From<CC4S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC4S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC4S`"]
        pub type CC4S_R = crate::R<u8, CC4S_A>;
        impl CC4S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC4S_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CC4S_A::OUTPUT),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == CC4S_A::OUTPUT
            }
        }
        #[doc = "Write proxy for field `CC4S`"]
        pub struct CC4S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC4 channel is configured as output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(CC4S_A::OUTPUT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OC3CE`"]
        pub type OC3CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3CE`"]
        pub struct OC3CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Output compare 3 mode"]
        pub type OC3M_A = OC4M_A;
        #[doc = "Reader of field `OC3M`"]
        pub type OC3M_R = crate::R<u8, OC4M_A>;
        #[doc = "Write proxy for field `OC3M`"]
        pub struct OC3M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3M_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC3M_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            #[inline(always)]
            pub fn frozen(self) -> &'a mut W {
                self.variant(OC4M_A::FROZEN)
            }
            #[doc = "Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn active_on_match(self) -> &'a mut W {
                self.variant(OC4M_A::ACTIVEONMATCH)
            }
            #[doc = "Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn inactive_on_match(self) -> &'a mut W {
                self.variant(OC4M_A::INACTIVEONMATCH)
            }
            #[doc = "OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            #[inline(always)]
            pub fn toggle(self) -> &'a mut W {
                self.variant(OC4M_A::TOGGLE)
            }
            #[doc = "OCyREF is forced low"]
            #[inline(always)]
            pub fn force_inactive(self) -> &'a mut W {
                self.variant(OC4M_A::FORCEINACTIVE)
            }
            #[doc = "OCyREF is forced high"]
            #[inline(always)]
            pub fn force_active(self) -> &'a mut W {
                self.variant(OC4M_A::FORCEACTIVE)
            }
            #[doc = "In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            #[inline(always)]
            pub fn pwm_mode1(self) -> &'a mut W {
                self.variant(OC4M_A::PWMMODE1)
            }
            #[doc = "Inversely to PwmMode1"]
            #[inline(always)]
            pub fn pwm_mode2(self) -> &'a mut W {
                self.variant(OC4M_A::PWMMODE2)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Output compare 3 preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OC3PE_A {
            #[doc = "0: Preload register on CCR3 disabled. New values written to CCR3 are taken into account immediately"]
            DISABLED = 0,
            #[doc = "1: Preload register on CCR3 enabled. Preload value is loaded into active register on each update event"]
            ENABLED = 1,
        }
        impl From<OC3PE_A> for bool {
            #[inline(always)]
            fn from(variant: OC3PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OC3PE`"]
        pub type OC3PE_R = crate::R<bool, OC3PE_A>;
        impl OC3PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC3PE_A {
                match self.bits {
                    false => OC3PE_A::DISABLED,
                    true => OC3PE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OC3PE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OC3PE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OC3PE`"]
        pub struct OC3PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC3PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Preload register on CCR3 disabled. New values written to CCR3 are taken into account immediately"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OC3PE_A::DISABLED)
            }
            #[doc = "Preload register on CCR3 enabled. Preload value is loaded into active register on each update event"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OC3PE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC3FE`"]
        pub type OC3FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3FE`"]
        pub struct OC3FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC3S_A {
            #[doc = "0: CC3 channel is configured as output"]
            OUTPUT = 0,
        }
        impl From<CC3S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC3S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC3S`"]
        pub type CC3S_R = crate::R<u8, CC3S_A>;
        impl CC3S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC3S_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CC3S_A::OUTPUT),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == CC3S_A::OUTPUT
            }
        }
        #[doc = "Write proxy for field `CC3S`"]
        pub struct CC3S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC3 channel is configured as output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(CC3S_A::OUTPUT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&self) -> OC4CE_R {
                OC4CE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&self) -> OC4M_R {
                OC4M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&self) -> OC4PE_R {
                OC4PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&self) -> OC4FE_R {
                OC4FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&self) -> CC4S_R {
                CC4S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&self) -> OC3CE_R {
                OC3CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&self) -> OC3M_R {
                OC3M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&self) -> OC3PE_R {
                OC3PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&self) -> OC3FE_R {
                OC3FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&self) -> CC3S_R {
                CC3S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&mut self) -> OC4CE_W {
                OC4CE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&mut self) -> OC4M_W {
                OC4M_W { w: self }
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&mut self) -> OC4PE_W {
                OC4PE_W { w: self }
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&mut self) -> OC4FE_W {
                OC4FE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&mut self) -> CC4S_W {
                CC4S_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&mut self) -> OC3CE_W {
                OC3CE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&mut self) -> OC3M_W {
                OC3M_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&mut self) -> OC3PE_W {
                OC3PE_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&mut self) -> OC3FE_W {
                OC3FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&mut self) -> CC3S_W {
                CC3S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 2 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_input](ccmr2_input) module"]
    pub type CCMR2_INPUT = crate::Reg<u32, _CCMR2_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR2_INPUT;
    #[doc = "`read()` method returns [ccmr2_input::R](ccmr2_input::R) reader structure"]
    impl crate::Readable for CCMR2_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr2_input::W](ccmr2_input::W) writer structure"]
    impl crate::Writable for CCMR2_INPUT {}
    #[doc = "capture/compare mode register 2 (input mode)"]
    pub mod ccmr2_input {
        #[doc = "Reader of register CCMR2_Input"]
        pub type R = crate::R<u32, super::CCMR2_INPUT>;
        #[doc = "Writer for register CCMR2_Input"]
        pub type W = crate::W<u32, super::CCMR2_INPUT>;
        #[doc = "Register CCMR2_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR2_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC4F`"]
        pub type IC4F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC4F`"]
        pub struct IC4F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC4F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IC4PSC`"]
        pub type IC4PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC4PSC`"]
        pub struct IC4PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC4PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC4S_A {
            #[doc = "1: CC4 channel is configured as input, IC4 is mapped on TI4"]
            TI4 = 1,
            #[doc = "2: CC4 channel is configured as input, IC4 is mapped on TI3"]
            TI3 = 2,
            #[doc = "3: CC4 channel is configured as input, IC4 is mapped on TRC"]
            TRC = 3,
        }
        impl From<CC4S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC4S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC4S`"]
        pub type CC4S_R = crate::R<u8, CC4S_A>;
        impl CC4S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC4S_A> {
                use crate::Variant::*;
                match self.bits {
                    1 => Val(CC4S_A::TI4),
                    2 => Val(CC4S_A::TI3),
                    3 => Val(CC4S_A::TRC),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TI4`"]
            #[inline(always)]
            pub fn is_ti4(&self) -> bool {
                *self == CC4S_A::TI4
            }
            #[doc = "Checks if the value of the field is `TI3`"]
            #[inline(always)]
            pub fn is_ti3(&self) -> bool {
                *self == CC4S_A::TI3
            }
            #[doc = "Checks if the value of the field is `TRC`"]
            #[inline(always)]
            pub fn is_trc(&self) -> bool {
                *self == CC4S_A::TRC
            }
        }
        #[doc = "Write proxy for field `CC4S`"]
        pub struct CC4S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC4 channel is configured as input, IC4 is mapped on TI4"]
            #[inline(always)]
            pub fn ti4(self) -> &'a mut W {
                self.variant(CC4S_A::TI4)
            }
            #[doc = "CC4 channel is configured as input, IC4 is mapped on TI3"]
            #[inline(always)]
            pub fn ti3(self) -> &'a mut W {
                self.variant(CC4S_A::TI3)
            }
            #[doc = "CC4 channel is configured as input, IC4 is mapped on TRC"]
            #[inline(always)]
            pub fn trc(self) -> &'a mut W {
                self.variant(CC4S_A::TRC)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `IC3F`"]
        pub type IC3F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC3F`"]
        pub struct IC3F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC3F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC3PSC`"]
        pub type IC3PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC3PSC`"]
        pub struct IC3PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC3PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Capture/compare 3 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC3S_A {
            #[doc = "1: CC3 channel is configured as input, IC3 is mapped on TI3"]
            TI3 = 1,
            #[doc = "2: CC3 channel is configured as input, IC3 is mapped on TI4"]
            TI4 = 2,
            #[doc = "3: CC3 channel is configured as input, IC3 is mapped on TRC"]
            TRC = 3,
        }
        impl From<CC3S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC3S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC3S`"]
        pub type CC3S_R = crate::R<u8, CC3S_A>;
        impl CC3S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC3S_A> {
                use crate::Variant::*;
                match self.bits {
                    1 => Val(CC3S_A::TI3),
                    2 => Val(CC3S_A::TI4),
                    3 => Val(CC3S_A::TRC),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TI3`"]
            #[inline(always)]
            pub fn is_ti3(&self) -> bool {
                *self == CC3S_A::TI3
            }
            #[doc = "Checks if the value of the field is `TI4`"]
            #[inline(always)]
            pub fn is_ti4(&self) -> bool {
                *self == CC3S_A::TI4
            }
            #[doc = "Checks if the value of the field is `TRC`"]
            #[inline(always)]
            pub fn is_trc(&self) -> bool {
                *self == CC3S_A::TRC
            }
        }
        #[doc = "Write proxy for field `CC3S`"]
        pub struct CC3S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC3 channel is configured as input, IC3 is mapped on TI3"]
            #[inline(always)]
            pub fn ti3(self) -> &'a mut W {
                self.variant(CC3S_A::TI3)
            }
            #[doc = "CC3 channel is configured as input, IC3 is mapped on TI4"]
            #[inline(always)]
            pub fn ti4(self) -> &'a mut W {
                self.variant(CC3S_A::TI4)
            }
            #[doc = "CC3 channel is configured as input, IC3 is mapped on TRC"]
            #[inline(always)]
            pub fn trc(self) -> &'a mut W {
                self.variant(CC3S_A::TRC)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - Input capture 4 filter"]
            #[inline(always)]
            pub fn ic4f(&self) -> IC4F_R {
                IC4F_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 10:11 - Input capture 4 prescaler"]
            #[inline(always)]
            pub fn ic4psc(&self) -> IC4PSC_R {
                IC4PSC_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&self) -> CC4S_R {
                CC4S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 3 filter"]
            #[inline(always)]
            pub fn ic3f(&self) -> IC3F_R {
                IC3F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 3 prescaler"]
            #[inline(always)]
            pub fn ic3psc(&self) -> IC3PSC_R {
                IC3PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&self) -> CC3S_R {
                CC3S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - Input capture 4 filter"]
            #[inline(always)]
            pub fn ic4f(&mut self) -> IC4F_W {
                IC4F_W { w: self }
            }
            #[doc = "Bits 10:11 - Input capture 4 prescaler"]
            #[inline(always)]
            pub fn ic4psc(&mut self) -> IC4PSC_W {
                IC4PSC_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&mut self) -> CC4S_W {
                CC4S_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 3 filter"]
            #[inline(always)]
            pub fn ic3f(&mut self) -> IC3F_W {
                IC3F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 3 prescaler"]
            #[inline(always)]
            pub fn ic3psc(&mut self) -> IC3PSC_W {
                IC3PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&mut self) -> CC3S_W {
                CC3S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](ccer) module"]
    pub type CCER = crate::Reg<u32, _CCER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCER;
    #[doc = "`read()` method returns [ccer::R](ccer::R) reader structure"]
    impl crate::Readable for CCER {}
    #[doc = "`write(|w| ..)` method takes [ccer::W](ccer::W) writer structure"]
    impl crate::Writable for CCER {}
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Reader of register CCER"]
        pub type R = crate::R<u32, super::CCER>;
        #[doc = "Writer for register CCER"]
        pub type W = crate::W<u32, super::CCER>;
        #[doc = "Register CCER `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC4P`"]
        pub type CC4P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4P`"]
        pub struct CC4P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `CC4E`"]
        pub type CC4E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4E`"]
        pub struct CC4E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `CC3NP`"]
        pub type CC3NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3NP`"]
        pub struct CC3NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CC3NE`"]
        pub type CC3NE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3NE`"]
        pub struct CC3NE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3NE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC3P`"]
        pub type CC3P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3P`"]
        pub struct CC3P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `CC3E`"]
        pub type CC3E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3E`"]
        pub struct CC3E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CC2NP`"]
        pub type CC2NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2NP`"]
        pub struct CC2NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CC2NE`"]
        pub type CC2NE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2NE`"]
        pub struct CC2NE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2NE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CC2P`"]
        pub type CC2P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2P`"]
        pub struct CC2P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `CC2E`"]
        pub type CC2E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2E`"]
        pub struct CC2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CC1NP`"]
        pub type CC1NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NP`"]
        pub struct CC1NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC1NE`"]
        pub type CC1NE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NE`"]
        pub struct CC1NE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1P`"]
        pub type CC1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1P`"]
        pub struct CC1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC1E`"]
        pub type CC1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1E`"]
        pub struct CC1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 13 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc4p(&self) -> CC4P_R {
                CC4P_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 output enable"]
            #[inline(always)]
            pub fn cc4e(&self) -> CC4E_R {
                CC4E_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3np(&self) -> CC3NP_R {
                CC3NP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Capture/Compare 3 complementary output enable"]
            #[inline(always)]
            pub fn cc3ne(&self) -> CC3NE_R {
                CC3NE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3p(&self) -> CC3P_R {
                CC3P_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Capture/Compare 3 output enable"]
            #[inline(always)]
            pub fn cc3e(&self) -> CC3E_R {
                CC3E_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2np(&self) -> CC2NP_R {
                CC2NP_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Capture/Compare 2 complementary output enable"]
            #[inline(always)]
            pub fn cc2ne(&self) -> CC2NE_R {
                CC2NE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&self) -> CC2P_R {
                CC2P_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&self) -> CC2E_R {
                CC2E_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&self) -> CC1NP_R {
                CC1NP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
            #[inline(always)]
            pub fn cc1ne(&self) -> CC1NE_R {
                CC1NE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&self) -> CC1P_R {
                CC1P_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&self) -> CC1E_R {
                CC1E_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 13 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc4p(&mut self) -> CC4P_W {
                CC4P_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 output enable"]
            #[inline(always)]
            pub fn cc4e(&mut self) -> CC4E_W {
                CC4E_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3np(&mut self) -> CC3NP_W {
                CC3NP_W { w: self }
            }
            #[doc = "Bit 10 - Capture/Compare 3 complementary output enable"]
            #[inline(always)]
            pub fn cc3ne(&mut self) -> CC3NE_W {
                CC3NE_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3p(&mut self) -> CC3P_W {
                CC3P_W { w: self }
            }
            #[doc = "Bit 8 - Capture/Compare 3 output enable"]
            #[inline(always)]
            pub fn cc3e(&mut self) -> CC3E_W {
                CC3E_W { w: self }
            }
            #[doc = "Bit 7 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2np(&mut self) -> CC2NP_W {
                CC2NP_W { w: self }
            }
            #[doc = "Bit 6 - Capture/Compare 2 complementary output enable"]
            #[inline(always)]
            pub fn cc2ne(&mut self) -> CC2NE_W {
                CC2NE_W { w: self }
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&mut self) -> CC2P_W {
                CC2P_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&mut self) -> CC2E_W {
                CC2E_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&mut self) -> CC1NP_W {
                CC1NP_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
            #[inline(always)]
            pub fn cc1ne(&mut self) -> CC1NE_W {
                CC1NE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&mut self) -> CC1P_W {
                CC1P_W { w: self }
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&mut self) -> CC1E_W {
                CC1E_W { w: self }
            }
        }
    }
    #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
    #[doc = "repetition counter register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rcr](rcr) module"]
    pub type RCR = crate::Reg<u32, _RCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RCR;
    #[doc = "`read()` method returns [rcr::R](rcr::R) reader structure"]
    impl crate::Readable for RCR {}
    #[doc = "`write(|w| ..)` method takes [rcr::W](rcr::W) writer structure"]
    impl crate::Writable for RCR {}
    #[doc = "repetition counter register"]
    pub mod rcr {
        #[doc = "Reader of register RCR"]
        pub type R = crate::R<u32, super::RCR>;
        #[doc = "Writer for register RCR"]
        pub type W = crate::W<u32, super::RCR>;
        #[doc = "Register RCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `REP`"]
        pub type REP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `REP`"]
        pub struct REP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Repetition counter value"]
            #[inline(always)]
            pub fn rep(&self) -> REP_R {
                REP_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Repetition counter value"]
            #[inline(always)]
            pub fn rep(&mut self) -> REP_W {
                REP_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr](ccr) module"]
    pub type CCR = crate::Reg<u32, _CCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR;
    #[doc = "`read()` method returns [ccr::R](ccr::R) reader structure"]
    impl crate::Readable for CCR {}
    #[doc = "`write(|w| ..)` method takes [ccr::W](ccr::W) writer structure"]
    impl crate::Writable for CCR {}
    #[doc = "capture/compare register 1"]
    pub mod ccr {
        #[doc = "Reader of register CCR%s"]
        pub type R = crate::R<u32, super::CCR>;
        #[doc = "Writer for register CCR%s"]
        pub type W = crate::W<u32, super::CCR>;
        #[doc = "Register CCR%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR`"]
        pub type CCR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR`"]
        pub struct CCR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr(&self) -> CCR_R {
                CCR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr(&mut self) -> CCR_W {
                CCR_W { w: self }
            }
        }
    }
    #[doc = "break and dead-time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdtr](bdtr) module"]
    pub type BDTR = crate::Reg<u32, _BDTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BDTR;
    #[doc = "`read()` method returns [bdtr::R](bdtr::R) reader structure"]
    impl crate::Readable for BDTR {}
    #[doc = "`write(|w| ..)` method takes [bdtr::W](bdtr::W) writer structure"]
    impl crate::Writable for BDTR {}
    #[doc = "break and dead-time register"]
    pub mod bdtr {
        #[doc = "Reader of register BDTR"]
        pub type R = crate::R<u32, super::BDTR>;
        #[doc = "Writer for register BDTR"]
        pub type W = crate::W<u32, super::BDTR>;
        #[doc = "Register BDTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BDTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MOE`"]
        pub type MOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MOE`"]
        pub struct MOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `AOE`"]
        pub type AOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AOE`"]
        pub struct AOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `BKE`"]
        pub type BKE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKE`"]
        pub struct BKE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OSSR`"]
        pub type OSSR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OSSR`"]
        pub struct OSSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSSR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OSSI`"]
        pub type OSSI_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OSSI`"]
        pub struct OSSI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSSI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `LOCK`"]
        pub type LOCK_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LOCK`"]
        pub struct LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOCK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DTG`"]
        pub type DTG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DTG`"]
        pub struct DTG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Main output enable"]
            #[inline(always)]
            pub fn moe(&self) -> MOE_R {
                MOE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Automatic output enable"]
            #[inline(always)]
            pub fn aoe(&self) -> AOE_R {
                AOE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Break polarity"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Break enable"]
            #[inline(always)]
            pub fn bke(&self) -> BKE_R {
                BKE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Off-state selection for Run mode"]
            #[inline(always)]
            pub fn ossr(&self) -> OSSR_R {
                OSSR_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Off-state selection for Idle mode"]
            #[inline(always)]
            pub fn ossi(&self) -> OSSI_R {
                OSSI_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Lock configuration"]
            #[inline(always)]
            pub fn lock(&self) -> LOCK_R {
                LOCK_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:7 - Dead-time generator setup"]
            #[inline(always)]
            pub fn dtg(&self) -> DTG_R {
                DTG_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Main output enable"]
            #[inline(always)]
            pub fn moe(&mut self) -> MOE_W {
                MOE_W { w: self }
            }
            #[doc = "Bit 14 - Automatic output enable"]
            #[inline(always)]
            pub fn aoe(&mut self) -> AOE_W {
                AOE_W { w: self }
            }
            #[doc = "Bit 13 - Break polarity"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
            #[doc = "Bit 12 - Break enable"]
            #[inline(always)]
            pub fn bke(&mut self) -> BKE_W {
                BKE_W { w: self }
            }
            #[doc = "Bit 11 - Off-state selection for Run mode"]
            #[inline(always)]
            pub fn ossr(&mut self) -> OSSR_W {
                OSSR_W { w: self }
            }
            #[doc = "Bit 10 - Off-state selection for Idle mode"]
            #[inline(always)]
            pub fn ossi(&mut self) -> OSSI_W {
                OSSI_W { w: self }
            }
            #[doc = "Bits 8:9 - Lock configuration"]
            #[inline(always)]
            pub fn lock(&mut self) -> LOCK_W {
                LOCK_W { w: self }
            }
            #[doc = "Bits 0:7 - Dead-time generator setup"]
            #[inline(always)]
            pub fn dtg(&mut self) -> DTG_W {
                DTG_W { w: self }
            }
        }
    }
    #[doc = "DMA control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcr](dcr) module"]
    pub type DCR = crate::Reg<u32, _DCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DCR;
    #[doc = "`read()` method returns [dcr::R](dcr::R) reader structure"]
    impl crate::Readable for DCR {}
    #[doc = "`write(|w| ..)` method takes [dcr::W](dcr::W) writer structure"]
    impl crate::Writable for DCR {}
    #[doc = "DMA control register"]
    pub mod dcr {
        #[doc = "Reader of register DCR"]
        pub type R = crate::R<u32, super::DCR>;
        #[doc = "Writer for register DCR"]
        pub type W = crate::W<u32, super::DCR>;
        #[doc = "Register DCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBL`"]
        pub type DBL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBL`"]
        pub struct DBL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DBA`"]
        pub type DBA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBA`"]
        pub struct DBA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&self) -> DBL_R {
                DBL_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&self) -> DBA_R {
                DBA_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&mut self) -> DBL_W {
                DBL_W { w: self }
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&mut self) -> DBA_W {
                DBA_W { w: self }
            }
        }
    }
    #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmar](dmar) module"]
    pub type DMAR = crate::Reg<u32, _DMAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAR;
    #[doc = "`read()` method returns [dmar::R](dmar::R) reader structure"]
    impl crate::Readable for DMAR {}
    #[doc = "`write(|w| ..)` method takes [dmar::W](dmar::W) writer structure"]
    impl crate::Writable for DMAR {}
    #[doc = "DMA address for full transfer"]
    pub mod dmar {
        #[doc = "Reader of register DMAR"]
        pub type R = crate::R<u32, super::DMAR>;
        #[doc = "Writer for register DMAR"]
        pub type W = crate::W<u32, super::DMAR>;
        #[doc = "Register DMAR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMAR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAB`"]
        pub type DMAB_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DMAB`"]
        pub struct DMAB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmab(&self) -> DMAB_R {
                DMAB_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmab(&mut self) -> DMAB_W {
                DMAB_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose-timers"]
pub struct TIM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM3 {}
impl TIM3 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim3::RegisterBlock {
        0x4000_0400 as *const _
    }
}
impl Deref for TIM3 {
    type Target = tim3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM3::ptr() }
    }
}
#[doc = "General-purpose-timers"]
pub mod tim3 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - slave mode control register"]
        pub smcr: SMCR,
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - status register"]
        pub sr: SR,
        #[doc = "0x14 - event generation register"]
        pub egr: EGR,
        _reserved_6_ccmr1: [u8; 4usize],
        _reserved_7_ccmr2: [u8; 4usize],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: CCER,
        #[doc = "0x24 - counter"]
        pub cnt: CNT,
        #[doc = "0x28 - prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - auto-reload register"]
        pub arr: ARR,
        _reserved12: [u8; 4usize],
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: CCR,
        #[doc = "0x38 - capture/compare register 1"]
        pub ccr2: CCR,
        #[doc = "0x3c - capture/compare register 1"]
        pub ccr3: CCR,
        #[doc = "0x40 - capture/compare register 1"]
        pub ccr4: CCR,
        _reserved16: [u8; 4usize],
        #[doc = "0x48 - DMA control register"]
        pub dcr: DCR,
        #[doc = "0x4c - DMA address for full transfer"]
        pub dmar: DMAR,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &CCMR1_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input_mut(&self) -> &mut CCMR1_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &CCMR1_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_OUTPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output_mut(&self) -> &mut CCMR1_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_OUTPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (input mode)"]
        #[inline(always)]
        pub fn ccmr2_input(&self) -> &CCMR2_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(28usize) as *const CCMR2_INPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (input mode)"]
        #[inline(always)]
        pub fn ccmr2_input_mut(&self) -> &mut CCMR2_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(28usize) as *mut CCMR2_INPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (output mode)"]
        #[inline(always)]
        pub fn ccmr2_output(&self) -> &CCMR2_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(28usize) as *const CCMR2_OUTPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (output mode)"]
        #[inline(always)]
        pub fn ccmr2_output_mut(&self) -> &mut CCMR2_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(28usize) as *mut CCMR2_OUTPUT) }
        }
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Clock division\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CKD_A {
            #[doc = "0: t_DTS = t_CK_INT"]
            DIV1 = 0,
            #[doc = "1: t_DTS = 2 × t_CK_INT"]
            DIV2 = 1,
            #[doc = "2: t_DTS = 4 × t_CK_INT"]
            DIV4 = 2,
        }
        impl From<CKD_A> for u8 {
            #[inline(always)]
            fn from(variant: CKD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CKD`"]
        pub type CKD_R = crate::R<u8, CKD_A>;
        impl CKD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CKD_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CKD_A::DIV1),
                    1 => Val(CKD_A::DIV2),
                    2 => Val(CKD_A::DIV4),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == CKD_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == CKD_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == CKD_A::DIV4
            }
        }
        #[doc = "Write proxy for field `CKD`"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CKD_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "t_DTS = t_CK_INT"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(CKD_A::DIV1)
            }
            #[doc = "t_DTS = 2 × t_CK_INT"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(CKD_A::DIV2)
            }
            #[doc = "t_DTS = 4 × t_CK_INT"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(CKD_A::DIV4)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Auto-reload preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARPE_A {
            #[doc = "0: TIMx_APRR register is not buffered"]
            DISABLED = 0,
            #[doc = "1: TIMx_APRR register is buffered"]
            ENABLED = 1,
        }
        impl From<ARPE_A> for bool {
            #[inline(always)]
            fn from(variant: ARPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, ARPE_A>;
        impl ARPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ARPE_A {
                match self.bits {
                    false => ARPE_A::DISABLED,
                    true => ARPE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ARPE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ARPE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ARPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIMx_APRR register is not buffered"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ARPE_A::DISABLED)
            }
            #[doc = "TIMx_APRR register is buffered"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ARPE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Center-aligned mode selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CMS_A {
            #[doc = "0: The counter counts up or down depending on the direction bit"]
            EDGEALIGNED = 0,
            #[doc = "1: The counter counts up and down alternatively. Output compare interrupt flags are set only when the counter is counting down."]
            CENTERALIGNED1 = 1,
            #[doc = "2: The counter counts up and down alternatively. Output compare interrupt flags are set only when the counter is counting up."]
            CENTERALIGNED2 = 2,
            #[doc = "3: The counter counts up and down alternatively. Output compare interrupt flags are set both when the counter is counting up or down."]
            CENTERALIGNED3 = 3,
        }
        impl From<CMS_A> for u8 {
            #[inline(always)]
            fn from(variant: CMS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CMS`"]
        pub type CMS_R = crate::R<u8, CMS_A>;
        impl CMS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CMS_A {
                match self.bits {
                    0 => CMS_A::EDGEALIGNED,
                    1 => CMS_A::CENTERALIGNED1,
                    2 => CMS_A::CENTERALIGNED2,
                    3 => CMS_A::CENTERALIGNED3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `EDGEALIGNED`"]
            #[inline(always)]
            pub fn is_edge_aligned(&self) -> bool {
                *self == CMS_A::EDGEALIGNED
            }
            #[doc = "Checks if the value of the field is `CENTERALIGNED1`"]
            #[inline(always)]
            pub fn is_center_aligned1(&self) -> bool {
                *self == CMS_A::CENTERALIGNED1
            }
            #[doc = "Checks if the value of the field is `CENTERALIGNED2`"]
            #[inline(always)]
            pub fn is_center_aligned2(&self) -> bool {
                *self == CMS_A::CENTERALIGNED2
            }
            #[doc = "Checks if the value of the field is `CENTERALIGNED3`"]
            #[inline(always)]
            pub fn is_center_aligned3(&self) -> bool {
                *self == CMS_A::CENTERALIGNED3
            }
        }
        #[doc = "Write proxy for field `CMS`"]
        pub struct CMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CMS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The counter counts up or down depending on the direction bit"]
            #[inline(always)]
            pub fn edge_aligned(self) -> &'a mut W {
                self.variant(CMS_A::EDGEALIGNED)
            }
            #[doc = "The counter counts up and down alternatively. Output compare interrupt flags are set only when the counter is counting down."]
            #[inline(always)]
            pub fn center_aligned1(self) -> &'a mut W {
                self.variant(CMS_A::CENTERALIGNED1)
            }
            #[doc = "The counter counts up and down alternatively. Output compare interrupt flags are set only when the counter is counting up."]
            #[inline(always)]
            pub fn center_aligned2(self) -> &'a mut W {
                self.variant(CMS_A::CENTERALIGNED2)
            }
            #[doc = "The counter counts up and down alternatively. Output compare interrupt flags are set both when the counter is counting up or down."]
            #[inline(always)]
            pub fn center_aligned3(self) -> &'a mut W {
                self.variant(CMS_A::CENTERALIGNED3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DIR_A {
            #[doc = "0: Counter used as upcounter"]
            UP = 0,
            #[doc = "1: Counter used as downcounter"]
            DOWN = 1,
        }
        impl From<DIR_A> for bool {
            #[inline(always)]
            fn from(variant: DIR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, DIR_A>;
        impl DIR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DIR_A {
                match self.bits {
                    false => DIR_A::UP,
                    true => DIR_A::DOWN,
                }
            }
            #[doc = "Checks if the value of the field is `UP`"]
            #[inline(always)]
            pub fn is_up(&self) -> bool {
                *self == DIR_A::UP
            }
            #[doc = "Checks if the value of the field is `DOWN`"]
            #[inline(always)]
            pub fn is_down(&self) -> bool {
                *self == DIR_A::DOWN
            }
        }
        #[doc = "Write proxy for field `DIR`"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DIR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter used as upcounter"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(DIR_A::UP)
            }
            #[doc = "Counter used as downcounter"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(DIR_A::DOWN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "One-pulse mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OPM_A {
            #[doc = "0: Counter is not stopped at update event"]
            DISABLED = 0,
            #[doc = "1: Counter stops counting at the next update event (clearing the CEN bit)"]
            ENABLED = 1,
        }
        impl From<OPM_A> for bool {
            #[inline(always)]
            fn from(variant: OPM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OPM`"]
        pub type OPM_R = crate::R<bool, OPM_A>;
        impl OPM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OPM_A {
                match self.bits {
                    false => OPM_A::DISABLED,
                    true => OPM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OPM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OPM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OPM`"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OPM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter is not stopped at update event"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OPM_A::DISABLED)
            }
            #[doc = "Counter stops counting at the next update event (clearing the CEN bit)"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OPM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Update request source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum URS_A {
            #[doc = "0: Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            ANYEVENT = 0,
            #[doc = "1: Only counter overflow/underflow generates an update interrupt or DMA request"]
            COUNTERONLY = 1,
        }
        impl From<URS_A> for bool {
            #[inline(always)]
            fn from(variant: URS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, URS_A>;
        impl URS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> URS_A {
                match self.bits {
                    false => URS_A::ANYEVENT,
                    true => URS_A::COUNTERONLY,
                }
            }
            #[doc = "Checks if the value of the field is `ANYEVENT`"]
            #[inline(always)]
            pub fn is_any_event(&self) -> bool {
                *self == URS_A::ANYEVENT
            }
            #[doc = "Checks if the value of the field is `COUNTERONLY`"]
            #[inline(always)]
            pub fn is_counter_only(&self) -> bool {
                *self == URS_A::COUNTERONLY
            }
        }
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: URS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn any_event(self) -> &'a mut W {
                self.variant(URS_A::ANYEVENT)
            }
            #[doc = "Only counter overflow/underflow generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn counter_only(self) -> &'a mut W {
                self.variant(URS_A::COUNTERONLY)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Update disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDIS_A {
            #[doc = "0: Update event enabled"]
            ENABLED = 0,
            #[doc = "1: Update event disabled"]
            DISABLED = 1,
        }
        impl From<UDIS_A> for bool {
            #[inline(always)]
            fn from(variant: UDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, UDIS_A>;
        impl UDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDIS_A {
                match self.bits {
                    false => UDIS_A::ENABLED,
                    true => UDIS_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDIS_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDIS_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update event enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDIS_A::ENABLED)
            }
            #[doc = "Update event disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDIS_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Counter enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CEN_A {
            #[doc = "0: Counter disabled"]
            DISABLED = 0,
            #[doc = "1: Counter enabled"]
            ENABLED = 1,
        }
        impl From<CEN_A> for bool {
            #[inline(always)]
            fn from(variant: CEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, CEN_A>;
        impl CEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CEN_A {
                match self.bits {
                    false => CEN_A::DISABLED,
                    true => CEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CEN_A::DISABLED)
            }
            #[doc = "Counter enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - Center-aligned mode selection"]
            #[inline(always)]
            pub fn cms(&self) -> CMS_R {
                CMS_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bits 5:6 - Center-aligned mode selection"]
            #[inline(always)]
            pub fn cms(&mut self) -> CMS_W {
                CMS_W { w: self }
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "TI1 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TI1S_A {
            #[doc = "0: The TIMx_CH1 pin is connected to TI1 input"]
            NORMAL = 0,
            #[doc = "1: The TIMx_CH1, CH2, CH3 pins are connected to TI1 input"]
            XOR = 1,
        }
        impl From<TI1S_A> for bool {
            #[inline(always)]
            fn from(variant: TI1S_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TI1S`"]
        pub type TI1S_R = crate::R<bool, TI1S_A>;
        impl TI1S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TI1S_A {
                match self.bits {
                    false => TI1S_A::NORMAL,
                    true => TI1S_A::XOR,
                }
            }
            #[doc = "Checks if the value of the field is `NORMAL`"]
            #[inline(always)]
            pub fn is_normal(&self) -> bool {
                *self == TI1S_A::NORMAL
            }
            #[doc = "Checks if the value of the field is `XOR`"]
            #[inline(always)]
            pub fn is_xor(&self) -> bool {
                *self == TI1S_A::XOR
            }
        }
        #[doc = "Write proxy for field `TI1S`"]
        pub struct TI1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TI1S_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The TIMx_CH1 pin is connected to TI1 input"]
            #[inline(always)]
            pub fn normal(self) -> &'a mut W {
                self.variant(TI1S_A::NORMAL)
            }
            #[doc = "The TIMx_CH1, CH2, CH3 pins are connected to TI1 input"]
            #[inline(always)]
            pub fn xor(self) -> &'a mut W {
                self.variant(TI1S_A::XOR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Master mode selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MMS_A {
            #[doc = "0: The UG bit from the TIMx_EGR register is used as trigger output"]
            RESET = 0,
            #[doc = "1: The counter enable signal, CNT_EN, is used as trigger output"]
            ENABLE = 1,
            #[doc = "2: The update event is selected as trigger output"]
            UPDATE = 2,
            #[doc = "3: The trigger output send a positive pulse when the CC1IF flag it to be set, as soon as a capture or a compare match occurred"]
            COMPAREPULSE = 3,
            #[doc = "4: OC1REF signal is used as trigger output"]
            COMPAREOC1 = 4,
            #[doc = "5: OC2REF signal is used as trigger output"]
            COMPAREOC2 = 5,
            #[doc = "6: OC3REF signal is used as trigger output"]
            COMPAREOC3 = 6,
            #[doc = "7: OC4REF signal is used as trigger output"]
            COMPAREOC4 = 7,
        }
        impl From<MMS_A> for u8 {
            #[inline(always)]
            fn from(variant: MMS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MMS`"]
        pub type MMS_R = crate::R<u8, MMS_A>;
        impl MMS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MMS_A {
                match self.bits {
                    0 => MMS_A::RESET,
                    1 => MMS_A::ENABLE,
                    2 => MMS_A::UPDATE,
                    3 => MMS_A::COMPAREPULSE,
                    4 => MMS_A::COMPAREOC1,
                    5 => MMS_A::COMPAREOC2,
                    6 => MMS_A::COMPAREOC3,
                    7 => MMS_A::COMPAREOC4,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == MMS_A::RESET
            }
            #[doc = "Checks if the value of the field is `ENABLE`"]
            #[inline(always)]
            pub fn is_enable(&self) -> bool {
                *self == MMS_A::ENABLE
            }
            #[doc = "Checks if the value of the field is `UPDATE`"]
            #[inline(always)]
            pub fn is_update(&self) -> bool {
                *self == MMS_A::UPDATE
            }
            #[doc = "Checks if the value of the field is `COMPAREPULSE`"]
            #[inline(always)]
            pub fn is_compare_pulse(&self) -> bool {
                *self == MMS_A::COMPAREPULSE
            }
            #[doc = "Checks if the value of the field is `COMPAREOC1`"]
            #[inline(always)]
            pub fn is_compare_oc1(&self) -> bool {
                *self == MMS_A::COMPAREOC1
            }
            #[doc = "Checks if the value of the field is `COMPAREOC2`"]
            #[inline(always)]
            pub fn is_compare_oc2(&self) -> bool {
                *self == MMS_A::COMPAREOC2
            }
            #[doc = "Checks if the value of the field is `COMPAREOC3`"]
            #[inline(always)]
            pub fn is_compare_oc3(&self) -> bool {
                *self == MMS_A::COMPAREOC3
            }
            #[doc = "Checks if the value of the field is `COMPAREOC4`"]
            #[inline(always)]
            pub fn is_compare_oc4(&self) -> bool {
                *self == MMS_A::COMPAREOC4
            }
        }
        #[doc = "Write proxy for field `MMS`"]
        pub struct MMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MMS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The UG bit from the TIMx_EGR register is used as trigger output"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(MMS_A::RESET)
            }
            #[doc = "The counter enable signal, CNT_EN, is used as trigger output"]
            #[inline(always)]
            pub fn enable(self) -> &'a mut W {
                self.variant(MMS_A::ENABLE)
            }
            #[doc = "The update event is selected as trigger output"]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(MMS_A::UPDATE)
            }
            #[doc = "The trigger output send a positive pulse when the CC1IF flag it to be set, as soon as a capture or a compare match occurred"]
            #[inline(always)]
            pub fn compare_pulse(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREPULSE)
            }
            #[doc = "OC1REF signal is used as trigger output"]
            #[inline(always)]
            pub fn compare_oc1(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREOC1)
            }
            #[doc = "OC2REF signal is used as trigger output"]
            #[inline(always)]
            pub fn compare_oc2(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREOC2)
            }
            #[doc = "OC3REF signal is used as trigger output"]
            #[inline(always)]
            pub fn compare_oc3(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREOC3)
            }
            #[doc = "OC4REF signal is used as trigger output"]
            #[inline(always)]
            pub fn compare_oc4(self) -> &'a mut W {
                self.variant(MMS_A::COMPAREOC4)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Capture/compare DMA selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CCDS_A {
            #[doc = "0: CCx DMA request sent when CCx event occurs"]
            ONCOMPARE = 0,
            #[doc = "1: CCx DMA request sent when update event occurs"]
            ONUPDATE = 1,
        }
        impl From<CCDS_A> for bool {
            #[inline(always)]
            fn from(variant: CCDS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CCDS`"]
        pub type CCDS_R = crate::R<bool, CCDS_A>;
        impl CCDS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CCDS_A {
                match self.bits {
                    false => CCDS_A::ONCOMPARE,
                    true => CCDS_A::ONUPDATE,
                }
            }
            #[doc = "Checks if the value of the field is `ONCOMPARE`"]
            #[inline(always)]
            pub fn is_on_compare(&self) -> bool {
                *self == CCDS_A::ONCOMPARE
            }
            #[doc = "Checks if the value of the field is `ONUPDATE`"]
            #[inline(always)]
            pub fn is_on_update(&self) -> bool {
                *self == CCDS_A::ONUPDATE
            }
        }
        #[doc = "Write proxy for field `CCDS`"]
        pub struct CCDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCDS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CCDS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request sent when CCx event occurs"]
            #[inline(always)]
            pub fn on_compare(self) -> &'a mut W {
                self.variant(CCDS_A::ONCOMPARE)
            }
            #[doc = "CCx DMA request sent when update event occurs"]
            #[inline(always)]
            pub fn on_update(self) -> &'a mut W {
                self.variant(CCDS_A::ONUPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - TI1 selection"]
            #[inline(always)]
            pub fn ti1s(&self) -> TI1S_R {
                TI1S_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&self) -> MMS_R {
                MMS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&self) -> CCDS_R {
                CCDS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - TI1 selection"]
            #[inline(always)]
            pub fn ti1s(&mut self) -> TI1S_W {
                TI1S_W { w: self }
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&mut self) -> MMS_W {
                MMS_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&mut self) -> CCDS_W {
                CCDS_W { w: self }
            }
        }
    }
    #[doc = "slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcr](smcr) module"]
    pub type SMCR = crate::Reg<u32, _SMCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMCR;
    #[doc = "`read()` method returns [smcr::R](smcr::R) reader structure"]
    impl crate::Readable for SMCR {}
    #[doc = "`write(|w| ..)` method takes [smcr::W](smcr::W) writer structure"]
    impl crate::Writable for SMCR {}
    #[doc = "slave mode control register"]
    pub mod smcr {
        #[doc = "Reader of register SMCR"]
        pub type R = crate::R<u32, super::SMCR>;
        #[doc = "Writer for register SMCR"]
        pub type W = crate::W<u32, super::SMCR>;
        #[doc = "Register SMCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "External trigger polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ETP_A {
            #[doc = "0: ETR is noninverted, active at high level or rising edge"]
            NOTINVERTED = 0,
            #[doc = "1: ETR is inverted, active at low level or falling edge"]
            INVERTED = 1,
        }
        impl From<ETP_A> for bool {
            #[inline(always)]
            fn from(variant: ETP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ETP`"]
        pub type ETP_R = crate::R<bool, ETP_A>;
        impl ETP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ETP_A {
                match self.bits {
                    false => ETP_A::NOTINVERTED,
                    true => ETP_A::INVERTED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTINVERTED`"]
            #[inline(always)]
            pub fn is_not_inverted(&self) -> bool {
                *self == ETP_A::NOTINVERTED
            }
            #[doc = "Checks if the value of the field is `INVERTED`"]
            #[inline(always)]
            pub fn is_inverted(&self) -> bool {
                *self == ETP_A::INVERTED
            }
        }
        #[doc = "Write proxy for field `ETP`"]
        pub struct ETP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ETP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ETR is noninverted, active at high level or rising edge"]
            #[inline(always)]
            pub fn not_inverted(self) -> &'a mut W {
                self.variant(ETP_A::NOTINVERTED)
            }
            #[doc = "ETR is inverted, active at low level or falling edge"]
            #[inline(always)]
            pub fn inverted(self) -> &'a mut W {
                self.variant(ETP_A::INVERTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "External clock enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ECE_A {
            #[doc = "0: External clock mode 2 disabled"]
            DISABLED = 0,
            #[doc = "1: External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF signal."]
            ENABLED = 1,
        }
        impl From<ECE_A> for bool {
            #[inline(always)]
            fn from(variant: ECE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ECE`"]
        pub type ECE_R = crate::R<bool, ECE_A>;
        impl ECE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ECE_A {
                match self.bits {
                    false => ECE_A::DISABLED,
                    true => ECE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ECE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ECE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ECE`"]
        pub struct ECE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ECE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "External clock mode 2 disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ECE_A::DISABLED)
            }
            #[doc = "External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF signal."]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ECE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "External trigger prescaler\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ETPS_A {
            #[doc = "0: Prescaler OFF"]
            DIV1 = 0,
            #[doc = "1: ETRP frequency divided by 2"]
            DIV2 = 1,
            #[doc = "2: ETRP frequency divided by 4"]
            DIV4 = 2,
            #[doc = "3: ETRP frequency divided by 8"]
            DIV8 = 3,
        }
        impl From<ETPS_A> for u8 {
            #[inline(always)]
            fn from(variant: ETPS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ETPS`"]
        pub type ETPS_R = crate::R<u8, ETPS_A>;
        impl ETPS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ETPS_A {
                match self.bits {
                    0 => ETPS_A::DIV1,
                    1 => ETPS_A::DIV2,
                    2 => ETPS_A::DIV4,
                    3 => ETPS_A::DIV8,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == ETPS_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == ETPS_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == ETPS_A::DIV4
            }
            #[doc = "Checks if the value of the field is `DIV8`"]
            #[inline(always)]
            pub fn is_div8(&self) -> bool {
                *self == ETPS_A::DIV8
            }
        }
        #[doc = "Write proxy for field `ETPS`"]
        pub struct ETPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETPS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ETPS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Prescaler OFF"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(ETPS_A::DIV1)
            }
            #[doc = "ETRP frequency divided by 2"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(ETPS_A::DIV2)
            }
            #[doc = "ETRP frequency divided by 4"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(ETPS_A::DIV4)
            }
            #[doc = "ETRP frequency divided by 8"]
            #[inline(always)]
            pub fn div8(self) -> &'a mut W {
                self.variant(ETPS_A::DIV8)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "External trigger filter\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ETF_A {
            #[doc = "0: No filter, sampling is done at fDTS"]
            NOFILTER = 0,
            #[doc = "1: fSAMPLING=fCK_INT, N=2"]
            FCK_INT_N2 = 1,
            #[doc = "2: fSAMPLING=fCK_INT, N=4"]
            FCK_INT_N4 = 2,
            #[doc = "3: fSAMPLING=fCK_INT, N=8"]
            FCK_INT_N8 = 3,
            #[doc = "4: fSAMPLING=fDTS/2, N=6"]
            FDTS_DIV2_N6 = 4,
            #[doc = "5: fSAMPLING=fDTS/2, N=8"]
            FDTS_DIV2_N8 = 5,
            #[doc = "6: fSAMPLING=fDTS/4, N=6"]
            FDTS_DIV4_N6 = 6,
            #[doc = "7: fSAMPLING=fDTS/4, N=8"]
            FDTS_DIV4_N8 = 7,
            #[doc = "8: fSAMPLING=fDTS/8, N=6"]
            FDTS_DIV8_N6 = 8,
            #[doc = "9: fSAMPLING=fDTS/8, N=8"]
            FDTS_DIV8_N8 = 9,
            #[doc = "10: fSAMPLING=fDTS/16, N=5"]
            FDTS_DIV16_N5 = 10,
            #[doc = "11: fSAMPLING=fDTS/16, N=6"]
            FDTS_DIV16_N6 = 11,
            #[doc = "12: fSAMPLING=fDTS/16, N=8"]
            FDTS_DIV16_N8 = 12,
            #[doc = "13: fSAMPLING=fDTS/32, N=5"]
            FDTS_DIV32_N5 = 13,
            #[doc = "14: fSAMPLING=fDTS/32, N=6"]
            FDTS_DIV32_N6 = 14,
            #[doc = "15: fSAMPLING=fDTS/32, N=8"]
            FDTS_DIV32_N8 = 15,
        }
        impl From<ETF_A> for u8 {
            #[inline(always)]
            fn from(variant: ETF_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ETF`"]
        pub type ETF_R = crate::R<u8, ETF_A>;
        impl ETF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ETF_A {
                match self.bits {
                    0 => ETF_A::NOFILTER,
                    1 => ETF_A::FCK_INT_N2,
                    2 => ETF_A::FCK_INT_N4,
                    3 => ETF_A::FCK_INT_N8,
                    4 => ETF_A::FDTS_DIV2_N6,
                    5 => ETF_A::FDTS_DIV2_N8,
                    6 => ETF_A::FDTS_DIV4_N6,
                    7 => ETF_A::FDTS_DIV4_N8,
                    8 => ETF_A::FDTS_DIV8_N6,
                    9 => ETF_A::FDTS_DIV8_N8,
                    10 => ETF_A::FDTS_DIV16_N5,
                    11 => ETF_A::FDTS_DIV16_N6,
                    12 => ETF_A::FDTS_DIV16_N8,
                    13 => ETF_A::FDTS_DIV32_N5,
                    14 => ETF_A::FDTS_DIV32_N6,
                    15 => ETF_A::FDTS_DIV32_N8,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `NOFILTER`"]
            #[inline(always)]
            pub fn is_no_filter(&self) -> bool {
                *self == ETF_A::NOFILTER
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N2`"]
            #[inline(always)]
            pub fn is_fck_int_n2(&self) -> bool {
                *self == ETF_A::FCK_INT_N2
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N4`"]
            #[inline(always)]
            pub fn is_fck_int_n4(&self) -> bool {
                *self == ETF_A::FCK_INT_N4
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N8`"]
            #[inline(always)]
            pub fn is_fck_int_n8(&self) -> bool {
                *self == ETF_A::FCK_INT_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV2_N6`"]
            #[inline(always)]
            pub fn is_fdts_div2_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV2_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV2_N8`"]
            #[inline(always)]
            pub fn is_fdts_div2_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV2_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV4_N6`"]
            #[inline(always)]
            pub fn is_fdts_div4_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV4_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV4_N8`"]
            #[inline(always)]
            pub fn is_fdts_div4_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV4_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV8_N6`"]
            #[inline(always)]
            pub fn is_fdts_div8_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV8_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV8_N8`"]
            #[inline(always)]
            pub fn is_fdts_div8_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV8_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N5`"]
            #[inline(always)]
            pub fn is_fdts_div16_n5(&self) -> bool {
                *self == ETF_A::FDTS_DIV16_N5
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N6`"]
            #[inline(always)]
            pub fn is_fdts_div16_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV16_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N8`"]
            #[inline(always)]
            pub fn is_fdts_div16_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV16_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N5`"]
            #[inline(always)]
            pub fn is_fdts_div32_n5(&self) -> bool {
                *self == ETF_A::FDTS_DIV32_N5
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N6`"]
            #[inline(always)]
            pub fn is_fdts_div32_n6(&self) -> bool {
                *self == ETF_A::FDTS_DIV32_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N8`"]
            #[inline(always)]
            pub fn is_fdts_div32_n8(&self) -> bool {
                *self == ETF_A::FDTS_DIV32_N8
            }
        }
        #[doc = "Write proxy for field `ETF`"]
        pub struct ETF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ETF_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No filter, sampling is done at fDTS"]
            #[inline(always)]
            pub fn no_filter(self) -> &'a mut W {
                self.variant(ETF_A::NOFILTER)
            }
            #[doc = "fSAMPLING=fCK_INT, N=2"]
            #[inline(always)]
            pub fn fck_int_n2(self) -> &'a mut W {
                self.variant(ETF_A::FCK_INT_N2)
            }
            #[doc = "fSAMPLING=fCK_INT, N=4"]
            #[inline(always)]
            pub fn fck_int_n4(self) -> &'a mut W {
                self.variant(ETF_A::FCK_INT_N4)
            }
            #[doc = "fSAMPLING=fCK_INT, N=8"]
            #[inline(always)]
            pub fn fck_int_n8(self) -> &'a mut W {
                self.variant(ETF_A::FCK_INT_N8)
            }
            #[doc = "fSAMPLING=fDTS/2, N=6"]
            #[inline(always)]
            pub fn fdts_div2_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV2_N6)
            }
            #[doc = "fSAMPLING=fDTS/2, N=8"]
            #[inline(always)]
            pub fn fdts_div2_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV2_N8)
            }
            #[doc = "fSAMPLING=fDTS/4, N=6"]
            #[inline(always)]
            pub fn fdts_div4_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV4_N6)
            }
            #[doc = "fSAMPLING=fDTS/4, N=8"]
            #[inline(always)]
            pub fn fdts_div4_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV4_N8)
            }
            #[doc = "fSAMPLING=fDTS/8, N=6"]
            #[inline(always)]
            pub fn fdts_div8_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV8_N6)
            }
            #[doc = "fSAMPLING=fDTS/8, N=8"]
            #[inline(always)]
            pub fn fdts_div8_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV8_N8)
            }
            #[doc = "fSAMPLING=fDTS/16, N=5"]
            #[inline(always)]
            pub fn fdts_div16_n5(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV16_N5)
            }
            #[doc = "fSAMPLING=fDTS/16, N=6"]
            #[inline(always)]
            pub fn fdts_div16_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV16_N6)
            }
            #[doc = "fSAMPLING=fDTS/16, N=8"]
            #[inline(always)]
            pub fn fdts_div16_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV16_N8)
            }
            #[doc = "fSAMPLING=fDTS/32, N=5"]
            #[inline(always)]
            pub fn fdts_div32_n5(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV32_N5)
            }
            #[doc = "fSAMPLING=fDTS/32, N=6"]
            #[inline(always)]
            pub fn fdts_div32_n6(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV32_N6)
            }
            #[doc = "fSAMPLING=fDTS/32, N=8"]
            #[inline(always)]
            pub fn fdts_div32_n8(self) -> &'a mut W {
                self.variant(ETF_A::FDTS_DIV32_N8)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Master/Slave mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MSM_A {
            #[doc = "0: No action"]
            NOSYNC = 0,
            #[doc = "1: The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event."]
            SYNC = 1,
        }
        impl From<MSM_A> for bool {
            #[inline(always)]
            fn from(variant: MSM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MSM`"]
        pub type MSM_R = crate::R<bool, MSM_A>;
        impl MSM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MSM_A {
                match self.bits {
                    false => MSM_A::NOSYNC,
                    true => MSM_A::SYNC,
                }
            }
            #[doc = "Checks if the value of the field is `NOSYNC`"]
            #[inline(always)]
            pub fn is_no_sync(&self) -> bool {
                *self == MSM_A::NOSYNC
            }
            #[doc = "Checks if the value of the field is `SYNC`"]
            #[inline(always)]
            pub fn is_sync(&self) -> bool {
                *self == MSM_A::SYNC
            }
        }
        #[doc = "Write proxy for field `MSM`"]
        pub struct MSM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MSM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action"]
            #[inline(always)]
            pub fn no_sync(self) -> &'a mut W {
                self.variant(MSM_A::NOSYNC)
            }
            #[doc = "The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event."]
            #[inline(always)]
            pub fn sync(self) -> &'a mut W {
                self.variant(MSM_A::SYNC)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Trigger selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum TS_A {
            #[doc = "0: Internal Trigger 0 (ITR0)"]
            ITR0 = 0,
            #[doc = "1: Internal Trigger 1 (ITR1)"]
            ITR1 = 1,
            #[doc = "2: Internal Trigger 2 (ITR2)"]
            ITR2 = 2,
            #[doc = "4: TI1 Edge Detector (TI1F_ED)"]
            TI1F_ED = 4,
            #[doc = "5: Filtered Timer Input 1 (TI1FP1)"]
            TI1FP1 = 5,
            #[doc = "6: Filtered Timer Input 2 (TI2FP2)"]
            TI2FP2 = 6,
            #[doc = "7: External Trigger input (ETRF)"]
            ETRF = 7,
        }
        impl From<TS_A> for u8 {
            #[inline(always)]
            fn from(variant: TS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `TS`"]
        pub type TS_R = crate::R<u8, TS_A>;
        impl TS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, TS_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(TS_A::ITR0),
                    1 => Val(TS_A::ITR1),
                    2 => Val(TS_A::ITR2),
                    4 => Val(TS_A::TI1F_ED),
                    5 => Val(TS_A::TI1FP1),
                    6 => Val(TS_A::TI2FP2),
                    7 => Val(TS_A::ETRF),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `ITR0`"]
            #[inline(always)]
            pub fn is_itr0(&self) -> bool {
                *self == TS_A::ITR0
            }
            #[doc = "Checks if the value of the field is `ITR1`"]
            #[inline(always)]
            pub fn is_itr1(&self) -> bool {
                *self == TS_A::ITR1
            }
            #[doc = "Checks if the value of the field is `ITR2`"]
            #[inline(always)]
            pub fn is_itr2(&self) -> bool {
                *self == TS_A::ITR2
            }
            #[doc = "Checks if the value of the field is `TI1F_ED`"]
            #[inline(always)]
            pub fn is_ti1f_ed(&self) -> bool {
                *self == TS_A::TI1F_ED
            }
            #[doc = "Checks if the value of the field is `TI1FP1`"]
            #[inline(always)]
            pub fn is_ti1fp1(&self) -> bool {
                *self == TS_A::TI1FP1
            }
            #[doc = "Checks if the value of the field is `TI2FP2`"]
            #[inline(always)]
            pub fn is_ti2fp2(&self) -> bool {
                *self == TS_A::TI2FP2
            }
            #[doc = "Checks if the value of the field is `ETRF`"]
            #[inline(always)]
            pub fn is_etrf(&self) -> bool {
                *self == TS_A::ETRF
            }
        }
        #[doc = "Write proxy for field `TS`"]
        pub struct TS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TS_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Internal Trigger 0 (ITR0)"]
            #[inline(always)]
            pub fn itr0(self) -> &'a mut W {
                self.variant(TS_A::ITR0)
            }
            #[doc = "Internal Trigger 1 (ITR1)"]
            #[inline(always)]
            pub fn itr1(self) -> &'a mut W {
                self.variant(TS_A::ITR1)
            }
            #[doc = "Internal Trigger 2 (ITR2)"]
            #[inline(always)]
            pub fn itr2(self) -> &'a mut W {
                self.variant(TS_A::ITR2)
            }
            #[doc = "TI1 Edge Detector (TI1F_ED)"]
            #[inline(always)]
            pub fn ti1f_ed(self) -> &'a mut W {
                self.variant(TS_A::TI1F_ED)
            }
            #[doc = "Filtered Timer Input 1 (TI1FP1)"]
            #[inline(always)]
            pub fn ti1fp1(self) -> &'a mut W {
                self.variant(TS_A::TI1FP1)
            }
            #[doc = "Filtered Timer Input 2 (TI2FP2)"]
            #[inline(always)]
            pub fn ti2fp2(self) -> &'a mut W {
                self.variant(TS_A::TI2FP2)
            }
            #[doc = "External Trigger input (ETRF)"]
            #[inline(always)]
            pub fn etrf(self) -> &'a mut W {
                self.variant(TS_A::ETRF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Slave mode selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SMS_A {
            #[doc = "0: Slave mode disabled - if CEN = ‘1 then the prescaler is clocked directly by the internal clock."]
            DISABLED = 0,
            #[doc = "1: Encoder mode 1 - Counter counts up/down on TI2FP1 edge depending on TI1FP2 level."]
            ENCODER_MODE_1 = 1,
            #[doc = "2: Encoder mode 2 - Counter counts up/down on TI1FP2 edge depending on TI2FP1 level."]
            ENCODER_MODE_2 = 2,
            #[doc = "3: Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input."]
            ENCODER_MODE_3 = 3,
            #[doc = "4: Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers."]
            RESET_MODE = 4,
            #[doc = "5: Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled."]
            GATED_MODE = 5,
            #[doc = "6: Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled."]
            TRIGGER_MODE = 6,
            #[doc = "7: External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter."]
            EXT_CLOCK_MODE = 7,
        }
        impl From<SMS_A> for u8 {
            #[inline(always)]
            fn from(variant: SMS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `SMS`"]
        pub type SMS_R = crate::R<u8, SMS_A>;
        impl SMS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SMS_A {
                match self.bits {
                    0 => SMS_A::DISABLED,
                    1 => SMS_A::ENCODER_MODE_1,
                    2 => SMS_A::ENCODER_MODE_2,
                    3 => SMS_A::ENCODER_MODE_3,
                    4 => SMS_A::RESET_MODE,
                    5 => SMS_A::GATED_MODE,
                    6 => SMS_A::TRIGGER_MODE,
                    7 => SMS_A::EXT_CLOCK_MODE,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SMS_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENCODER_MODE_1`"]
            #[inline(always)]
            pub fn is_encoder_mode_1(&self) -> bool {
                *self == SMS_A::ENCODER_MODE_1
            }
            #[doc = "Checks if the value of the field is `ENCODER_MODE_2`"]
            #[inline(always)]
            pub fn is_encoder_mode_2(&self) -> bool {
                *self == SMS_A::ENCODER_MODE_2
            }
            #[doc = "Checks if the value of the field is `ENCODER_MODE_3`"]
            #[inline(always)]
            pub fn is_encoder_mode_3(&self) -> bool {
                *self == SMS_A::ENCODER_MODE_3
            }
            #[doc = "Checks if the value of the field is `RESET_MODE`"]
            #[inline(always)]
            pub fn is_reset_mode(&self) -> bool {
                *self == SMS_A::RESET_MODE
            }
            #[doc = "Checks if the value of the field is `GATED_MODE`"]
            #[inline(always)]
            pub fn is_gated_mode(&self) -> bool {
                *self == SMS_A::GATED_MODE
            }
            #[doc = "Checks if the value of the field is `TRIGGER_MODE`"]
            #[inline(always)]
            pub fn is_trigger_mode(&self) -> bool {
                *self == SMS_A::TRIGGER_MODE
            }
            #[doc = "Checks if the value of the field is `EXT_CLOCK_MODE`"]
            #[inline(always)]
            pub fn is_ext_clock_mode(&self) -> bool {
                *self == SMS_A::EXT_CLOCK_MODE
            }
        }
        #[doc = "Write proxy for field `SMS`"]
        pub struct SMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SMS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Slave mode disabled - if CEN = ‘1 then the prescaler is clocked directly by the internal clock."]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SMS_A::DISABLED)
            }
            #[doc = "Encoder mode 1 - Counter counts up/down on TI2FP1 edge depending on TI1FP2 level."]
            #[inline(always)]
            pub fn encoder_mode_1(self) -> &'a mut W {
                self.variant(SMS_A::ENCODER_MODE_1)
            }
            #[doc = "Encoder mode 2 - Counter counts up/down on TI1FP2 edge depending on TI2FP1 level."]
            #[inline(always)]
            pub fn encoder_mode_2(self) -> &'a mut W {
                self.variant(SMS_A::ENCODER_MODE_2)
            }
            #[doc = "Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input."]
            #[inline(always)]
            pub fn encoder_mode_3(self) -> &'a mut W {
                self.variant(SMS_A::ENCODER_MODE_3)
            }
            #[doc = "Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers."]
            #[inline(always)]
            pub fn reset_mode(self) -> &'a mut W {
                self.variant(SMS_A::RESET_MODE)
            }
            #[doc = "Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled."]
            #[inline(always)]
            pub fn gated_mode(self) -> &'a mut W {
                self.variant(SMS_A::GATED_MODE)
            }
            #[doc = "Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled."]
            #[inline(always)]
            pub fn trigger_mode(self) -> &'a mut W {
                self.variant(SMS_A::TRIGGER_MODE)
            }
            #[doc = "External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter."]
            #[inline(always)]
            pub fn ext_clock_mode(self) -> &'a mut W {
                self.variant(SMS_A::EXT_CLOCK_MODE)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&self) -> ETP_R {
                ETP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&self) -> ECE_R {
                ECE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&self) -> ETPS_R {
                ETPS_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&self) -> ETF_R {
                ETF_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&self) -> MSM_R {
                MSM_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&self) -> TS_R {
                TS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&self) -> SMS_R {
                SMS_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&mut self) -> ETP_W {
                ETP_W { w: self }
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&mut self) -> ECE_W {
                ECE_W { w: self }
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&mut self) -> ETPS_W {
                ETPS_W { w: self }
            }
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&mut self) -> ETF_W {
                ETF_W { w: self }
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&mut self) -> MSM_W {
                MSM_W { w: self }
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&mut self) -> TS_W {
                TS_W { w: self }
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&mut self) -> SMS_W {
                SMS_W { w: self }
            }
        }
    }
    #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Trigger DMA request enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TDE_A {
            #[doc = "0: Trigger DMA request disabled"]
            DISABLED = 0,
            #[doc = "1: Trigger DMA request enabled"]
            ENABLED = 1,
        }
        impl From<TDE_A> for bool {
            #[inline(always)]
            fn from(variant: TDE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TDE`"]
        pub type TDE_R = crate::R<bool, TDE_A>;
        impl TDE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TDE_A {
                match self.bits {
                    false => TDE_A::DISABLED,
                    true => TDE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TDE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TDE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TDE`"]
        pub struct TDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TDE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Trigger DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TDE_A::DISABLED)
            }
            #[doc = "Trigger DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TDE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `COMDE`"]
        pub type COMDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMDE`"]
        pub struct COMDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 DMA request enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4DE_A {
            #[doc = "0: CCx DMA request disabled"]
            DISABLED = 0,
            #[doc = "1: CCx DMA request enabled"]
            ENABLED = 1,
        }
        impl From<CC4DE_A> for bool {
            #[inline(always)]
            fn from(variant: CC4DE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC4DE`"]
        pub type CC4DE_R = crate::R<bool, CC4DE_A>;
        impl CC4DE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CC4DE_A {
                match self.bits {
                    false => CC4DE_A::DISABLED,
                    true => CC4DE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CC4DE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CC4DE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CC4DE`"]
        pub struct CC4DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4DE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4DE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4DE_A::DISABLED)
            }
            #[doc = "CCx DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4DE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 DMA request enable"]
        pub type CC3DE_A = CC4DE_A;
        #[doc = "Reader of field `CC3DE`"]
        pub type CC3DE_R = crate::R<bool, CC4DE_A>;
        #[doc = "Write proxy for field `CC3DE`"]
        pub struct CC3DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3DE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3DE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4DE_A::DISABLED)
            }
            #[doc = "CCx DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4DE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Capture/Compare 2 DMA request enable"]
        pub type CC2DE_A = CC4DE_A;
        #[doc = "Reader of field `CC2DE`"]
        pub type CC2DE_R = crate::R<bool, CC4DE_A>;
        #[doc = "Write proxy for field `CC2DE`"]
        pub struct CC2DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2DE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2DE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4DE_A::DISABLED)
            }
            #[doc = "CCx DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4DE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 DMA request enable"]
        pub type CC1DE_A = CC4DE_A;
        #[doc = "Reader of field `CC1DE`"]
        pub type CC1DE_R = crate::R<bool, CC4DE_A>;
        #[doc = "Write proxy for field `CC1DE`"]
        pub struct CC1DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1DE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1DE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4DE_A::DISABLED)
            }
            #[doc = "CCx DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4DE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Update DMA request enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDE_A {
            #[doc = "0: Update DMA request disabled"]
            DISABLED = 0,
            #[doc = "1: Update DMA request enabled"]
            ENABLED = 1,
        }
        impl From<UDE_A> for bool {
            #[inline(always)]
            fn from(variant: UDE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDE`"]
        pub type UDE_R = crate::R<bool, UDE_A>;
        impl UDE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDE_A {
                match self.bits {
                    false => UDE_A::DISABLED,
                    true => UDE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UDE`"]
        pub struct UDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDE_A::DISABLED)
            }
            #[doc = "Update DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Trigger interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIE_A {
            #[doc = "0: Trigger interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Trigger interrupt enabled"]
            ENABLED = 1,
        }
        impl From<TIE_A> for bool {
            #[inline(always)]
            fn from(variant: TIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIE`"]
        pub type TIE_R = crate::R<bool, TIE_A>;
        impl TIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIE_A {
                match self.bits {
                    false => TIE_A::DISABLED,
                    true => TIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TIE`"]
        pub struct TIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Trigger interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIE_A::DISABLED)
            }
            #[doc = "Trigger interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4IE_A {
            #[doc = "0: CCx interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: CCx interrupt enabled"]
            ENABLED = 1,
        }
        impl From<CC4IE_A> for bool {
            #[inline(always)]
            fn from(variant: CC4IE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC4IE`"]
        pub type CC4IE_R = crate::R<bool, CC4IE_A>;
        impl CC4IE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CC4IE_A {
                match self.bits {
                    false => CC4IE_A::DISABLED,
                    true => CC4IE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CC4IE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CC4IE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CC4IE`"]
        pub struct CC4IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4IE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4IE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4IE_A::DISABLED)
            }
            #[doc = "CCx interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4IE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 interrupt enable"]
        pub type CC3IE_A = CC4IE_A;
        #[doc = "Reader of field `CC3IE`"]
        pub type CC3IE_R = crate::R<bool, CC4IE_A>;
        #[doc = "Write proxy for field `CC3IE`"]
        pub struct CC3IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3IE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3IE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4IE_A::DISABLED)
            }
            #[doc = "CCx interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4IE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Capture/Compare 2 interrupt enable"]
        pub type CC2IE_A = CC4IE_A;
        #[doc = "Reader of field `CC2IE`"]
        pub type CC2IE_R = crate::R<bool, CC4IE_A>;
        #[doc = "Write proxy for field `CC2IE`"]
        pub struct CC2IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2IE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4IE_A::DISABLED)
            }
            #[doc = "CCx interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4IE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 interrupt enable"]
        pub type CC1IE_A = CC4IE_A;
        #[doc = "Reader of field `CC1IE`"]
        pub type CC1IE_R = crate::R<bool, CC4IE_A>;
        #[doc = "Write proxy for field `CC1IE`"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1IE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC4IE_A::DISABLED)
            }
            #[doc = "CCx interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC4IE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIE_A {
            #[doc = "0: Update interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Update interrupt enabled"]
            ENABLED = 1,
        }
        impl From<UIE_A> for bool {
            #[inline(always)]
            fn from(variant: UIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, UIE_A>;
        impl UIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIE_A {
                match self.bits {
                    false => UIE_A::DISABLED,
                    true => UIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UIE_A::DISABLED)
            }
            #[doc = "Update interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&self) -> TDE_R {
                TDE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - COM DMA request enable"]
            #[inline(always)]
            pub fn comde(&self) -> COMDE_R {
                COMDE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
            #[inline(always)]
            pub fn cc4de(&self) -> CC4DE_R {
                CC4DE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
            #[inline(always)]
            pub fn cc3de(&self) -> CC3DE_R {
                CC3DE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&self) -> CC2DE_R {
                CC2DE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&self) -> CC1DE_R {
                CC1DE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&self) -> UDE_R {
                UDE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&self) -> TIE_R {
                TIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
            #[inline(always)]
            pub fn cc4ie(&self) -> CC4IE_R {
                CC4IE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
            #[inline(always)]
            pub fn cc3ie(&self) -> CC3IE_R {
                CC3IE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&self) -> CC2IE_R {
                CC2IE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&mut self) -> TDE_W {
                TDE_W { w: self }
            }
            #[doc = "Bit 13 - COM DMA request enable"]
            #[inline(always)]
            pub fn comde(&mut self) -> COMDE_W {
                COMDE_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
            #[inline(always)]
            pub fn cc4de(&mut self) -> CC4DE_W {
                CC4DE_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
            #[inline(always)]
            pub fn cc3de(&mut self) -> CC3DE_W {
                CC3DE_W { w: self }
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&mut self) -> CC2DE_W {
                CC2DE_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&mut self) -> CC1DE_W {
                CC1DE_W { w: self }
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&mut self) -> UDE_W {
                UDE_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&mut self) -> TIE_W {
                TIE_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
            #[inline(always)]
            pub fn cc4ie(&mut self) -> CC4IE_W {
                CC4IE_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
            #[inline(always)]
            pub fn cc3ie(&mut self) -> CC3IE_W {
                CC3IE_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&mut self) -> CC2IE_W {
                CC2IE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Capture/Compare 4 overcapture flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4OF_A {
            #[doc = "1: The counter value has been captured in TIMx_CCRx register while CCxIF flag was already set"]
            OVERCAPTURE = 1,
        }
        impl From<CC4OF_A> for bool {
            #[inline(always)]
            fn from(variant: CC4OF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC4OF`"]
        pub type CC4OF_R = crate::R<bool, CC4OF_A>;
        impl CC4OF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, CC4OF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(CC4OF_A::OVERCAPTURE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OVERCAPTURE`"]
            #[inline(always)]
            pub fn is_overcapture(&self) -> bool {
                *self == CC4OF_A::OVERCAPTURE
            }
        }
        #[doc = "Capture/Compare 4 overcapture flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4OF_AW {
            #[doc = "0: Clear flag"]
            CLEAR = 0,
        }
        impl From<CC4OF_AW> for bool {
            #[inline(always)]
            fn from(variant: CC4OF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `CC4OF`"]
        pub struct CC4OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4OF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4OF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4OF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 overcapture flag"]
        pub type CC3OF_A = CC4OF_A;
        #[doc = "Reader of field `CC3OF`"]
        pub type CC3OF_R = crate::R<bool, CC4OF_A>;
        #[doc = "Capture/Compare 3 overcapture flag"]
        pub type CC3OF_AW = CC4OF_AW;
        #[doc = "Write proxy for field `CC3OF`"]
        pub struct CC3OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3OF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3OF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4OF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Capture/compare 2 overcapture flag"]
        pub type CC2OF_A = CC4OF_A;
        #[doc = "Reader of field `CC2OF`"]
        pub type CC2OF_R = crate::R<bool, CC4OF_A>;
        #[doc = "Capture/compare 2 overcapture flag"]
        pub type CC2OF_AW = CC4OF_AW;
        #[doc = "Write proxy for field `CC2OF`"]
        pub struct CC2OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2OF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2OF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4OF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 overcapture flag"]
        pub type CC1OF_A = CC4OF_A;
        #[doc = "Reader of field `CC1OF`"]
        pub type CC1OF_R = crate::R<bool, CC4OF_A>;
        #[doc = "Capture/Compare 1 overcapture flag"]
        pub type CC1OF_AW = CC4OF_AW;
        #[doc = "Write proxy for field `CC1OF`"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1OF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4OF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Trigger interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIF_A {
            #[doc = "0: No trigger event occurred"]
            NOTRIGGER = 0,
            #[doc = "1: Trigger interrupt pending"]
            TRIGGER = 1,
        }
        impl From<TIF_A> for bool {
            #[inline(always)]
            fn from(variant: TIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIF`"]
        pub type TIF_R = crate::R<bool, TIF_A>;
        impl TIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIF_A {
                match self.bits {
                    false => TIF_A::NOTRIGGER,
                    true => TIF_A::TRIGGER,
                }
            }
            #[doc = "Checks if the value of the field is `NOTRIGGER`"]
            #[inline(always)]
            pub fn is_no_trigger(&self) -> bool {
                *self == TIF_A::NOTRIGGER
            }
            #[doc = "Checks if the value of the field is `TRIGGER`"]
            #[inline(always)]
            pub fn is_trigger(&self) -> bool {
                *self == TIF_A::TRIGGER
            }
        }
        #[doc = "Trigger interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIF_AW {
            #[doc = "0: Clear flag"]
            CLEAR = 0,
        }
        impl From<TIF_AW> for bool {
            #[inline(always)]
            fn from(variant: TIF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `TIF`"]
        pub struct TIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(TIF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4IF_A {
            #[doc = "1: If CC1 is an output: The content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. If CC1 is an input: The counter value has been captured in TIMx_CCR1 register."]
            MATCH = 1,
        }
        impl From<CC4IF_A> for bool {
            #[inline(always)]
            fn from(variant: CC4IF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC4IF`"]
        pub type CC4IF_R = crate::R<bool, CC4IF_A>;
        impl CC4IF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, CC4IF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(CC4IF_A::MATCH),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `MATCH`"]
            #[inline(always)]
            pub fn is_match_(&self) -> bool {
                *self == CC4IF_A::MATCH
            }
        }
        #[doc = "Capture/Compare 4 interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4IF_AW {
            #[doc = "0: Clear flag"]
            CLEAR = 0,
        }
        impl From<CC4IF_AW> for bool {
            #[inline(always)]
            fn from(variant: CC4IF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `CC4IF`"]
        pub struct CC4IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4IF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4IF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4IF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 interrupt flag"]
        pub type CC3IF_A = CC4IF_A;
        #[doc = "Reader of field `CC3IF`"]
        pub type CC3IF_R = crate::R<bool, CC4IF_A>;
        #[doc = "Capture/Compare 3 interrupt flag"]
        pub type CC3IF_AW = CC4IF_AW;
        #[doc = "Write proxy for field `CC3IF`"]
        pub struct CC3IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3IF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3IF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4IF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Capture/Compare 2 interrupt flag"]
        pub type CC2IF_A = CC4IF_A;
        #[doc = "Reader of field `CC2IF`"]
        pub type CC2IF_R = crate::R<bool, CC4IF_A>;
        #[doc = "Capture/Compare 2 interrupt flag"]
        pub type CC2IF_AW = CC4IF_AW;
        #[doc = "Write proxy for field `CC2IF`"]
        pub struct CC2IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2IF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4IF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/compare 1 interrupt flag"]
        pub type CC1IF_A = CC4IF_A;
        #[doc = "Reader of field `CC1IF`"]
        pub type CC1IF_R = crate::R<bool, CC4IF_A>;
        #[doc = "Capture/compare 1 interrupt flag"]
        pub type CC1IF_AW = CC4IF_AW;
        #[doc = "Write proxy for field `CC1IF`"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1IF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CC4IF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIF_A {
            #[doc = "0: No update occurred"]
            CLEAR = 0,
            #[doc = "1: Update interrupt pending."]
            UPDATEPENDING = 1,
        }
        impl From<UIF_A> for bool {
            #[inline(always)]
            fn from(variant: UIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, UIF_A>;
        impl UIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIF_A {
                match self.bits {
                    false => UIF_A::CLEAR,
                    true => UIF_A::UPDATEPENDING,
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == UIF_A::CLEAR
            }
            #[doc = "Checks if the value of the field is `UPDATEPENDING`"]
            #[inline(always)]
            pub fn is_update_pending(&self) -> bool {
                *self == UIF_A::UPDATEPENDING
            }
        }
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No update occurred"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(UIF_A::CLEAR)
            }
            #[doc = "Update interrupt pending."]
            #[inline(always)]
            pub fn update_pending(self) -> &'a mut W {
                self.variant(UIF_A::UPDATEPENDING)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
            #[inline(always)]
            pub fn cc4of(&self) -> CC4OF_R {
                CC4OF_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
            #[inline(always)]
            pub fn cc3of(&self) -> CC3OF_R {
                CC3OF_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&self) -> CC2OF_R {
                CC2OF_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&self) -> TIF_R {
                TIF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
            #[inline(always)]
            pub fn cc4if(&self) -> CC4IF_R {
                CC4IF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
            #[inline(always)]
            pub fn cc3if(&self) -> CC3IF_R {
                CC3IF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&self) -> CC2IF_R {
                CC2IF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
            #[inline(always)]
            pub fn cc4of(&mut self) -> CC4OF_W {
                CC4OF_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
            #[inline(always)]
            pub fn cc3of(&mut self) -> CC3OF_W {
                CC3OF_W { w: self }
            }
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&mut self) -> CC2OF_W {
                CC2OF_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&mut self) -> TIF_W {
                TIF_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
            #[inline(always)]
            pub fn cc4if(&mut self) -> CC4IF_W {
                CC4IF_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
            #[inline(always)]
            pub fn cc3if(&mut self) -> CC3IF_W {
                CC3IF_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&mut self) -> CC2IF_W {
                CC2IF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
        }
    }
    #[doc = "event generation register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Trigger generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TG_AW {
            #[doc = "1: The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled."]
            TRIGGER = 1,
        }
        impl From<TG_AW> for bool {
            #[inline(always)]
            fn from(variant: TG_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `TG`"]
        pub struct TG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TG_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(TG_AW::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Capture/compare 4 generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC4G_AW {
            #[doc = "1: If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            TRIGGER = 1,
        }
        impl From<CC4G_AW> for bool {
            #[inline(always)]
            fn from(variant: CC4G_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `CC4G`"]
        pub struct CC4G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4G_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4G_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(CC4G_AW::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Capture/compare 3 generation"]
        pub type CC3G_AW = CC4G_AW;
        #[doc = "Write proxy for field `CC3G`"]
        pub struct CC3G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3G_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3G_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(CC4G_AW::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Capture/compare 2 generation"]
        pub type CC2G_AW = CC4G_AW;
        #[doc = "Write proxy for field `CC2G`"]
        pub struct CC2G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2G_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2G_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(CC4G_AW::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/compare 1 generation"]
        pub type CC1G_AW = CC4G_AW;
        #[doc = "Write proxy for field `CC1G`"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1G_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."]
            #[inline(always)]
            pub fn trigger(self) -> &'a mut W {
                self.variant(CC4G_AW::TRIGGER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UG_AW {
            #[doc = "1: Re-initializes the timer counter and generates an update of the registers."]
            UPDATE = 1,
        }
        impl From<UG_AW> for bool {
            #[inline(always)]
            fn from(variant: UG_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UG_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Re-initializes the timer counter and generates an update of the registers."]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(UG_AW::UPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 6 - Trigger generation"]
            #[inline(always)]
            pub fn tg(&mut self) -> TG_W {
                TG_W { w: self }
            }
            #[doc = "Bit 4 - Capture/compare 4 generation"]
            #[inline(always)]
            pub fn cc4g(&mut self) -> CC4G_W {
                CC4G_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare 3 generation"]
            #[inline(always)]
            pub fn cc3g(&mut self) -> CC3G_W {
                CC3G_W { w: self }
            }
            #[doc = "Bit 2 - Capture/compare 2 generation"]
            #[inline(always)]
            pub fn cc2g(&mut self) -> CC2G_W {
                CC2G_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](ccmr1_output) module"]
    pub type CCMR1_OUTPUT = crate::Reg<u32, _CCMR1_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_OUTPUT;
    #[doc = "`read()` method returns [ccmr1_output::R](ccmr1_output::R) reader structure"]
    impl crate::Readable for CCMR1_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](ccmr1_output::W) writer structure"]
    impl crate::Writable for CCMR1_OUTPUT {}
    #[doc = "capture/compare mode register 1 (output mode)"]
    pub mod ccmr1_output {
        #[doc = "Reader of register CCMR1_Output"]
        pub type R = crate::R<u32, super::CCMR1_OUTPUT>;
        #[doc = "Writer for register CCMR1_Output"]
        pub type W = crate::W<u32, super::CCMR1_OUTPUT>;
        #[doc = "Register CCMR1_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OC2CE`"]
        pub type OC2CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2CE`"]
        pub struct OC2CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Output compare 2 mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OC2M_A {
            #[doc = "0: The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            FROZEN = 0,
            #[doc = "1: Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            ACTIVEONMATCH = 1,
            #[doc = "2: Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            INACTIVEONMATCH = 2,
            #[doc = "3: OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            TOGGLE = 3,
            #[doc = "4: OCyREF is forced low"]
            FORCEINACTIVE = 4,
            #[doc = "5: OCyREF is forced high"]
            FORCEACTIVE = 5,
            #[doc = "6: In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            PWMMODE1 = 6,
            #[doc = "7: Inversely to PwmMode1"]
            PWMMODE2 = 7,
        }
        impl From<OC2M_A> for u8 {
            #[inline(always)]
            fn from(variant: OC2M_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `OC2M`"]
        pub type OC2M_R = crate::R<u8, OC2M_A>;
        impl OC2M_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC2M_A {
                match self.bits {
                    0 => OC2M_A::FROZEN,
                    1 => OC2M_A::ACTIVEONMATCH,
                    2 => OC2M_A::INACTIVEONMATCH,
                    3 => OC2M_A::TOGGLE,
                    4 => OC2M_A::FORCEINACTIVE,
                    5 => OC2M_A::FORCEACTIVE,
                    6 => OC2M_A::PWMMODE1,
                    7 => OC2M_A::PWMMODE2,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `FROZEN`"]
            #[inline(always)]
            pub fn is_frozen(&self) -> bool {
                *self == OC2M_A::FROZEN
            }
            #[doc = "Checks if the value of the field is `ACTIVEONMATCH`"]
            #[inline(always)]
            pub fn is_active_on_match(&self) -> bool {
                *self == OC2M_A::ACTIVEONMATCH
            }
            #[doc = "Checks if the value of the field is `INACTIVEONMATCH`"]
            #[inline(always)]
            pub fn is_inactive_on_match(&self) -> bool {
                *self == OC2M_A::INACTIVEONMATCH
            }
            #[doc = "Checks if the value of the field is `TOGGLE`"]
            #[inline(always)]
            pub fn is_toggle(&self) -> bool {
                *self == OC2M_A::TOGGLE
            }
            #[doc = "Checks if the value of the field is `FORCEINACTIVE`"]
            #[inline(always)]
            pub fn is_force_inactive(&self) -> bool {
                *self == OC2M_A::FORCEINACTIVE
            }
            #[doc = "Checks if the value of the field is `FORCEACTIVE`"]
            #[inline(always)]
            pub fn is_force_active(&self) -> bool {
                *self == OC2M_A::FORCEACTIVE
            }
            #[doc = "Checks if the value of the field is `PWMMODE1`"]
            #[inline(always)]
            pub fn is_pwm_mode1(&self) -> bool {
                *self == OC2M_A::PWMMODE1
            }
            #[doc = "Checks if the value of the field is `PWMMODE2`"]
            #[inline(always)]
            pub fn is_pwm_mode2(&self) -> bool {
                *self == OC2M_A::PWMMODE2
            }
        }
        #[doc = "Write proxy for field `OC2M`"]
        pub struct OC2M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2M_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC2M_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            #[inline(always)]
            pub fn frozen(self) -> &'a mut W {
                self.variant(OC2M_A::FROZEN)
            }
            #[doc = "Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn active_on_match(self) -> &'a mut W {
                self.variant(OC2M_A::ACTIVEONMATCH)
            }
            #[doc = "Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn inactive_on_match(self) -> &'a mut W {
                self.variant(OC2M_A::INACTIVEONMATCH)
            }
            #[doc = "OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            #[inline(always)]
            pub fn toggle(self) -> &'a mut W {
                self.variant(OC2M_A::TOGGLE)
            }
            #[doc = "OCyREF is forced low"]
            #[inline(always)]
            pub fn force_inactive(self) -> &'a mut W {
                self.variant(OC2M_A::FORCEINACTIVE)
            }
            #[doc = "OCyREF is forced high"]
            #[inline(always)]
            pub fn force_active(self) -> &'a mut W {
                self.variant(OC2M_A::FORCEACTIVE)
            }
            #[doc = "In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            #[inline(always)]
            pub fn pwm_mode1(self) -> &'a mut W {
                self.variant(OC2M_A::PWMMODE1)
            }
            #[doc = "Inversely to PwmMode1"]
            #[inline(always)]
            pub fn pwm_mode2(self) -> &'a mut W {
                self.variant(OC2M_A::PWMMODE2)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Output compare 2 preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OC2PE_A {
            #[doc = "0: Preload register on CCR2 disabled. New values written to CCR2 are taken into account immediately"]
            DISABLED = 0,
            #[doc = "1: Preload register on CCR2 enabled. Preload value is loaded into active register on each update event"]
            ENABLED = 1,
        }
        impl From<OC2PE_A> for bool {
            #[inline(always)]
            fn from(variant: OC2PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OC2PE`"]
        pub type OC2PE_R = crate::R<bool, OC2PE_A>;
        impl OC2PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC2PE_A {
                match self.bits {
                    false => OC2PE_A::DISABLED,
                    true => OC2PE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OC2PE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OC2PE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OC2PE`"]
        pub struct OC2PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC2PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Preload register on CCR2 disabled. New values written to CCR2 are taken into account immediately"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OC2PE_A::DISABLED)
            }
            #[doc = "Preload register on CCR2 enabled. Preload value is loaded into active register on each update event"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OC2PE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC2FE`"]
        pub type OC2FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2FE`"]
        pub struct OC2FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 2 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC2S_A {
            #[doc = "0: CC2 channel is configured as output"]
            OUTPUT = 0,
        }
        impl From<CC2S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC2S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC2S`"]
        pub type CC2S_R = crate::R<u8, CC2S_A>;
        impl CC2S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC2S_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CC2S_A::OUTPUT),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == CC2S_A::OUTPUT
            }
        }
        #[doc = "Write proxy for field `CC2S`"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC2 channel is configured as output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(CC2S_A::OUTPUT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OC1CE`"]
        pub type OC1CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1CE`"]
        pub struct OC1CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Output compare 1 mode"]
        pub type OC1M_A = OC2M_A;
        #[doc = "Reader of field `OC1M`"]
        pub type OC1M_R = crate::R<u8, OC2M_A>;
        #[doc = "Write proxy for field `OC1M`"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC1M_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            #[inline(always)]
            pub fn frozen(self) -> &'a mut W {
                self.variant(OC2M_A::FROZEN)
            }
            #[doc = "Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn active_on_match(self) -> &'a mut W {
                self.variant(OC2M_A::ACTIVEONMATCH)
            }
            #[doc = "Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn inactive_on_match(self) -> &'a mut W {
                self.variant(OC2M_A::INACTIVEONMATCH)
            }
            #[doc = "OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            #[inline(always)]
            pub fn toggle(self) -> &'a mut W {
                self.variant(OC2M_A::TOGGLE)
            }
            #[doc = "OCyREF is forced low"]
            #[inline(always)]
            pub fn force_inactive(self) -> &'a mut W {
                self.variant(OC2M_A::FORCEINACTIVE)
            }
            #[doc = "OCyREF is forced high"]
            #[inline(always)]
            pub fn force_active(self) -> &'a mut W {
                self.variant(OC2M_A::FORCEACTIVE)
            }
            #[doc = "In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            #[inline(always)]
            pub fn pwm_mode1(self) -> &'a mut W {
                self.variant(OC2M_A::PWMMODE1)
            }
            #[doc = "Inversely to PwmMode1"]
            #[inline(always)]
            pub fn pwm_mode2(self) -> &'a mut W {
                self.variant(OC2M_A::PWMMODE2)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Output compare 1 preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OC1PE_A {
            #[doc = "0: Preload register on CCR1 disabled. New values written to CCR1 are taken into account immediately"]
            DISABLED = 0,
            #[doc = "1: Preload register on CCR1 enabled. Preload value is loaded into active register on each update event"]
            ENABLED = 1,
        }
        impl From<OC1PE_A> for bool {
            #[inline(always)]
            fn from(variant: OC1PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OC1PE`"]
        pub type OC1PE_R = crate::R<bool, OC1PE_A>;
        impl OC1PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC1PE_A {
                match self.bits {
                    false => OC1PE_A::DISABLED,
                    true => OC1PE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OC1PE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OC1PE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OC1PE`"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC1PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Preload register on CCR1 disabled. New values written to CCR1 are taken into account immediately"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OC1PE_A::DISABLED)
            }
            #[doc = "Preload register on CCR1 enabled. Preload value is loaded into active register on each update event"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OC1PE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC1FE`"]
        pub type OC1FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1FE`"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC1S_A {
            #[doc = "0: CC1 channel is configured as output"]
            OUTPUT = 0,
        }
        impl From<CC1S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC1S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, CC1S_A>;
        impl CC1S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC1S_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CC1S_A::OUTPUT),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == CC1S_A::OUTPUT
            }
        }
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC1 channel is configured as output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(CC1S_A::OUTPUT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Output compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&self) -> OC2CE_R {
                OC2CE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Output compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&self) -> OC2M_R {
                OC2M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 11 - Output compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&self) -> OC2PE_R {
                OC2PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&self) -> OC2FE_R {
                OC2FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Output compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&self) -> OC1CE_R {
                OC1CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Output compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Output compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&mut self) -> OC2CE_W {
                OC2CE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&mut self) -> OC2M_W {
                OC2M_W { w: self }
            }
            #[doc = "Bit 11 - Output compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&mut self) -> OC2PE_W {
                OC2PE_W { w: self }
            }
            #[doc = "Bit 10 - Output compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&mut self) -> OC2FE_W {
                OC2FE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&mut self) -> OC1CE_W {
                OC1CE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](ccmr1_input) module"]
    pub type CCMR1_INPUT = crate::Reg<u32, _CCMR1_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_INPUT;
    #[doc = "`read()` method returns [ccmr1_input::R](ccmr1_input::R) reader structure"]
    impl crate::Readable for CCMR1_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](ccmr1_input::W) writer structure"]
    impl crate::Writable for CCMR1_INPUT {}
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Reader of register CCMR1_Input"]
        pub type R = crate::R<u32, super::CCMR1_INPUT>;
        #[doc = "Writer for register CCMR1_Input"]
        pub type W = crate::W<u32, super::CCMR1_INPUT>;
        #[doc = "Register CCMR1_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC2F`"]
        pub type IC2F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC2F`"]
        pub struct IC2F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IC2PSC`"]
        pub type IC2PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC2PSC`"]
        pub struct IC2PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Capture/compare 2 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC2S_A {
            #[doc = "1: CC2 channel is configured as input, IC2 is mapped on TI2"]
            TI2 = 1,
            #[doc = "2: CC2 channel is configured as input, IC2 is mapped on TI1"]
            TI1 = 2,
            #[doc = "3: CC2 channel is configured as input, IC2 is mapped on TRC"]
            TRC = 3,
        }
        impl From<CC2S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC2S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC2S`"]
        pub type CC2S_R = crate::R<u8, CC2S_A>;
        impl CC2S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC2S_A> {
                use crate::Variant::*;
                match self.bits {
                    1 => Val(CC2S_A::TI2),
                    2 => Val(CC2S_A::TI1),
                    3 => Val(CC2S_A::TRC),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TI2`"]
            #[inline(always)]
            pub fn is_ti2(&self) -> bool {
                *self == CC2S_A::TI2
            }
            #[doc = "Checks if the value of the field is `TI1`"]
            #[inline(always)]
            pub fn is_ti1(&self) -> bool {
                *self == CC2S_A::TI1
            }
            #[doc = "Checks if the value of the field is `TRC`"]
            #[inline(always)]
            pub fn is_trc(&self) -> bool {
                *self == CC2S_A::TRC
            }
        }
        #[doc = "Write proxy for field `CC2S`"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC2S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC2 channel is configured as input, IC2 is mapped on TI2"]
            #[inline(always)]
            pub fn ti2(self) -> &'a mut W {
                self.variant(CC2S_A::TI2)
            }
            #[doc = "CC2 channel is configured as input, IC2 is mapped on TI1"]
            #[inline(always)]
            pub fn ti1(self) -> &'a mut W {
                self.variant(CC2S_A::TI1)
            }
            #[doc = "CC2 channel is configured as input, IC2 is mapped on TRC"]
            #[inline(always)]
            pub fn trc(self) -> &'a mut W {
                self.variant(CC2S_A::TRC)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Input capture 1 filter\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum IC1F_A {
            #[doc = "0: No filter, sampling is done at fDTS"]
            NOFILTER = 0,
            #[doc = "1: fSAMPLING=fCK_INT, N=2"]
            FCK_INT_N2 = 1,
            #[doc = "2: fSAMPLING=fCK_INT, N=4"]
            FCK_INT_N4 = 2,
            #[doc = "3: fSAMPLING=fCK_INT, N=8"]
            FCK_INT_N8 = 3,
            #[doc = "4: fSAMPLING=fDTS/2, N=6"]
            FDTS_DIV2_N6 = 4,
            #[doc = "5: fSAMPLING=fDTS/2, N=8"]
            FDTS_DIV2_N8 = 5,
            #[doc = "6: fSAMPLING=fDTS/4, N=6"]
            FDTS_DIV4_N6 = 6,
            #[doc = "7: fSAMPLING=fDTS/4, N=8"]
            FDTS_DIV4_N8 = 7,
            #[doc = "8: fSAMPLING=fDTS/8, N=6"]
            FDTS_DIV8_N6 = 8,
            #[doc = "9: fSAMPLING=fDTS/8, N=8"]
            FDTS_DIV8_N8 = 9,
            #[doc = "10: fSAMPLING=fDTS/16, N=5"]
            FDTS_DIV16_N5 = 10,
            #[doc = "11: fSAMPLING=fDTS/16, N=6"]
            FDTS_DIV16_N6 = 11,
            #[doc = "12: fSAMPLING=fDTS/16, N=8"]
            FDTS_DIV16_N8 = 12,
            #[doc = "13: fSAMPLING=fDTS/32, N=5"]
            FDTS_DIV32_N5 = 13,
            #[doc = "14: fSAMPLING=fDTS/32, N=6"]
            FDTS_DIV32_N6 = 14,
            #[doc = "15: fSAMPLING=fDTS/32, N=8"]
            FDTS_DIV32_N8 = 15,
        }
        impl From<IC1F_A> for u8 {
            #[inline(always)]
            fn from(variant: IC1F_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `IC1F`"]
        pub type IC1F_R = crate::R<u8, IC1F_A>;
        impl IC1F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IC1F_A {
                match self.bits {
                    0 => IC1F_A::NOFILTER,
                    1 => IC1F_A::FCK_INT_N2,
                    2 => IC1F_A::FCK_INT_N4,
                    3 => IC1F_A::FCK_INT_N8,
                    4 => IC1F_A::FDTS_DIV2_N6,
                    5 => IC1F_A::FDTS_DIV2_N8,
                    6 => IC1F_A::FDTS_DIV4_N6,
                    7 => IC1F_A::FDTS_DIV4_N8,
                    8 => IC1F_A::FDTS_DIV8_N6,
                    9 => IC1F_A::FDTS_DIV8_N8,
                    10 => IC1F_A::FDTS_DIV16_N5,
                    11 => IC1F_A::FDTS_DIV16_N6,
                    12 => IC1F_A::FDTS_DIV16_N8,
                    13 => IC1F_A::FDTS_DIV32_N5,
                    14 => IC1F_A::FDTS_DIV32_N6,
                    15 => IC1F_A::FDTS_DIV32_N8,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `NOFILTER`"]
            #[inline(always)]
            pub fn is_no_filter(&self) -> bool {
                *self == IC1F_A::NOFILTER
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N2`"]
            #[inline(always)]
            pub fn is_fck_int_n2(&self) -> bool {
                *self == IC1F_A::FCK_INT_N2
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N4`"]
            #[inline(always)]
            pub fn is_fck_int_n4(&self) -> bool {
                *self == IC1F_A::FCK_INT_N4
            }
            #[doc = "Checks if the value of the field is `FCK_INT_N8`"]
            #[inline(always)]
            pub fn is_fck_int_n8(&self) -> bool {
                *self == IC1F_A::FCK_INT_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV2_N6`"]
            #[inline(always)]
            pub fn is_fdts_div2_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV2_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV2_N8`"]
            #[inline(always)]
            pub fn is_fdts_div2_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV2_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV4_N6`"]
            #[inline(always)]
            pub fn is_fdts_div4_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV4_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV4_N8`"]
            #[inline(always)]
            pub fn is_fdts_div4_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV4_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV8_N6`"]
            #[inline(always)]
            pub fn is_fdts_div8_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV8_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV8_N8`"]
            #[inline(always)]
            pub fn is_fdts_div8_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV8_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N5`"]
            #[inline(always)]
            pub fn is_fdts_div16_n5(&self) -> bool {
                *self == IC1F_A::FDTS_DIV16_N5
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N6`"]
            #[inline(always)]
            pub fn is_fdts_div16_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV16_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV16_N8`"]
            #[inline(always)]
            pub fn is_fdts_div16_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV16_N8
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N5`"]
            #[inline(always)]
            pub fn is_fdts_div32_n5(&self) -> bool {
                *self == IC1F_A::FDTS_DIV32_N5
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N6`"]
            #[inline(always)]
            pub fn is_fdts_div32_n6(&self) -> bool {
                *self == IC1F_A::FDTS_DIV32_N6
            }
            #[doc = "Checks if the value of the field is `FDTS_DIV32_N8`"]
            #[inline(always)]
            pub fn is_fdts_div32_n8(&self) -> bool {
                *self == IC1F_A::FDTS_DIV32_N8
            }
        }
        #[doc = "Write proxy for field `IC1F`"]
        pub struct IC1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IC1F_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No filter, sampling is done at fDTS"]
            #[inline(always)]
            pub fn no_filter(self) -> &'a mut W {
                self.variant(IC1F_A::NOFILTER)
            }
            #[doc = "fSAMPLING=fCK_INT, N=2"]
            #[inline(always)]
            pub fn fck_int_n2(self) -> &'a mut W {
                self.variant(IC1F_A::FCK_INT_N2)
            }
            #[doc = "fSAMPLING=fCK_INT, N=4"]
            #[inline(always)]
            pub fn fck_int_n4(self) -> &'a mut W {
                self.variant(IC1F_A::FCK_INT_N4)
            }
            #[doc = "fSAMPLING=fCK_INT, N=8"]
            #[inline(always)]
            pub fn fck_int_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FCK_INT_N8)
            }
            #[doc = "fSAMPLING=fDTS/2, N=6"]
            #[inline(always)]
            pub fn fdts_div2_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV2_N6)
            }
            #[doc = "fSAMPLING=fDTS/2, N=8"]
            #[inline(always)]
            pub fn fdts_div2_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV2_N8)
            }
            #[doc = "fSAMPLING=fDTS/4, N=6"]
            #[inline(always)]
            pub fn fdts_div4_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV4_N6)
            }
            #[doc = "fSAMPLING=fDTS/4, N=8"]
            #[inline(always)]
            pub fn fdts_div4_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV4_N8)
            }
            #[doc = "fSAMPLING=fDTS/8, N=6"]
            #[inline(always)]
            pub fn fdts_div8_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV8_N6)
            }
            #[doc = "fSAMPLING=fDTS/8, N=8"]
            #[inline(always)]
            pub fn fdts_div8_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV8_N8)
            }
            #[doc = "fSAMPLING=fDTS/16, N=5"]
            #[inline(always)]
            pub fn fdts_div16_n5(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV16_N5)
            }
            #[doc = "fSAMPLING=fDTS/16, N=6"]
            #[inline(always)]
            pub fn fdts_div16_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV16_N6)
            }
            #[doc = "fSAMPLING=fDTS/16, N=8"]
            #[inline(always)]
            pub fn fdts_div16_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV16_N8)
            }
            #[doc = "fSAMPLING=fDTS/32, N=5"]
            #[inline(always)]
            pub fn fdts_div32_n5(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV32_N5)
            }
            #[doc = "fSAMPLING=fDTS/32, N=6"]
            #[inline(always)]
            pub fn fdts_div32_n6(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV32_N6)
            }
            #[doc = "fSAMPLING=fDTS/32, N=8"]
            #[inline(always)]
            pub fn fdts_div32_n8(self) -> &'a mut W {
                self.variant(IC1F_A::FDTS_DIV32_N8)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC1PSC`"]
        pub type IC1PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1PSC`"]
        pub struct IC1PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC1S_A {
            #[doc = "1: CC1 channel is configured as input, IC1 is mapped on TI1"]
            TI1 = 1,
            #[doc = "2: CC1 channel is configured as input, IC1 is mapped on TI2"]
            TI2 = 2,
            #[doc = "3: CC1 channel is configured as input, IC1 is mapped on TRC"]
            TRC = 3,
        }
        impl From<CC1S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC1S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, CC1S_A>;
        impl CC1S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC1S_A> {
                use crate::Variant::*;
                match self.bits {
                    1 => Val(CC1S_A::TI1),
                    2 => Val(CC1S_A::TI2),
                    3 => Val(CC1S_A::TRC),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TI1`"]
            #[inline(always)]
            pub fn is_ti1(&self) -> bool {
                *self == CC1S_A::TI1
            }
            #[doc = "Checks if the value of the field is `TI2`"]
            #[inline(always)]
            pub fn is_ti2(&self) -> bool {
                *self == CC1S_A::TI2
            }
            #[doc = "Checks if the value of the field is `TRC`"]
            #[inline(always)]
            pub fn is_trc(&self) -> bool {
                *self == CC1S_A::TRC
            }
        }
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC1 channel is configured as input, IC1 is mapped on TI1"]
            #[inline(always)]
            pub fn ti1(self) -> &'a mut W {
                self.variant(CC1S_A::TI1)
            }
            #[doc = "CC1 channel is configured as input, IC1 is mapped on TI2"]
            #[inline(always)]
            pub fn ti2(self) -> &'a mut W {
                self.variant(CC1S_A::TI2)
            }
            #[doc = "CC1 channel is configured as input, IC1 is mapped on TRC"]
            #[inline(always)]
            pub fn trc(self) -> &'a mut W {
                self.variant(CC1S_A::TRC)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&self) -> IC2F_R {
                IC2F_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2psc(&self) -> IC2PSC_R {
                IC2PSC_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Capture/compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&self) -> IC1F_R {
                IC1F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&self) -> IC1PSC_R {
                IC1PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&mut self) -> IC2F_W {
                IC2F_W { w: self }
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2psc(&mut self) -> IC2PSC_W {
                IC2PSC_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&mut self) -> IC1F_W {
                IC1F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&mut self) -> IC1PSC_W {
                IC1PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 2 (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_output](ccmr2_output) module"]
    pub type CCMR2_OUTPUT = crate::Reg<u32, _CCMR2_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR2_OUTPUT;
    #[doc = "`read()` method returns [ccmr2_output::R](ccmr2_output::R) reader structure"]
    impl crate::Readable for CCMR2_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr2_output::W](ccmr2_output::W) writer structure"]
    impl crate::Writable for CCMR2_OUTPUT {}
    #[doc = "capture/compare mode register 2 (output mode)"]
    pub mod ccmr2_output {
        #[doc = "Reader of register CCMR2_Output"]
        pub type R = crate::R<u32, super::CCMR2_OUTPUT>;
        #[doc = "Writer for register CCMR2_Output"]
        pub type W = crate::W<u32, super::CCMR2_OUTPUT>;
        #[doc = "Register CCMR2_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR2_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OC4CE`"]
        pub type OC4CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4CE`"]
        pub struct OC4CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Output compare 4 mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OC4M_A {
            #[doc = "0: The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            FROZEN = 0,
            #[doc = "1: Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            ACTIVEONMATCH = 1,
            #[doc = "2: Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            INACTIVEONMATCH = 2,
            #[doc = "3: OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            TOGGLE = 3,
            #[doc = "4: OCyREF is forced low"]
            FORCEINACTIVE = 4,
            #[doc = "5: OCyREF is forced high"]
            FORCEACTIVE = 5,
            #[doc = "6: In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            PWMMODE1 = 6,
            #[doc = "7: Inversely to PwmMode1"]
            PWMMODE2 = 7,
        }
        impl From<OC4M_A> for u8 {
            #[inline(always)]
            fn from(variant: OC4M_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `OC4M`"]
        pub type OC4M_R = crate::R<u8, OC4M_A>;
        impl OC4M_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC4M_A {
                match self.bits {
                    0 => OC4M_A::FROZEN,
                    1 => OC4M_A::ACTIVEONMATCH,
                    2 => OC4M_A::INACTIVEONMATCH,
                    3 => OC4M_A::TOGGLE,
                    4 => OC4M_A::FORCEINACTIVE,
                    5 => OC4M_A::FORCEACTIVE,
                    6 => OC4M_A::PWMMODE1,
                    7 => OC4M_A::PWMMODE2,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `FROZEN`"]
            #[inline(always)]
            pub fn is_frozen(&self) -> bool {
                *self == OC4M_A::FROZEN
            }
            #[doc = "Checks if the value of the field is `ACTIVEONMATCH`"]
            #[inline(always)]
            pub fn is_active_on_match(&self) -> bool {
                *self == OC4M_A::ACTIVEONMATCH
            }
            #[doc = "Checks if the value of the field is `INACTIVEONMATCH`"]
            #[inline(always)]
            pub fn is_inactive_on_match(&self) -> bool {
                *self == OC4M_A::INACTIVEONMATCH
            }
            #[doc = "Checks if the value of the field is `TOGGLE`"]
            #[inline(always)]
            pub fn is_toggle(&self) -> bool {
                *self == OC4M_A::TOGGLE
            }
            #[doc = "Checks if the value of the field is `FORCEINACTIVE`"]
            #[inline(always)]
            pub fn is_force_inactive(&self) -> bool {
                *self == OC4M_A::FORCEINACTIVE
            }
            #[doc = "Checks if the value of the field is `FORCEACTIVE`"]
            #[inline(always)]
            pub fn is_force_active(&self) -> bool {
                *self == OC4M_A::FORCEACTIVE
            }
            #[doc = "Checks if the value of the field is `PWMMODE1`"]
            #[inline(always)]
            pub fn is_pwm_mode1(&self) -> bool {
                *self == OC4M_A::PWMMODE1
            }
            #[doc = "Checks if the value of the field is `PWMMODE2`"]
            #[inline(always)]
            pub fn is_pwm_mode2(&self) -> bool {
                *self == OC4M_A::PWMMODE2
            }
        }
        #[doc = "Write proxy for field `OC4M`"]
        pub struct OC4M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4M_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC4M_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            #[inline(always)]
            pub fn frozen(self) -> &'a mut W {
                self.variant(OC4M_A::FROZEN)
            }
            #[doc = "Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn active_on_match(self) -> &'a mut W {
                self.variant(OC4M_A::ACTIVEONMATCH)
            }
            #[doc = "Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn inactive_on_match(self) -> &'a mut W {
                self.variant(OC4M_A::INACTIVEONMATCH)
            }
            #[doc = "OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            #[inline(always)]
            pub fn toggle(self) -> &'a mut W {
                self.variant(OC4M_A::TOGGLE)
            }
            #[doc = "OCyREF is forced low"]
            #[inline(always)]
            pub fn force_inactive(self) -> &'a mut W {
                self.variant(OC4M_A::FORCEINACTIVE)
            }
            #[doc = "OCyREF is forced high"]
            #[inline(always)]
            pub fn force_active(self) -> &'a mut W {
                self.variant(OC4M_A::FORCEACTIVE)
            }
            #[doc = "In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            #[inline(always)]
            pub fn pwm_mode1(self) -> &'a mut W {
                self.variant(OC4M_A::PWMMODE1)
            }
            #[doc = "Inversely to PwmMode1"]
            #[inline(always)]
            pub fn pwm_mode2(self) -> &'a mut W {
                self.variant(OC4M_A::PWMMODE2)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Output compare 4 preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OC4PE_A {
            #[doc = "0: Preload register on CCR4 disabled. New values written to CCR4 are taken into account immediately"]
            DISABLED = 0,
            #[doc = "1: Preload register on CCR4 enabled. Preload value is loaded into active register on each update event"]
            ENABLED = 1,
        }
        impl From<OC4PE_A> for bool {
            #[inline(always)]
            fn from(variant: OC4PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OC4PE`"]
        pub type OC4PE_R = crate::R<bool, OC4PE_A>;
        impl OC4PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC4PE_A {
                match self.bits {
                    false => OC4PE_A::DISABLED,
                    true => OC4PE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OC4PE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OC4PE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OC4PE`"]
        pub struct OC4PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC4PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Preload register on CCR4 disabled. New values written to CCR4 are taken into account immediately"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OC4PE_A::DISABLED)
            }
            #[doc = "Preload register on CCR4 enabled. Preload value is loaded into active register on each update event"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OC4PE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC4FE`"]
        pub type OC4FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4FE`"]
        pub struct OC4FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC4S_A {
            #[doc = "0: CC4 channel is configured as output"]
            OUTPUT = 0,
        }
        impl From<CC4S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC4S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC4S`"]
        pub type CC4S_R = crate::R<u8, CC4S_A>;
        impl CC4S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC4S_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CC4S_A::OUTPUT),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == CC4S_A::OUTPUT
            }
        }
        #[doc = "Write proxy for field `CC4S`"]
        pub struct CC4S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC4 channel is configured as output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(CC4S_A::OUTPUT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OC3CE`"]
        pub type OC3CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3CE`"]
        pub struct OC3CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Output compare 3 mode"]
        pub type OC3M_A = OC4M_A;
        #[doc = "Reader of field `OC3M`"]
        pub type OC3M_R = crate::R<u8, OC4M_A>;
        #[doc = "Write proxy for field `OC3M`"]
        pub struct OC3M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3M_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC3M_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs"]
            #[inline(always)]
            pub fn frozen(self) -> &'a mut W {
                self.variant(OC4M_A::FROZEN)
            }
            #[doc = "Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn active_on_match(self) -> &'a mut W {
                self.variant(OC4M_A::ACTIVEONMATCH)
            }
            #[doc = "Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register"]
            #[inline(always)]
            pub fn inactive_on_match(self) -> &'a mut W {
                self.variant(OC4M_A::INACTIVEONMATCH)
            }
            #[doc = "OCyREF toggles when TIMx_CNT=TIMx_CCRy"]
            #[inline(always)]
            pub fn toggle(self) -> &'a mut W {
                self.variant(OC4M_A::TOGGLE)
            }
            #[doc = "OCyREF is forced low"]
            #[inline(always)]
            pub fn force_inactive(self) -> &'a mut W {
                self.variant(OC4M_A::FORCEINACTIVE)
            }
            #[doc = "OCyREF is forced high"]
            #[inline(always)]
            pub fn force_active(self) -> &'a mut W {
                self.variant(OC4M_A::FORCEACTIVE)
            }
            #[doc = "In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active"]
            #[inline(always)]
            pub fn pwm_mode1(self) -> &'a mut W {
                self.variant(OC4M_A::PWMMODE1)
            }
            #[doc = "Inversely to PwmMode1"]
            #[inline(always)]
            pub fn pwm_mode2(self) -> &'a mut W {
                self.variant(OC4M_A::PWMMODE2)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Output compare 3 preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OC3PE_A {
            #[doc = "0: Preload register on CCR3 disabled. New values written to CCR3 are taken into account immediately"]
            DISABLED = 0,
            #[doc = "1: Preload register on CCR3 enabled. Preload value is loaded into active register on each update event"]
            ENABLED = 1,
        }
        impl From<OC3PE_A> for bool {
            #[inline(always)]
            fn from(variant: OC3PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OC3PE`"]
        pub type OC3PE_R = crate::R<bool, OC3PE_A>;
        impl OC3PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OC3PE_A {
                match self.bits {
                    false => OC3PE_A::DISABLED,
                    true => OC3PE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OC3PE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OC3PE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OC3PE`"]
        pub struct OC3PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OC3PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Preload register on CCR3 disabled. New values written to CCR3 are taken into account immediately"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OC3PE_A::DISABLED)
            }
            #[doc = "Preload register on CCR3 enabled. Preload value is loaded into active register on each update event"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OC3PE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC3FE`"]
        pub type OC3FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3FE`"]
        pub struct OC3FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC3S_A {
            #[doc = "0: CC3 channel is configured as output"]
            OUTPUT = 0,
        }
        impl From<CC3S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC3S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC3S`"]
        pub type CC3S_R = crate::R<u8, CC3S_A>;
        impl CC3S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC3S_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CC3S_A::OUTPUT),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == CC3S_A::OUTPUT
            }
        }
        #[doc = "Write proxy for field `CC3S`"]
        pub struct CC3S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC3 channel is configured as output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(CC3S_A::OUTPUT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&self) -> OC4CE_R {
                OC4CE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&self) -> OC4M_R {
                OC4M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&self) -> OC4PE_R {
                OC4PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&self) -> OC4FE_R {
                OC4FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&self) -> CC4S_R {
                CC4S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&self) -> OC3CE_R {
                OC3CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&self) -> OC3M_R {
                OC3M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&self) -> OC3PE_R {
                OC3PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&self) -> OC3FE_R {
                OC3FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&self) -> CC3S_R {
                CC3S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&mut self) -> OC4CE_W {
                OC4CE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&mut self) -> OC4M_W {
                OC4M_W { w: self }
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&mut self) -> OC4PE_W {
                OC4PE_W { w: self }
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&mut self) -> OC4FE_W {
                OC4FE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&mut self) -> CC4S_W {
                CC4S_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&mut self) -> OC3CE_W {
                OC3CE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&mut self) -> OC3M_W {
                OC3M_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&mut self) -> OC3PE_W {
                OC3PE_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&mut self) -> OC3FE_W {
                OC3FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&mut self) -> CC3S_W {
                CC3S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 2 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_input](ccmr2_input) module"]
    pub type CCMR2_INPUT = crate::Reg<u32, _CCMR2_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR2_INPUT;
    #[doc = "`read()` method returns [ccmr2_input::R](ccmr2_input::R) reader structure"]
    impl crate::Readable for CCMR2_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr2_input::W](ccmr2_input::W) writer structure"]
    impl crate::Writable for CCMR2_INPUT {}
    #[doc = "capture/compare mode register 2 (input mode)"]
    pub mod ccmr2_input {
        #[doc = "Reader of register CCMR2_Input"]
        pub type R = crate::R<u32, super::CCMR2_INPUT>;
        #[doc = "Writer for register CCMR2_Input"]
        pub type W = crate::W<u32, super::CCMR2_INPUT>;
        #[doc = "Register CCMR2_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR2_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC4F`"]
        pub type IC4F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC4F`"]
        pub struct IC4F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC4F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IC4PSC`"]
        pub type IC4PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC4PSC`"]
        pub struct IC4PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC4PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Capture/Compare 4 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC4S_A {
            #[doc = "1: CC4 channel is configured as input, IC4 is mapped on TI4"]
            TI4 = 1,
            #[doc = "2: CC4 channel is configured as input, IC4 is mapped on TI3"]
            TI3 = 2,
            #[doc = "3: CC4 channel is configured as input, IC4 is mapped on TRC"]
            TRC = 3,
        }
        impl From<CC4S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC4S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC4S`"]
        pub type CC4S_R = crate::R<u8, CC4S_A>;
        impl CC4S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC4S_A> {
                use crate::Variant::*;
                match self.bits {
                    1 => Val(CC4S_A::TI4),
                    2 => Val(CC4S_A::TI3),
                    3 => Val(CC4S_A::TRC),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TI4`"]
            #[inline(always)]
            pub fn is_ti4(&self) -> bool {
                *self == CC4S_A::TI4
            }
            #[doc = "Checks if the value of the field is `TI3`"]
            #[inline(always)]
            pub fn is_ti3(&self) -> bool {
                *self == CC4S_A::TI3
            }
            #[doc = "Checks if the value of the field is `TRC`"]
            #[inline(always)]
            pub fn is_trc(&self) -> bool {
                *self == CC4S_A::TRC
            }
        }
        #[doc = "Write proxy for field `CC4S`"]
        pub struct CC4S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC4S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC4 channel is configured as input, IC4 is mapped on TI4"]
            #[inline(always)]
            pub fn ti4(self) -> &'a mut W {
                self.variant(CC4S_A::TI4)
            }
            #[doc = "CC4 channel is configured as input, IC4 is mapped on TI3"]
            #[inline(always)]
            pub fn ti3(self) -> &'a mut W {
                self.variant(CC4S_A::TI3)
            }
            #[doc = "CC4 channel is configured as input, IC4 is mapped on TRC"]
            #[inline(always)]
            pub fn trc(self) -> &'a mut W {
                self.variant(CC4S_A::TRC)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `IC3F`"]
        pub type IC3F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC3F`"]
        pub struct IC3F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC3F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC3PSC`"]
        pub type IC3PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC3PSC`"]
        pub struct IC3PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC3PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Capture/Compare 3 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CC3S_A {
            #[doc = "1: CC3 channel is configured as input, IC3 is mapped on TI3"]
            TI3 = 1,
            #[doc = "2: CC3 channel is configured as input, IC3 is mapped on TI4"]
            TI4 = 2,
            #[doc = "3: CC3 channel is configured as input, IC3 is mapped on TRC"]
            TRC = 3,
        }
        impl From<CC3S_A> for u8 {
            #[inline(always)]
            fn from(variant: CC3S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CC3S`"]
        pub type CC3S_R = crate::R<u8, CC3S_A>;
        impl CC3S_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CC3S_A> {
                use crate::Variant::*;
                match self.bits {
                    1 => Val(CC3S_A::TI3),
                    2 => Val(CC3S_A::TI4),
                    3 => Val(CC3S_A::TRC),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TI3`"]
            #[inline(always)]
            pub fn is_ti3(&self) -> bool {
                *self == CC3S_A::TI3
            }
            #[doc = "Checks if the value of the field is `TI4`"]
            #[inline(always)]
            pub fn is_ti4(&self) -> bool {
                *self == CC3S_A::TI4
            }
            #[doc = "Checks if the value of the field is `TRC`"]
            #[inline(always)]
            pub fn is_trc(&self) -> bool {
                *self == CC3S_A::TRC
            }
        }
        #[doc = "Write proxy for field `CC3S`"]
        pub struct CC3S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC3S_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "CC3 channel is configured as input, IC3 is mapped on TI3"]
            #[inline(always)]
            pub fn ti3(self) -> &'a mut W {
                self.variant(CC3S_A::TI3)
            }
            #[doc = "CC3 channel is configured as input, IC3 is mapped on TI4"]
            #[inline(always)]
            pub fn ti4(self) -> &'a mut W {
                self.variant(CC3S_A::TI4)
            }
            #[doc = "CC3 channel is configured as input, IC3 is mapped on TRC"]
            #[inline(always)]
            pub fn trc(self) -> &'a mut W {
                self.variant(CC3S_A::TRC)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - Input capture 4 filter"]
            #[inline(always)]
            pub fn ic4f(&self) -> IC4F_R {
                IC4F_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 10:11 - Input capture 4 prescaler"]
            #[inline(always)]
            pub fn ic4psc(&self) -> IC4PSC_R {
                IC4PSC_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&self) -> CC4S_R {
                CC4S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 3 filter"]
            #[inline(always)]
            pub fn ic3f(&self) -> IC3F_R {
                IC3F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 3 prescaler"]
            #[inline(always)]
            pub fn ic3psc(&self) -> IC3PSC_R {
                IC3PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&self) -> CC3S_R {
                CC3S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - Input capture 4 filter"]
            #[inline(always)]
            pub fn ic4f(&mut self) -> IC4F_W {
                IC4F_W { w: self }
            }
            #[doc = "Bits 10:11 - Input capture 4 prescaler"]
            #[inline(always)]
            pub fn ic4psc(&mut self) -> IC4PSC_W {
                IC4PSC_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&mut self) -> CC4S_W {
                CC4S_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 3 filter"]
            #[inline(always)]
            pub fn ic3f(&mut self) -> IC3F_W {
                IC3F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 3 prescaler"]
            #[inline(always)]
            pub fn ic3psc(&mut self) -> IC3PSC_W {
                IC3PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&mut self) -> CC3S_W {
                CC3S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](ccer) module"]
    pub type CCER = crate::Reg<u32, _CCER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCER;
    #[doc = "`read()` method returns [ccer::R](ccer::R) reader structure"]
    impl crate::Readable for CCER {}
    #[doc = "`write(|w| ..)` method takes [ccer::W](ccer::W) writer structure"]
    impl crate::Writable for CCER {}
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Reader of register CCER"]
        pub type R = crate::R<u32, super::CCER>;
        #[doc = "Writer for register CCER"]
        pub type W = crate::W<u32, super::CCER>;
        #[doc = "Register CCER `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC4NP`"]
        pub type CC4NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4NP`"]
        pub struct CC4NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `CC4P`"]
        pub type CC4P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4P`"]
        pub struct CC4P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `CC4E`"]
        pub type CC4E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4E`"]
        pub struct CC4E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `CC3NP`"]
        pub type CC3NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3NP`"]
        pub struct CC3NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CC3P`"]
        pub type CC3P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3P`"]
        pub struct CC3P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `CC3E`"]
        pub type CC3E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3E`"]
        pub struct CC3E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CC2NP`"]
        pub type CC2NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2NP`"]
        pub struct CC2NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CC2P`"]
        pub type CC2P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2P`"]
        pub struct CC2P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `CC2E`"]
        pub type CC2E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2E`"]
        pub struct CC2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CC1NP`"]
        pub type CC1NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NP`"]
        pub struct CC1NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC1P`"]
        pub type CC1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1P`"]
        pub struct CC1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC1E`"]
        pub type CC1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1E`"]
        pub struct CC1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Capture/Compare 4 output Polarity"]
            #[inline(always)]
            pub fn cc4np(&self) -> CC4NP_R {
                CC4NP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc4p(&self) -> CC4P_R {
                CC4P_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 output enable"]
            #[inline(always)]
            pub fn cc4e(&self) -> CC4E_R {
                CC4E_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3np(&self) -> CC3NP_R {
                CC3NP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3p(&self) -> CC3P_R {
                CC3P_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Capture/Compare 3 output enable"]
            #[inline(always)]
            pub fn cc3e(&self) -> CC3E_R {
                CC3E_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2np(&self) -> CC2NP_R {
                CC2NP_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&self) -> CC2P_R {
                CC2P_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&self) -> CC2E_R {
                CC2E_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&self) -> CC1NP_R {
                CC1NP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&self) -> CC1P_R {
                CC1P_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&self) -> CC1E_R {
                CC1E_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Capture/Compare 4 output Polarity"]
            #[inline(always)]
            pub fn cc4np(&mut self) -> CC4NP_W {
                CC4NP_W { w: self }
            }
            #[doc = "Bit 13 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc4p(&mut self) -> CC4P_W {
                CC4P_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 output enable"]
            #[inline(always)]
            pub fn cc4e(&mut self) -> CC4E_W {
                CC4E_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3np(&mut self) -> CC3NP_W {
                CC3NP_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3p(&mut self) -> CC3P_W {
                CC3P_W { w: self }
            }
            #[doc = "Bit 8 - Capture/Compare 3 output enable"]
            #[inline(always)]
            pub fn cc3e(&mut self) -> CC3E_W {
                CC3E_W { w: self }
            }
            #[doc = "Bit 7 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2np(&mut self) -> CC2NP_W {
                CC2NP_W { w: self }
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&mut self) -> CC2P_W {
                CC2P_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&mut self) -> CC2E_W {
                CC2E_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&mut self) -> CC1NP_W {
                CC1NP_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&mut self) -> CC1P_W {
                CC1P_W { w: self }
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&mut self) -> CC1E_W {
                CC1E_W { w: self }
            }
        }
    }
    #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT_H`"]
        pub type CNT_H_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT_H`"]
        pub struct CNT_H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_H_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - High counter value (TIM2 only)"]
            #[inline(always)]
            pub fn cnt_h(&self) -> CNT_H_R {
                CNT_H_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - Counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - High counter value (TIM2 only)"]
            #[inline(always)]
            pub fn cnt_h(&mut self) -> CNT_H_W {
                CNT_H_W { w: self }
            }
            #[doc = "Bits 0:15 - Counter value"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR_H`"]
        pub type ARR_H_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR_H`"]
        pub struct ARR_H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_H_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - High Auto-reload value (TIM2 only)"]
            #[inline(always)]
            pub fn arr_h(&self) -> ARR_H_R {
                ARR_H_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - High Auto-reload value (TIM2 only)"]
            #[inline(always)]
            pub fn arr_h(&mut self) -> ARR_H_W {
                ARR_H_W { w: self }
            }
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr](ccr) module"]
    pub type CCR = crate::Reg<u32, _CCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR;
    #[doc = "`read()` method returns [ccr::R](ccr::R) reader structure"]
    impl crate::Readable for CCR {}
    #[doc = "`write(|w| ..)` method takes [ccr::W](ccr::W) writer structure"]
    impl crate::Writable for CCR {}
    #[doc = "capture/compare register 1"]
    pub mod ccr {
        #[doc = "Reader of register CCR%s"]
        pub type R = crate::R<u32, super::CCR>;
        #[doc = "Writer for register CCR%s"]
        pub type W = crate::W<u32, super::CCR>;
        #[doc = "Register CCR%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR1_H`"]
        pub type CCR1_H_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR1_H`"]
        pub struct CCR1_H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR1_H_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CCR`"]
        pub type CCR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR`"]
        pub struct CCR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - High Capture/Compare 1 value (TIM2 only)"]
            #[inline(always)]
            pub fn ccr1_h(&self) -> CCR1_H_R {
                CCR1_H_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr(&self) -> CCR_R {
                CCR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - High Capture/Compare 1 value (TIM2 only)"]
            #[inline(always)]
            pub fn ccr1_h(&mut self) -> CCR1_H_W {
                CCR1_H_W { w: self }
            }
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr(&mut self) -> CCR_W {
                CCR_W { w: self }
            }
        }
    }
    #[doc = "DMA control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcr](dcr) module"]
    pub type DCR = crate::Reg<u32, _DCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DCR;
    #[doc = "`read()` method returns [dcr::R](dcr::R) reader structure"]
    impl crate::Readable for DCR {}
    #[doc = "`write(|w| ..)` method takes [dcr::W](dcr::W) writer structure"]
    impl crate::Writable for DCR {}
    #[doc = "DMA control register"]
    pub mod dcr {
        #[doc = "Reader of register DCR"]
        pub type R = crate::R<u32, super::DCR>;
        #[doc = "Writer for register DCR"]
        pub type W = crate::W<u32, super::DCR>;
        #[doc = "Register DCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBL`"]
        pub type DBL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBL`"]
        pub struct DBL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DBA`"]
        pub type DBA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBA`"]
        pub struct DBA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&self) -> DBL_R {
                DBL_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&self) -> DBA_R {
                DBA_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&mut self) -> DBL_W {
                DBL_W { w: self }
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&mut self) -> DBA_W {
                DBA_W { w: self }
            }
        }
    }
    #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmar](dmar) module"]
    pub type DMAR = crate::Reg<u32, _DMAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAR;
    #[doc = "`read()` method returns [dmar::R](dmar::R) reader structure"]
    impl crate::Readable for DMAR {}
    #[doc = "`write(|w| ..)` method takes [dmar::W](dmar::W) writer structure"]
    impl crate::Writable for DMAR {}
    #[doc = "DMA address for full transfer"]
    pub mod dmar {
        #[doc = "Reader of register DMAR"]
        pub type R = crate::R<u32, super::DMAR>;
        #[doc = "Writer for register DMAR"]
        pub type W = crate::W<u32, super::DMAR>;
        #[doc = "Register DMAR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMAR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAR`"]
        pub type DMAR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DMAR`"]
        pub struct DMAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmar(&self) -> DMAR_R {
                DMAR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmar(&mut self) -> DMAR_W {
                DMAR_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose-timers"]
pub struct TIM14 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM14 {}
impl TIM14 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim14::RegisterBlock {
        0x4000_2000 as *const _
    }
}
impl Deref for TIM14 {
    type Target = tim14::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM14::ptr() }
    }
}
#[doc = "General-purpose-timers"]
pub mod tim14 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        _reserved1: [u8; 8usize],
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - status register"]
        pub sr: SR,
        #[doc = "0x14 - event generation register"]
        pub egr: EGR,
        _reserved_4_ccmr1: [u8; 4usize],
        _reserved5: [u8; 4usize],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: CCER,
        #[doc = "0x24 - counter"]
        pub cnt: CNT,
        #[doc = "0x28 - prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - auto-reload register"]
        pub arr: ARR,
        _reserved9: [u8; 4usize],
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: CCR,
        _reserved10: [u8; 24usize],
        #[doc = "0x50 - option register"]
        pub or: OR,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &CCMR1_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input_mut(&self) -> &mut CCMR1_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &CCMR1_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_OUTPUT) }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output_mut(&self) -> &mut CCMR1_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_OUTPUT) }
        }
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Clock division\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CKD_A {
            #[doc = "0: t_DTS = t_CK_INT"]
            DIV1 = 0,
            #[doc = "1: t_DTS = 2 × t_CK_INT"]
            DIV2 = 1,
            #[doc = "2: t_DTS = 4 × t_CK_INT"]
            DIV4 = 2,
        }
        impl From<CKD_A> for u8 {
            #[inline(always)]
            fn from(variant: CKD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CKD`"]
        pub type CKD_R = crate::R<u8, CKD_A>;
        impl CKD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CKD_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CKD_A::DIV1),
                    1 => Val(CKD_A::DIV2),
                    2 => Val(CKD_A::DIV4),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == CKD_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == CKD_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == CKD_A::DIV4
            }
        }
        #[doc = "Write proxy for field `CKD`"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CKD_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "t_DTS = t_CK_INT"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(CKD_A::DIV1)
            }
            #[doc = "t_DTS = 2 × t_CK_INT"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(CKD_A::DIV2)
            }
            #[doc = "t_DTS = 4 × t_CK_INT"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(CKD_A::DIV4)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Auto-reload preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARPE_A {
            #[doc = "0: TIMx_APRR register is not buffered"]
            DISABLED = 0,
            #[doc = "1: TIMx_APRR register is buffered"]
            ENABLED = 1,
        }
        impl From<ARPE_A> for bool {
            #[inline(always)]
            fn from(variant: ARPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, ARPE_A>;
        impl ARPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ARPE_A {
                match self.bits {
                    false => ARPE_A::DISABLED,
                    true => ARPE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ARPE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ARPE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ARPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIMx_APRR register is not buffered"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ARPE_A::DISABLED)
            }
            #[doc = "TIMx_APRR register is buffered"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ARPE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Update request source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum URS_A {
            #[doc = "0: Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            ANYEVENT = 0,
            #[doc = "1: Only counter overflow/underflow generates an update interrupt or DMA request"]
            COUNTERONLY = 1,
        }
        impl From<URS_A> for bool {
            #[inline(always)]
            fn from(variant: URS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, URS_A>;
        impl URS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> URS_A {
                match self.bits {
                    false => URS_A::ANYEVENT,
                    true => URS_A::COUNTERONLY,
                }
            }
            #[doc = "Checks if the value of the field is `ANYEVENT`"]
            #[inline(always)]
            pub fn is_any_event(&self) -> bool {
                *self == URS_A::ANYEVENT
            }
            #[doc = "Checks if the value of the field is `COUNTERONLY`"]
            #[inline(always)]
            pub fn is_counter_only(&self) -> bool {
                *self == URS_A::COUNTERONLY
            }
        }
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: URS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn any_event(self) -> &'a mut W {
                self.variant(URS_A::ANYEVENT)
            }
            #[doc = "Only counter overflow/underflow generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn counter_only(self) -> &'a mut W {
                self.variant(URS_A::COUNTERONLY)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Update disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDIS_A {
            #[doc = "0: Update event enabled"]
            ENABLED = 0,
            #[doc = "1: Update event disabled"]
            DISABLED = 1,
        }
        impl From<UDIS_A> for bool {
            #[inline(always)]
            fn from(variant: UDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, UDIS_A>;
        impl UDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDIS_A {
                match self.bits {
                    false => UDIS_A::ENABLED,
                    true => UDIS_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDIS_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDIS_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update event enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDIS_A::ENABLED)
            }
            #[doc = "Update event disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDIS_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Counter enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CEN_A {
            #[doc = "0: Counter disabled"]
            DISABLED = 0,
            #[doc = "1: Counter enabled"]
            ENABLED = 1,
        }
        impl From<CEN_A> for bool {
            #[inline(always)]
            fn from(variant: CEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, CEN_A>;
        impl CEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CEN_A {
                match self.bits {
                    false => CEN_A::DISABLED,
                    true => CEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CEN_A::DISABLED)
            }
            #[doc = "Counter enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
        }
    }
    #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1IE`"]
        pub type CC1IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IE`"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIE_A {
            #[doc = "0: Update interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Update interrupt enabled"]
            ENABLED = 1,
        }
        impl From<UIE_A> for bool {
            #[inline(always)]
            fn from(variant: UIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, UIE_A>;
        impl UIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIE_A {
                match self.bits {
                    false => UIE_A::DISABLED,
                    true => UIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UIE_A::DISABLED)
            }
            #[doc = "Update interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1OF`"]
        pub type CC1OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1OF`"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IF`"]
        pub type CC1IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IF`"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIF_A {
            #[doc = "0: No update occurred"]
            CLEAR = 0,
            #[doc = "1: Update interrupt pending."]
            UPDATEPENDING = 1,
        }
        impl From<UIF_A> for bool {
            #[inline(always)]
            fn from(variant: UIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, UIF_A>;
        impl UIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIF_A {
                match self.bits {
                    false => UIF_A::CLEAR,
                    true => UIF_A::UPDATEPENDING,
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == UIF_A::CLEAR
            }
            #[doc = "Checks if the value of the field is `UPDATEPENDING`"]
            #[inline(always)]
            pub fn is_update_pending(&self) -> bool {
                *self == UIF_A::UPDATEPENDING
            }
        }
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No update occurred"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(UIF_A::CLEAR)
            }
            #[doc = "Update interrupt pending."]
            #[inline(always)]
            pub fn update_pending(self) -> &'a mut W {
                self.variant(UIF_A::UPDATEPENDING)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
        }
    }
    #[doc = "event generation register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CC1G`"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UG_AW {
            #[doc = "1: Re-initializes the timer counter and generates an update of the registers."]
            UPDATE = 1,
        }
        impl From<UG_AW> for bool {
            #[inline(always)]
            fn from(variant: UG_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UG_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Re-initializes the timer counter and generates an update of the registers."]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(UG_AW::UPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 1 - Capture/compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](ccmr1_output) module"]
    pub type CCMR1_OUTPUT = crate::Reg<u32, _CCMR1_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_OUTPUT;
    #[doc = "`read()` method returns [ccmr1_output::R](ccmr1_output::R) reader structure"]
    impl crate::Readable for CCMR1_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](ccmr1_output::W) writer structure"]
    impl crate::Writable for CCMR1_OUTPUT {}
    #[doc = "capture/compare mode register (output mode)"]
    pub mod ccmr1_output {
        #[doc = "Reader of register CCMR1_Output"]
        pub type R = crate::R<u32, super::CCMR1_OUTPUT>;
        #[doc = "Writer for register CCMR1_Output"]
        pub type W = crate::W<u32, super::CCMR1_OUTPUT>;
        #[doc = "Register CCMR1_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Reader of field `OC1FE`"]
        pub type OC1FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1FE`"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OC1PE`"]
        pub type OC1PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1PE`"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC1M`"]
        pub type OC1M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC1M`"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](ccmr1_input) module"]
    pub type CCMR1_INPUT = crate::Reg<u32, _CCMR1_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_INPUT;
    #[doc = "`read()` method returns [ccmr1_input::R](ccmr1_input::R) reader structure"]
    impl crate::Readable for CCMR1_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](ccmr1_input::W) writer structure"]
    impl crate::Writable for CCMR1_INPUT {}
    #[doc = "capture/compare mode register (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Reader of register CCMR1_Input"]
        pub type R = crate::R<u32, super::CCMR1_INPUT>;
        #[doc = "Writer for register CCMR1_Input"]
        pub type W = crate::W<u32, super::CCMR1_INPUT>;
        #[doc = "Register CCMR1_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC1F`"]
        pub type IC1F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1F`"]
        pub struct IC1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC1PSC`"]
        pub type IC1PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1PSC`"]
        pub struct IC1PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&self) -> IC1F_R {
                IC1F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&self) -> IC1PSC_R {
                IC1PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&mut self) -> IC1F_W {
                IC1F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&mut self) -> IC1PSC_W {
                IC1PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](ccer) module"]
    pub type CCER = crate::Reg<u32, _CCER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCER;
    #[doc = "`read()` method returns [ccer::R](ccer::R) reader structure"]
    impl crate::Readable for CCER {}
    #[doc = "`write(|w| ..)` method takes [ccer::W](ccer::W) writer structure"]
    impl crate::Writable for CCER {}
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Reader of register CCER"]
        pub type R = crate::R<u32, super::CCER>;
        #[doc = "Writer for register CCER"]
        pub type W = crate::W<u32, super::CCER>;
        #[doc = "Register CCER `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1NP`"]
        pub type CC1NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NP`"]
        pub struct CC1NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC1P`"]
        pub type CC1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1P`"]
        pub struct CC1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC1E`"]
        pub type CC1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1E`"]
        pub struct CC1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&self) -> CC1NP_R {
                CC1NP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&self) -> CC1P_R {
                CC1P_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&self) -> CC1E_R {
                CC1E_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&mut self) -> CC1NP_W {
                CC1NP_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&mut self) -> CC1P_W {
                CC1P_W { w: self }
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&mut self) -> CC1E_W {
                CC1E_W { w: self }
            }
        }
    }
    #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr](ccr) module"]
    pub type CCR = crate::Reg<u32, _CCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR;
    #[doc = "`read()` method returns [ccr::R](ccr::R) reader structure"]
    impl crate::Readable for CCR {}
    #[doc = "`write(|w| ..)` method takes [ccr::W](ccr::W) writer structure"]
    impl crate::Writable for CCR {}
    #[doc = "capture/compare register 1"]
    pub mod ccr {
        #[doc = "Reader of register CCR%s"]
        pub type R = crate::R<u32, super::CCR>;
        #[doc = "Writer for register CCR%s"]
        pub type W = crate::W<u32, super::CCR>;
        #[doc = "Register CCR%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR`"]
        pub type CCR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR`"]
        pub struct CCR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr(&self) -> CCR_R {
                CCR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr(&mut self) -> CCR_W {
                CCR_W { w: self }
            }
        }
    }
    #[doc = "option register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [or](or) module"]
    pub type OR = crate::Reg<u32, _OR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OR;
    #[doc = "`read()` method returns [or::R](or::R) reader structure"]
    impl crate::Readable for OR {}
    #[doc = "`write(|w| ..)` method takes [or::W](or::W) writer structure"]
    impl crate::Writable for OR {}
    #[doc = "option register"]
    pub mod or {
        #[doc = "Reader of register OR"]
        pub type R = crate::R<u32, super::OR>;
        #[doc = "Writer for register OR"]
        pub type W = crate::W<u32, super::OR>;
        #[doc = "Register OR `reset()`'s with value 0"]
        impl crate::ResetValue for super::OR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RMP`"]
        pub type RMP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RMP`"]
        pub struct RMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RMP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Timer input 1 remap"]
            #[inline(always)]
            pub fn rmp(&self) -> RMP_R {
                RMP_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Timer input 1 remap"]
            #[inline(always)]
            pub fn rmp(&mut self) -> RMP_W {
                RMP_W { w: self }
            }
        }
    }
}
#[doc = "Basic-timers"]
pub struct TIM6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM6 {}
impl TIM6 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim6::RegisterBlock {
        0x4000_1000 as *const _
    }
}
impl Deref for TIM6 {
    type Target = tim6::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM6::ptr() }
    }
}
#[doc = "Basic-timers"]
pub mod tim6 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - control register 2"]
        pub cr2: CR2,
        _reserved2: [u8; 4usize],
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - status register"]
        pub sr: SR,
        #[doc = "0x14 - event generation register"]
        pub egr: EGR,
        _reserved5: [u8; 12usize],
        #[doc = "0x24 - counter"]
        pub cnt: CNT,
        #[doc = "0x28 - prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - auto-reload register"]
        pub arr: ARR,
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Auto-reload preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARPE_A {
            #[doc = "0: TIMx_APRR register is not buffered"]
            DISABLED = 0,
            #[doc = "1: TIMx_APRR register is buffered"]
            ENABLED = 1,
        }
        impl From<ARPE_A> for bool {
            #[inline(always)]
            fn from(variant: ARPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, ARPE_A>;
        impl ARPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ARPE_A {
                match self.bits {
                    false => ARPE_A::DISABLED,
                    true => ARPE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ARPE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ARPE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ARPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIMx_APRR register is not buffered"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ARPE_A::DISABLED)
            }
            #[doc = "TIMx_APRR register is buffered"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ARPE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "One-pulse mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OPM_A {
            #[doc = "0: Counter is not stopped at update event"]
            DISABLED = 0,
            #[doc = "1: Counter stops counting at the next update event (clearing the CEN bit)"]
            ENABLED = 1,
        }
        impl From<OPM_A> for bool {
            #[inline(always)]
            fn from(variant: OPM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OPM`"]
        pub type OPM_R = crate::R<bool, OPM_A>;
        impl OPM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OPM_A {
                match self.bits {
                    false => OPM_A::DISABLED,
                    true => OPM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OPM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OPM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OPM`"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OPM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter is not stopped at update event"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OPM_A::DISABLED)
            }
            #[doc = "Counter stops counting at the next update event (clearing the CEN bit)"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OPM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Update request source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum URS_A {
            #[doc = "0: Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            ANYEVENT = 0,
            #[doc = "1: Only counter overflow/underflow generates an update interrupt or DMA request"]
            COUNTERONLY = 1,
        }
        impl From<URS_A> for bool {
            #[inline(always)]
            fn from(variant: URS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, URS_A>;
        impl URS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> URS_A {
                match self.bits {
                    false => URS_A::ANYEVENT,
                    true => URS_A::COUNTERONLY,
                }
            }
            #[doc = "Checks if the value of the field is `ANYEVENT`"]
            #[inline(always)]
            pub fn is_any_event(&self) -> bool {
                *self == URS_A::ANYEVENT
            }
            #[doc = "Checks if the value of the field is `COUNTERONLY`"]
            #[inline(always)]
            pub fn is_counter_only(&self) -> bool {
                *self == URS_A::COUNTERONLY
            }
        }
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: URS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn any_event(self) -> &'a mut W {
                self.variant(URS_A::ANYEVENT)
            }
            #[doc = "Only counter overflow/underflow generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn counter_only(self) -> &'a mut W {
                self.variant(URS_A::COUNTERONLY)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Update disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDIS_A {
            #[doc = "0: Update event enabled"]
            ENABLED = 0,
            #[doc = "1: Update event disabled"]
            DISABLED = 1,
        }
        impl From<UDIS_A> for bool {
            #[inline(always)]
            fn from(variant: UDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, UDIS_A>;
        impl UDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDIS_A {
                match self.bits {
                    false => UDIS_A::ENABLED,
                    true => UDIS_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDIS_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDIS_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update event enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDIS_A::ENABLED)
            }
            #[doc = "Update event disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDIS_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Counter enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CEN_A {
            #[doc = "0: Counter disabled"]
            DISABLED = 0,
            #[doc = "1: Counter enabled"]
            ENABLED = 1,
        }
        impl From<CEN_A> for bool {
            #[inline(always)]
            fn from(variant: CEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, CEN_A>;
        impl CEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CEN_A {
                match self.bits {
                    false => CEN_A::DISABLED,
                    true => CEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CEN_A::DISABLED)
            }
            #[doc = "Counter enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Master mode selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MMS_A {
            #[doc = "0: Use UG bit from TIMx_EGR register"]
            RESET = 0,
            #[doc = "1: Use CNT bit from TIMx_CEN register"]
            ENABLE = 1,
            #[doc = "2: Use the update event"]
            UPDATE = 2,
        }
        impl From<MMS_A> for u8 {
            #[inline(always)]
            fn from(variant: MMS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MMS`"]
        pub type MMS_R = crate::R<u8, MMS_A>;
        impl MMS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, MMS_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(MMS_A::RESET),
                    1 => Val(MMS_A::ENABLE),
                    2 => Val(MMS_A::UPDATE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == MMS_A::RESET
            }
            #[doc = "Checks if the value of the field is `ENABLE`"]
            #[inline(always)]
            pub fn is_enable(&self) -> bool {
                *self == MMS_A::ENABLE
            }
            #[doc = "Checks if the value of the field is `UPDATE`"]
            #[inline(always)]
            pub fn is_update(&self) -> bool {
                *self == MMS_A::UPDATE
            }
        }
        #[doc = "Write proxy for field `MMS`"]
        pub struct MMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MMS_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Use UG bit from TIMx_EGR register"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(MMS_A::RESET)
            }
            #[doc = "Use CNT bit from TIMx_CEN register"]
            #[inline(always)]
            pub fn enable(self) -> &'a mut W {
                self.variant(MMS_A::ENABLE)
            }
            #[doc = "Use the update event"]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(MMS_A::UPDATE)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&self) -> MMS_R {
                MMS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&mut self) -> MMS_W {
                MMS_W { w: self }
            }
        }
    }
    #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Update DMA request enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDE_A {
            #[doc = "0: Update DMA request disabled"]
            DISABLED = 0,
            #[doc = "1: Update DMA request enabled"]
            ENABLED = 1,
        }
        impl From<UDE_A> for bool {
            #[inline(always)]
            fn from(variant: UDE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDE`"]
        pub type UDE_R = crate::R<bool, UDE_A>;
        impl UDE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDE_A {
                match self.bits {
                    false => UDE_A::DISABLED,
                    true => UDE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UDE`"]
        pub struct UDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDE_A::DISABLED)
            }
            #[doc = "Update DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Update interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIE_A {
            #[doc = "0: Update interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Update interrupt enabled"]
            ENABLED = 1,
        }
        impl From<UIE_A> for bool {
            #[inline(always)]
            fn from(variant: UIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, UIE_A>;
        impl UIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIE_A {
                match self.bits {
                    false => UIE_A::DISABLED,
                    true => UIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UIE_A::DISABLED)
            }
            #[doc = "Update interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&self) -> UDE_R {
                UDE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&mut self) -> UDE_W {
                UDE_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Update interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIF_A {
            #[doc = "0: No update occurred"]
            CLEAR = 0,
            #[doc = "1: Update interrupt pending."]
            UPDATEPENDING = 1,
        }
        impl From<UIF_A> for bool {
            #[inline(always)]
            fn from(variant: UIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, UIF_A>;
        impl UIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIF_A {
                match self.bits {
                    false => UIF_A::CLEAR,
                    true => UIF_A::UPDATEPENDING,
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == UIF_A::CLEAR
            }
            #[doc = "Checks if the value of the field is `UPDATEPENDING`"]
            #[inline(always)]
            pub fn is_update_pending(&self) -> bool {
                *self == UIF_A::UPDATEPENDING
            }
        }
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No update occurred"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(UIF_A::CLEAR)
            }
            #[doc = "Update interrupt pending."]
            #[inline(always)]
            pub fn update_pending(self) -> &'a mut W {
                self.variant(UIF_A::UPDATEPENDING)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
        }
    }
    #[doc = "event generation register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Update generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UG_AW {
            #[doc = "1: Re-initializes the timer counter and generates an update of the registers."]
            UPDATE = 1,
        }
        impl From<UG_AW> for bool {
            #[inline(always)]
            fn from(variant: UG_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UG_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Re-initializes the timer counter and generates an update of the registers."]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(UG_AW::UPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
        }
    }
    #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Low counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Low counter value"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Low Auto-reload value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Low Auto-reload value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
}
#[doc = "Basic-timers"]
pub struct TIM7 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM7 {}
impl TIM7 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim6::RegisterBlock {
        0x4000_1400 as *const _
    }
}
impl Deref for TIM7 {
    type Target = tim6::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM7::ptr() }
    }
}
#[doc = "External interrupt/event controller"]
pub struct EXTI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EXTI {}
impl EXTI {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const exti::RegisterBlock {
        0x4001_0400 as *const _
    }
}
impl Deref for EXTI {
    type Target = exti::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*EXTI::ptr() }
    }
}
#[doc = "External interrupt/event controller"]
pub mod exti {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Interrupt mask register (EXTI_IMR)"]
        pub imr: IMR,
        #[doc = "0x04 - Event mask register (EXTI_EMR)"]
        pub emr: EMR,
        #[doc = "0x08 - Rising Trigger selection register (EXTI_RTSR)"]
        pub rtsr: RTSR,
        #[doc = "0x0c - Falling Trigger selection register (EXTI_FTSR)"]
        pub ftsr: FTSR,
        #[doc = "0x10 - Software interrupt event register (EXTI_SWIER)"]
        pub swier: SWIER,
        #[doc = "0x14 - Pending register (EXTI_PR)"]
        pub pr: PR,
    }
    #[doc = "Interrupt mask register (EXTI_IMR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [imr](imr) module"]
    pub type IMR = crate::Reg<u32, _IMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IMR;
    #[doc = "`read()` method returns [imr::R](imr::R) reader structure"]
    impl crate::Readable for IMR {}
    #[doc = "`write(|w| ..)` method takes [imr::W](imr::W) writer structure"]
    impl crate::Writable for IMR {}
    #[doc = "Interrupt mask register (EXTI_IMR)"]
    pub mod imr {
        #[doc = "Reader of register IMR"]
        pub type R = crate::R<u32, super::IMR>;
        #[doc = "Writer for register IMR"]
        pub type W = crate::W<u32, super::IMR>;
        #[doc = "Register IMR `reset()`'s with value 0x0f94_0000"]
        impl crate::ResetValue for super::IMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0f94_0000
            }
        }
        #[doc = "Interrupt Mask on line 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MR0_A {
            #[doc = "0: Interrupt request line is masked"]
            MASKED = 0,
            #[doc = "1: Interrupt request line is unmasked"]
            UNMASKED = 1,
        }
        impl From<MR0_A> for bool {
            #[inline(always)]
            fn from(variant: MR0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MR0`"]
        pub type MR0_R = crate::R<bool, MR0_A>;
        impl MR0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MR0_A {
                match self.bits {
                    false => MR0_A::MASKED,
                    true => MR0_A::UNMASKED,
                }
            }
            #[doc = "Checks if the value of the field is `MASKED`"]
            #[inline(always)]
            pub fn is_masked(&self) -> bool {
                *self == MR0_A::MASKED
            }
            #[doc = "Checks if the value of the field is `UNMASKED`"]
            #[inline(always)]
            pub fn is_unmasked(&self) -> bool {
                *self == MR0_A::UNMASKED
            }
        }
        #[doc = "Write proxy for field `MR0`"]
        pub struct MR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 1"]
        pub type MR1_A = MR0_A;
        #[doc = "Reader of field `MR1`"]
        pub type MR1_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR1`"]
        pub struct MR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 2"]
        pub type MR2_A = MR0_A;
        #[doc = "Reader of field `MR2`"]
        pub type MR2_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR2`"]
        pub struct MR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 3"]
        pub type MR3_A = MR0_A;
        #[doc = "Reader of field `MR3`"]
        pub type MR3_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR3`"]
        pub struct MR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 4"]
        pub type MR4_A = MR0_A;
        #[doc = "Reader of field `MR4`"]
        pub type MR4_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR4`"]
        pub struct MR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 5"]
        pub type MR5_A = MR0_A;
        #[doc = "Reader of field `MR5`"]
        pub type MR5_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR5`"]
        pub struct MR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 6"]
        pub type MR6_A = MR0_A;
        #[doc = "Reader of field `MR6`"]
        pub type MR6_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR6`"]
        pub struct MR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 7"]
        pub type MR7_A = MR0_A;
        #[doc = "Reader of field `MR7`"]
        pub type MR7_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR7`"]
        pub struct MR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 8"]
        pub type MR8_A = MR0_A;
        #[doc = "Reader of field `MR8`"]
        pub type MR8_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR8`"]
        pub struct MR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 9"]
        pub type MR9_A = MR0_A;
        #[doc = "Reader of field `MR9`"]
        pub type MR9_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR9`"]
        pub struct MR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 10"]
        pub type MR10_A = MR0_A;
        #[doc = "Reader of field `MR10`"]
        pub type MR10_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR10`"]
        pub struct MR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 11"]
        pub type MR11_A = MR0_A;
        #[doc = "Reader of field `MR11`"]
        pub type MR11_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR11`"]
        pub struct MR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 12"]
        pub type MR12_A = MR0_A;
        #[doc = "Reader of field `MR12`"]
        pub type MR12_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR12`"]
        pub struct MR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 13"]
        pub type MR13_A = MR0_A;
        #[doc = "Reader of field `MR13`"]
        pub type MR13_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR13`"]
        pub struct MR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 14"]
        pub type MR14_A = MR0_A;
        #[doc = "Reader of field `MR14`"]
        pub type MR14_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR14`"]
        pub struct MR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 15"]
        pub type MR15_A = MR0_A;
        #[doc = "Reader of field `MR15`"]
        pub type MR15_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR15`"]
        pub struct MR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 16"]
        pub type MR16_A = MR0_A;
        #[doc = "Reader of field `MR16`"]
        pub type MR16_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR16`"]
        pub struct MR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 17"]
        pub type MR17_A = MR0_A;
        #[doc = "Reader of field `MR17`"]
        pub type MR17_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR17`"]
        pub struct MR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR17_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 18"]
        pub type MR18_A = MR0_A;
        #[doc = "Reader of field `MR18`"]
        pub type MR18_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR18`"]
        pub struct MR18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR18_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 19"]
        pub type MR19_A = MR0_A;
        #[doc = "Reader of field `MR19`"]
        pub type MR19_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR19`"]
        pub struct MR19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 20"]
        pub type MR20_A = MR0_A;
        #[doc = "Reader of field `MR20`"]
        pub type MR20_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR20`"]
        pub struct MR20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR20_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 21"]
        pub type MR21_A = MR0_A;
        #[doc = "Reader of field `MR21`"]
        pub type MR21_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR21`"]
        pub struct MR21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR21_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 22"]
        pub type MR22_A = MR0_A;
        #[doc = "Reader of field `MR22`"]
        pub type MR22_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR22`"]
        pub struct MR22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR22_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 23"]
        pub type MR23_A = MR0_A;
        #[doc = "Reader of field `MR23`"]
        pub type MR23_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR23`"]
        pub struct MR23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR23_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 24"]
        pub type MR24_A = MR0_A;
        #[doc = "Reader of field `MR24`"]
        pub type MR24_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR24`"]
        pub struct MR24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR24_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR24_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 25"]
        pub type MR25_A = MR0_A;
        #[doc = "Reader of field `MR25`"]
        pub type MR25_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR25`"]
        pub struct MR25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR25_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR25_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 26"]
        pub type MR26_A = MR0_A;
        #[doc = "Reader of field `MR26`"]
        pub type MR26_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR26`"]
        pub struct MR26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR26_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR26_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Interrupt Mask on line 27"]
        pub type MR27_A = MR0_A;
        #[doc = "Reader of field `MR27`"]
        pub type MR27_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR27`"]
        pub struct MR27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR27_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR27_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Interrupt Mask on line 0"]
            #[inline(always)]
            pub fn mr0(&self) -> MR0_R {
                MR0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Interrupt Mask on line 1"]
            #[inline(always)]
            pub fn mr1(&self) -> MR1_R {
                MR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Interrupt Mask on line 2"]
            #[inline(always)]
            pub fn mr2(&self) -> MR2_R {
                MR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Interrupt Mask on line 3"]
            #[inline(always)]
            pub fn mr3(&self) -> MR3_R {
                MR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Interrupt Mask on line 4"]
            #[inline(always)]
            pub fn mr4(&self) -> MR4_R {
                MR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Interrupt Mask on line 5"]
            #[inline(always)]
            pub fn mr5(&self) -> MR5_R {
                MR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Interrupt Mask on line 6"]
            #[inline(always)]
            pub fn mr6(&self) -> MR6_R {
                MR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Interrupt Mask on line 7"]
            #[inline(always)]
            pub fn mr7(&self) -> MR7_R {
                MR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Interrupt Mask on line 8"]
            #[inline(always)]
            pub fn mr8(&self) -> MR8_R {
                MR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Interrupt Mask on line 9"]
            #[inline(always)]
            pub fn mr9(&self) -> MR9_R {
                MR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Interrupt Mask on line 10"]
            #[inline(always)]
            pub fn mr10(&self) -> MR10_R {
                MR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Interrupt Mask on line 11"]
            #[inline(always)]
            pub fn mr11(&self) -> MR11_R {
                MR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Interrupt Mask on line 12"]
            #[inline(always)]
            pub fn mr12(&self) -> MR12_R {
                MR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Interrupt Mask on line 13"]
            #[inline(always)]
            pub fn mr13(&self) -> MR13_R {
                MR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Interrupt Mask on line 14"]
            #[inline(always)]
            pub fn mr14(&self) -> MR14_R {
                MR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Interrupt Mask on line 15"]
            #[inline(always)]
            pub fn mr15(&self) -> MR15_R {
                MR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Interrupt Mask on line 16"]
            #[inline(always)]
            pub fn mr16(&self) -> MR16_R {
                MR16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Interrupt Mask on line 17"]
            #[inline(always)]
            pub fn mr17(&self) -> MR17_R {
                MR17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Interrupt Mask on line 18"]
            #[inline(always)]
            pub fn mr18(&self) -> MR18_R {
                MR18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Interrupt Mask on line 19"]
            #[inline(always)]
            pub fn mr19(&self) -> MR19_R {
                MR19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Interrupt Mask on line 20"]
            #[inline(always)]
            pub fn mr20(&self) -> MR20_R {
                MR20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Interrupt Mask on line 21"]
            #[inline(always)]
            pub fn mr21(&self) -> MR21_R {
                MR21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Interrupt Mask on line 22"]
            #[inline(always)]
            pub fn mr22(&self) -> MR22_R {
                MR22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Interrupt Mask on line 23"]
            #[inline(always)]
            pub fn mr23(&self) -> MR23_R {
                MR23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Interrupt Mask on line 24"]
            #[inline(always)]
            pub fn mr24(&self) -> MR24_R {
                MR24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Interrupt Mask on line 25"]
            #[inline(always)]
            pub fn mr25(&self) -> MR25_R {
                MR25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Interrupt Mask on line 26"]
            #[inline(always)]
            pub fn mr26(&self) -> MR26_R {
                MR26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Interrupt Mask on line 27"]
            #[inline(always)]
            pub fn mr27(&self) -> MR27_R {
                MR27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Interrupt Mask on line 0"]
            #[inline(always)]
            pub fn mr0(&mut self) -> MR0_W {
                MR0_W { w: self }
            }
            #[doc = "Bit 1 - Interrupt Mask on line 1"]
            #[inline(always)]
            pub fn mr1(&mut self) -> MR1_W {
                MR1_W { w: self }
            }
            #[doc = "Bit 2 - Interrupt Mask on line 2"]
            #[inline(always)]
            pub fn mr2(&mut self) -> MR2_W {
                MR2_W { w: self }
            }
            #[doc = "Bit 3 - Interrupt Mask on line 3"]
            #[inline(always)]
            pub fn mr3(&mut self) -> MR3_W {
                MR3_W { w: self }
            }
            #[doc = "Bit 4 - Interrupt Mask on line 4"]
            #[inline(always)]
            pub fn mr4(&mut self) -> MR4_W {
                MR4_W { w: self }
            }
            #[doc = "Bit 5 - Interrupt Mask on line 5"]
            #[inline(always)]
            pub fn mr5(&mut self) -> MR5_W {
                MR5_W { w: self }
            }
            #[doc = "Bit 6 - Interrupt Mask on line 6"]
            #[inline(always)]
            pub fn mr6(&mut self) -> MR6_W {
                MR6_W { w: self }
            }
            #[doc = "Bit 7 - Interrupt Mask on line 7"]
            #[inline(always)]
            pub fn mr7(&mut self) -> MR7_W {
                MR7_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt Mask on line 8"]
            #[inline(always)]
            pub fn mr8(&mut self) -> MR8_W {
                MR8_W { w: self }
            }
            #[doc = "Bit 9 - Interrupt Mask on line 9"]
            #[inline(always)]
            pub fn mr9(&mut self) -> MR9_W {
                MR9_W { w: self }
            }
            #[doc = "Bit 10 - Interrupt Mask on line 10"]
            #[inline(always)]
            pub fn mr10(&mut self) -> MR10_W {
                MR10_W { w: self }
            }
            #[doc = "Bit 11 - Interrupt Mask on line 11"]
            #[inline(always)]
            pub fn mr11(&mut self) -> MR11_W {
                MR11_W { w: self }
            }
            #[doc = "Bit 12 - Interrupt Mask on line 12"]
            #[inline(always)]
            pub fn mr12(&mut self) -> MR12_W {
                MR12_W { w: self }
            }
            #[doc = "Bit 13 - Interrupt Mask on line 13"]
            #[inline(always)]
            pub fn mr13(&mut self) -> MR13_W {
                MR13_W { w: self }
            }
            #[doc = "Bit 14 - Interrupt Mask on line 14"]
            #[inline(always)]
            pub fn mr14(&mut self) -> MR14_W {
                MR14_W { w: self }
            }
            #[doc = "Bit 15 - Interrupt Mask on line 15"]
            #[inline(always)]
            pub fn mr15(&mut self) -> MR15_W {
                MR15_W { w: self }
            }
            #[doc = "Bit 16 - Interrupt Mask on line 16"]
            #[inline(always)]
            pub fn mr16(&mut self) -> MR16_W {
                MR16_W { w: self }
            }
            #[doc = "Bit 17 - Interrupt Mask on line 17"]
            #[inline(always)]
            pub fn mr17(&mut self) -> MR17_W {
                MR17_W { w: self }
            }
            #[doc = "Bit 18 - Interrupt Mask on line 18"]
            #[inline(always)]
            pub fn mr18(&mut self) -> MR18_W {
                MR18_W { w: self }
            }
            #[doc = "Bit 19 - Interrupt Mask on line 19"]
            #[inline(always)]
            pub fn mr19(&mut self) -> MR19_W {
                MR19_W { w: self }
            }
            #[doc = "Bit 20 - Interrupt Mask on line 20"]
            #[inline(always)]
            pub fn mr20(&mut self) -> MR20_W {
                MR20_W { w: self }
            }
            #[doc = "Bit 21 - Interrupt Mask on line 21"]
            #[inline(always)]
            pub fn mr21(&mut self) -> MR21_W {
                MR21_W { w: self }
            }
            #[doc = "Bit 22 - Interrupt Mask on line 22"]
            #[inline(always)]
            pub fn mr22(&mut self) -> MR22_W {
                MR22_W { w: self }
            }
            #[doc = "Bit 23 - Interrupt Mask on line 23"]
            #[inline(always)]
            pub fn mr23(&mut self) -> MR23_W {
                MR23_W { w: self }
            }
            #[doc = "Bit 24 - Interrupt Mask on line 24"]
            #[inline(always)]
            pub fn mr24(&mut self) -> MR24_W {
                MR24_W { w: self }
            }
            #[doc = "Bit 25 - Interrupt Mask on line 25"]
            #[inline(always)]
            pub fn mr25(&mut self) -> MR25_W {
                MR25_W { w: self }
            }
            #[doc = "Bit 26 - Interrupt Mask on line 26"]
            #[inline(always)]
            pub fn mr26(&mut self) -> MR26_W {
                MR26_W { w: self }
            }
            #[doc = "Bit 27 - Interrupt Mask on line 27"]
            #[inline(always)]
            pub fn mr27(&mut self) -> MR27_W {
                MR27_W { w: self }
            }
        }
    }
    #[doc = "Event mask register (EXTI_EMR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [emr](emr) module"]
    pub type EMR = crate::Reg<u32, _EMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EMR;
    #[doc = "`read()` method returns [emr::R](emr::R) reader structure"]
    impl crate::Readable for EMR {}
    #[doc = "`write(|w| ..)` method takes [emr::W](emr::W) writer structure"]
    impl crate::Writable for EMR {}
    #[doc = "Event mask register (EXTI_EMR)"]
    pub mod emr {
        #[doc = "Reader of register EMR"]
        pub type R = crate::R<u32, super::EMR>;
        #[doc = "Writer for register EMR"]
        pub type W = crate::W<u32, super::EMR>;
        #[doc = "Register EMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Event Mask on line 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MR0_A {
            #[doc = "0: Interrupt request line is masked"]
            MASKED = 0,
            #[doc = "1: Interrupt request line is unmasked"]
            UNMASKED = 1,
        }
        impl From<MR0_A> for bool {
            #[inline(always)]
            fn from(variant: MR0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MR0`"]
        pub type MR0_R = crate::R<bool, MR0_A>;
        impl MR0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MR0_A {
                match self.bits {
                    false => MR0_A::MASKED,
                    true => MR0_A::UNMASKED,
                }
            }
            #[doc = "Checks if the value of the field is `MASKED`"]
            #[inline(always)]
            pub fn is_masked(&self) -> bool {
                *self == MR0_A::MASKED
            }
            #[doc = "Checks if the value of the field is `UNMASKED`"]
            #[inline(always)]
            pub fn is_unmasked(&self) -> bool {
                *self == MR0_A::UNMASKED
            }
        }
        #[doc = "Write proxy for field `MR0`"]
        pub struct MR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Event Mask on line 1"]
        pub type MR1_A = MR0_A;
        #[doc = "Reader of field `MR1`"]
        pub type MR1_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR1`"]
        pub struct MR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Event Mask on line 2"]
        pub type MR2_A = MR0_A;
        #[doc = "Reader of field `MR2`"]
        pub type MR2_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR2`"]
        pub struct MR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Event Mask on line 3"]
        pub type MR3_A = MR0_A;
        #[doc = "Reader of field `MR3`"]
        pub type MR3_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR3`"]
        pub struct MR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Event Mask on line 4"]
        pub type MR4_A = MR0_A;
        #[doc = "Reader of field `MR4`"]
        pub type MR4_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR4`"]
        pub struct MR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Event Mask on line 5"]
        pub type MR5_A = MR0_A;
        #[doc = "Reader of field `MR5`"]
        pub type MR5_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR5`"]
        pub struct MR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Event Mask on line 6"]
        pub type MR6_A = MR0_A;
        #[doc = "Reader of field `MR6`"]
        pub type MR6_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR6`"]
        pub struct MR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Event Mask on line 7"]
        pub type MR7_A = MR0_A;
        #[doc = "Reader of field `MR7`"]
        pub type MR7_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR7`"]
        pub struct MR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Event Mask on line 8"]
        pub type MR8_A = MR0_A;
        #[doc = "Reader of field `MR8`"]
        pub type MR8_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR8`"]
        pub struct MR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Event Mask on line 9"]
        pub type MR9_A = MR0_A;
        #[doc = "Reader of field `MR9`"]
        pub type MR9_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR9`"]
        pub struct MR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Event Mask on line 10"]
        pub type MR10_A = MR0_A;
        #[doc = "Reader of field `MR10`"]
        pub type MR10_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR10`"]
        pub struct MR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Event Mask on line 11"]
        pub type MR11_A = MR0_A;
        #[doc = "Reader of field `MR11`"]
        pub type MR11_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR11`"]
        pub struct MR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Event Mask on line 12"]
        pub type MR12_A = MR0_A;
        #[doc = "Reader of field `MR12`"]
        pub type MR12_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR12`"]
        pub struct MR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Event Mask on line 13"]
        pub type MR13_A = MR0_A;
        #[doc = "Reader of field `MR13`"]
        pub type MR13_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR13`"]
        pub struct MR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Event Mask on line 14"]
        pub type MR14_A = MR0_A;
        #[doc = "Reader of field `MR14`"]
        pub type MR14_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR14`"]
        pub struct MR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Event Mask on line 15"]
        pub type MR15_A = MR0_A;
        #[doc = "Reader of field `MR15`"]
        pub type MR15_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR15`"]
        pub struct MR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Event Mask on line 16"]
        pub type MR16_A = MR0_A;
        #[doc = "Reader of field `MR16`"]
        pub type MR16_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR16`"]
        pub struct MR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Event Mask on line 17"]
        pub type MR17_A = MR0_A;
        #[doc = "Reader of field `MR17`"]
        pub type MR17_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR17`"]
        pub struct MR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR17_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Event Mask on line 18"]
        pub type MR18_A = MR0_A;
        #[doc = "Reader of field `MR18`"]
        pub type MR18_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR18`"]
        pub struct MR18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR18_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Event Mask on line 19"]
        pub type MR19_A = MR0_A;
        #[doc = "Reader of field `MR19`"]
        pub type MR19_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR19`"]
        pub struct MR19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Event Mask on line 20"]
        pub type MR20_A = MR0_A;
        #[doc = "Reader of field `MR20`"]
        pub type MR20_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR20`"]
        pub struct MR20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR20_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Event Mask on line 21"]
        pub type MR21_A = MR0_A;
        #[doc = "Reader of field `MR21`"]
        pub type MR21_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR21`"]
        pub struct MR21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR21_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Event Mask on line 22"]
        pub type MR22_A = MR0_A;
        #[doc = "Reader of field `MR22`"]
        pub type MR22_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR22`"]
        pub struct MR22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR22_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Event Mask on line 23"]
        pub type MR23_A = MR0_A;
        #[doc = "Reader of field `MR23`"]
        pub type MR23_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR23`"]
        pub struct MR23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR23_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Event Mask on line 24"]
        pub type MR24_A = MR0_A;
        #[doc = "Reader of field `MR24`"]
        pub type MR24_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR24`"]
        pub struct MR24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR24_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR24_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Event Mask on line 25"]
        pub type MR25_A = MR0_A;
        #[doc = "Reader of field `MR25`"]
        pub type MR25_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR25`"]
        pub struct MR25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR25_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR25_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Event Mask on line 26"]
        pub type MR26_A = MR0_A;
        #[doc = "Reader of field `MR26`"]
        pub type MR26_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR26`"]
        pub struct MR26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR26_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR26_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Event Mask on line 27"]
        pub type MR27_A = MR0_A;
        #[doc = "Reader of field `MR27`"]
        pub type MR27_R = crate::R<bool, MR0_A>;
        #[doc = "Write proxy for field `MR27`"]
        pub struct MR27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MR27_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MR27_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(MR0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(MR0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Event Mask on line 0"]
            #[inline(always)]
            pub fn mr0(&self) -> MR0_R {
                MR0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Event Mask on line 1"]
            #[inline(always)]
            pub fn mr1(&self) -> MR1_R {
                MR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Event Mask on line 2"]
            #[inline(always)]
            pub fn mr2(&self) -> MR2_R {
                MR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Event Mask on line 3"]
            #[inline(always)]
            pub fn mr3(&self) -> MR3_R {
                MR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Event Mask on line 4"]
            #[inline(always)]
            pub fn mr4(&self) -> MR4_R {
                MR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Event Mask on line 5"]
            #[inline(always)]
            pub fn mr5(&self) -> MR5_R {
                MR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Event Mask on line 6"]
            #[inline(always)]
            pub fn mr6(&self) -> MR6_R {
                MR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Event Mask on line 7"]
            #[inline(always)]
            pub fn mr7(&self) -> MR7_R {
                MR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Event Mask on line 8"]
            #[inline(always)]
            pub fn mr8(&self) -> MR8_R {
                MR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Event Mask on line 9"]
            #[inline(always)]
            pub fn mr9(&self) -> MR9_R {
                MR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Event Mask on line 10"]
            #[inline(always)]
            pub fn mr10(&self) -> MR10_R {
                MR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Event Mask on line 11"]
            #[inline(always)]
            pub fn mr11(&self) -> MR11_R {
                MR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Event Mask on line 12"]
            #[inline(always)]
            pub fn mr12(&self) -> MR12_R {
                MR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Event Mask on line 13"]
            #[inline(always)]
            pub fn mr13(&self) -> MR13_R {
                MR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Event Mask on line 14"]
            #[inline(always)]
            pub fn mr14(&self) -> MR14_R {
                MR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Event Mask on line 15"]
            #[inline(always)]
            pub fn mr15(&self) -> MR15_R {
                MR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Event Mask on line 16"]
            #[inline(always)]
            pub fn mr16(&self) -> MR16_R {
                MR16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Event Mask on line 17"]
            #[inline(always)]
            pub fn mr17(&self) -> MR17_R {
                MR17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Event Mask on line 18"]
            #[inline(always)]
            pub fn mr18(&self) -> MR18_R {
                MR18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Event Mask on line 19"]
            #[inline(always)]
            pub fn mr19(&self) -> MR19_R {
                MR19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Event Mask on line 20"]
            #[inline(always)]
            pub fn mr20(&self) -> MR20_R {
                MR20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Event Mask on line 21"]
            #[inline(always)]
            pub fn mr21(&self) -> MR21_R {
                MR21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Event Mask on line 22"]
            #[inline(always)]
            pub fn mr22(&self) -> MR22_R {
                MR22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Event Mask on line 23"]
            #[inline(always)]
            pub fn mr23(&self) -> MR23_R {
                MR23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Event Mask on line 24"]
            #[inline(always)]
            pub fn mr24(&self) -> MR24_R {
                MR24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Event Mask on line 25"]
            #[inline(always)]
            pub fn mr25(&self) -> MR25_R {
                MR25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Event Mask on line 26"]
            #[inline(always)]
            pub fn mr26(&self) -> MR26_R {
                MR26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Event Mask on line 27"]
            #[inline(always)]
            pub fn mr27(&self) -> MR27_R {
                MR27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Event Mask on line 0"]
            #[inline(always)]
            pub fn mr0(&mut self) -> MR0_W {
                MR0_W { w: self }
            }
            #[doc = "Bit 1 - Event Mask on line 1"]
            #[inline(always)]
            pub fn mr1(&mut self) -> MR1_W {
                MR1_W { w: self }
            }
            #[doc = "Bit 2 - Event Mask on line 2"]
            #[inline(always)]
            pub fn mr2(&mut self) -> MR2_W {
                MR2_W { w: self }
            }
            #[doc = "Bit 3 - Event Mask on line 3"]
            #[inline(always)]
            pub fn mr3(&mut self) -> MR3_W {
                MR3_W { w: self }
            }
            #[doc = "Bit 4 - Event Mask on line 4"]
            #[inline(always)]
            pub fn mr4(&mut self) -> MR4_W {
                MR4_W { w: self }
            }
            #[doc = "Bit 5 - Event Mask on line 5"]
            #[inline(always)]
            pub fn mr5(&mut self) -> MR5_W {
                MR5_W { w: self }
            }
            #[doc = "Bit 6 - Event Mask on line 6"]
            #[inline(always)]
            pub fn mr6(&mut self) -> MR6_W {
                MR6_W { w: self }
            }
            #[doc = "Bit 7 - Event Mask on line 7"]
            #[inline(always)]
            pub fn mr7(&mut self) -> MR7_W {
                MR7_W { w: self }
            }
            #[doc = "Bit 8 - Event Mask on line 8"]
            #[inline(always)]
            pub fn mr8(&mut self) -> MR8_W {
                MR8_W { w: self }
            }
            #[doc = "Bit 9 - Event Mask on line 9"]
            #[inline(always)]
            pub fn mr9(&mut self) -> MR9_W {
                MR9_W { w: self }
            }
            #[doc = "Bit 10 - Event Mask on line 10"]
            #[inline(always)]
            pub fn mr10(&mut self) -> MR10_W {
                MR10_W { w: self }
            }
            #[doc = "Bit 11 - Event Mask on line 11"]
            #[inline(always)]
            pub fn mr11(&mut self) -> MR11_W {
                MR11_W { w: self }
            }
            #[doc = "Bit 12 - Event Mask on line 12"]
            #[inline(always)]
            pub fn mr12(&mut self) -> MR12_W {
                MR12_W { w: self }
            }
            #[doc = "Bit 13 - Event Mask on line 13"]
            #[inline(always)]
            pub fn mr13(&mut self) -> MR13_W {
                MR13_W { w: self }
            }
            #[doc = "Bit 14 - Event Mask on line 14"]
            #[inline(always)]
            pub fn mr14(&mut self) -> MR14_W {
                MR14_W { w: self }
            }
            #[doc = "Bit 15 - Event Mask on line 15"]
            #[inline(always)]
            pub fn mr15(&mut self) -> MR15_W {
                MR15_W { w: self }
            }
            #[doc = "Bit 16 - Event Mask on line 16"]
            #[inline(always)]
            pub fn mr16(&mut self) -> MR16_W {
                MR16_W { w: self }
            }
            #[doc = "Bit 17 - Event Mask on line 17"]
            #[inline(always)]
            pub fn mr17(&mut self) -> MR17_W {
                MR17_W { w: self }
            }
            #[doc = "Bit 18 - Event Mask on line 18"]
            #[inline(always)]
            pub fn mr18(&mut self) -> MR18_W {
                MR18_W { w: self }
            }
            #[doc = "Bit 19 - Event Mask on line 19"]
            #[inline(always)]
            pub fn mr19(&mut self) -> MR19_W {
                MR19_W { w: self }
            }
            #[doc = "Bit 20 - Event Mask on line 20"]
            #[inline(always)]
            pub fn mr20(&mut self) -> MR20_W {
                MR20_W { w: self }
            }
            #[doc = "Bit 21 - Event Mask on line 21"]
            #[inline(always)]
            pub fn mr21(&mut self) -> MR21_W {
                MR21_W { w: self }
            }
            #[doc = "Bit 22 - Event Mask on line 22"]
            #[inline(always)]
            pub fn mr22(&mut self) -> MR22_W {
                MR22_W { w: self }
            }
            #[doc = "Bit 23 - Event Mask on line 23"]
            #[inline(always)]
            pub fn mr23(&mut self) -> MR23_W {
                MR23_W { w: self }
            }
            #[doc = "Bit 24 - Event Mask on line 24"]
            #[inline(always)]
            pub fn mr24(&mut self) -> MR24_W {
                MR24_W { w: self }
            }
            #[doc = "Bit 25 - Event Mask on line 25"]
            #[inline(always)]
            pub fn mr25(&mut self) -> MR25_W {
                MR25_W { w: self }
            }
            #[doc = "Bit 26 - Event Mask on line 26"]
            #[inline(always)]
            pub fn mr26(&mut self) -> MR26_W {
                MR26_W { w: self }
            }
            #[doc = "Bit 27 - Event Mask on line 27"]
            #[inline(always)]
            pub fn mr27(&mut self) -> MR27_W {
                MR27_W { w: self }
            }
        }
    }
    #[doc = "Rising Trigger selection register (EXTI_RTSR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtsr](rtsr) module"]
    pub type RTSR = crate::Reg<u32, _RTSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RTSR;
    #[doc = "`read()` method returns [rtsr::R](rtsr::R) reader structure"]
    impl crate::Readable for RTSR {}
    #[doc = "`write(|w| ..)` method takes [rtsr::W](rtsr::W) writer structure"]
    impl crate::Writable for RTSR {}
    #[doc = "Rising Trigger selection register (EXTI_RTSR)"]
    pub mod rtsr {
        #[doc = "Reader of register RTSR"]
        pub type R = crate::R<u32, super::RTSR>;
        #[doc = "Writer for register RTSR"]
        pub type W = crate::W<u32, super::RTSR>;
        #[doc = "Register RTSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RTSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Rising trigger event configuration of line 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TR0_A {
            #[doc = "0: Rising edge trigger is disabled"]
            DISABLED = 0,
            #[doc = "1: Rising edge trigger is enabled"]
            ENABLED = 1,
        }
        impl From<TR0_A> for bool {
            #[inline(always)]
            fn from(variant: TR0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TR0`"]
        pub type TR0_R = crate::R<bool, TR0_A>;
        impl TR0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TR0_A {
                match self.bits {
                    false => TR0_A::DISABLED,
                    true => TR0_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TR0_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TR0_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TR0`"]
        pub struct TR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 1"]
        pub type TR1_A = TR0_A;
        #[doc = "Reader of field `TR1`"]
        pub type TR1_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR1`"]
        pub struct TR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 2"]
        pub type TR2_A = TR0_A;
        #[doc = "Reader of field `TR2`"]
        pub type TR2_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR2`"]
        pub struct TR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 3"]
        pub type TR3_A = TR0_A;
        #[doc = "Reader of field `TR3`"]
        pub type TR3_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR3`"]
        pub struct TR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 4"]
        pub type TR4_A = TR0_A;
        #[doc = "Reader of field `TR4`"]
        pub type TR4_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR4`"]
        pub struct TR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 5"]
        pub type TR5_A = TR0_A;
        #[doc = "Reader of field `TR5`"]
        pub type TR5_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR5`"]
        pub struct TR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 6"]
        pub type TR6_A = TR0_A;
        #[doc = "Reader of field `TR6`"]
        pub type TR6_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR6`"]
        pub struct TR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 7"]
        pub type TR7_A = TR0_A;
        #[doc = "Reader of field `TR7`"]
        pub type TR7_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR7`"]
        pub struct TR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 8"]
        pub type TR8_A = TR0_A;
        #[doc = "Reader of field `TR8`"]
        pub type TR8_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR8`"]
        pub struct TR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 9"]
        pub type TR9_A = TR0_A;
        #[doc = "Reader of field `TR9`"]
        pub type TR9_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR9`"]
        pub struct TR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 10"]
        pub type TR10_A = TR0_A;
        #[doc = "Reader of field `TR10`"]
        pub type TR10_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR10`"]
        pub struct TR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 11"]
        pub type TR11_A = TR0_A;
        #[doc = "Reader of field `TR11`"]
        pub type TR11_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR11`"]
        pub struct TR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 12"]
        pub type TR12_A = TR0_A;
        #[doc = "Reader of field `TR12`"]
        pub type TR12_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR12`"]
        pub struct TR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 13"]
        pub type TR13_A = TR0_A;
        #[doc = "Reader of field `TR13`"]
        pub type TR13_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR13`"]
        pub struct TR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 14"]
        pub type TR14_A = TR0_A;
        #[doc = "Reader of field `TR14`"]
        pub type TR14_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR14`"]
        pub struct TR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 15"]
        pub type TR15_A = TR0_A;
        #[doc = "Reader of field `TR15`"]
        pub type TR15_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR15`"]
        pub struct TR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 16"]
        pub type TR16_A = TR0_A;
        #[doc = "Reader of field `TR16`"]
        pub type TR16_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR16`"]
        pub struct TR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 17"]
        pub type TR17_A = TR0_A;
        #[doc = "Reader of field `TR17`"]
        pub type TR17_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR17`"]
        pub struct TR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR17_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration of line 19"]
        pub type TR19_A = TR0_A;
        #[doc = "Reader of field `TR19`"]
        pub type TR19_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR19`"]
        pub struct TR19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Rising trigger event configuration of line 0"]
            #[inline(always)]
            pub fn tr0(&self) -> TR0_R {
                TR0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Rising trigger event configuration of line 1"]
            #[inline(always)]
            pub fn tr1(&self) -> TR1_R {
                TR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Rising trigger event configuration of line 2"]
            #[inline(always)]
            pub fn tr2(&self) -> TR2_R {
                TR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Rising trigger event configuration of line 3"]
            #[inline(always)]
            pub fn tr3(&self) -> TR3_R {
                TR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Rising trigger event configuration of line 4"]
            #[inline(always)]
            pub fn tr4(&self) -> TR4_R {
                TR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Rising trigger event configuration of line 5"]
            #[inline(always)]
            pub fn tr5(&self) -> TR5_R {
                TR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Rising trigger event configuration of line 6"]
            #[inline(always)]
            pub fn tr6(&self) -> TR6_R {
                TR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Rising trigger event configuration of line 7"]
            #[inline(always)]
            pub fn tr7(&self) -> TR7_R {
                TR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Rising trigger event configuration of line 8"]
            #[inline(always)]
            pub fn tr8(&self) -> TR8_R {
                TR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Rising trigger event configuration of line 9"]
            #[inline(always)]
            pub fn tr9(&self) -> TR9_R {
                TR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Rising trigger event configuration of line 10"]
            #[inline(always)]
            pub fn tr10(&self) -> TR10_R {
                TR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Rising trigger event configuration of line 11"]
            #[inline(always)]
            pub fn tr11(&self) -> TR11_R {
                TR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Rising trigger event configuration of line 12"]
            #[inline(always)]
            pub fn tr12(&self) -> TR12_R {
                TR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Rising trigger event configuration of line 13"]
            #[inline(always)]
            pub fn tr13(&self) -> TR13_R {
                TR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Rising trigger event configuration of line 14"]
            #[inline(always)]
            pub fn tr14(&self) -> TR14_R {
                TR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Rising trigger event configuration of line 15"]
            #[inline(always)]
            pub fn tr15(&self) -> TR15_R {
                TR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Rising trigger event configuration of line 16"]
            #[inline(always)]
            pub fn tr16(&self) -> TR16_R {
                TR16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Rising trigger event configuration of line 17"]
            #[inline(always)]
            pub fn tr17(&self) -> TR17_R {
                TR17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Rising trigger event configuration of line 19"]
            #[inline(always)]
            pub fn tr19(&self) -> TR19_R {
                TR19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Rising trigger event configuration of line 0"]
            #[inline(always)]
            pub fn tr0(&mut self) -> TR0_W {
                TR0_W { w: self }
            }
            #[doc = "Bit 1 - Rising trigger event configuration of line 1"]
            #[inline(always)]
            pub fn tr1(&mut self) -> TR1_W {
                TR1_W { w: self }
            }
            #[doc = "Bit 2 - Rising trigger event configuration of line 2"]
            #[inline(always)]
            pub fn tr2(&mut self) -> TR2_W {
                TR2_W { w: self }
            }
            #[doc = "Bit 3 - Rising trigger event configuration of line 3"]
            #[inline(always)]
            pub fn tr3(&mut self) -> TR3_W {
                TR3_W { w: self }
            }
            #[doc = "Bit 4 - Rising trigger event configuration of line 4"]
            #[inline(always)]
            pub fn tr4(&mut self) -> TR4_W {
                TR4_W { w: self }
            }
            #[doc = "Bit 5 - Rising trigger event configuration of line 5"]
            #[inline(always)]
            pub fn tr5(&mut self) -> TR5_W {
                TR5_W { w: self }
            }
            #[doc = "Bit 6 - Rising trigger event configuration of line 6"]
            #[inline(always)]
            pub fn tr6(&mut self) -> TR6_W {
                TR6_W { w: self }
            }
            #[doc = "Bit 7 - Rising trigger event configuration of line 7"]
            #[inline(always)]
            pub fn tr7(&mut self) -> TR7_W {
                TR7_W { w: self }
            }
            #[doc = "Bit 8 - Rising trigger event configuration of line 8"]
            #[inline(always)]
            pub fn tr8(&mut self) -> TR8_W {
                TR8_W { w: self }
            }
            #[doc = "Bit 9 - Rising trigger event configuration of line 9"]
            #[inline(always)]
            pub fn tr9(&mut self) -> TR9_W {
                TR9_W { w: self }
            }
            #[doc = "Bit 10 - Rising trigger event configuration of line 10"]
            #[inline(always)]
            pub fn tr10(&mut self) -> TR10_W {
                TR10_W { w: self }
            }
            #[doc = "Bit 11 - Rising trigger event configuration of line 11"]
            #[inline(always)]
            pub fn tr11(&mut self) -> TR11_W {
                TR11_W { w: self }
            }
            #[doc = "Bit 12 - Rising trigger event configuration of line 12"]
            #[inline(always)]
            pub fn tr12(&mut self) -> TR12_W {
                TR12_W { w: self }
            }
            #[doc = "Bit 13 - Rising trigger event configuration of line 13"]
            #[inline(always)]
            pub fn tr13(&mut self) -> TR13_W {
                TR13_W { w: self }
            }
            #[doc = "Bit 14 - Rising trigger event configuration of line 14"]
            #[inline(always)]
            pub fn tr14(&mut self) -> TR14_W {
                TR14_W { w: self }
            }
            #[doc = "Bit 15 - Rising trigger event configuration of line 15"]
            #[inline(always)]
            pub fn tr15(&mut self) -> TR15_W {
                TR15_W { w: self }
            }
            #[doc = "Bit 16 - Rising trigger event configuration of line 16"]
            #[inline(always)]
            pub fn tr16(&mut self) -> TR16_W {
                TR16_W { w: self }
            }
            #[doc = "Bit 17 - Rising trigger event configuration of line 17"]
            #[inline(always)]
            pub fn tr17(&mut self) -> TR17_W {
                TR17_W { w: self }
            }
            #[doc = "Bit 19 - Rising trigger event configuration of line 19"]
            #[inline(always)]
            pub fn tr19(&mut self) -> TR19_W {
                TR19_W { w: self }
            }
        }
    }
    #[doc = "Falling Trigger selection register (EXTI_FTSR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ftsr](ftsr) module"]
    pub type FTSR = crate::Reg<u32, _FTSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FTSR;
    #[doc = "`read()` method returns [ftsr::R](ftsr::R) reader structure"]
    impl crate::Readable for FTSR {}
    #[doc = "`write(|w| ..)` method takes [ftsr::W](ftsr::W) writer structure"]
    impl crate::Writable for FTSR {}
    #[doc = "Falling Trigger selection register (EXTI_FTSR)"]
    pub mod ftsr {
        #[doc = "Reader of register FTSR"]
        pub type R = crate::R<u32, super::FTSR>;
        #[doc = "Writer for register FTSR"]
        pub type W = crate::W<u32, super::FTSR>;
        #[doc = "Register FTSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::FTSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Falling trigger event configuration of line 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TR0_A {
            #[doc = "0: Falling edge trigger is disabled"]
            DISABLED = 0,
            #[doc = "1: Falling edge trigger is enabled"]
            ENABLED = 1,
        }
        impl From<TR0_A> for bool {
            #[inline(always)]
            fn from(variant: TR0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TR0`"]
        pub type TR0_R = crate::R<bool, TR0_A>;
        impl TR0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TR0_A {
                match self.bits {
                    false => TR0_A::DISABLED,
                    true => TR0_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TR0_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TR0_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TR0`"]
        pub struct TR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 1"]
        pub type TR1_A = TR0_A;
        #[doc = "Reader of field `TR1`"]
        pub type TR1_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR1`"]
        pub struct TR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 2"]
        pub type TR2_A = TR0_A;
        #[doc = "Reader of field `TR2`"]
        pub type TR2_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR2`"]
        pub struct TR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 3"]
        pub type TR3_A = TR0_A;
        #[doc = "Reader of field `TR3`"]
        pub type TR3_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR3`"]
        pub struct TR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 4"]
        pub type TR4_A = TR0_A;
        #[doc = "Reader of field `TR4`"]
        pub type TR4_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR4`"]
        pub struct TR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 5"]
        pub type TR5_A = TR0_A;
        #[doc = "Reader of field `TR5`"]
        pub type TR5_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR5`"]
        pub struct TR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 6"]
        pub type TR6_A = TR0_A;
        #[doc = "Reader of field `TR6`"]
        pub type TR6_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR6`"]
        pub struct TR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 7"]
        pub type TR7_A = TR0_A;
        #[doc = "Reader of field `TR7`"]
        pub type TR7_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR7`"]
        pub struct TR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 8"]
        pub type TR8_A = TR0_A;
        #[doc = "Reader of field `TR8`"]
        pub type TR8_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR8`"]
        pub struct TR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 9"]
        pub type TR9_A = TR0_A;
        #[doc = "Reader of field `TR9`"]
        pub type TR9_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR9`"]
        pub struct TR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 10"]
        pub type TR10_A = TR0_A;
        #[doc = "Reader of field `TR10`"]
        pub type TR10_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR10`"]
        pub struct TR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 11"]
        pub type TR11_A = TR0_A;
        #[doc = "Reader of field `TR11`"]
        pub type TR11_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR11`"]
        pub struct TR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 12"]
        pub type TR12_A = TR0_A;
        #[doc = "Reader of field `TR12`"]
        pub type TR12_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR12`"]
        pub struct TR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 13"]
        pub type TR13_A = TR0_A;
        #[doc = "Reader of field `TR13`"]
        pub type TR13_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR13`"]
        pub struct TR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 14"]
        pub type TR14_A = TR0_A;
        #[doc = "Reader of field `TR14`"]
        pub type TR14_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR14`"]
        pub struct TR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 15"]
        pub type TR15_A = TR0_A;
        #[doc = "Reader of field `TR15`"]
        pub type TR15_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR15`"]
        pub struct TR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 16"]
        pub type TR16_A = TR0_A;
        #[doc = "Reader of field `TR16`"]
        pub type TR16_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR16`"]
        pub struct TR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 17"]
        pub type TR17_A = TR0_A;
        #[doc = "Reader of field `TR17`"]
        pub type TR17_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR17`"]
        pub struct TR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR17_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Falling trigger event configuration of line 19"]
        pub type TR19_A = TR0_A;
        #[doc = "Reader of field `TR19`"]
        pub type TR19_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR19`"]
        pub struct TR19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Falling trigger event configuration of line 0"]
            #[inline(always)]
            pub fn tr0(&self) -> TR0_R {
                TR0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Falling trigger event configuration of line 1"]
            #[inline(always)]
            pub fn tr1(&self) -> TR1_R {
                TR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Falling trigger event configuration of line 2"]
            #[inline(always)]
            pub fn tr2(&self) -> TR2_R {
                TR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Falling trigger event configuration of line 3"]
            #[inline(always)]
            pub fn tr3(&self) -> TR3_R {
                TR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Falling trigger event configuration of line 4"]
            #[inline(always)]
            pub fn tr4(&self) -> TR4_R {
                TR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Falling trigger event configuration of line 5"]
            #[inline(always)]
            pub fn tr5(&self) -> TR5_R {
                TR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Falling trigger event configuration of line 6"]
            #[inline(always)]
            pub fn tr6(&self) -> TR6_R {
                TR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Falling trigger event configuration of line 7"]
            #[inline(always)]
            pub fn tr7(&self) -> TR7_R {
                TR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Falling trigger event configuration of line 8"]
            #[inline(always)]
            pub fn tr8(&self) -> TR8_R {
                TR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Falling trigger event configuration of line 9"]
            #[inline(always)]
            pub fn tr9(&self) -> TR9_R {
                TR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Falling trigger event configuration of line 10"]
            #[inline(always)]
            pub fn tr10(&self) -> TR10_R {
                TR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Falling trigger event configuration of line 11"]
            #[inline(always)]
            pub fn tr11(&self) -> TR11_R {
                TR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Falling trigger event configuration of line 12"]
            #[inline(always)]
            pub fn tr12(&self) -> TR12_R {
                TR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Falling trigger event configuration of line 13"]
            #[inline(always)]
            pub fn tr13(&self) -> TR13_R {
                TR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Falling trigger event configuration of line 14"]
            #[inline(always)]
            pub fn tr14(&self) -> TR14_R {
                TR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Falling trigger event configuration of line 15"]
            #[inline(always)]
            pub fn tr15(&self) -> TR15_R {
                TR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Falling trigger event configuration of line 16"]
            #[inline(always)]
            pub fn tr16(&self) -> TR16_R {
                TR16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Falling trigger event configuration of line 17"]
            #[inline(always)]
            pub fn tr17(&self) -> TR17_R {
                TR17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Falling trigger event configuration of line 19"]
            #[inline(always)]
            pub fn tr19(&self) -> TR19_R {
                TR19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Falling trigger event configuration of line 0"]
            #[inline(always)]
            pub fn tr0(&mut self) -> TR0_W {
                TR0_W { w: self }
            }
            #[doc = "Bit 1 - Falling trigger event configuration of line 1"]
            #[inline(always)]
            pub fn tr1(&mut self) -> TR1_W {
                TR1_W { w: self }
            }
            #[doc = "Bit 2 - Falling trigger event configuration of line 2"]
            #[inline(always)]
            pub fn tr2(&mut self) -> TR2_W {
                TR2_W { w: self }
            }
            #[doc = "Bit 3 - Falling trigger event configuration of line 3"]
            #[inline(always)]
            pub fn tr3(&mut self) -> TR3_W {
                TR3_W { w: self }
            }
            #[doc = "Bit 4 - Falling trigger event configuration of line 4"]
            #[inline(always)]
            pub fn tr4(&mut self) -> TR4_W {
                TR4_W { w: self }
            }
            #[doc = "Bit 5 - Falling trigger event configuration of line 5"]
            #[inline(always)]
            pub fn tr5(&mut self) -> TR5_W {
                TR5_W { w: self }
            }
            #[doc = "Bit 6 - Falling trigger event configuration of line 6"]
            #[inline(always)]
            pub fn tr6(&mut self) -> TR6_W {
                TR6_W { w: self }
            }
            #[doc = "Bit 7 - Falling trigger event configuration of line 7"]
            #[inline(always)]
            pub fn tr7(&mut self) -> TR7_W {
                TR7_W { w: self }
            }
            #[doc = "Bit 8 - Falling trigger event configuration of line 8"]
            #[inline(always)]
            pub fn tr8(&mut self) -> TR8_W {
                TR8_W { w: self }
            }
            #[doc = "Bit 9 - Falling trigger event configuration of line 9"]
            #[inline(always)]
            pub fn tr9(&mut self) -> TR9_W {
                TR9_W { w: self }
            }
            #[doc = "Bit 10 - Falling trigger event configuration of line 10"]
            #[inline(always)]
            pub fn tr10(&mut self) -> TR10_W {
                TR10_W { w: self }
            }
            #[doc = "Bit 11 - Falling trigger event configuration of line 11"]
            #[inline(always)]
            pub fn tr11(&mut self) -> TR11_W {
                TR11_W { w: self }
            }
            #[doc = "Bit 12 - Falling trigger event configuration of line 12"]
            #[inline(always)]
            pub fn tr12(&mut self) -> TR12_W {
                TR12_W { w: self }
            }
            #[doc = "Bit 13 - Falling trigger event configuration of line 13"]
            #[inline(always)]
            pub fn tr13(&mut self) -> TR13_W {
                TR13_W { w: self }
            }
            #[doc = "Bit 14 - Falling trigger event configuration of line 14"]
            #[inline(always)]
            pub fn tr14(&mut self) -> TR14_W {
                TR14_W { w: self }
            }
            #[doc = "Bit 15 - Falling trigger event configuration of line 15"]
            #[inline(always)]
            pub fn tr15(&mut self) -> TR15_W {
                TR15_W { w: self }
            }
            #[doc = "Bit 16 - Falling trigger event configuration of line 16"]
            #[inline(always)]
            pub fn tr16(&mut self) -> TR16_W {
                TR16_W { w: self }
            }
            #[doc = "Bit 17 - Falling trigger event configuration of line 17"]
            #[inline(always)]
            pub fn tr17(&mut self) -> TR17_W {
                TR17_W { w: self }
            }
            #[doc = "Bit 19 - Falling trigger event configuration of line 19"]
            #[inline(always)]
            pub fn tr19(&mut self) -> TR19_W {
                TR19_W { w: self }
            }
        }
    }
    #[doc = "Software interrupt event register (EXTI_SWIER)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swier](swier) module"]
    pub type SWIER = crate::Reg<u32, _SWIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SWIER;
    #[doc = "`read()` method returns [swier::R](swier::R) reader structure"]
    impl crate::Readable for SWIER {}
    #[doc = "`write(|w| ..)` method takes [swier::W](swier::W) writer structure"]
    impl crate::Writable for SWIER {}
    #[doc = "Software interrupt event register (EXTI_SWIER)"]
    pub mod swier {
        #[doc = "Reader of register SWIER"]
        pub type R = crate::R<u32, super::SWIER>;
        #[doc = "Writer for register SWIER"]
        pub type W = crate::W<u32, super::SWIER>;
        #[doc = "Register SWIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::SWIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Software Interrupt on line 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWIER0_A {
            #[doc = "1: Generates an interrupt request"]
            PEND = 1,
        }
        impl From<SWIER0_A> for bool {
            #[inline(always)]
            fn from(variant: SWIER0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWIER0`"]
        pub type SWIER0_R = crate::R<bool, SWIER0_A>;
        impl SWIER0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, SWIER0_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(SWIER0_A::PEND),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PEND`"]
            #[inline(always)]
            pub fn is_pend(&self) -> bool {
                *self == SWIER0_A::PEND
            }
        }
        #[doc = "Write proxy for field `SWIER0`"]
        pub struct SWIER0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 1"]
        pub type SWIER1_A = SWIER0_A;
        #[doc = "Reader of field `SWIER1`"]
        pub type SWIER1_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER1`"]
        pub struct SWIER1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 2"]
        pub type SWIER2_A = SWIER0_A;
        #[doc = "Reader of field `SWIER2`"]
        pub type SWIER2_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER2`"]
        pub struct SWIER2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 3"]
        pub type SWIER3_A = SWIER0_A;
        #[doc = "Reader of field `SWIER3`"]
        pub type SWIER3_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER3`"]
        pub struct SWIER3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 4"]
        pub type SWIER4_A = SWIER0_A;
        #[doc = "Reader of field `SWIER4`"]
        pub type SWIER4_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER4`"]
        pub struct SWIER4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 5"]
        pub type SWIER5_A = SWIER0_A;
        #[doc = "Reader of field `SWIER5`"]
        pub type SWIER5_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER5`"]
        pub struct SWIER5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 6"]
        pub type SWIER6_A = SWIER0_A;
        #[doc = "Reader of field `SWIER6`"]
        pub type SWIER6_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER6`"]
        pub struct SWIER6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 7"]
        pub type SWIER7_A = SWIER0_A;
        #[doc = "Reader of field `SWIER7`"]
        pub type SWIER7_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER7`"]
        pub struct SWIER7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 8"]
        pub type SWIER8_A = SWIER0_A;
        #[doc = "Reader of field `SWIER8`"]
        pub type SWIER8_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER8`"]
        pub struct SWIER8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 9"]
        pub type SWIER9_A = SWIER0_A;
        #[doc = "Reader of field `SWIER9`"]
        pub type SWIER9_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER9`"]
        pub struct SWIER9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 10"]
        pub type SWIER10_A = SWIER0_A;
        #[doc = "Reader of field `SWIER10`"]
        pub type SWIER10_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER10`"]
        pub struct SWIER10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 11"]
        pub type SWIER11_A = SWIER0_A;
        #[doc = "Reader of field `SWIER11`"]
        pub type SWIER11_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER11`"]
        pub struct SWIER11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 12"]
        pub type SWIER12_A = SWIER0_A;
        #[doc = "Reader of field `SWIER12`"]
        pub type SWIER12_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER12`"]
        pub struct SWIER12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 13"]
        pub type SWIER13_A = SWIER0_A;
        #[doc = "Reader of field `SWIER13`"]
        pub type SWIER13_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER13`"]
        pub struct SWIER13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 14"]
        pub type SWIER14_A = SWIER0_A;
        #[doc = "Reader of field `SWIER14`"]
        pub type SWIER14_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER14`"]
        pub struct SWIER14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 15"]
        pub type SWIER15_A = SWIER0_A;
        #[doc = "Reader of field `SWIER15`"]
        pub type SWIER15_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER15`"]
        pub struct SWIER15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 16"]
        pub type SWIER16_A = SWIER0_A;
        #[doc = "Reader of field `SWIER16`"]
        pub type SWIER16_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER16`"]
        pub struct SWIER16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 17"]
        pub type SWIER17_A = SWIER0_A;
        #[doc = "Reader of field `SWIER17`"]
        pub type SWIER17_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER17`"]
        pub struct SWIER17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER17_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Software Interrupt on line 19"]
        pub type SWIER19_A = SWIER0_A;
        #[doc = "Reader of field `SWIER19`"]
        pub type SWIER19_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER19`"]
        pub struct SWIER19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Software Interrupt on line 0"]
            #[inline(always)]
            pub fn swier0(&self) -> SWIER0_R {
                SWIER0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Software Interrupt on line 1"]
            #[inline(always)]
            pub fn swier1(&self) -> SWIER1_R {
                SWIER1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Software Interrupt on line 2"]
            #[inline(always)]
            pub fn swier2(&self) -> SWIER2_R {
                SWIER2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Software Interrupt on line 3"]
            #[inline(always)]
            pub fn swier3(&self) -> SWIER3_R {
                SWIER3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Software Interrupt on line 4"]
            #[inline(always)]
            pub fn swier4(&self) -> SWIER4_R {
                SWIER4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Software Interrupt on line 5"]
            #[inline(always)]
            pub fn swier5(&self) -> SWIER5_R {
                SWIER5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Software Interrupt on line 6"]
            #[inline(always)]
            pub fn swier6(&self) -> SWIER6_R {
                SWIER6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Software Interrupt on line 7"]
            #[inline(always)]
            pub fn swier7(&self) -> SWIER7_R {
                SWIER7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Software Interrupt on line 8"]
            #[inline(always)]
            pub fn swier8(&self) -> SWIER8_R {
                SWIER8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Software Interrupt on line 9"]
            #[inline(always)]
            pub fn swier9(&self) -> SWIER9_R {
                SWIER9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Software Interrupt on line 10"]
            #[inline(always)]
            pub fn swier10(&self) -> SWIER10_R {
                SWIER10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Software Interrupt on line 11"]
            #[inline(always)]
            pub fn swier11(&self) -> SWIER11_R {
                SWIER11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Software Interrupt on line 12"]
            #[inline(always)]
            pub fn swier12(&self) -> SWIER12_R {
                SWIER12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Software Interrupt on line 13"]
            #[inline(always)]
            pub fn swier13(&self) -> SWIER13_R {
                SWIER13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Software Interrupt on line 14"]
            #[inline(always)]
            pub fn swier14(&self) -> SWIER14_R {
                SWIER14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Software Interrupt on line 15"]
            #[inline(always)]
            pub fn swier15(&self) -> SWIER15_R {
                SWIER15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Software Interrupt on line 16"]
            #[inline(always)]
            pub fn swier16(&self) -> SWIER16_R {
                SWIER16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Software Interrupt on line 17"]
            #[inline(always)]
            pub fn swier17(&self) -> SWIER17_R {
                SWIER17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Software Interrupt on line 19"]
            #[inline(always)]
            pub fn swier19(&self) -> SWIER19_R {
                SWIER19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Software Interrupt on line 0"]
            #[inline(always)]
            pub fn swier0(&mut self) -> SWIER0_W {
                SWIER0_W { w: self }
            }
            #[doc = "Bit 1 - Software Interrupt on line 1"]
            #[inline(always)]
            pub fn swier1(&mut self) -> SWIER1_W {
                SWIER1_W { w: self }
            }
            #[doc = "Bit 2 - Software Interrupt on line 2"]
            #[inline(always)]
            pub fn swier2(&mut self) -> SWIER2_W {
                SWIER2_W { w: self }
            }
            #[doc = "Bit 3 - Software Interrupt on line 3"]
            #[inline(always)]
            pub fn swier3(&mut self) -> SWIER3_W {
                SWIER3_W { w: self }
            }
            #[doc = "Bit 4 - Software Interrupt on line 4"]
            #[inline(always)]
            pub fn swier4(&mut self) -> SWIER4_W {
                SWIER4_W { w: self }
            }
            #[doc = "Bit 5 - Software Interrupt on line 5"]
            #[inline(always)]
            pub fn swier5(&mut self) -> SWIER5_W {
                SWIER5_W { w: self }
            }
            #[doc = "Bit 6 - Software Interrupt on line 6"]
            #[inline(always)]
            pub fn swier6(&mut self) -> SWIER6_W {
                SWIER6_W { w: self }
            }
            #[doc = "Bit 7 - Software Interrupt on line 7"]
            #[inline(always)]
            pub fn swier7(&mut self) -> SWIER7_W {
                SWIER7_W { w: self }
            }
            #[doc = "Bit 8 - Software Interrupt on line 8"]
            #[inline(always)]
            pub fn swier8(&mut self) -> SWIER8_W {
                SWIER8_W { w: self }
            }
            #[doc = "Bit 9 - Software Interrupt on line 9"]
            #[inline(always)]
            pub fn swier9(&mut self) -> SWIER9_W {
                SWIER9_W { w: self }
            }
            #[doc = "Bit 10 - Software Interrupt on line 10"]
            #[inline(always)]
            pub fn swier10(&mut self) -> SWIER10_W {
                SWIER10_W { w: self }
            }
            #[doc = "Bit 11 - Software Interrupt on line 11"]
            #[inline(always)]
            pub fn swier11(&mut self) -> SWIER11_W {
                SWIER11_W { w: self }
            }
            #[doc = "Bit 12 - Software Interrupt on line 12"]
            #[inline(always)]
            pub fn swier12(&mut self) -> SWIER12_W {
                SWIER12_W { w: self }
            }
            #[doc = "Bit 13 - Software Interrupt on line 13"]
            #[inline(always)]
            pub fn swier13(&mut self) -> SWIER13_W {
                SWIER13_W { w: self }
            }
            #[doc = "Bit 14 - Software Interrupt on line 14"]
            #[inline(always)]
            pub fn swier14(&mut self) -> SWIER14_W {
                SWIER14_W { w: self }
            }
            #[doc = "Bit 15 - Software Interrupt on line 15"]
            #[inline(always)]
            pub fn swier15(&mut self) -> SWIER15_W {
                SWIER15_W { w: self }
            }
            #[doc = "Bit 16 - Software Interrupt on line 16"]
            #[inline(always)]
            pub fn swier16(&mut self) -> SWIER16_W {
                SWIER16_W { w: self }
            }
            #[doc = "Bit 17 - Software Interrupt on line 17"]
            #[inline(always)]
            pub fn swier17(&mut self) -> SWIER17_W {
                SWIER17_W { w: self }
            }
            #[doc = "Bit 19 - Software Interrupt on line 19"]
            #[inline(always)]
            pub fn swier19(&mut self) -> SWIER19_W {
                SWIER19_W { w: self }
            }
        }
    }
    #[doc = "Pending register (EXTI_PR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pr](pr) module"]
    pub type PR = crate::Reg<u32, _PR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PR;
    #[doc = "`read()` method returns [pr::R](pr::R) reader structure"]
    impl crate::Readable for PR {}
    #[doc = "`write(|w| ..)` method takes [pr::W](pr::W) writer structure"]
    impl crate::Writable for PR {}
    #[doc = "Pending register (EXTI_PR)"]
    pub mod pr {
        #[doc = "Reader of register PR"]
        pub type R = crate::R<u32, super::PR>;
        #[doc = "Writer for register PR"]
        pub type W = crate::W<u32, super::PR>;
        #[doc = "Register PR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Pending bit 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PR0_A {
            #[doc = "0: No trigger request occurred"]
            NOTPENDING = 0,
            #[doc = "1: Selected trigger request occurred"]
            PENDING = 1,
        }
        impl From<PR0_A> for bool {
            #[inline(always)]
            fn from(variant: PR0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PR0`"]
        pub type PR0_R = crate::R<bool, PR0_A>;
        impl PR0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PR0_A {
                match self.bits {
                    false => PR0_A::NOTPENDING,
                    true => PR0_A::PENDING,
                }
            }
            #[doc = "Checks if the value of the field is `NOTPENDING`"]
            #[inline(always)]
            pub fn is_not_pending(&self) -> bool {
                *self == PR0_A::NOTPENDING
            }
            #[doc = "Checks if the value of the field is `PENDING`"]
            #[inline(always)]
            pub fn is_pending(&self) -> bool {
                *self == PR0_A::PENDING
            }
        }
        #[doc = "Pending bit 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PR0_AW {
            #[doc = "1: Clears pending bit"]
            CLEAR = 1,
        }
        impl From<PR0_AW> for bool {
            #[inline(always)]
            fn from(variant: PR0_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PR0`"]
        pub struct PR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Pending bit 1"]
        pub type PR1_A = PR0_A;
        #[doc = "Reader of field `PR1`"]
        pub type PR1_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 1"]
        pub type PR1_AW = PR0_AW;
        #[doc = "Write proxy for field `PR1`"]
        pub struct PR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Pending bit 2"]
        pub type PR2_A = PR0_A;
        #[doc = "Reader of field `PR2`"]
        pub type PR2_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 2"]
        pub type PR2_AW = PR0_AW;
        #[doc = "Write proxy for field `PR2`"]
        pub struct PR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Pending bit 3"]
        pub type PR3_A = PR0_A;
        #[doc = "Reader of field `PR3`"]
        pub type PR3_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 3"]
        pub type PR3_AW = PR0_AW;
        #[doc = "Write proxy for field `PR3`"]
        pub struct PR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Pending bit 4"]
        pub type PR4_A = PR0_A;
        #[doc = "Reader of field `PR4`"]
        pub type PR4_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 4"]
        pub type PR4_AW = PR0_AW;
        #[doc = "Write proxy for field `PR4`"]
        pub struct PR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Pending bit 5"]
        pub type PR5_A = PR0_A;
        #[doc = "Reader of field `PR5`"]
        pub type PR5_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 5"]
        pub type PR5_AW = PR0_AW;
        #[doc = "Write proxy for field `PR5`"]
        pub struct PR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Pending bit 6"]
        pub type PR6_A = PR0_A;
        #[doc = "Reader of field `PR6`"]
        pub type PR6_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 6"]
        pub type PR6_AW = PR0_AW;
        #[doc = "Write proxy for field `PR6`"]
        pub struct PR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Pending bit 7"]
        pub type PR7_A = PR0_A;
        #[doc = "Reader of field `PR7`"]
        pub type PR7_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 7"]
        pub type PR7_AW = PR0_AW;
        #[doc = "Write proxy for field `PR7`"]
        pub struct PR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Pending bit 8"]
        pub type PR8_A = PR0_A;
        #[doc = "Reader of field `PR8`"]
        pub type PR8_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 8"]
        pub type PR8_AW = PR0_AW;
        #[doc = "Write proxy for field `PR8`"]
        pub struct PR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Pending bit 9"]
        pub type PR9_A = PR0_A;
        #[doc = "Reader of field `PR9`"]
        pub type PR9_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 9"]
        pub type PR9_AW = PR0_AW;
        #[doc = "Write proxy for field `PR9`"]
        pub struct PR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Pending bit 10"]
        pub type PR10_A = PR0_A;
        #[doc = "Reader of field `PR10`"]
        pub type PR10_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 10"]
        pub type PR10_AW = PR0_AW;
        #[doc = "Write proxy for field `PR10`"]
        pub struct PR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Pending bit 11"]
        pub type PR11_A = PR0_A;
        #[doc = "Reader of field `PR11`"]
        pub type PR11_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 11"]
        pub type PR11_AW = PR0_AW;
        #[doc = "Write proxy for field `PR11`"]
        pub struct PR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Pending bit 12"]
        pub type PR12_A = PR0_A;
        #[doc = "Reader of field `PR12`"]
        pub type PR12_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 12"]
        pub type PR12_AW = PR0_AW;
        #[doc = "Write proxy for field `PR12`"]
        pub struct PR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Pending bit 13"]
        pub type PR13_A = PR0_A;
        #[doc = "Reader of field `PR13`"]
        pub type PR13_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 13"]
        pub type PR13_AW = PR0_AW;
        #[doc = "Write proxy for field `PR13`"]
        pub struct PR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Pending bit 14"]
        pub type PR14_A = PR0_A;
        #[doc = "Reader of field `PR14`"]
        pub type PR14_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 14"]
        pub type PR14_AW = PR0_AW;
        #[doc = "Write proxy for field `PR14`"]
        pub struct PR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Pending bit 15"]
        pub type PR15_A = PR0_A;
        #[doc = "Reader of field `PR15`"]
        pub type PR15_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 15"]
        pub type PR15_AW = PR0_AW;
        #[doc = "Write proxy for field `PR15`"]
        pub struct PR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Pending bit 16"]
        pub type PR16_A = PR0_A;
        #[doc = "Reader of field `PR16`"]
        pub type PR16_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 16"]
        pub type PR16_AW = PR0_AW;
        #[doc = "Write proxy for field `PR16`"]
        pub struct PR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR16_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Pending bit 17"]
        pub type PR17_A = PR0_A;
        #[doc = "Reader of field `PR17`"]
        pub type PR17_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 17"]
        pub type PR17_AW = PR0_AW;
        #[doc = "Write proxy for field `PR17`"]
        pub struct PR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR17_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Pending bit 19"]
        pub type PR19_A = PR0_A;
        #[doc = "Reader of field `PR19`"]
        pub type PR19_R = crate::R<bool, PR0_A>;
        #[doc = "Pending bit 19"]
        pub type PR19_AW = PR0_AW;
        #[doc = "Write proxy for field `PR19`"]
        pub struct PR19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PR19_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PR0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Pending bit 0"]
            #[inline(always)]
            pub fn pr0(&self) -> PR0_R {
                PR0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Pending bit 1"]
            #[inline(always)]
            pub fn pr1(&self) -> PR1_R {
                PR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Pending bit 2"]
            #[inline(always)]
            pub fn pr2(&self) -> PR2_R {
                PR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Pending bit 3"]
            #[inline(always)]
            pub fn pr3(&self) -> PR3_R {
                PR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Pending bit 4"]
            #[inline(always)]
            pub fn pr4(&self) -> PR4_R {
                PR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Pending bit 5"]
            #[inline(always)]
            pub fn pr5(&self) -> PR5_R {
                PR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Pending bit 6"]
            #[inline(always)]
            pub fn pr6(&self) -> PR6_R {
                PR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Pending bit 7"]
            #[inline(always)]
            pub fn pr7(&self) -> PR7_R {
                PR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Pending bit 8"]
            #[inline(always)]
            pub fn pr8(&self) -> PR8_R {
                PR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Pending bit 9"]
            #[inline(always)]
            pub fn pr9(&self) -> PR9_R {
                PR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Pending bit 10"]
            #[inline(always)]
            pub fn pr10(&self) -> PR10_R {
                PR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Pending bit 11"]
            #[inline(always)]
            pub fn pr11(&self) -> PR11_R {
                PR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Pending bit 12"]
            #[inline(always)]
            pub fn pr12(&self) -> PR12_R {
                PR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Pending bit 13"]
            #[inline(always)]
            pub fn pr13(&self) -> PR13_R {
                PR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Pending bit 14"]
            #[inline(always)]
            pub fn pr14(&self) -> PR14_R {
                PR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Pending bit 15"]
            #[inline(always)]
            pub fn pr15(&self) -> PR15_R {
                PR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Pending bit 16"]
            #[inline(always)]
            pub fn pr16(&self) -> PR16_R {
                PR16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Pending bit 17"]
            #[inline(always)]
            pub fn pr17(&self) -> PR17_R {
                PR17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Pending bit 19"]
            #[inline(always)]
            pub fn pr19(&self) -> PR19_R {
                PR19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Pending bit 0"]
            #[inline(always)]
            pub fn pr0(&mut self) -> PR0_W {
                PR0_W { w: self }
            }
            #[doc = "Bit 1 - Pending bit 1"]
            #[inline(always)]
            pub fn pr1(&mut self) -> PR1_W {
                PR1_W { w: self }
            }
            #[doc = "Bit 2 - Pending bit 2"]
            #[inline(always)]
            pub fn pr2(&mut self) -> PR2_W {
                PR2_W { w: self }
            }
            #[doc = "Bit 3 - Pending bit 3"]
            #[inline(always)]
            pub fn pr3(&mut self) -> PR3_W {
                PR3_W { w: self }
            }
            #[doc = "Bit 4 - Pending bit 4"]
            #[inline(always)]
            pub fn pr4(&mut self) -> PR4_W {
                PR4_W { w: self }
            }
            #[doc = "Bit 5 - Pending bit 5"]
            #[inline(always)]
            pub fn pr5(&mut self) -> PR5_W {
                PR5_W { w: self }
            }
            #[doc = "Bit 6 - Pending bit 6"]
            #[inline(always)]
            pub fn pr6(&mut self) -> PR6_W {
                PR6_W { w: self }
            }
            #[doc = "Bit 7 - Pending bit 7"]
            #[inline(always)]
            pub fn pr7(&mut self) -> PR7_W {
                PR7_W { w: self }
            }
            #[doc = "Bit 8 - Pending bit 8"]
            #[inline(always)]
            pub fn pr8(&mut self) -> PR8_W {
                PR8_W { w: self }
            }
            #[doc = "Bit 9 - Pending bit 9"]
            #[inline(always)]
            pub fn pr9(&mut self) -> PR9_W {
                PR9_W { w: self }
            }
            #[doc = "Bit 10 - Pending bit 10"]
            #[inline(always)]
            pub fn pr10(&mut self) -> PR10_W {
                PR10_W { w: self }
            }
            #[doc = "Bit 11 - Pending bit 11"]
            #[inline(always)]
            pub fn pr11(&mut self) -> PR11_W {
                PR11_W { w: self }
            }
            #[doc = "Bit 12 - Pending bit 12"]
            #[inline(always)]
            pub fn pr12(&mut self) -> PR12_W {
                PR12_W { w: self }
            }
            #[doc = "Bit 13 - Pending bit 13"]
            #[inline(always)]
            pub fn pr13(&mut self) -> PR13_W {
                PR13_W { w: self }
            }
            #[doc = "Bit 14 - Pending bit 14"]
            #[inline(always)]
            pub fn pr14(&mut self) -> PR14_W {
                PR14_W { w: self }
            }
            #[doc = "Bit 15 - Pending bit 15"]
            #[inline(always)]
            pub fn pr15(&mut self) -> PR15_W {
                PR15_W { w: self }
            }
            #[doc = "Bit 16 - Pending bit 16"]
            #[inline(always)]
            pub fn pr16(&mut self) -> PR16_W {
                PR16_W { w: self }
            }
            #[doc = "Bit 17 - Pending bit 17"]
            #[inline(always)]
            pub fn pr17(&mut self) -> PR17_W {
                PR17_W { w: self }
            }
            #[doc = "Bit 19 - Pending bit 19"]
            #[inline(always)]
            pub fn pr19(&mut self) -> PR19_W {
                PR19_W { w: self }
            }
        }
    }
}
#[doc = "DMA controller"]
pub struct DMA1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DMA1 {}
impl DMA1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dma1::RegisterBlock {
        0x4002_0000 as *const _
    }
}
impl Deref for DMA1 {
    type Target = dma1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*DMA1::ptr() }
    }
}
#[doc = "DMA controller"]
pub mod dma1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - DMA interrupt status register (DMA_ISR)"]
        pub isr: ISR,
        #[doc = "0x04 - DMA interrupt flag clear register (DMA_IFCR)"]
        pub ifcr: IFCR,
        #[doc = "0x08 - Channel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers"]
        pub ch1: CH,
        _reserved3: [u8; 4usize],
        #[doc = "0x1c - Channel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers"]
        pub ch2: CH,
        _reserved4: [u8; 4usize],
        #[doc = "0x30 - Channel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers"]
        pub ch3: CH,
        _reserved5: [u8; 4usize],
        #[doc = "0x44 - Channel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers"]
        pub ch4: CH,
        _reserved6: [u8; 4usize],
        #[doc = "0x58 - Channel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers"]
        pub ch5: CH,
        _reserved7: [u8; 4usize],
        #[doc = "0x6c - Channel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers"]
        pub ch6: CH,
        _reserved8: [u8; 4usize],
        #[doc = "0x80 - Channel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers"]
        pub ch7: CH,
    }
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct CH {
        #[doc = "0x00 - DMA channel configuration register (DMA_CCR)"]
        pub cr: self::ch::CR,
        #[doc = "0x04 - DMA channel 1 number of data register"]
        pub ndtr: self::ch::NDTR,
        #[doc = "0x08 - DMA channel 1 peripheral address register"]
        pub par: self::ch::PAR,
        #[doc = "0x0c - DMA channel 1 memory address register"]
        pub mar: self::ch::MAR,
    }
    #[doc = r"Register block"]
    #[doc = "Channel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers"]
    pub mod ch {
        #[doc = "DMA channel configuration register (DMA_CCR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
        pub type CR = crate::Reg<u32, _CR>;
        #[allow(missing_docs)]
        #[doc(hidden)]
        pub struct _CR;
        #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
        impl crate::Readable for CR {}
        #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
        impl crate::Writable for CR {}
        #[doc = "DMA channel configuration register (DMA_CCR)"]
        pub mod cr {
            #[doc = "Reader of register CR"]
            pub type R = crate::R<u32, super::CR>;
            #[doc = "Writer for register CR"]
            pub type W = crate::W<u32, super::CR>;
            #[doc = "Register CR `reset()`'s with value 0"]
            impl crate::ResetValue for super::CR {
                type Type = u32;
                #[inline(always)]
                fn reset_value() -> Self::Type {
                    0
                }
            }
            #[doc = "Channel enable\n\nValue on reset: 0"]
            #[derive(Clone, Copy, Debug, PartialEq)]
            pub enum EN_A {
                #[doc = "0: Channel disabled"]
                DISABLED = 0,
                #[doc = "1: Channel enabled"]
                ENABLED = 1,
            }
            impl From<EN_A> for bool {
                #[inline(always)]
                fn from(variant: EN_A) -> Self {
                    variant as u8 != 0
                }
            }
            #[doc = "Reader of field `EN`"]
            pub type EN_R = crate::R<bool, EN_A>;
            impl EN_R {
                #[doc = r"Get enumerated values variant"]
                #[inline(always)]
                pub fn variant(&self) -> EN_A {
                    match self.bits {
                        false => EN_A::DISABLED,
                        true => EN_A::ENABLED,
                    }
                }
                #[doc = "Checks if the value of the field is `DISABLED`"]
                #[inline(always)]
                pub fn is_disabled(&self) -> bool {
                    *self == EN_A::DISABLED
                }
                #[doc = "Checks if the value of the field is `ENABLED`"]
                #[inline(always)]
                pub fn is_enabled(&self) -> bool {
                    *self == EN_A::ENABLED
                }
            }
            #[doc = "Write proxy for field `EN`"]
            pub struct EN_W<'a> {
                w: &'a mut W,
            }
            impl<'a> EN_W<'a> {
                #[doc = r"Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: EN_A) -> &'a mut W {
                    {
                        self.bit(variant.into())
                    }
                }
                #[doc = "Channel disabled"]
                #[inline(always)]
                pub fn disabled(self) -> &'a mut W {
                    self.variant(EN_A::DISABLED)
                }
                #[doc = "Channel enabled"]
                #[inline(always)]
                pub fn enabled(self) -> &'a mut W {
                    self.variant(EN_A::ENABLED)
                }
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                    self.w
                }
            }
            #[doc = "Transfer complete interrupt enable\n\nValue on reset: 0"]
            #[derive(Clone, Copy, Debug, PartialEq)]
            pub enum TCIE_A {
                #[doc = "0: Transfer Complete interrupt disabled"]
                DISABLED = 0,
                #[doc = "1: Transfer Complete interrupt enabled"]
                ENABLED = 1,
            }
            impl From<TCIE_A> for bool {
                #[inline(always)]
                fn from(variant: TCIE_A) -> Self {
                    variant as u8 != 0
                }
            }
            #[doc = "Reader of field `TCIE`"]
            pub type TCIE_R = crate::R<bool, TCIE_A>;
            impl TCIE_R {
                #[doc = r"Get enumerated values variant"]
                #[inline(always)]
                pub fn variant(&self) -> TCIE_A {
                    match self.bits {
                        false => TCIE_A::DISABLED,
                        true => TCIE_A::ENABLED,
                    }
                }
                #[doc = "Checks if the value of the field is `DISABLED`"]
                #[inline(always)]
                pub fn is_disabled(&self) -> bool {
                    *self == TCIE_A::DISABLED
                }
                #[doc = "Checks if the value of the field is `ENABLED`"]
                #[inline(always)]
                pub fn is_enabled(&self) -> bool {
                    *self == TCIE_A::ENABLED
                }
            }
            #[doc = "Write proxy for field `TCIE`"]
            pub struct TCIE_W<'a> {
                w: &'a mut W,
            }
            impl<'a> TCIE_W<'a> {
                #[doc = r"Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: TCIE_A) -> &'a mut W {
                    {
                        self.bit(variant.into())
                    }
                }
                #[doc = "Transfer Complete interrupt disabled"]
                #[inline(always)]
                pub fn disabled(self) -> &'a mut W {
                    self.variant(TCIE_A::DISABLED)
                }
                #[doc = "Transfer Complete interrupt enabled"]
                #[inline(always)]
                pub fn enabled(self) -> &'a mut W {
                    self.variant(TCIE_A::ENABLED)
                }
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                    self.w
                }
            }
            #[doc = "Half Transfer interrupt enable\n\nValue on reset: 0"]
            #[derive(Clone, Copy, Debug, PartialEq)]
            pub enum HTIE_A {
                #[doc = "0: Half Transfer interrupt disabled"]
                DISABLED = 0,
                #[doc = "1: Half Transfer interrupt enabled"]
                ENABLED = 1,
            }
            impl From<HTIE_A> for bool {
                #[inline(always)]
                fn from(variant: HTIE_A) -> Self {
                    variant as u8 != 0
                }
            }
            #[doc = "Reader of field `HTIE`"]
            pub type HTIE_R = crate::R<bool, HTIE_A>;
            impl HTIE_R {
                #[doc = r"Get enumerated values variant"]
                #[inline(always)]
                pub fn variant(&self) -> HTIE_A {
                    match self.bits {
                        false => HTIE_A::DISABLED,
                        true => HTIE_A::ENABLED,
                    }
                }
                #[doc = "Checks if the value of the field is `DISABLED`"]
                #[inline(always)]
                pub fn is_disabled(&self) -> bool {
                    *self == HTIE_A::DISABLED
                }
                #[doc = "Checks if the value of the field is `ENABLED`"]
                #[inline(always)]
                pub fn is_enabled(&self) -> bool {
                    *self == HTIE_A::ENABLED
                }
            }
            #[doc = "Write proxy for field `HTIE`"]
            pub struct HTIE_W<'a> {
                w: &'a mut W,
            }
            impl<'a> HTIE_W<'a> {
                #[doc = r"Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: HTIE_A) -> &'a mut W {
                    {
                        self.bit(variant.into())
                    }
                }
                #[doc = "Half Transfer interrupt disabled"]
                #[inline(always)]
                pub fn disabled(self) -> &'a mut W {
                    self.variant(HTIE_A::DISABLED)
                }
                #[doc = "Half Transfer interrupt enabled"]
                #[inline(always)]
                pub fn enabled(self) -> &'a mut W {
                    self.variant(HTIE_A::ENABLED)
                }
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                    self.w
                }
            }
            #[doc = "Transfer error interrupt enable\n\nValue on reset: 0"]
            #[derive(Clone, Copy, Debug, PartialEq)]
            pub enum TEIE_A {
                #[doc = "0: Transfer Error interrupt disabled"]
                DISABLED = 0,
                #[doc = "1: Transfer Error interrupt enabled"]
                ENABLED = 1,
            }
            impl From<TEIE_A> for bool {
                #[inline(always)]
                fn from(variant: TEIE_A) -> Self {
                    variant as u8 != 0
                }
            }
            #[doc = "Reader of field `TEIE`"]
            pub type TEIE_R = crate::R<bool, TEIE_A>;
            impl TEIE_R {
                #[doc = r"Get enumerated values variant"]
                #[inline(always)]
                pub fn variant(&self) -> TEIE_A {
                    match self.bits {
                        false => TEIE_A::DISABLED,
                        true => TEIE_A::ENABLED,
                    }
                }
                #[doc = "Checks if the value of the field is `DISABLED`"]
                #[inline(always)]
                pub fn is_disabled(&self) -> bool {
                    *self == TEIE_A::DISABLED
                }
                #[doc = "Checks if the value of the field is `ENABLED`"]
                #[inline(always)]
                pub fn is_enabled(&self) -> bool {
                    *self == TEIE_A::ENABLED
                }
            }
            #[doc = "Write proxy for field `TEIE`"]
            pub struct TEIE_W<'a> {
                w: &'a mut W,
            }
            impl<'a> TEIE_W<'a> {
                #[doc = r"Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: TEIE_A) -> &'a mut W {
                    {
                        self.bit(variant.into())
                    }
                }
                #[doc = "Transfer Error interrupt disabled"]
                #[inline(always)]
                pub fn disabled(self) -> &'a mut W {
                    self.variant(TEIE_A::DISABLED)
                }
                #[doc = "Transfer Error interrupt enabled"]
                #[inline(always)]
                pub fn enabled(self) -> &'a mut W {
                    self.variant(TEIE_A::ENABLED)
                }
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                    self.w
                }
            }
            #[doc = "Data transfer direction\n\nValue on reset: 0"]
            #[derive(Clone, Copy, Debug, PartialEq)]
            pub enum DIR_A {
                #[doc = "0: Read from peripheral"]
                FROMPERIPHERAL = 0,
                #[doc = "1: Read from memory"]
                FROMMEMORY = 1,
            }
            impl From<DIR_A> for bool {
                #[inline(always)]
                fn from(variant: DIR_A) -> Self {
                    variant as u8 != 0
                }
            }
            #[doc = "Reader of field `DIR`"]
            pub type DIR_R = crate::R<bool, DIR_A>;
            impl DIR_R {
                #[doc = r"Get enumerated values variant"]
                #[inline(always)]
                pub fn variant(&self) -> DIR_A {
                    match self.bits {
                        false => DIR_A::FROMPERIPHERAL,
                        true => DIR_A::FROMMEMORY,
                    }
                }
                #[doc = "Checks if the value of the field is `FROMPERIPHERAL`"]
                #[inline(always)]
                pub fn is_from_peripheral(&self) -> bool {
                    *self == DIR_A::FROMPERIPHERAL
                }
                #[doc = "Checks if the value of the field is `FROMMEMORY`"]
                #[inline(always)]
                pub fn is_from_memory(&self) -> bool {
                    *self == DIR_A::FROMMEMORY
                }
            }
            #[doc = "Write proxy for field `DIR`"]
            pub struct DIR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> DIR_W<'a> {
                #[doc = r"Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: DIR_A) -> &'a mut W {
                    {
                        self.bit(variant.into())
                    }
                }
                #[doc = "Read from peripheral"]
                #[inline(always)]
                pub fn from_peripheral(self) -> &'a mut W {
                    self.variant(DIR_A::FROMPERIPHERAL)
                }
                #[doc = "Read from memory"]
                #[inline(always)]
                pub fn from_memory(self) -> &'a mut W {
                    self.variant(DIR_A::FROMMEMORY)
                }
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                    self.w
                }
            }
            #[doc = "Circular mode\n\nValue on reset: 0"]
            #[derive(Clone, Copy, Debug, PartialEq)]
            pub enum CIRC_A {
                #[doc = "0: Circular buffer disabled"]
                DISABLED = 0,
                #[doc = "1: Circular buffer enabled"]
                ENABLED = 1,
            }
            impl From<CIRC_A> for bool {
                #[inline(always)]
                fn from(variant: CIRC_A) -> Self {
                    variant as u8 != 0
                }
            }
            #[doc = "Reader of field `CIRC`"]
            pub type CIRC_R = crate::R<bool, CIRC_A>;
            impl CIRC_R {
                #[doc = r"Get enumerated values variant"]
                #[inline(always)]
                pub fn variant(&self) -> CIRC_A {
                    match self.bits {
                        false => CIRC_A::DISABLED,
                        true => CIRC_A::ENABLED,
                    }
                }
                #[doc = "Checks if the value of the field is `DISABLED`"]
                #[inline(always)]
                pub fn is_disabled(&self) -> bool {
                    *self == CIRC_A::DISABLED
                }
                #[doc = "Checks if the value of the field is `ENABLED`"]
                #[inline(always)]
                pub fn is_enabled(&self) -> bool {
                    *self == CIRC_A::ENABLED
                }
            }
            #[doc = "Write proxy for field `CIRC`"]
            pub struct CIRC_W<'a> {
                w: &'a mut W,
            }
            impl<'a> CIRC_W<'a> {
                #[doc = r"Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: CIRC_A) -> &'a mut W {
                    {
                        self.bit(variant.into())
                    }
                }
                #[doc = "Circular buffer disabled"]
                #[inline(always)]
                pub fn disabled(self) -> &'a mut W {
                    self.variant(CIRC_A::DISABLED)
                }
                #[doc = "Circular buffer enabled"]
                #[inline(always)]
                pub fn enabled(self) -> &'a mut W {
                    self.variant(CIRC_A::ENABLED)
                }
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                    self.w
                }
            }
            #[doc = "Peripheral increment mode\n\nValue on reset: 0"]
            #[derive(Clone, Copy, Debug, PartialEq)]
            pub enum PINC_A {
                #[doc = "0: Increment mode disabled"]
                DISABLED = 0,
                #[doc = "1: Increment mode enabled"]
                ENABLED = 1,
            }
            impl From<PINC_A> for bool {
                #[inline(always)]
                fn from(variant: PINC_A) -> Self {
                    variant as u8 != 0
                }
            }
            #[doc = "Reader of field `PINC`"]
            pub type PINC_R = crate::R<bool, PINC_A>;
            impl PINC_R {
                #[doc = r"Get enumerated values variant"]
                #[inline(always)]
                pub fn variant(&self) -> PINC_A {
                    match self.bits {
                        false => PINC_A::DISABLED,
                        true => PINC_A::ENABLED,
                    }
                }
                #[doc = "Checks if the value of the field is `DISABLED`"]
                #[inline(always)]
                pub fn is_disabled(&self) -> bool {
                    *self == PINC_A::DISABLED
                }
                #[doc = "Checks if the value of the field is `ENABLED`"]
                #[inline(always)]
                pub fn is_enabled(&self) -> bool {
                    *self == PINC_A::ENABLED
                }
            }
            #[doc = "Write proxy for field `PINC`"]
            pub struct PINC_W<'a> {
                w: &'a mut W,
            }
            impl<'a> PINC_W<'a> {
                #[doc = r"Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: PINC_A) -> &'a mut W {
                    {
                        self.bit(variant.into())
                    }
                }
                #[doc = "Increment mode disabled"]
                #[inline(always)]
                pub fn disabled(self) -> &'a mut W {
                    self.variant(PINC_A::DISABLED)
                }
                #[doc = "Increment mode enabled"]
                #[inline(always)]
                pub fn enabled(self) -> &'a mut W {
                    self.variant(PINC_A::ENABLED)
                }
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                    self.w
                }
            }
            #[doc = "Memory increment mode"]
            pub type MINC_A = PINC_A;
            #[doc = "Reader of field `MINC`"]
            pub type MINC_R = crate::R<bool, PINC_A>;
            #[doc = "Write proxy for field `MINC`"]
            pub struct MINC_W<'a> {
                w: &'a mut W,
            }
            impl<'a> MINC_W<'a> {
                #[doc = r"Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: MINC_A) -> &'a mut W {
                    {
                        self.bit(variant.into())
                    }
                }
                #[doc = "Increment mode disabled"]
                #[inline(always)]
                pub fn disabled(self) -> &'a mut W {
                    self.variant(PINC_A::DISABLED)
                }
                #[doc = "Increment mode enabled"]
                #[inline(always)]
                pub fn enabled(self) -> &'a mut W {
                    self.variant(PINC_A::ENABLED)
                }
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                    self.w
                }
            }
            #[doc = "Peripheral size\n\nValue on reset: 0"]
            #[derive(Clone, Copy, Debug, PartialEq)]
            #[repr(u8)]
            pub enum PSIZE_A {
                #[doc = "0: 8-bit size"]
                BITS8 = 0,
                #[doc = "1: 16-bit size"]
                BITS16 = 1,
                #[doc = "2: 32-bit size"]
                BITS32 = 2,
            }
            impl From<PSIZE_A> for u8 {
                #[inline(always)]
                fn from(variant: PSIZE_A) -> Self {
                    variant as _
                }
            }
            #[doc = "Reader of field `PSIZE`"]
            pub type PSIZE_R = crate::R<u8, PSIZE_A>;
            impl PSIZE_R {
                #[doc = r"Get enumerated values variant"]
                #[inline(always)]
                pub fn variant(&self) -> crate::Variant<u8, PSIZE_A> {
                    use crate::Variant::*;
                    match self.bits {
                        0 => Val(PSIZE_A::BITS8),
                        1 => Val(PSIZE_A::BITS16),
                        2 => Val(PSIZE_A::BITS32),
                        i => Res(i),
                    }
                }
                #[doc = "Checks if the value of the field is `BITS8`"]
                #[inline(always)]
                pub fn is_bits8(&self) -> bool {
                    *self == PSIZE_A::BITS8
                }
                #[doc = "Checks if the value of the field is `BITS16`"]
                #[inline(always)]
                pub fn is_bits16(&self) -> bool {
                    *self == PSIZE_A::BITS16
                }
                #[doc = "Checks if the value of the field is `BITS32`"]
                #[inline(always)]
                pub fn is_bits32(&self) -> bool {
                    *self == PSIZE_A::BITS32
                }
            }
            #[doc = "Write proxy for field `PSIZE`"]
            pub struct PSIZE_W<'a> {
                w: &'a mut W,
            }
            impl<'a> PSIZE_W<'a> {
                #[doc = r"Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: PSIZE_A) -> &'a mut W {
                    unsafe { self.bits(variant.into()) }
                }
                #[doc = "8-bit size"]
                #[inline(always)]
                pub fn bits8(self) -> &'a mut W {
                    self.variant(PSIZE_A::BITS8)
                }
                #[doc = "16-bit size"]
                #[inline(always)]
                pub fn bits16(self) -> &'a mut W {
                    self.variant(PSIZE_A::BITS16)
                }
                #[doc = "32-bit size"]
                #[inline(always)]
                pub fn bits32(self) -> &'a mut W {
                    self.variant(PSIZE_A::BITS32)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                    self.w
                }
            }
            #[doc = "Memory size"]
            pub type MSIZE_A = PSIZE_A;
            #[doc = "Reader of field `MSIZE`"]
            pub type MSIZE_R = crate::R<u8, PSIZE_A>;
            #[doc = "Write proxy for field `MSIZE`"]
            pub struct MSIZE_W<'a> {
                w: &'a mut W,
            }
            impl<'a> MSIZE_W<'a> {
                #[doc = r"Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: MSIZE_A) -> &'a mut W {
                    unsafe { self.bits(variant.into()) }
                }
                #[doc = "8-bit size"]
                #[inline(always)]
                pub fn bits8(self) -> &'a mut W {
                    self.variant(PSIZE_A::BITS8)
                }
                #[doc = "16-bit size"]
                #[inline(always)]
                pub fn bits16(self) -> &'a mut W {
                    self.variant(PSIZE_A::BITS16)
                }
                #[doc = "32-bit size"]
                #[inline(always)]
                pub fn bits32(self) -> &'a mut W {
                    self.variant(PSIZE_A::BITS32)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                    self.w
                }
            }
            #[doc = "Channel Priority level\n\nValue on reset: 0"]
            #[derive(Clone, Copy, Debug, PartialEq)]
            #[repr(u8)]
            pub enum PL_A {
                #[doc = "0: Low priority"]
                LOW = 0,
                #[doc = "1: Medium priority"]
                MEDIUM = 1,
                #[doc = "2: High priority"]
                HIGH = 2,
                #[doc = "3: Very high priority"]
                VERYHIGH = 3,
            }
            impl From<PL_A> for u8 {
                #[inline(always)]
                fn from(variant: PL_A) -> Self {
                    variant as _
                }
            }
            #[doc = "Reader of field `PL`"]
            pub type PL_R = crate::R<u8, PL_A>;
            impl PL_R {
                #[doc = r"Get enumerated values variant"]
                #[inline(always)]
                pub fn variant(&self) -> PL_A {
                    match self.bits {
                        0 => PL_A::LOW,
                        1 => PL_A::MEDIUM,
                        2 => PL_A::HIGH,
                        3 => PL_A::VERYHIGH,
                        _ => unreachable!(),
                    }
                }
                #[doc = "Checks if the value of the field is `LOW`"]
                #[inline(always)]
                pub fn is_low(&self) -> bool {
                    *self == PL_A::LOW
                }
                #[doc = "Checks if the value of the field is `MEDIUM`"]
                #[inline(always)]
                pub fn is_medium(&self) -> bool {
                    *self == PL_A::MEDIUM
                }
                #[doc = "Checks if the value of the field is `HIGH`"]
                #[inline(always)]
                pub fn is_high(&self) -> bool {
                    *self == PL_A::HIGH
                }
                #[doc = "Checks if the value of the field is `VERYHIGH`"]
                #[inline(always)]
                pub fn is_very_high(&self) -> bool {
                    *self == PL_A::VERYHIGH
                }
            }
            #[doc = "Write proxy for field `PL`"]
            pub struct PL_W<'a> {
                w: &'a mut W,
            }
            impl<'a> PL_W<'a> {
                #[doc = r"Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: PL_A) -> &'a mut W {
                    {
                        self.bits(variant.into())
                    }
                }
                #[doc = "Low priority"]
                #[inline(always)]
                pub fn low(self) -> &'a mut W {
                    self.variant(PL_A::LOW)
                }
                #[doc = "Medium priority"]
                #[inline(always)]
                pub fn medium(self) -> &'a mut W {
                    self.variant(PL_A::MEDIUM)
                }
                #[doc = "High priority"]
                #[inline(always)]
                pub fn high(self) -> &'a mut W {
                    self.variant(PL_A::HIGH)
                }
                #[doc = "Very high priority"]
                #[inline(always)]
                pub fn very_high(self) -> &'a mut W {
                    self.variant(PL_A::VERYHIGH)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                    self.w
                }
            }
            #[doc = "Memory to memory mode\n\nValue on reset: 0"]
            #[derive(Clone, Copy, Debug, PartialEq)]
            pub enum MEM2MEM_A {
                #[doc = "0: Memory to memory mode disabled"]
                DISABLED = 0,
                #[doc = "1: Memory to memory mode enabled"]
                ENABLED = 1,
            }
            impl From<MEM2MEM_A> for bool {
                #[inline(always)]
                fn from(variant: MEM2MEM_A) -> Self {
                    variant as u8 != 0
                }
            }
            #[doc = "Reader of field `MEM2MEM`"]
            pub type MEM2MEM_R = crate::R<bool, MEM2MEM_A>;
            impl MEM2MEM_R {
                #[doc = r"Get enumerated values variant"]
                #[inline(always)]
                pub fn variant(&self) -> MEM2MEM_A {
                    match self.bits {
                        false => MEM2MEM_A::DISABLED,
                        true => MEM2MEM_A::ENABLED,
                    }
                }
                #[doc = "Checks if the value of the field is `DISABLED`"]
                #[inline(always)]
                pub fn is_disabled(&self) -> bool {
                    *self == MEM2MEM_A::DISABLED
                }
                #[doc = "Checks if the value of the field is `ENABLED`"]
                #[inline(always)]
                pub fn is_enabled(&self) -> bool {
                    *self == MEM2MEM_A::ENABLED
                }
            }
            #[doc = "Write proxy for field `MEM2MEM`"]
            pub struct MEM2MEM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> MEM2MEM_W<'a> {
                #[doc = r"Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: MEM2MEM_A) -> &'a mut W {
                    {
                        self.bit(variant.into())
                    }
                }
                #[doc = "Memory to memory mode disabled"]
                #[inline(always)]
                pub fn disabled(self) -> &'a mut W {
                    self.variant(MEM2MEM_A::DISABLED)
                }
                #[doc = "Memory to memory mode enabled"]
                #[inline(always)]
                pub fn enabled(self) -> &'a mut W {
                    self.variant(MEM2MEM_A::ENABLED)
                }
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                    self.w
                }
            }
            impl R {
                #[doc = "Bit 0 - Channel enable"]
                #[inline(always)]
                pub fn en(&self) -> EN_R {
                    EN_R::new((self.bits & 0x01) != 0)
                }
                #[doc = "Bit 1 - Transfer complete interrupt enable"]
                #[inline(always)]
                pub fn tcie(&self) -> TCIE_R {
                    TCIE_R::new(((self.bits >> 1) & 0x01) != 0)
                }
                #[doc = "Bit 2 - Half Transfer interrupt enable"]
                #[inline(always)]
                pub fn htie(&self) -> HTIE_R {
                    HTIE_R::new(((self.bits >> 2) & 0x01) != 0)
                }
                #[doc = "Bit 3 - Transfer error interrupt enable"]
                #[inline(always)]
                pub fn teie(&self) -> TEIE_R {
                    TEIE_R::new(((self.bits >> 3) & 0x01) != 0)
                }
                #[doc = "Bit 4 - Data transfer direction"]
                #[inline(always)]
                pub fn dir(&self) -> DIR_R {
                    DIR_R::new(((self.bits >> 4) & 0x01) != 0)
                }
                #[doc = "Bit 5 - Circular mode"]
                #[inline(always)]
                pub fn circ(&self) -> CIRC_R {
                    CIRC_R::new(((self.bits >> 5) & 0x01) != 0)
                }
                #[doc = "Bit 6 - Peripheral increment mode"]
                #[inline(always)]
                pub fn pinc(&self) -> PINC_R {
                    PINC_R::new(((self.bits >> 6) & 0x01) != 0)
                }
                #[doc = "Bit 7 - Memory increment mode"]
                #[inline(always)]
                pub fn minc(&self) -> MINC_R {
                    MINC_R::new(((self.bits >> 7) & 0x01) != 0)
                }
                #[doc = "Bits 8:9 - Peripheral size"]
                #[inline(always)]
                pub fn psize(&self) -> PSIZE_R {
                    PSIZE_R::new(((self.bits >> 8) & 0x03) as u8)
                }
                #[doc = "Bits 10:11 - Memory size"]
                #[inline(always)]
                pub fn msize(&self) -> MSIZE_R {
                    MSIZE_R::new(((self.bits >> 10) & 0x03) as u8)
                }
                #[doc = "Bits 12:13 - Channel Priority level"]
                #[inline(always)]
                pub fn pl(&self) -> PL_R {
                    PL_R::new(((self.bits >> 12) & 0x03) as u8)
                }
                #[doc = "Bit 14 - Memory to memory mode"]
                #[inline(always)]
                pub fn mem2mem(&self) -> MEM2MEM_R {
                    MEM2MEM_R::new(((self.bits >> 14) & 0x01) != 0)
                }
            }
            impl W {
                #[doc = "Bit 0 - Channel enable"]
                #[inline(always)]
                pub fn en(&mut self) -> EN_W {
                    EN_W { w: self }
                }
                #[doc = "Bit 1 - Transfer complete interrupt enable"]
                #[inline(always)]
                pub fn tcie(&mut self) -> TCIE_W {
                    TCIE_W { w: self }
                }
                #[doc = "Bit 2 - Half Transfer interrupt enable"]
                #[inline(always)]
                pub fn htie(&mut self) -> HTIE_W {
                    HTIE_W { w: self }
                }
                #[doc = "Bit 3 - Transfer error interrupt enable"]
                #[inline(always)]
                pub fn teie(&mut self) -> TEIE_W {
                    TEIE_W { w: self }
                }
                #[doc = "Bit 4 - Data transfer direction"]
                #[inline(always)]
                pub fn dir(&mut self) -> DIR_W {
                    DIR_W { w: self }
                }
                #[doc = "Bit 5 - Circular mode"]
                #[inline(always)]
                pub fn circ(&mut self) -> CIRC_W {
                    CIRC_W { w: self }
                }
                #[doc = "Bit 6 - Peripheral increment mode"]
                #[inline(always)]
                pub fn pinc(&mut self) -> PINC_W {
                    PINC_W { w: self }
                }
                #[doc = "Bit 7 - Memory increment mode"]
                #[inline(always)]
                pub fn minc(&mut self) -> MINC_W {
                    MINC_W { w: self }
                }
                #[doc = "Bits 8:9 - Peripheral size"]
                #[inline(always)]
                pub fn psize(&mut self) -> PSIZE_W {
                    PSIZE_W { w: self }
                }
                #[doc = "Bits 10:11 - Memory size"]
                #[inline(always)]
                pub fn msize(&mut self) -> MSIZE_W {
                    MSIZE_W { w: self }
                }
                #[doc = "Bits 12:13 - Channel Priority level"]
                #[inline(always)]
                pub fn pl(&mut self) -> PL_W {
                    PL_W { w: self }
                }
                #[doc = "Bit 14 - Memory to memory mode"]
                #[inline(always)]
                pub fn mem2mem(&mut self) -> MEM2MEM_W {
                    MEM2MEM_W { w: self }
                }
            }
        }
        #[doc = "DMA channel 1 number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ndtr](ndtr) module"]
        pub type NDTR = crate::Reg<u32, _NDTR>;
        #[allow(missing_docs)]
        #[doc(hidden)]
        pub struct _NDTR;
        #[doc = "`read()` method returns [ndtr::R](ndtr::R) reader structure"]
        impl crate::Readable for NDTR {}
        #[doc = "`write(|w| ..)` method takes [ndtr::W](ndtr::W) writer structure"]
        impl crate::Writable for NDTR {}
        #[doc = "DMA channel 1 number of data register"]
        pub mod ndtr {
            #[doc = "Reader of register NDTR"]
            pub type R = crate::R<u32, super::NDTR>;
            #[doc = "Writer for register NDTR"]
            pub type W = crate::W<u32, super::NDTR>;
            #[doc = "Register NDTR `reset()`'s with value 0"]
            impl crate::ResetValue for super::NDTR {
                type Type = u32;
                #[inline(always)]
                fn reset_value() -> Self::Type {
                    0
                }
            }
            #[doc = "Reader of field `NDT`"]
            pub type NDT_R = crate::R<u16, u16>;
            #[doc = "Write proxy for field `NDT`"]
            pub struct NDT_W<'a> {
                w: &'a mut W,
            }
            impl<'a> NDT_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bits(self, value: u16) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:15 - Number of data to transfer"]
                #[inline(always)]
                pub fn ndt(&self) -> NDT_R {
                    NDT_R::new((self.bits & 0xffff) as u16)
                }
            }
            impl W {
                #[doc = "Bits 0:15 - Number of data to transfer"]
                #[inline(always)]
                pub fn ndt(&mut self) -> NDT_W {
                    NDT_W { w: self }
                }
            }
        }
        #[doc = "DMA channel 1 peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [par](par) module"]
        pub type PAR = crate::Reg<u32, _PAR>;
        #[allow(missing_docs)]
        #[doc(hidden)]
        pub struct _PAR;
        #[doc = "`read()` method returns [par::R](par::R) reader structure"]
        impl crate::Readable for PAR {}
        #[doc = "`write(|w| ..)` method takes [par::W](par::W) writer structure"]
        impl crate::Writable for PAR {}
        #[doc = "DMA channel 1 peripheral address register"]
        pub mod par {
            #[doc = "Reader of register PAR"]
            pub type R = crate::R<u32, super::PAR>;
            #[doc = "Writer for register PAR"]
            pub type W = crate::W<u32, super::PAR>;
            #[doc = "Register PAR `reset()`'s with value 0"]
            impl crate::ResetValue for super::PAR {
                type Type = u32;
                #[inline(always)]
                fn reset_value() -> Self::Type {
                    0
                }
            }
            #[doc = "Reader of field `PA`"]
            pub type PA_R = crate::R<u32, u32>;
            #[doc = "Write proxy for field `PA`"]
            pub struct PA_W<'a> {
                w: &'a mut W,
            }
            impl<'a> PA_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u32) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:31 - Peripheral address"]
                #[inline(always)]
                pub fn pa(&self) -> PA_R {
                    PA_R::new((self.bits & 0xffff_ffff) as u32)
                }
            }
            impl W {
                #[doc = "Bits 0:31 - Peripheral address"]
                #[inline(always)]
                pub fn pa(&mut self) -> PA_W {
                    PA_W { w: self }
                }
            }
        }
        #[doc = "DMA channel 1 memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mar](mar) module"]
        pub type MAR = crate::Reg<u32, _MAR>;
        #[allow(missing_docs)]
        #[doc(hidden)]
        pub struct _MAR;
        #[doc = "`read()` method returns [mar::R](mar::R) reader structure"]
        impl crate::Readable for MAR {}
        #[doc = "`write(|w| ..)` method takes [mar::W](mar::W) writer structure"]
        impl crate::Writable for MAR {}
        #[doc = "DMA channel 1 memory address register"]
        pub mod mar {
            #[doc = "Reader of register MAR"]
            pub type R = crate::R<u32, super::MAR>;
            #[doc = "Writer for register MAR"]
            pub type W = crate::W<u32, super::MAR>;
            #[doc = "Register MAR `reset()`'s with value 0"]
            impl crate::ResetValue for super::MAR {
                type Type = u32;
                #[inline(always)]
                fn reset_value() -> Self::Type {
                    0
                }
            }
            #[doc = "Reader of field `MA`"]
            pub type MA_R = crate::R<u32, u32>;
            #[doc = "Write proxy for field `MA`"]
            pub struct MA_W<'a> {
                w: &'a mut W,
            }
            impl<'a> MA_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u32) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:31 - Memory address"]
                #[inline(always)]
                pub fn ma(&self) -> MA_R {
                    MA_R::new((self.bits & 0xffff_ffff) as u32)
                }
            }
            impl W {
                #[doc = "Bits 0:31 - Memory address"]
                #[inline(always)]
                pub fn ma(&mut self) -> MA_W {
                    MA_W { w: self }
                }
            }
        }
    }
    #[doc = "DMA interrupt status register (DMA_ISR)\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr](isr) module"]
    pub type ISR = crate::Reg<u32, _ISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISR;
    #[doc = "`read()` method returns [isr::R](isr::R) reader structure"]
    impl crate::Readable for ISR {}
    #[doc = "DMA interrupt status register (DMA_ISR)"]
    pub mod isr {
        #[doc = "Reader of register ISR"]
        pub type R = crate::R<u32, super::ISR>;
        #[doc = "Channel 1 Global interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum GIF1_A {
            #[doc = "0: No transfer error, half event, complete event"]
            NOEVENT = 0,
            #[doc = "1: A transfer error, half event or complete event has occured"]
            EVENT = 1,
        }
        impl From<GIF1_A> for bool {
            #[inline(always)]
            fn from(variant: GIF1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `GIF1`"]
        pub type GIF1_R = crate::R<bool, GIF1_A>;
        impl GIF1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> GIF1_A {
                match self.bits {
                    false => GIF1_A::NOEVENT,
                    true => GIF1_A::EVENT,
                }
            }
            #[doc = "Checks if the value of the field is `NOEVENT`"]
            #[inline(always)]
            pub fn is_no_event(&self) -> bool {
                *self == GIF1_A::NOEVENT
            }
            #[doc = "Checks if the value of the field is `EVENT`"]
            #[inline(always)]
            pub fn is_event(&self) -> bool {
                *self == GIF1_A::EVENT
            }
        }
        #[doc = "Channel 1 Transfer Complete flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TCIF1_A {
            #[doc = "0: No transfer complete event"]
            NOTCOMPLETE = 0,
            #[doc = "1: A transfer complete event has occured"]
            COMPLETE = 1,
        }
        impl From<TCIF1_A> for bool {
            #[inline(always)]
            fn from(variant: TCIF1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TCIF1`"]
        pub type TCIF1_R = crate::R<bool, TCIF1_A>;
        impl TCIF1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TCIF1_A {
                match self.bits {
                    false => TCIF1_A::NOTCOMPLETE,
                    true => TCIF1_A::COMPLETE,
                }
            }
            #[doc = "Checks if the value of the field is `NOTCOMPLETE`"]
            #[inline(always)]
            pub fn is_not_complete(&self) -> bool {
                *self == TCIF1_A::NOTCOMPLETE
            }
            #[doc = "Checks if the value of the field is `COMPLETE`"]
            #[inline(always)]
            pub fn is_complete(&self) -> bool {
                *self == TCIF1_A::COMPLETE
            }
        }
        #[doc = "Channel 1 Half Transfer Complete flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HTIF1_A {
            #[doc = "0: No half transfer event"]
            NOTHALF = 0,
            #[doc = "1: A half transfer event has occured"]
            HALF = 1,
        }
        impl From<HTIF1_A> for bool {
            #[inline(always)]
            fn from(variant: HTIF1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HTIF1`"]
        pub type HTIF1_R = crate::R<bool, HTIF1_A>;
        impl HTIF1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HTIF1_A {
                match self.bits {
                    false => HTIF1_A::NOTHALF,
                    true => HTIF1_A::HALF,
                }
            }
            #[doc = "Checks if the value of the field is `NOTHALF`"]
            #[inline(always)]
            pub fn is_not_half(&self) -> bool {
                *self == HTIF1_A::NOTHALF
            }
            #[doc = "Checks if the value of the field is `HALF`"]
            #[inline(always)]
            pub fn is_half(&self) -> bool {
                *self == HTIF1_A::HALF
            }
        }
        #[doc = "Channel 1 Transfer Error flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TEIF1_A {
            #[doc = "0: No transfer error"]
            NOERROR = 0,
            #[doc = "1: A transfer error has occured"]
            ERROR = 1,
        }
        impl From<TEIF1_A> for bool {
            #[inline(always)]
            fn from(variant: TEIF1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TEIF1`"]
        pub type TEIF1_R = crate::R<bool, TEIF1_A>;
        impl TEIF1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TEIF1_A {
                match self.bits {
                    false => TEIF1_A::NOERROR,
                    true => TEIF1_A::ERROR,
                }
            }
            #[doc = "Checks if the value of the field is `NOERROR`"]
            #[inline(always)]
            pub fn is_no_error(&self) -> bool {
                *self == TEIF1_A::NOERROR
            }
            #[doc = "Checks if the value of the field is `ERROR`"]
            #[inline(always)]
            pub fn is_error(&self) -> bool {
                *self == TEIF1_A::ERROR
            }
        }
        #[doc = "Channel 2 Global interrupt flag"]
        pub type GIF2_A = GIF1_A;
        #[doc = "Reader of field `GIF2`"]
        pub type GIF2_R = crate::R<bool, GIF1_A>;
        #[doc = "Channel 2 Transfer Complete flag"]
        pub type TCIF2_A = TCIF1_A;
        #[doc = "Reader of field `TCIF2`"]
        pub type TCIF2_R = crate::R<bool, TCIF1_A>;
        #[doc = "Channel 2 Half Transfer Complete flag"]
        pub type HTIF2_A = HTIF1_A;
        #[doc = "Reader of field `HTIF2`"]
        pub type HTIF2_R = crate::R<bool, HTIF1_A>;
        #[doc = "Channel 2 Transfer Error flag"]
        pub type TEIF2_A = TEIF1_A;
        #[doc = "Reader of field `TEIF2`"]
        pub type TEIF2_R = crate::R<bool, TEIF1_A>;
        #[doc = "Channel 3 Global interrupt flag"]
        pub type GIF3_A = GIF1_A;
        #[doc = "Reader of field `GIF3`"]
        pub type GIF3_R = crate::R<bool, GIF1_A>;
        #[doc = "Channel 3 Transfer Complete flag"]
        pub type TCIF3_A = TCIF1_A;
        #[doc = "Reader of field `TCIF3`"]
        pub type TCIF3_R = crate::R<bool, TCIF1_A>;
        #[doc = "Channel 3 Half Transfer Complete flag"]
        pub type HTIF3_A = HTIF1_A;
        #[doc = "Reader of field `HTIF3`"]
        pub type HTIF3_R = crate::R<bool, HTIF1_A>;
        #[doc = "Channel 3 Transfer Error flag"]
        pub type TEIF3_A = TEIF1_A;
        #[doc = "Reader of field `TEIF3`"]
        pub type TEIF3_R = crate::R<bool, TEIF1_A>;
        #[doc = "Channel 4 Global interrupt flag"]
        pub type GIF4_A = GIF1_A;
        #[doc = "Reader of field `GIF4`"]
        pub type GIF4_R = crate::R<bool, GIF1_A>;
        #[doc = "Channel 4 Transfer Complete flag"]
        pub type TCIF4_A = TCIF1_A;
        #[doc = "Reader of field `TCIF4`"]
        pub type TCIF4_R = crate::R<bool, TCIF1_A>;
        #[doc = "Channel 4 Half Transfer Complete flag"]
        pub type HTIF4_A = HTIF1_A;
        #[doc = "Reader of field `HTIF4`"]
        pub type HTIF4_R = crate::R<bool, HTIF1_A>;
        #[doc = "Channel 4 Transfer Error flag"]
        pub type TEIF4_A = TEIF1_A;
        #[doc = "Reader of field `TEIF4`"]
        pub type TEIF4_R = crate::R<bool, TEIF1_A>;
        #[doc = "Channel 5 Global interrupt flag"]
        pub type GIF5_A = GIF1_A;
        #[doc = "Reader of field `GIF5`"]
        pub type GIF5_R = crate::R<bool, GIF1_A>;
        #[doc = "Channel 5 Transfer Complete flag"]
        pub type TCIF5_A = TCIF1_A;
        #[doc = "Reader of field `TCIF5`"]
        pub type TCIF5_R = crate::R<bool, TCIF1_A>;
        #[doc = "Channel 5 Half Transfer Complete flag"]
        pub type HTIF5_A = HTIF1_A;
        #[doc = "Reader of field `HTIF5`"]
        pub type HTIF5_R = crate::R<bool, HTIF1_A>;
        #[doc = "Channel 5 Transfer Error flag"]
        pub type TEIF5_A = TEIF1_A;
        #[doc = "Reader of field `TEIF5`"]
        pub type TEIF5_R = crate::R<bool, TEIF1_A>;
        #[doc = "Channel 6 Global interrupt flag"]
        pub type GIF6_A = GIF1_A;
        #[doc = "Reader of field `GIF6`"]
        pub type GIF6_R = crate::R<bool, GIF1_A>;
        #[doc = "Channel 6 Transfer Complete flag"]
        pub type TCIF6_A = TCIF1_A;
        #[doc = "Reader of field `TCIF6`"]
        pub type TCIF6_R = crate::R<bool, TCIF1_A>;
        #[doc = "Channel 6 Half Transfer Complete flag"]
        pub type HTIF6_A = HTIF1_A;
        #[doc = "Reader of field `HTIF6`"]
        pub type HTIF6_R = crate::R<bool, HTIF1_A>;
        #[doc = "Channel 6 Transfer Error flag"]
        pub type TEIF6_A = TEIF1_A;
        #[doc = "Reader of field `TEIF6`"]
        pub type TEIF6_R = crate::R<bool, TEIF1_A>;
        #[doc = "Channel 7 Global interrupt flag"]
        pub type GIF7_A = GIF1_A;
        #[doc = "Reader of field `GIF7`"]
        pub type GIF7_R = crate::R<bool, GIF1_A>;
        #[doc = "Channel 7 Transfer Complete flag"]
        pub type TCIF7_A = TCIF1_A;
        #[doc = "Reader of field `TCIF7`"]
        pub type TCIF7_R = crate::R<bool, TCIF1_A>;
        #[doc = "Channel 7 Half Transfer Complete flag"]
        pub type HTIF7_A = HTIF1_A;
        #[doc = "Reader of field `HTIF7`"]
        pub type HTIF7_R = crate::R<bool, HTIF1_A>;
        #[doc = "Channel 7 Transfer Error flag"]
        pub type TEIF7_A = TEIF1_A;
        #[doc = "Reader of field `TEIF7`"]
        pub type TEIF7_R = crate::R<bool, TEIF1_A>;
        impl R {
            #[doc = "Bit 0 - Channel 1 Global interrupt flag"]
            #[inline(always)]
            pub fn gif1(&self) -> GIF1_R {
                GIF1_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 Transfer Complete flag"]
            #[inline(always)]
            pub fn tcif1(&self) -> TCIF1_R {
                TCIF1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 1 Half Transfer Complete flag"]
            #[inline(always)]
            pub fn htif1(&self) -> HTIF1_R {
                HTIF1_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 1 Transfer Error flag"]
            #[inline(always)]
            pub fn teif1(&self) -> TEIF1_R {
                TEIF1_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 2 Global interrupt flag"]
            #[inline(always)]
            pub fn gif2(&self) -> GIF2_R {
                GIF2_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 2 Transfer Complete flag"]
            #[inline(always)]
            pub fn tcif2(&self) -> TCIF2_R {
                TCIF2_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 2 Half Transfer Complete flag"]
            #[inline(always)]
            pub fn htif2(&self) -> HTIF2_R {
                HTIF2_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 2 Transfer Error flag"]
            #[inline(always)]
            pub fn teif2(&self) -> TEIF2_R {
                TEIF2_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Channel 3 Global interrupt flag"]
            #[inline(always)]
            pub fn gif3(&self) -> GIF3_R {
                GIF3_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Channel 3 Transfer Complete flag"]
            #[inline(always)]
            pub fn tcif3(&self) -> TCIF3_R {
                TCIF3_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Channel 3 Half Transfer Complete flag"]
            #[inline(always)]
            pub fn htif3(&self) -> HTIF3_R {
                HTIF3_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Channel 3 Transfer Error flag"]
            #[inline(always)]
            pub fn teif3(&self) -> TEIF3_R {
                TEIF3_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Channel 4 Global interrupt flag"]
            #[inline(always)]
            pub fn gif4(&self) -> GIF4_R {
                GIF4_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Channel 4 Transfer Complete flag"]
            #[inline(always)]
            pub fn tcif4(&self) -> TCIF4_R {
                TCIF4_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Channel 4 Half Transfer Complete flag"]
            #[inline(always)]
            pub fn htif4(&self) -> HTIF4_R {
                HTIF4_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Channel 4 Transfer Error flag"]
            #[inline(always)]
            pub fn teif4(&self) -> TEIF4_R {
                TEIF4_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Channel 5 Global interrupt flag"]
            #[inline(always)]
            pub fn gif5(&self) -> GIF5_R {
                GIF5_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Channel 5 Transfer Complete flag"]
            #[inline(always)]
            pub fn tcif5(&self) -> TCIF5_R {
                TCIF5_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Channel 5 Half Transfer Complete flag"]
            #[inline(always)]
            pub fn htif5(&self) -> HTIF5_R {
                HTIF5_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Channel 5 Transfer Error flag"]
            #[inline(always)]
            pub fn teif5(&self) -> TEIF5_R {
                TEIF5_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Channel 6 Global interrupt flag"]
            #[inline(always)]
            pub fn gif6(&self) -> GIF6_R {
                GIF6_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Channel 6 Transfer Complete flag"]
            #[inline(always)]
            pub fn tcif6(&self) -> TCIF6_R {
                TCIF6_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Channel 6 Half Transfer Complete flag"]
            #[inline(always)]
            pub fn htif6(&self) -> HTIF6_R {
                HTIF6_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Channel 6 Transfer Error flag"]
            #[inline(always)]
            pub fn teif6(&self) -> TEIF6_R {
                TEIF6_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Channel 7 Global interrupt flag"]
            #[inline(always)]
            pub fn gif7(&self) -> GIF7_R {
                GIF7_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Channel 7 Transfer Complete flag"]
            #[inline(always)]
            pub fn tcif7(&self) -> TCIF7_R {
                TCIF7_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Channel 7 Half Transfer Complete flag"]
            #[inline(always)]
            pub fn htif7(&self) -> HTIF7_R {
                HTIF7_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Channel 7 Transfer Error flag"]
            #[inline(always)]
            pub fn teif7(&self) -> TEIF7_R {
                TEIF7_R::new(((self.bits >> 27) & 0x01) != 0)
            }
        }
    }
    #[doc = "DMA interrupt flag clear register (DMA_IFCR)\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ifcr](ifcr) module"]
    pub type IFCR = crate::Reg<u32, _IFCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IFCR;
    #[doc = "`write(|w| ..)` method takes [ifcr::W](ifcr::W) writer structure"]
    impl crate::Writable for IFCR {}
    #[doc = "DMA interrupt flag clear register (DMA_IFCR)"]
    pub mod ifcr {
        #[doc = "Writer for register IFCR"]
        pub type W = crate::W<u32, super::IFCR>;
        #[doc = "Register IFCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IFCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 1 Global interrupt clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CGIF1_AW {
            #[doc = "1: Clears the GIF, TEIF, HTIF, TCIF flags in the ISR register"]
            CLEAR = 1,
        }
        impl From<CGIF1_AW> for bool {
            #[inline(always)]
            fn from(variant: CGIF1_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `CGIF1`"]
        pub struct CGIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CGIF1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the GIF, TEIF, HTIF, TCIF flags in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CGIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 1 Transfer Complete clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CTCIF1_AW {
            #[doc = "1: Clears the TCIF flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<CTCIF1_AW> for bool {
            #[inline(always)]
            fn from(variant: CTCIF1_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `CTCIF1`"]
        pub struct CTCIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTCIF1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TCIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTCIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 1 Half Transfer clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CHTIF1_AW {
            #[doc = "1: Clears the HTIF flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<CHTIF1_AW> for bool {
            #[inline(always)]
            fn from(variant: CHTIF1_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `CHTIF1`"]
        pub struct CHTIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHTIF1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the HTIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CHTIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 1 Transfer Error clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CTEIF1_AW {
            #[doc = "1: Clears the TEIF flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<CTEIF1_AW> for bool {
            #[inline(always)]
            fn from(variant: CTEIF1_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `CTEIF1`"]
        pub struct CTEIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTEIF1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TEIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTEIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 2 Global interrupt clear"]
        pub type CGIF2_AW = CGIF1_AW;
        #[doc = "Write proxy for field `CGIF2`"]
        pub struct CGIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CGIF2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the GIF, TEIF, HTIF, TCIF flags in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CGIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 2 Transfer Complete clear"]
        pub type CTCIF2_AW = CTCIF1_AW;
        #[doc = "Write proxy for field `CTCIF2`"]
        pub struct CTCIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTCIF2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TCIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTCIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel 2 Half Transfer clear"]
        pub type CHTIF2_AW = CHTIF1_AW;
        #[doc = "Write proxy for field `CHTIF2`"]
        pub struct CHTIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHTIF2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the HTIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CHTIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel 2 Transfer Error clear"]
        pub type CTEIF2_AW = CTEIF1_AW;
        #[doc = "Write proxy for field `CTEIF2`"]
        pub struct CTEIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTEIF2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TEIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTEIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Channel 3 Global interrupt clear"]
        pub type CGIF3_AW = CGIF1_AW;
        #[doc = "Write proxy for field `CGIF3`"]
        pub struct CGIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CGIF3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the GIF, TEIF, HTIF, TCIF flags in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CGIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Channel 3 Transfer Complete clear"]
        pub type CTCIF3_AW = CTCIF1_AW;
        #[doc = "Write proxy for field `CTCIF3`"]
        pub struct CTCIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTCIF3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TCIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTCIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Channel 3 Half Transfer clear"]
        pub type CHTIF3_AW = CHTIF1_AW;
        #[doc = "Write proxy for field `CHTIF3`"]
        pub struct CHTIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHTIF3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the HTIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CHTIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Channel 3 Transfer Error clear"]
        pub type CTEIF3_AW = CTEIF1_AW;
        #[doc = "Write proxy for field `CTEIF3`"]
        pub struct CTEIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTEIF3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TEIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTEIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Channel 4 Global interrupt clear"]
        pub type CGIF4_AW = CGIF1_AW;
        #[doc = "Write proxy for field `CGIF4`"]
        pub struct CGIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CGIF4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the GIF, TEIF, HTIF, TCIF flags in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CGIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Channel 4 Transfer Complete clear"]
        pub type CTCIF4_AW = CTCIF1_AW;
        #[doc = "Write proxy for field `CTCIF4`"]
        pub struct CTCIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTCIF4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TCIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTCIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Channel 4 Half Transfer clear"]
        pub type CHTIF4_AW = CHTIF1_AW;
        #[doc = "Write proxy for field `CHTIF4`"]
        pub struct CHTIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHTIF4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the HTIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CHTIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Channel 4 Transfer Error clear"]
        pub type CTEIF4_AW = CTEIF1_AW;
        #[doc = "Write proxy for field `CTEIF4`"]
        pub struct CTEIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTEIF4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TEIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTEIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Channel 5 Global interrupt clear"]
        pub type CGIF5_AW = CGIF1_AW;
        #[doc = "Write proxy for field `CGIF5`"]
        pub struct CGIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CGIF5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the GIF, TEIF, HTIF, TCIF flags in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CGIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Channel 5 Transfer Complete clear"]
        pub type CTCIF5_AW = CTCIF1_AW;
        #[doc = "Write proxy for field `CTCIF5`"]
        pub struct CTCIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTCIF5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TCIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTCIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Channel 5 Half Transfer clear"]
        pub type CHTIF5_AW = CHTIF1_AW;
        #[doc = "Write proxy for field `CHTIF5`"]
        pub struct CHTIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHTIF5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the HTIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CHTIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Channel 5 Transfer Error clear"]
        pub type CTEIF5_AW = CTEIF1_AW;
        #[doc = "Write proxy for field `CTEIF5`"]
        pub struct CTEIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTEIF5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TEIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTEIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Channel 6 Global interrupt clear"]
        pub type CGIF6_AW = CGIF1_AW;
        #[doc = "Write proxy for field `CGIF6`"]
        pub struct CGIF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CGIF6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the GIF, TEIF, HTIF, TCIF flags in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CGIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Channel 6 Transfer Complete clear"]
        pub type CTCIF6_AW = CTCIF1_AW;
        #[doc = "Write proxy for field `CTCIF6`"]
        pub struct CTCIF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTCIF6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TCIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTCIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Channel 6 Half Transfer clear"]
        pub type CHTIF6_AW = CHTIF1_AW;
        #[doc = "Write proxy for field `CHTIF6`"]
        pub struct CHTIF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHTIF6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the HTIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CHTIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Channel 6 Transfer Error clear"]
        pub type CTEIF6_AW = CTEIF1_AW;
        #[doc = "Write proxy for field `CTEIF6`"]
        pub struct CTEIF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTEIF6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TEIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTEIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Channel 7 Global interrupt clear"]
        pub type CGIF7_AW = CGIF1_AW;
        #[doc = "Write proxy for field `CGIF7`"]
        pub struct CGIF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CGIF7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the GIF, TEIF, HTIF, TCIF flags in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CGIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Channel 7 Transfer Complete clear"]
        pub type CTCIF7_AW = CTCIF1_AW;
        #[doc = "Write proxy for field `CTCIF7`"]
        pub struct CTCIF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTCIF7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TCIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTCIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Channel 7 Half Transfer clear"]
        pub type CHTIF7_AW = CHTIF1_AW;
        #[doc = "Write proxy for field `CHTIF7`"]
        pub struct CHTIF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHTIF7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the HTIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CHTIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Channel 7 Transfer Error clear"]
        pub type CTEIF7_AW = CTEIF1_AW;
        #[doc = "Write proxy for field `CTEIF7`"]
        pub struct CTEIF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTEIF7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TEIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTEIF1_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 1 Global interrupt clear"]
            #[inline(always)]
            pub fn cgif1(&mut self) -> CGIF1_W {
                CGIF1_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 Transfer Complete clear"]
            #[inline(always)]
            pub fn ctcif1(&mut self) -> CTCIF1_W {
                CTCIF1_W { w: self }
            }
            #[doc = "Bit 2 - Channel 1 Half Transfer clear"]
            #[inline(always)]
            pub fn chtif1(&mut self) -> CHTIF1_W {
                CHTIF1_W { w: self }
            }
            #[doc = "Bit 3 - Channel 1 Transfer Error clear"]
            #[inline(always)]
            pub fn cteif1(&mut self) -> CTEIF1_W {
                CTEIF1_W { w: self }
            }
            #[doc = "Bit 4 - Channel 2 Global interrupt clear"]
            #[inline(always)]
            pub fn cgif2(&mut self) -> CGIF2_W {
                CGIF2_W { w: self }
            }
            #[doc = "Bit 5 - Channel 2 Transfer Complete clear"]
            #[inline(always)]
            pub fn ctcif2(&mut self) -> CTCIF2_W {
                CTCIF2_W { w: self }
            }
            #[doc = "Bit 6 - Channel 2 Half Transfer clear"]
            #[inline(always)]
            pub fn chtif2(&mut self) -> CHTIF2_W {
                CHTIF2_W { w: self }
            }
            #[doc = "Bit 7 - Channel 2 Transfer Error clear"]
            #[inline(always)]
            pub fn cteif2(&mut self) -> CTEIF2_W {
                CTEIF2_W { w: self }
            }
            #[doc = "Bit 8 - Channel 3 Global interrupt clear"]
            #[inline(always)]
            pub fn cgif3(&mut self) -> CGIF3_W {
                CGIF3_W { w: self }
            }
            #[doc = "Bit 9 - Channel 3 Transfer Complete clear"]
            #[inline(always)]
            pub fn ctcif3(&mut self) -> CTCIF3_W {
                CTCIF3_W { w: self }
            }
            #[doc = "Bit 10 - Channel 3 Half Transfer clear"]
            #[inline(always)]
            pub fn chtif3(&mut self) -> CHTIF3_W {
                CHTIF3_W { w: self }
            }
            #[doc = "Bit 11 - Channel 3 Transfer Error clear"]
            #[inline(always)]
            pub fn cteif3(&mut self) -> CTEIF3_W {
                CTEIF3_W { w: self }
            }
            #[doc = "Bit 12 - Channel 4 Global interrupt clear"]
            #[inline(always)]
            pub fn cgif4(&mut self) -> CGIF4_W {
                CGIF4_W { w: self }
            }
            #[doc = "Bit 13 - Channel 4 Transfer Complete clear"]
            #[inline(always)]
            pub fn ctcif4(&mut self) -> CTCIF4_W {
                CTCIF4_W { w: self }
            }
            #[doc = "Bit 14 - Channel 4 Half Transfer clear"]
            #[inline(always)]
            pub fn chtif4(&mut self) -> CHTIF4_W {
                CHTIF4_W { w: self }
            }
            #[doc = "Bit 15 - Channel 4 Transfer Error clear"]
            #[inline(always)]
            pub fn cteif4(&mut self) -> CTEIF4_W {
                CTEIF4_W { w: self }
            }
            #[doc = "Bit 16 - Channel 5 Global interrupt clear"]
            #[inline(always)]
            pub fn cgif5(&mut self) -> CGIF5_W {
                CGIF5_W { w: self }
            }
            #[doc = "Bit 17 - Channel 5 Transfer Complete clear"]
            #[inline(always)]
            pub fn ctcif5(&mut self) -> CTCIF5_W {
                CTCIF5_W { w: self }
            }
            #[doc = "Bit 18 - Channel 5 Half Transfer clear"]
            #[inline(always)]
            pub fn chtif5(&mut self) -> CHTIF5_W {
                CHTIF5_W { w: self }
            }
            #[doc = "Bit 19 - Channel 5 Transfer Error clear"]
            #[inline(always)]
            pub fn cteif5(&mut self) -> CTEIF5_W {
                CTEIF5_W { w: self }
            }
            #[doc = "Bit 20 - Channel 6 Global interrupt clear"]
            #[inline(always)]
            pub fn cgif6(&mut self) -> CGIF6_W {
                CGIF6_W { w: self }
            }
            #[doc = "Bit 21 - Channel 6 Transfer Complete clear"]
            #[inline(always)]
            pub fn ctcif6(&mut self) -> CTCIF6_W {
                CTCIF6_W { w: self }
            }
            #[doc = "Bit 22 - Channel 6 Half Transfer clear"]
            #[inline(always)]
            pub fn chtif6(&mut self) -> CHTIF6_W {
                CHTIF6_W { w: self }
            }
            #[doc = "Bit 23 - Channel 6 Transfer Error clear"]
            #[inline(always)]
            pub fn cteif6(&mut self) -> CTEIF6_W {
                CTEIF6_W { w: self }
            }
            #[doc = "Bit 24 - Channel 7 Global interrupt clear"]
            #[inline(always)]
            pub fn cgif7(&mut self) -> CGIF7_W {
                CGIF7_W { w: self }
            }
            #[doc = "Bit 25 - Channel 7 Transfer Complete clear"]
            #[inline(always)]
            pub fn ctcif7(&mut self) -> CTCIF7_W {
                CTCIF7_W { w: self }
            }
            #[doc = "Bit 26 - Channel 7 Half Transfer clear"]
            #[inline(always)]
            pub fn chtif7(&mut self) -> CHTIF7_W {
                CHTIF7_W { w: self }
            }
            #[doc = "Bit 27 - Channel 7 Transfer Error clear"]
            #[inline(always)]
            pub fn cteif7(&mut self) -> CTEIF7_W {
                CTEIF7_W { w: self }
            }
        }
    }
}
#[doc = "Reset and clock control"]
pub struct RCC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RCC {}
impl RCC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rcc::RegisterBlock {
        0x4002_1000 as *const _
    }
}
impl Deref for RCC {
    type Target = rcc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*RCC::ptr() }
    }
}
#[doc = "Reset and clock control"]
pub mod rcc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Clock control register"]
        pub cr: CR,
        #[doc = "0x04 - Clock configuration register (RCC_CFGR)"]
        pub cfgr: CFGR,
        #[doc = "0x08 - Clock interrupt register (RCC_CIR)"]
        pub cir: CIR,
        #[doc = "0x0c - APB2 peripheral reset register (RCC_APB2RSTR)"]
        pub apb2rstr: APB2RSTR,
        #[doc = "0x10 - APB1 peripheral reset register (RCC_APB1RSTR)"]
        pub apb1rstr: APB1RSTR,
        #[doc = "0x14 - AHB Peripheral Clock enable register (RCC_AHBENR)"]
        pub ahbenr: AHBENR,
        #[doc = "0x18 - APB2 peripheral clock enable register (RCC_APB2ENR)"]
        pub apb2enr: APB2ENR,
        #[doc = "0x1c - APB1 peripheral clock enable register (RCC_APB1ENR)"]
        pub apb1enr: APB1ENR,
        #[doc = "0x20 - Backup domain control register (RCC_BDCR)"]
        pub bdcr: BDCR,
        #[doc = "0x24 - Control/status register (RCC_CSR)"]
        pub csr: CSR,
        #[doc = "0x28 - AHB peripheral reset register"]
        pub ahbrstr: AHBRSTR,
        #[doc = "0x2c - Clock configuration register 2"]
        pub cfgr2: CFGR2,
        #[doc = "0x30 - Clock configuration register 3"]
        pub cfgr3: CFGR3,
        #[doc = "0x34 - Clock control register 2"]
        pub cr2: CR2,
    }
    #[doc = "Clock control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Clock control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0x83"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x83
            }
        }
        #[doc = "Internal High Speed clock enable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HSION_A {
            #[doc = "0: Clock Off"]
            OFF = 0,
            #[doc = "1: Clock On"]
            ON = 1,
        }
        impl From<HSION_A> for bool {
            #[inline(always)]
            fn from(variant: HSION_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HSION`"]
        pub type HSION_R = crate::R<bool, HSION_A>;
        impl HSION_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HSION_A {
                match self.bits {
                    false => HSION_A::OFF,
                    true => HSION_A::ON,
                }
            }
            #[doc = "Checks if the value of the field is `OFF`"]
            #[inline(always)]
            pub fn is_off(&self) -> bool {
                *self == HSION_A::OFF
            }
            #[doc = "Checks if the value of the field is `ON`"]
            #[inline(always)]
            pub fn is_on(&self) -> bool {
                *self == HSION_A::ON
            }
        }
        #[doc = "Write proxy for field `HSION`"]
        pub struct HSION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSION_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HSION_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clock Off"]
            #[inline(always)]
            pub fn off(self) -> &'a mut W {
                self.variant(HSION_A::OFF)
            }
            #[doc = "Clock On"]
            #[inline(always)]
            pub fn on(self) -> &'a mut W {
                self.variant(HSION_A::ON)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Internal High Speed clock ready flag\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HSIRDY_A {
            #[doc = "0: Clock not ready"]
            NOTREADY = 0,
            #[doc = "1: Clock ready"]
            READY = 1,
        }
        impl From<HSIRDY_A> for bool {
            #[inline(always)]
            fn from(variant: HSIRDY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HSIRDY`"]
        pub type HSIRDY_R = crate::R<bool, HSIRDY_A>;
        impl HSIRDY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HSIRDY_A {
                match self.bits {
                    false => HSIRDY_A::NOTREADY,
                    true => HSIRDY_A::READY,
                }
            }
            #[doc = "Checks if the value of the field is `NOTREADY`"]
            #[inline(always)]
            pub fn is_not_ready(&self) -> bool {
                *self == HSIRDY_A::NOTREADY
            }
            #[doc = "Checks if the value of the field is `READY`"]
            #[inline(always)]
            pub fn is_ready(&self) -> bool {
                *self == HSIRDY_A::READY
            }
        }
        #[doc = "Reader of field `HSITRIM`"]
        pub type HSITRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HSITRIM`"]
        pub struct HSITRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSITRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 3)) | (((value as u32) & 0x1f) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `HSICAL`"]
        pub type HSICAL_R = crate::R<u8, u8>;
        #[doc = "External High Speed clock enable"]
        pub type HSEON_A = HSION_A;
        #[doc = "Reader of field `HSEON`"]
        pub type HSEON_R = crate::R<bool, HSION_A>;
        #[doc = "Write proxy for field `HSEON`"]
        pub struct HSEON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSEON_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HSEON_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clock Off"]
            #[inline(always)]
            pub fn off(self) -> &'a mut W {
                self.variant(HSION_A::OFF)
            }
            #[doc = "Clock On"]
            #[inline(always)]
            pub fn on(self) -> &'a mut W {
                self.variant(HSION_A::ON)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "External High Speed clock ready flag"]
        pub type HSERDY_A = HSIRDY_A;
        #[doc = "Reader of field `HSERDY`"]
        pub type HSERDY_R = crate::R<bool, HSIRDY_A>;
        #[doc = "External High Speed clock Bypass\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HSEBYP_A {
            #[doc = "0: HSE crystal oscillator not bypassed"]
            NOTBYPASSED = 0,
            #[doc = "1: HSE crystal oscillator bypassed with external clock"]
            BYPASSED = 1,
        }
        impl From<HSEBYP_A> for bool {
            #[inline(always)]
            fn from(variant: HSEBYP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HSEBYP`"]
        pub type HSEBYP_R = crate::R<bool, HSEBYP_A>;
        impl HSEBYP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HSEBYP_A {
                match self.bits {
                    false => HSEBYP_A::NOTBYPASSED,
                    true => HSEBYP_A::BYPASSED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTBYPASSED`"]
            #[inline(always)]
            pub fn is_not_bypassed(&self) -> bool {
                *self == HSEBYP_A::NOTBYPASSED
            }
            #[doc = "Checks if the value of the field is `BYPASSED`"]
            #[inline(always)]
            pub fn is_bypassed(&self) -> bool {
                *self == HSEBYP_A::BYPASSED
            }
        }
        #[doc = "Write proxy for field `HSEBYP`"]
        pub struct HSEBYP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSEBYP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HSEBYP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "HSE crystal oscillator not bypassed"]
            #[inline(always)]
            pub fn not_bypassed(self) -> &'a mut W {
                self.variant(HSEBYP_A::NOTBYPASSED)
            }
            #[doc = "HSE crystal oscillator bypassed with external clock"]
            #[inline(always)]
            pub fn bypassed(self) -> &'a mut W {
                self.variant(HSEBYP_A::BYPASSED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Clock Security System enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CSSON_A {
            #[doc = "0: Clock security system disabled (clock detector OFF)"]
            OFF = 0,
            #[doc = "1: Clock security system enable (clock detector ON if the HSE is ready, OFF if not)"]
            ON = 1,
        }
        impl From<CSSON_A> for bool {
            #[inline(always)]
            fn from(variant: CSSON_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CSSON`"]
        pub type CSSON_R = crate::R<bool, CSSON_A>;
        impl CSSON_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CSSON_A {
                match self.bits {
                    false => CSSON_A::OFF,
                    true => CSSON_A::ON,
                }
            }
            #[doc = "Checks if the value of the field is `OFF`"]
            #[inline(always)]
            pub fn is_off(&self) -> bool {
                *self == CSSON_A::OFF
            }
            #[doc = "Checks if the value of the field is `ON`"]
            #[inline(always)]
            pub fn is_on(&self) -> bool {
                *self == CSSON_A::ON
            }
        }
        #[doc = "Write proxy for field `CSSON`"]
        pub struct CSSON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSSON_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CSSON_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clock security system disabled (clock detector OFF)"]
            #[inline(always)]
            pub fn off(self) -> &'a mut W {
                self.variant(CSSON_A::OFF)
            }
            #[doc = "Clock security system enable (clock detector ON if the HSE is ready, OFF if not)"]
            #[inline(always)]
            pub fn on(self) -> &'a mut W {
                self.variant(CSSON_A::ON)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "PLL enable"]
        pub type PLLON_A = HSION_A;
        #[doc = "Reader of field `PLLON`"]
        pub type PLLON_R = crate::R<bool, HSION_A>;
        #[doc = "Write proxy for field `PLLON`"]
        pub struct PLLON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLON_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PLLON_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clock Off"]
            #[inline(always)]
            pub fn off(self) -> &'a mut W {
                self.variant(HSION_A::OFF)
            }
            #[doc = "Clock On"]
            #[inline(always)]
            pub fn on(self) -> &'a mut W {
                self.variant(HSION_A::ON)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "PLL clock ready flag"]
        pub type PLLRDY_A = HSIRDY_A;
        #[doc = "Reader of field `PLLRDY`"]
        pub type PLLRDY_R = crate::R<bool, HSIRDY_A>;
        impl R {
            #[doc = "Bit 0 - Internal High Speed clock enable"]
            #[inline(always)]
            pub fn hsion(&self) -> HSION_R {
                HSION_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Internal High Speed clock ready flag"]
            #[inline(always)]
            pub fn hsirdy(&self) -> HSIRDY_R {
                HSIRDY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bits 3:7 - Internal High Speed clock trimming"]
            #[inline(always)]
            pub fn hsitrim(&self) -> HSITRIM_R {
                HSITRIM_R::new(((self.bits >> 3) & 0x1f) as u8)
            }
            #[doc = "Bits 8:15 - Internal High Speed clock Calibration"]
            #[inline(always)]
            pub fn hsical(&self) -> HSICAL_R {
                HSICAL_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bit 16 - External High Speed clock enable"]
            #[inline(always)]
            pub fn hseon(&self) -> HSEON_R {
                HSEON_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - External High Speed clock ready flag"]
            #[inline(always)]
            pub fn hserdy(&self) -> HSERDY_R {
                HSERDY_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - External High Speed clock Bypass"]
            #[inline(always)]
            pub fn hsebyp(&self) -> HSEBYP_R {
                HSEBYP_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Clock Security System enable"]
            #[inline(always)]
            pub fn csson(&self) -> CSSON_R {
                CSSON_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 24 - PLL enable"]
            #[inline(always)]
            pub fn pllon(&self) -> PLLON_R {
                PLLON_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - PLL clock ready flag"]
            #[inline(always)]
            pub fn pllrdy(&self) -> PLLRDY_R {
                PLLRDY_R::new(((self.bits >> 25) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Internal High Speed clock enable"]
            #[inline(always)]
            pub fn hsion(&mut self) -> HSION_W {
                HSION_W { w: self }
            }
            #[doc = "Bits 3:7 - Internal High Speed clock trimming"]
            #[inline(always)]
            pub fn hsitrim(&mut self) -> HSITRIM_W {
                HSITRIM_W { w: self }
            }
            #[doc = "Bit 16 - External High Speed clock enable"]
            #[inline(always)]
            pub fn hseon(&mut self) -> HSEON_W {
                HSEON_W { w: self }
            }
            #[doc = "Bit 18 - External High Speed clock Bypass"]
            #[inline(always)]
            pub fn hsebyp(&mut self) -> HSEBYP_W {
                HSEBYP_W { w: self }
            }
            #[doc = "Bit 19 - Clock Security System enable"]
            #[inline(always)]
            pub fn csson(&mut self) -> CSSON_W {
                CSSON_W { w: self }
            }
            #[doc = "Bit 24 - PLL enable"]
            #[inline(always)]
            pub fn pllon(&mut self) -> PLLON_W {
                PLLON_W { w: self }
            }
        }
    }
    #[doc = "Clock configuration register (RCC_CFGR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr](cfgr) module"]
    pub type CFGR = crate::Reg<u32, _CFGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR;
    #[doc = "`read()` method returns [cfgr::R](cfgr::R) reader structure"]
    impl crate::Readable for CFGR {}
    #[doc = "`write(|w| ..)` method takes [cfgr::W](cfgr::W) writer structure"]
    impl crate::Writable for CFGR {}
    #[doc = "Clock configuration register (RCC_CFGR)"]
    pub mod cfgr {
        #[doc = "Reader of register CFGR"]
        pub type R = crate::R<u32, super::CFGR>;
        #[doc = "Writer for register CFGR"]
        pub type W = crate::W<u32, super::CFGR>;
        #[doc = "Register CFGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "System clock Switch\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SW_A {
            #[doc = "3: HSI48 selected as system clock (when available)"]
            HSI48 = 3,
            #[doc = "0: HSI selected as system clock"]
            HSI = 0,
            #[doc = "1: HSE selected as system clock"]
            HSE = 1,
            #[doc = "2: PLL selected as system clock"]
            PLL = 2,
        }
        impl From<SW_A> for u8 {
            #[inline(always)]
            fn from(variant: SW_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `SW`"]
        pub type SW_R = crate::R<u8, SW_A>;
        impl SW_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SW_A {
                match self.bits {
                    3 => SW_A::HSI48,
                    0 => SW_A::HSI,
                    1 => SW_A::HSE,
                    2 => SW_A::PLL,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `HSI48`"]
            #[inline(always)]
            pub fn is_hsi48(&self) -> bool {
                *self == SW_A::HSI48
            }
            #[doc = "Checks if the value of the field is `HSI`"]
            #[inline(always)]
            pub fn is_hsi(&self) -> bool {
                *self == SW_A::HSI
            }
            #[doc = "Checks if the value of the field is `HSE`"]
            #[inline(always)]
            pub fn is_hse(&self) -> bool {
                *self == SW_A::HSE
            }
            #[doc = "Checks if the value of the field is `PLL`"]
            #[inline(always)]
            pub fn is_pll(&self) -> bool {
                *self == SW_A::PLL
            }
        }
        #[doc = "Write proxy for field `SW`"]
        pub struct SW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SW_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SW_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "HSI48 selected as system clock (when available)"]
            #[inline(always)]
            pub fn hsi48(self) -> &'a mut W {
                self.variant(SW_A::HSI48)
            }
            #[doc = "HSI selected as system clock"]
            #[inline(always)]
            pub fn hsi(self) -> &'a mut W {
                self.variant(SW_A::HSI)
            }
            #[doc = "HSE selected as system clock"]
            #[inline(always)]
            pub fn hse(self) -> &'a mut W {
                self.variant(SW_A::HSE)
            }
            #[doc = "PLL selected as system clock"]
            #[inline(always)]
            pub fn pll(self) -> &'a mut W {
                self.variant(SW_A::PLL)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "System Clock Switch Status\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SWS_A {
            #[doc = "3: HSI48 used as system clock (when avaiable)"]
            HSI48 = 3,
            #[doc = "0: HSI oscillator used as system clock"]
            HSI = 0,
            #[doc = "1: HSE oscillator used as system clock"]
            HSE = 1,
            #[doc = "2: PLL used as system clock"]
            PLL = 2,
        }
        impl From<SWS_A> for u8 {
            #[inline(always)]
            fn from(variant: SWS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `SWS`"]
        pub type SWS_R = crate::R<u8, SWS_A>;
        impl SWS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWS_A {
                match self.bits {
                    3 => SWS_A::HSI48,
                    0 => SWS_A::HSI,
                    1 => SWS_A::HSE,
                    2 => SWS_A::PLL,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `HSI48`"]
            #[inline(always)]
            pub fn is_hsi48(&self) -> bool {
                *self == SWS_A::HSI48
            }
            #[doc = "Checks if the value of the field is `HSI`"]
            #[inline(always)]
            pub fn is_hsi(&self) -> bool {
                *self == SWS_A::HSI
            }
            #[doc = "Checks if the value of the field is `HSE`"]
            #[inline(always)]
            pub fn is_hse(&self) -> bool {
                *self == SWS_A::HSE
            }
            #[doc = "Checks if the value of the field is `PLL`"]
            #[inline(always)]
            pub fn is_pll(&self) -> bool {
                *self == SWS_A::PLL
            }
        }
        #[doc = "AHB prescaler\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum HPRE_A {
            #[doc = "0: SYSCLK not divided"]
            DIV1 = 0,
            #[doc = "8: SYSCLK divided by 2"]
            DIV2 = 8,
            #[doc = "9: SYSCLK divided by 4"]
            DIV4 = 9,
            #[doc = "10: SYSCLK divided by 8"]
            DIV8 = 10,
            #[doc = "11: SYSCLK divided by 16"]
            DIV16 = 11,
            #[doc = "12: SYSCLK divided by 64"]
            DIV64 = 12,
            #[doc = "13: SYSCLK divided by 128"]
            DIV128 = 13,
            #[doc = "14: SYSCLK divided by 256"]
            DIV256 = 14,
            #[doc = "15: SYSCLK divided by 512"]
            DIV512 = 15,
        }
        impl From<HPRE_A> for u8 {
            #[inline(always)]
            fn from(variant: HPRE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `HPRE`"]
        pub type HPRE_R = crate::R<u8, HPRE_A>;
        impl HPRE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, HPRE_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(HPRE_A::DIV1),
                    8 => Val(HPRE_A::DIV2),
                    9 => Val(HPRE_A::DIV4),
                    10 => Val(HPRE_A::DIV8),
                    11 => Val(HPRE_A::DIV16),
                    12 => Val(HPRE_A::DIV64),
                    13 => Val(HPRE_A::DIV128),
                    14 => Val(HPRE_A::DIV256),
                    15 => Val(HPRE_A::DIV512),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == HPRE_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == HPRE_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == HPRE_A::DIV4
            }
            #[doc = "Checks if the value of the field is `DIV8`"]
            #[inline(always)]
            pub fn is_div8(&self) -> bool {
                *self == HPRE_A::DIV8
            }
            #[doc = "Checks if the value of the field is `DIV16`"]
            #[inline(always)]
            pub fn is_div16(&self) -> bool {
                *self == HPRE_A::DIV16
            }
            #[doc = "Checks if the value of the field is `DIV64`"]
            #[inline(always)]
            pub fn is_div64(&self) -> bool {
                *self == HPRE_A::DIV64
            }
            #[doc = "Checks if the value of the field is `DIV128`"]
            #[inline(always)]
            pub fn is_div128(&self) -> bool {
                *self == HPRE_A::DIV128
            }
            #[doc = "Checks if the value of the field is `DIV256`"]
            #[inline(always)]
            pub fn is_div256(&self) -> bool {
                *self == HPRE_A::DIV256
            }
            #[doc = "Checks if the value of the field is `DIV512`"]
            #[inline(always)]
            pub fn is_div512(&self) -> bool {
                *self == HPRE_A::DIV512
            }
        }
        #[doc = "Write proxy for field `HPRE`"]
        pub struct HPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HPRE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HPRE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "SYSCLK not divided"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(HPRE_A::DIV1)
            }
            #[doc = "SYSCLK divided by 2"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(HPRE_A::DIV2)
            }
            #[doc = "SYSCLK divided by 4"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(HPRE_A::DIV4)
            }
            #[doc = "SYSCLK divided by 8"]
            #[inline(always)]
            pub fn div8(self) -> &'a mut W {
                self.variant(HPRE_A::DIV8)
            }
            #[doc = "SYSCLK divided by 16"]
            #[inline(always)]
            pub fn div16(self) -> &'a mut W {
                self.variant(HPRE_A::DIV16)
            }
            #[doc = "SYSCLK divided by 64"]
            #[inline(always)]
            pub fn div64(self) -> &'a mut W {
                self.variant(HPRE_A::DIV64)
            }
            #[doc = "SYSCLK divided by 128"]
            #[inline(always)]
            pub fn div128(self) -> &'a mut W {
                self.variant(HPRE_A::DIV128)
            }
            #[doc = "SYSCLK divided by 256"]
            #[inline(always)]
            pub fn div256(self) -> &'a mut W {
                self.variant(HPRE_A::DIV256)
            }
            #[doc = "SYSCLK divided by 512"]
            #[inline(always)]
            pub fn div512(self) -> &'a mut W {
                self.variant(HPRE_A::DIV512)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "APB Low speed prescaler (APB1)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PPRE_A {
            #[doc = "0: HCLK not divided"]
            DIV1 = 0,
            #[doc = "4: HCLK divided by 2"]
            DIV2 = 4,
            #[doc = "5: HCLK divided by 4"]
            DIV4 = 5,
            #[doc = "6: HCLK divided by 8"]
            DIV8 = 6,
            #[doc = "7: HCLK divided by 16"]
            DIV16 = 7,
        }
        impl From<PPRE_A> for u8 {
            #[inline(always)]
            fn from(variant: PPRE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PPRE`"]
        pub type PPRE_R = crate::R<u8, PPRE_A>;
        impl PPRE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, PPRE_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(PPRE_A::DIV1),
                    4 => Val(PPRE_A::DIV2),
                    5 => Val(PPRE_A::DIV4),
                    6 => Val(PPRE_A::DIV8),
                    7 => Val(PPRE_A::DIV16),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == PPRE_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == PPRE_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == PPRE_A::DIV4
            }
            #[doc = "Checks if the value of the field is `DIV8`"]
            #[inline(always)]
            pub fn is_div8(&self) -> bool {
                *self == PPRE_A::DIV8
            }
            #[doc = "Checks if the value of the field is `DIV16`"]
            #[inline(always)]
            pub fn is_div16(&self) -> bool {
                *self == PPRE_A::DIV16
            }
        }
        #[doc = "Write proxy for field `PPRE`"]
        pub struct PPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PPRE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PPRE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "HCLK not divided"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(PPRE_A::DIV1)
            }
            #[doc = "HCLK divided by 2"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(PPRE_A::DIV2)
            }
            #[doc = "HCLK divided by 4"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(PPRE_A::DIV4)
            }
            #[doc = "HCLK divided by 8"]
            #[inline(always)]
            pub fn div8(self) -> &'a mut W {
                self.variant(PPRE_A::DIV8)
            }
            #[doc = "HCLK divided by 16"]
            #[inline(always)]
            pub fn div16(self) -> &'a mut W {
                self.variant(PPRE_A::DIV16)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 8)) | (((value as u32) & 0x07) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ADCPRE`"]
        pub type ADCPRE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADCPRE`"]
        pub struct ADCPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCPRE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "PLL input clock source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PLLSRC_A {
            #[doc = "0: HSI divided by 2 selected as PLL input clock"]
            HSI_DIV2 = 0,
            #[doc = "1: HSE divided by PREDIV selected as PLL input clock"]
            HSE_DIV_PREDIV = 1,
        }
        impl From<PLLSRC_A> for bool {
            #[inline(always)]
            fn from(variant: PLLSRC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PLLSRC`"]
        pub type PLLSRC_R = crate::R<bool, PLLSRC_A>;
        impl PLLSRC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PLLSRC_A {
                match self.bits {
                    false => PLLSRC_A::HSI_DIV2,
                    true => PLLSRC_A::HSE_DIV_PREDIV,
                }
            }
            #[doc = "Checks if the value of the field is `HSI_DIV2`"]
            #[inline(always)]
            pub fn is_hsi_div2(&self) -> bool {
                *self == PLLSRC_A::HSI_DIV2
            }
            #[doc = "Checks if the value of the field is `HSE_DIV_PREDIV`"]
            #[inline(always)]
            pub fn is_hse_div_prediv(&self) -> bool {
                *self == PLLSRC_A::HSE_DIV_PREDIV
            }
        }
        #[doc = "Write proxy for field `PLLSRC`"]
        pub struct PLLSRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLSRC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PLLSRC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "HSI divided by 2 selected as PLL input clock"]
            #[inline(always)]
            pub fn hsi_div2(self) -> &'a mut W {
                self.variant(PLLSRC_A::HSI_DIV2)
            }
            #[doc = "HSE divided by PREDIV selected as PLL input clock"]
            #[inline(always)]
            pub fn hse_div_prediv(self) -> &'a mut W {
                self.variant(PLLSRC_A::HSE_DIV_PREDIV)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "HSE divider for PLL entry. Same bit as PREDIC\\[0\\]
from CFGR2 register. Refer to it for its meaning\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PLLXTPRE_A {
            #[doc = "0: HSE clock not divided"]
            DIV1 = 0,
            #[doc = "1: HSE clock divided by 2"]
            DIV2 = 1,
        }
        impl From<PLLXTPRE_A> for bool {
            #[inline(always)]
            fn from(variant: PLLXTPRE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PLLXTPRE`"]
        pub type PLLXTPRE_R = crate::R<bool, PLLXTPRE_A>;
        impl PLLXTPRE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PLLXTPRE_A {
                match self.bits {
                    false => PLLXTPRE_A::DIV1,
                    true => PLLXTPRE_A::DIV2,
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == PLLXTPRE_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == PLLXTPRE_A::DIV2
            }
        }
        #[doc = "Write proxy for field `PLLXTPRE`"]
        pub struct PLLXTPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLXTPRE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PLLXTPRE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "HSE clock not divided"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(PLLXTPRE_A::DIV1)
            }
            #[doc = "HSE clock divided by 2"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(PLLXTPRE_A::DIV2)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "PLL Multiplication Factor\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PLLMUL_A {
            #[doc = "0: PLL input clock x2"]
            MUL2 = 0,
            #[doc = "1: PLL input clock x3"]
            MUL3 = 1,
            #[doc = "2: PLL input clock x4"]
            MUL4 = 2,
            #[doc = "3: PLL input clock x5"]
            MUL5 = 3,
            #[doc = "4: PLL input clock x6"]
            MUL6 = 4,
            #[doc = "5: PLL input clock x7"]
            MUL7 = 5,
            #[doc = "6: PLL input clock x8"]
            MUL8 = 6,
            #[doc = "7: PLL input clock x9"]
            MUL9 = 7,
            #[doc = "8: PLL input clock x10"]
            MUL10 = 8,
            #[doc = "9: PLL input clock x11"]
            MUL11 = 9,
            #[doc = "10: PLL input clock x12"]
            MUL12 = 10,
            #[doc = "11: PLL input clock x13"]
            MUL13 = 11,
            #[doc = "12: PLL input clock x14"]
            MUL14 = 12,
            #[doc = "13: PLL input clock x15"]
            MUL15 = 13,
            #[doc = "14: PLL input clock x16"]
            MUL16 = 14,
            #[doc = "15: PLL input clock x16"]
            MUL16X = 15,
        }
        impl From<PLLMUL_A> for u8 {
            #[inline(always)]
            fn from(variant: PLLMUL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PLLMUL`"]
        pub type PLLMUL_R = crate::R<u8, PLLMUL_A>;
        impl PLLMUL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PLLMUL_A {
                match self.bits {
                    0 => PLLMUL_A::MUL2,
                    1 => PLLMUL_A::MUL3,
                    2 => PLLMUL_A::MUL4,
                    3 => PLLMUL_A::MUL5,
                    4 => PLLMUL_A::MUL6,
                    5 => PLLMUL_A::MUL7,
                    6 => PLLMUL_A::MUL8,
                    7 => PLLMUL_A::MUL9,
                    8 => PLLMUL_A::MUL10,
                    9 => PLLMUL_A::MUL11,
                    10 => PLLMUL_A::MUL12,
                    11 => PLLMUL_A::MUL13,
                    12 => PLLMUL_A::MUL14,
                    13 => PLLMUL_A::MUL15,
                    14 => PLLMUL_A::MUL16,
                    15 => PLLMUL_A::MUL16X,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `MUL2`"]
            #[inline(always)]
            pub fn is_mul2(&self) -> bool {
                *self == PLLMUL_A::MUL2
            }
            #[doc = "Checks if the value of the field is `MUL3`"]
            #[inline(always)]
            pub fn is_mul3(&self) -> bool {
                *self == PLLMUL_A::MUL3
            }
            #[doc = "Checks if the value of the field is `MUL4`"]
            #[inline(always)]
            pub fn is_mul4(&self) -> bool {
                *self == PLLMUL_A::MUL4
            }
            #[doc = "Checks if the value of the field is `MUL5`"]
            #[inline(always)]
            pub fn is_mul5(&self) -> bool {
                *self == PLLMUL_A::MUL5
            }
            #[doc = "Checks if the value of the field is `MUL6`"]
            #[inline(always)]
            pub fn is_mul6(&self) -> bool {
                *self == PLLMUL_A::MUL6
            }
            #[doc = "Checks if the value of the field is `MUL7`"]
            #[inline(always)]
            pub fn is_mul7(&self) -> bool {
                *self == PLLMUL_A::MUL7
            }
            #[doc = "Checks if the value of the field is `MUL8`"]
            #[inline(always)]
            pub fn is_mul8(&self) -> bool {
                *self == PLLMUL_A::MUL8
            }
            #[doc = "Checks if the value of the field is `MUL9`"]
            #[inline(always)]
            pub fn is_mul9(&self) -> bool {
                *self == PLLMUL_A::MUL9
            }
            #[doc = "Checks if the value of the field is `MUL10`"]
            #[inline(always)]
            pub fn is_mul10(&self) -> bool {
                *self == PLLMUL_A::MUL10
            }
            #[doc = "Checks if the value of the field is `MUL11`"]
            #[inline(always)]
            pub fn is_mul11(&self) -> bool {
                *self == PLLMUL_A::MUL11
            }
            #[doc = "Checks if the value of the field is `MUL12`"]
            #[inline(always)]
            pub fn is_mul12(&self) -> bool {
                *self == PLLMUL_A::MUL12
            }
            #[doc = "Checks if the value of the field is `MUL13`"]
            #[inline(always)]
            pub fn is_mul13(&self) -> bool {
                *self == PLLMUL_A::MUL13
            }
            #[doc = "Checks if the value of the field is `MUL14`"]
            #[inline(always)]
            pub fn is_mul14(&self) -> bool {
                *self == PLLMUL_A::MUL14
            }
            #[doc = "Checks if the value of the field is `MUL15`"]
            #[inline(always)]
            pub fn is_mul15(&self) -> bool {
                *self == PLLMUL_A::MUL15
            }
            #[doc = "Checks if the value of the field is `MUL16`"]
            #[inline(always)]
            pub fn is_mul16(&self) -> bool {
                *self == PLLMUL_A::MUL16
            }
            #[doc = "Checks if the value of the field is `MUL16X`"]
            #[inline(always)]
            pub fn is_mul16x(&self) -> bool {
                *self == PLLMUL_A::MUL16X
            }
        }
        #[doc = "Write proxy for field `PLLMUL`"]
        pub struct PLLMUL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLMUL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PLLMUL_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "PLL input clock x2"]
            #[inline(always)]
            pub fn mul2(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL2)
            }
            #[doc = "PLL input clock x3"]
            #[inline(always)]
            pub fn mul3(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL3)
            }
            #[doc = "PLL input clock x4"]
            #[inline(always)]
            pub fn mul4(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL4)
            }
            #[doc = "PLL input clock x5"]
            #[inline(always)]
            pub fn mul5(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL5)
            }
            #[doc = "PLL input clock x6"]
            #[inline(always)]
            pub fn mul6(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL6)
            }
            #[doc = "PLL input clock x7"]
            #[inline(always)]
            pub fn mul7(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL7)
            }
            #[doc = "PLL input clock x8"]
            #[inline(always)]
            pub fn mul8(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL8)
            }
            #[doc = "PLL input clock x9"]
            #[inline(always)]
            pub fn mul9(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL9)
            }
            #[doc = "PLL input clock x10"]
            #[inline(always)]
            pub fn mul10(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL10)
            }
            #[doc = "PLL input clock x11"]
            #[inline(always)]
            pub fn mul11(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL11)
            }
            #[doc = "PLL input clock x12"]
            #[inline(always)]
            pub fn mul12(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL12)
            }
            #[doc = "PLL input clock x13"]
            #[inline(always)]
            pub fn mul13(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL13)
            }
            #[doc = "PLL input clock x14"]
            #[inline(always)]
            pub fn mul14(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL14)
            }
            #[doc = "PLL input clock x15"]
            #[inline(always)]
            pub fn mul15(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL15)
            }
            #[doc = "PLL input clock x16"]
            #[inline(always)]
            pub fn mul16(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL16)
            }
            #[doc = "PLL input clock x16"]
            #[inline(always)]
            pub fn mul16x(self) -> &'a mut W {
                self.variant(PLLMUL_A::MUL16X)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 18)) | (((value as u32) & 0x0f) << 18);
                self.w
            }
        }
        #[doc = "Microcontroller clock output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MCO_A {
            #[doc = "1: Internal RC 14 MHz (HSI14) oscillator clock selected"]
            HSI14 = 1,
            #[doc = "8: Internal RC 48 MHz (HSI48) oscillator clock selected"]
            HSI48 = 8,
            #[doc = "0: MCO output disabled, no clock on MCO"]
            NOMCO = 0,
            #[doc = "2: Internal low speed (LSI) oscillator clock selected"]
            LSI = 2,
            #[doc = "3: External low speed (LSE) oscillator clock selected"]
            LSE = 3,
            #[doc = "4: System clock selected"]
            SYSCLK = 4,
            #[doc = "5: Internal RC 8 MHz (HSI) oscillator clock selected"]
            HSI = 5,
            #[doc = "6: External 4-32 MHz (HSE) oscillator clock selected"]
            HSE = 6,
            #[doc = "7: PLL clock selected (divided by 1 or 2, depending en PLLNODIV)"]
            PLL = 7,
        }
        impl From<MCO_A> for u8 {
            #[inline(always)]
            fn from(variant: MCO_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MCO`"]
        pub type MCO_R = crate::R<u8, MCO_A>;
        impl MCO_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, MCO_A> {
                use crate::Variant::*;
                match self.bits {
                    1 => Val(MCO_A::HSI14),
                    8 => Val(MCO_A::HSI48),
                    0 => Val(MCO_A::NOMCO),
                    2 => Val(MCO_A::LSI),
                    3 => Val(MCO_A::LSE),
                    4 => Val(MCO_A::SYSCLK),
                    5 => Val(MCO_A::HSI),
                    6 => Val(MCO_A::HSE),
                    7 => Val(MCO_A::PLL),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `HSI14`"]
            #[inline(always)]
            pub fn is_hsi14(&self) -> bool {
                *self == MCO_A::HSI14
            }
            #[doc = "Checks if the value of the field is `HSI48`"]
            #[inline(always)]
            pub fn is_hsi48(&self) -> bool {
                *self == MCO_A::HSI48
            }
            #[doc = "Checks if the value of the field is `NOMCO`"]
            #[inline(always)]
            pub fn is_no_mco(&self) -> bool {
                *self == MCO_A::NOMCO
            }
            #[doc = "Checks if the value of the field is `LSI`"]
            #[inline(always)]
            pub fn is_lsi(&self) -> bool {
                *self == MCO_A::LSI
            }
            #[doc = "Checks if the value of the field is `LSE`"]
            #[inline(always)]
            pub fn is_lse(&self) -> bool {
                *self == MCO_A::LSE
            }
            #[doc = "Checks if the value of the field is `SYSCLK`"]
            #[inline(always)]
            pub fn is_sysclk(&self) -> bool {
                *self == MCO_A::SYSCLK
            }
            #[doc = "Checks if the value of the field is `HSI`"]
            #[inline(always)]
            pub fn is_hsi(&self) -> bool {
                *self == MCO_A::HSI
            }
            #[doc = "Checks if the value of the field is `HSE`"]
            #[inline(always)]
            pub fn is_hse(&self) -> bool {
                *self == MCO_A::HSE
            }
            #[doc = "Checks if the value of the field is `PLL`"]
            #[inline(always)]
            pub fn is_pll(&self) -> bool {
                *self == MCO_A::PLL
            }
        }
        #[doc = "Write proxy for field `MCO`"]
        pub struct MCO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCO_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MCO_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Internal RC 14 MHz (HSI14) oscillator clock selected"]
            #[inline(always)]
            pub fn hsi14(self) -> &'a mut W {
                self.variant(MCO_A::HSI14)
            }
            #[doc = "Internal RC 48 MHz (HSI48) oscillator clock selected"]
            #[inline(always)]
            pub fn hsi48(self) -> &'a mut W {
                self.variant(MCO_A::HSI48)
            }
            #[doc = "MCO output disabled, no clock on MCO"]
            #[inline(always)]
            pub fn no_mco(self) -> &'a mut W {
                self.variant(MCO_A::NOMCO)
            }
            #[doc = "Internal low speed (LSI) oscillator clock selected"]
            #[inline(always)]
            pub fn lsi(self) -> &'a mut W {
                self.variant(MCO_A::LSI)
            }
            #[doc = "External low speed (LSE) oscillator clock selected"]
            #[inline(always)]
            pub fn lse(self) -> &'a mut W {
                self.variant(MCO_A::LSE)
            }
            #[doc = "System clock selected"]
            #[inline(always)]
            pub fn sysclk(self) -> &'a mut W {
                self.variant(MCO_A::SYSCLK)
            }
            #[doc = "Internal RC 8 MHz (HSI) oscillator clock selected"]
            #[inline(always)]
            pub fn hsi(self) -> &'a mut W {
                self.variant(MCO_A::HSI)
            }
            #[doc = "External 4-32 MHz (HSE) oscillator clock selected"]
            #[inline(always)]
            pub fn hse(self) -> &'a mut W {
                self.variant(MCO_A::HSE)
            }
            #[doc = "PLL clock selected (divided by 1 or 2, depending en PLLNODIV)"]
            #[inline(always)]
            pub fn pll(self) -> &'a mut W {
                self.variant(MCO_A::PLL)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Microcontroller Clock Output Prescaler\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MCOPRE_A {
            #[doc = "0: MCO is divided by 1"]
            DIV1 = 0,
            #[doc = "1: MCO is divided by 2"]
            DIV2 = 1,
            #[doc = "2: MCO is divided by 4"]
            DIV4 = 2,
            #[doc = "3: MCO is divided by 8"]
            DIV8 = 3,
            #[doc = "4: MCO is divided by 16"]
            DIV16 = 4,
            #[doc = "5: MCO is divided by 32"]
            DIV32 = 5,
            #[doc = "6: MCO is divided by 64"]
            DIV64 = 6,
            #[doc = "7: MCO is divided by 128"]
            DIV128 = 7,
        }
        impl From<MCOPRE_A> for u8 {
            #[inline(always)]
            fn from(variant: MCOPRE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MCOPRE`"]
        pub type MCOPRE_R = crate::R<u8, MCOPRE_A>;
        impl MCOPRE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MCOPRE_A {
                match self.bits {
                    0 => MCOPRE_A::DIV1,
                    1 => MCOPRE_A::DIV2,
                    2 => MCOPRE_A::DIV4,
                    3 => MCOPRE_A::DIV8,
                    4 => MCOPRE_A::DIV16,
                    5 => MCOPRE_A::DIV32,
                    6 => MCOPRE_A::DIV64,
                    7 => MCOPRE_A::DIV128,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == MCOPRE_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == MCOPRE_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == MCOPRE_A::DIV4
            }
            #[doc = "Checks if the value of the field is `DIV8`"]
            #[inline(always)]
            pub fn is_div8(&self) -> bool {
                *self == MCOPRE_A::DIV8
            }
            #[doc = "Checks if the value of the field is `DIV16`"]
            #[inline(always)]
            pub fn is_div16(&self) -> bool {
                *self == MCOPRE_A::DIV16
            }
            #[doc = "Checks if the value of the field is `DIV32`"]
            #[inline(always)]
            pub fn is_div32(&self) -> bool {
                *self == MCOPRE_A::DIV32
            }
            #[doc = "Checks if the value of the field is `DIV64`"]
            #[inline(always)]
            pub fn is_div64(&self) -> bool {
                *self == MCOPRE_A::DIV64
            }
            #[doc = "Checks if the value of the field is `DIV128`"]
            #[inline(always)]
            pub fn is_div128(&self) -> bool {
                *self == MCOPRE_A::DIV128
            }
        }
        #[doc = "Write proxy for field `MCOPRE`"]
        pub struct MCOPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCOPRE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MCOPRE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "MCO is divided by 1"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(MCOPRE_A::DIV1)
            }
            #[doc = "MCO is divided by 2"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(MCOPRE_A::DIV2)
            }
            #[doc = "MCO is divided by 4"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(MCOPRE_A::DIV4)
            }
            #[doc = "MCO is divided by 8"]
            #[inline(always)]
            pub fn div8(self) -> &'a mut W {
                self.variant(MCOPRE_A::DIV8)
            }
            #[doc = "MCO is divided by 16"]
            #[inline(always)]
            pub fn div16(self) -> &'a mut W {
                self.variant(MCOPRE_A::DIV16)
            }
            #[doc = "MCO is divided by 32"]
            #[inline(always)]
            pub fn div32(self) -> &'a mut W {
                self.variant(MCOPRE_A::DIV32)
            }
            #[doc = "MCO is divided by 64"]
            #[inline(always)]
            pub fn div64(self) -> &'a mut W {
                self.variant(MCOPRE_A::DIV64)
            }
            #[doc = "MCO is divided by 128"]
            #[inline(always)]
            pub fn div128(self) -> &'a mut W {
                self.variant(MCOPRE_A::DIV128)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 28)) | (((value as u32) & 0x07) << 28);
                self.w
            }
        }
        #[doc = "PLL clock not divided for MCO\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PLLNODIV_A {
            #[doc = "0: PLL is divided by 2 for MCO"]
            DIV2 = 0,
            #[doc = "1: PLL is not divided for MCO"]
            DIV1 = 1,
        }
        impl From<PLLNODIV_A> for bool {
            #[inline(always)]
            fn from(variant: PLLNODIV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PLLNODIV`"]
        pub type PLLNODIV_R = crate::R<bool, PLLNODIV_A>;
        impl PLLNODIV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PLLNODIV_A {
                match self.bits {
                    false => PLLNODIV_A::DIV2,
                    true => PLLNODIV_A::DIV1,
                }
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == PLLNODIV_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == PLLNODIV_A::DIV1
            }
        }
        #[doc = "Write proxy for field `PLLNODIV`"]
        pub struct PLLNODIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLNODIV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PLLNODIV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PLL is divided by 2 for MCO"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(PLLNODIV_A::DIV2)
            }
            #[doc = "PLL is not divided for MCO"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(PLLNODIV_A::DIV1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - System clock Switch"]
            #[inline(always)]
            pub fn sw(&self) -> SW_R {
                SW_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - System Clock Switch Status"]
            #[inline(always)]
            pub fn sws(&self) -> SWS_R {
                SWS_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 4:7 - AHB prescaler"]
            #[inline(always)]
            pub fn hpre(&self) -> HPRE_R {
                HPRE_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:10 - APB Low speed prescaler (APB1)"]
            #[inline(always)]
            pub fn ppre(&self) -> PPRE_R {
                PPRE_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bit 14 - APCPRE is deprecated. See ADC field in CFGR2 register."]
            #[inline(always)]
            pub fn adcpre(&self) -> ADCPRE_R {
                ADCPRE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 16 - PLL input clock source"]
            #[inline(always)]
            pub fn pllsrc(&self) -> PLLSRC_R {
                PLLSRC_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - HSE divider for PLL entry. Same bit as PREDIC\\[0\\]
from CFGR2 register. Refer to it for its meaning"]
            #[inline(always)]
            pub fn pllxtpre(&self) -> PLLXTPRE_R {
                PLLXTPRE_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bits 18:21 - PLL Multiplication Factor"]
            #[inline(always)]
            pub fn pllmul(&self) -> PLLMUL_R {
                PLLMUL_R::new(((self.bits >> 18) & 0x0f) as u8)
            }
            #[doc = "Bits 24:26 - Microcontroller clock output"]
            #[inline(always)]
            pub fn mco(&self) -> MCO_R {
                MCO_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bits 28:30 - Microcontroller Clock Output Prescaler"]
            #[inline(always)]
            pub fn mcopre(&self) -> MCOPRE_R {
                MCOPRE_R::new(((self.bits >> 28) & 0x07) as u8)
            }
            #[doc = "Bit 31 - PLL clock not divided for MCO"]
            #[inline(always)]
            pub fn pllnodiv(&self) -> PLLNODIV_R {
                PLLNODIV_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - System clock Switch"]
            #[inline(always)]
            pub fn sw(&mut self) -> SW_W {
                SW_W { w: self }
            }
            #[doc = "Bits 4:7 - AHB prescaler"]
            #[inline(always)]
            pub fn hpre(&mut self) -> HPRE_W {
                HPRE_W { w: self }
            }
            #[doc = "Bits 8:10 - APB Low speed prescaler (APB1)"]
            #[inline(always)]
            pub fn ppre(&mut self) -> PPRE_W {
                PPRE_W { w: self }
            }
            #[doc = "Bit 14 - APCPRE is deprecated. See ADC field in CFGR2 register."]
            #[inline(always)]
            pub fn adcpre(&mut self) -> ADCPRE_W {
                ADCPRE_W { w: self }
            }
            #[doc = "Bit 16 - PLL input clock source"]
            #[inline(always)]
            pub fn pllsrc(&mut self) -> PLLSRC_W {
                PLLSRC_W { w: self }
            }
            #[doc = "Bit 17 - HSE divider for PLL entry. Same bit as PREDIC\\[0\\]
from CFGR2 register. Refer to it for its meaning"]
            #[inline(always)]
            pub fn pllxtpre(&mut self) -> PLLXTPRE_W {
                PLLXTPRE_W { w: self }
            }
            #[doc = "Bits 18:21 - PLL Multiplication Factor"]
            #[inline(always)]
            pub fn pllmul(&mut self) -> PLLMUL_W {
                PLLMUL_W { w: self }
            }
            #[doc = "Bits 24:26 - Microcontroller clock output"]
            #[inline(always)]
            pub fn mco(&mut self) -> MCO_W {
                MCO_W { w: self }
            }
            #[doc = "Bits 28:30 - Microcontroller Clock Output Prescaler"]
            #[inline(always)]
            pub fn mcopre(&mut self) -> MCOPRE_W {
                MCOPRE_W { w: self }
            }
            #[doc = "Bit 31 - PLL clock not divided for MCO"]
            #[inline(always)]
            pub fn pllnodiv(&mut self) -> PLLNODIV_W {
                PLLNODIV_W { w: self }
            }
        }
    }
    #[doc = "Clock interrupt register (RCC_CIR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cir](cir) module"]
    pub type CIR = crate::Reg<u32, _CIR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CIR;
    #[doc = "`read()` method returns [cir::R](cir::R) reader structure"]
    impl crate::Readable for CIR {}
    #[doc = "`write(|w| ..)` method takes [cir::W](cir::W) writer structure"]
    impl crate::Writable for CIR {}
    #[doc = "Clock interrupt register (RCC_CIR)"]
    pub mod cir {
        #[doc = "Reader of register CIR"]
        pub type R = crate::R<u32, super::CIR>;
        #[doc = "Writer for register CIR"]
        pub type W = crate::W<u32, super::CIR>;
        #[doc = "Register CIR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CIR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "LSI Ready Interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LSIRDYF_A {
            #[doc = "0: No clock ready interrupt"]
            NOTINTERRUPTED = 0,
            #[doc = "1: Clock ready interrupt"]
            INTERRUPTED = 1,
        }
        impl From<LSIRDYF_A> for bool {
            #[inline(always)]
            fn from(variant: LSIRDYF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LSIRDYF`"]
        pub type LSIRDYF_R = crate::R<bool, LSIRDYF_A>;
        impl LSIRDYF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LSIRDYF_A {
                match self.bits {
                    false => LSIRDYF_A::NOTINTERRUPTED,
                    true => LSIRDYF_A::INTERRUPTED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTINTERRUPTED`"]
            #[inline(always)]
            pub fn is_not_interrupted(&self) -> bool {
                *self == LSIRDYF_A::NOTINTERRUPTED
            }
            #[doc = "Checks if the value of the field is `INTERRUPTED`"]
            #[inline(always)]
            pub fn is_interrupted(&self) -> bool {
                *self == LSIRDYF_A::INTERRUPTED
            }
        }
        #[doc = "LSE Ready Interrupt flag"]
        pub type LSERDYF_A = LSIRDYF_A;
        #[doc = "Reader of field `LSERDYF`"]
        pub type LSERDYF_R = crate::R<bool, LSIRDYF_A>;
        #[doc = "HSI Ready Interrupt flag"]
        pub type HSIRDYF_A = LSIRDYF_A;
        #[doc = "Reader of field `HSIRDYF`"]
        pub type HSIRDYF_R = crate::R<bool, LSIRDYF_A>;
        #[doc = "HSE Ready Interrupt flag"]
        pub type HSERDYF_A = LSIRDYF_A;
        #[doc = "Reader of field `HSERDYF`"]
        pub type HSERDYF_R = crate::R<bool, LSIRDYF_A>;
        #[doc = "PLL Ready Interrupt flag"]
        pub type PLLRDYF_A = LSIRDYF_A;
        #[doc = "Reader of field `PLLRDYF`"]
        pub type PLLRDYF_R = crate::R<bool, LSIRDYF_A>;
        #[doc = "HSI14 ready interrupt flag"]
        pub type HSI14RDYF_A = LSIRDYF_A;
        #[doc = "Reader of field `HSI14RDYF`"]
        pub type HSI14RDYF_R = crate::R<bool, LSIRDYF_A>;
        #[doc = "HSI48 ready interrupt flag"]
        pub type HSI48RDYF_A = LSIRDYF_A;
        #[doc = "Reader of field `HSI48RDYF`"]
        pub type HSI48RDYF_R = crate::R<bool, LSIRDYF_A>;
        #[doc = "Clock Security System Interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CSSF_A {
            #[doc = "0: No clock security interrupt caused by HSE clock failure"]
            NOTINTERRUPTED = 0,
            #[doc = "1: Clock security interrupt caused by HSE clock failure"]
            INTERRUPTED = 1,
        }
        impl From<CSSF_A> for bool {
            #[inline(always)]
            fn from(variant: CSSF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CSSF`"]
        pub type CSSF_R = crate::R<bool, CSSF_A>;
        impl CSSF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CSSF_A {
                match self.bits {
                    false => CSSF_A::NOTINTERRUPTED,
                    true => CSSF_A::INTERRUPTED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTINTERRUPTED`"]
            #[inline(always)]
            pub fn is_not_interrupted(&self) -> bool {
                *self == CSSF_A::NOTINTERRUPTED
            }
            #[doc = "Checks if the value of the field is `INTERRUPTED`"]
            #[inline(always)]
            pub fn is_interrupted(&self) -> bool {
                *self == CSSF_A::INTERRUPTED
            }
        }
        #[doc = "LSI Ready Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LSIRDYIE_A {
            #[doc = "0: Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Interrupt enabled"]
            ENABLED = 1,
        }
        impl From<LSIRDYIE_A> for bool {
            #[inline(always)]
            fn from(variant: LSIRDYIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LSIRDYIE`"]
        pub type LSIRDYIE_R = crate::R<bool, LSIRDYIE_A>;
        impl LSIRDYIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LSIRDYIE_A {
                match self.bits {
                    false => LSIRDYIE_A::DISABLED,
                    true => LSIRDYIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == LSIRDYIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == LSIRDYIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `LSIRDYIE`"]
        pub struct LSIRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSIRDYIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LSIRDYIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(LSIRDYIE_A::DISABLED)
            }
            #[doc = "Interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(LSIRDYIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "LSE Ready Interrupt Enable"]
        pub type LSERDYIE_A = LSIRDYIE_A;
        #[doc = "Reader of field `LSERDYIE`"]
        pub type LSERDYIE_R = crate::R<bool, LSIRDYIE_A>;
        #[doc = "Write proxy for field `LSERDYIE`"]
        pub struct LSERDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSERDYIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LSERDYIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(LSIRDYIE_A::DISABLED)
            }
            #[doc = "Interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(LSIRDYIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "HSI Ready Interrupt Enable"]
        pub type HSIRDYIE_A = LSIRDYIE_A;
        #[doc = "Reader of field `HSIRDYIE`"]
        pub type HSIRDYIE_R = crate::R<bool, LSIRDYIE_A>;
        #[doc = "Write proxy for field `HSIRDYIE`"]
        pub struct HSIRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSIRDYIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HSIRDYIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(LSIRDYIE_A::DISABLED)
            }
            #[doc = "Interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(LSIRDYIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "HSE Ready Interrupt Enable"]
        pub type HSERDYIE_A = LSIRDYIE_A;
        #[doc = "Reader of field `HSERDYIE`"]
        pub type HSERDYIE_R = crate::R<bool, LSIRDYIE_A>;
        #[doc = "Write proxy for field `HSERDYIE`"]
        pub struct HSERDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSERDYIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HSERDYIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(LSIRDYIE_A::DISABLED)
            }
            #[doc = "Interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(LSIRDYIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "PLL Ready Interrupt Enable"]
        pub type PLLRDYIE_A = LSIRDYIE_A;
        #[doc = "Reader of field `PLLRDYIE`"]
        pub type PLLRDYIE_R = crate::R<bool, LSIRDYIE_A>;
        #[doc = "Write proxy for field `PLLRDYIE`"]
        pub struct PLLRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLRDYIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PLLRDYIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(LSIRDYIE_A::DISABLED)
            }
            #[doc = "Interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(LSIRDYIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "HSI14 ready interrupt enable"]
        pub type HSI14RDYIE_A = LSIRDYIE_A;
        #[doc = "Reader of field `HSI14RDYIE`"]
        pub type HSI14RDYIE_R = crate::R<bool, LSIRDYIE_A>;
        #[doc = "Write proxy for field `HSI14RDYIE`"]
        pub struct HSI14RDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSI14RDYIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HSI14RDYIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(LSIRDYIE_A::DISABLED)
            }
            #[doc = "Interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(LSIRDYIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "HSI48 ready interrupt enable"]
        pub type HSI48RDYIE_A = LSIRDYIE_A;
        #[doc = "Reader of field `HSI48RDYIE`"]
        pub type HSI48RDYIE_R = crate::R<bool, LSIRDYIE_A>;
        #[doc = "Write proxy for field `HSI48RDYIE`"]
        pub struct HSI48RDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSI48RDYIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HSI48RDYIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(LSIRDYIE_A::DISABLED)
            }
            #[doc = "Interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(LSIRDYIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "LSI Ready Interrupt Clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LSIRDYC_AW {
            #[doc = "1: Clear interrupt flag"]
            CLEAR = 1,
        }
        impl From<LSIRDYC_AW> for bool {
            #[inline(always)]
            fn from(variant: LSIRDYC_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `LSIRDYC`"]
        pub struct LSIRDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSIRDYC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LSIRDYC_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear interrupt flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(LSIRDYC_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "LSE Ready Interrupt Clear"]
        pub type LSERDYC_AW = LSIRDYC_AW;
        #[doc = "Write proxy for field `LSERDYC`"]
        pub struct LSERDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSERDYC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LSERDYC_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear interrupt flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(LSIRDYC_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "HSI Ready Interrupt Clear"]
        pub type HSIRDYC_AW = LSIRDYC_AW;
        #[doc = "Write proxy for field `HSIRDYC`"]
        pub struct HSIRDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSIRDYC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HSIRDYC_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear interrupt flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(LSIRDYC_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "HSE Ready Interrupt Clear"]
        pub type HSERDYC_AW = LSIRDYC_AW;
        #[doc = "Write proxy for field `HSERDYC`"]
        pub struct HSERDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSERDYC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HSERDYC_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear interrupt flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(LSIRDYC_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "PLL Ready Interrupt Clear"]
        pub type PLLRDYC_AW = LSIRDYC_AW;
        #[doc = "Write proxy for field `PLLRDYC`"]
        pub struct PLLRDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLRDYC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PLLRDYC_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear interrupt flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(LSIRDYC_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "HSI 14 MHz Ready Interrupt Clear"]
        pub type HSI14RDYC_AW = LSIRDYC_AW;
        #[doc = "Write proxy for field `HSI14RDYC`"]
        pub struct HSI14RDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSI14RDYC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HSI14RDYC_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear interrupt flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(LSIRDYC_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "HSI48 Ready Interrupt Clear"]
        pub type HSI48RDYC_AW = LSIRDYC_AW;
        #[doc = "Write proxy for field `HSI48RDYC`"]
        pub struct HSI48RDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSI48RDYC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HSI48RDYC_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear interrupt flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(LSIRDYC_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Clock security system interrupt clear\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CSSC_AW {
            #[doc = "1: Clear CSSF flag"]
            CLEAR = 1,
        }
        impl From<CSSC_AW> for bool {
            #[inline(always)]
            fn from(variant: CSSC_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `CSSC`"]
        pub struct CSSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSSC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CSSC_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear CSSF flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CSSC_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - LSI Ready Interrupt flag"]
            #[inline(always)]
            pub fn lsirdyf(&self) -> LSIRDYF_R {
                LSIRDYF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - LSE Ready Interrupt flag"]
            #[inline(always)]
            pub fn lserdyf(&self) -> LSERDYF_R {
                LSERDYF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - HSI Ready Interrupt flag"]
            #[inline(always)]
            pub fn hsirdyf(&self) -> HSIRDYF_R {
                HSIRDYF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - HSE Ready Interrupt flag"]
            #[inline(always)]
            pub fn hserdyf(&self) -> HSERDYF_R {
                HSERDYF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - PLL Ready Interrupt flag"]
            #[inline(always)]
            pub fn pllrdyf(&self) -> PLLRDYF_R {
                PLLRDYF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - HSI14 ready interrupt flag"]
            #[inline(always)]
            pub fn hsi14rdyf(&self) -> HSI14RDYF_R {
                HSI14RDYF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - HSI48 ready interrupt flag"]
            #[inline(always)]
            pub fn hsi48rdyf(&self) -> HSI48RDYF_R {
                HSI48RDYF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Clock Security System Interrupt flag"]
            #[inline(always)]
            pub fn cssf(&self) -> CSSF_R {
                CSSF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - LSI Ready Interrupt Enable"]
            #[inline(always)]
            pub fn lsirdyie(&self) -> LSIRDYIE_R {
                LSIRDYIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - LSE Ready Interrupt Enable"]
            #[inline(always)]
            pub fn lserdyie(&self) -> LSERDYIE_R {
                LSERDYIE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - HSI Ready Interrupt Enable"]
            #[inline(always)]
            pub fn hsirdyie(&self) -> HSIRDYIE_R {
                HSIRDYIE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - HSE Ready Interrupt Enable"]
            #[inline(always)]
            pub fn hserdyie(&self) -> HSERDYIE_R {
                HSERDYIE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - PLL Ready Interrupt Enable"]
            #[inline(always)]
            pub fn pllrdyie(&self) -> PLLRDYIE_R {
                PLLRDYIE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - HSI14 ready interrupt enable"]
            #[inline(always)]
            pub fn hsi14rdyie(&self) -> HSI14RDYIE_R {
                HSI14RDYIE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - HSI48 ready interrupt enable"]
            #[inline(always)]
            pub fn hsi48rdyie(&self) -> HSI48RDYIE_R {
                HSI48RDYIE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - LSI Ready Interrupt Enable"]
            #[inline(always)]
            pub fn lsirdyie(&mut self) -> LSIRDYIE_W {
                LSIRDYIE_W { w: self }
            }
            #[doc = "Bit 9 - LSE Ready Interrupt Enable"]
            #[inline(always)]
            pub fn lserdyie(&mut self) -> LSERDYIE_W {
                LSERDYIE_W { w: self }
            }
            #[doc = "Bit 10 - HSI Ready Interrupt Enable"]
            #[inline(always)]
            pub fn hsirdyie(&mut self) -> HSIRDYIE_W {
                HSIRDYIE_W { w: self }
            }
            #[doc = "Bit 11 - HSE Ready Interrupt Enable"]
            #[inline(always)]
            pub fn hserdyie(&mut self) -> HSERDYIE_W {
                HSERDYIE_W { w: self }
            }
            #[doc = "Bit 12 - PLL Ready Interrupt Enable"]
            #[inline(always)]
            pub fn pllrdyie(&mut self) -> PLLRDYIE_W {
                PLLRDYIE_W { w: self }
            }
            #[doc = "Bit 13 - HSI14 ready interrupt enable"]
            #[inline(always)]
            pub fn hsi14rdyie(&mut self) -> HSI14RDYIE_W {
                HSI14RDYIE_W { w: self }
            }
            #[doc = "Bit 14 - HSI48 ready interrupt enable"]
            #[inline(always)]
            pub fn hsi48rdyie(&mut self) -> HSI48RDYIE_W {
                HSI48RDYIE_W { w: self }
            }
            #[doc = "Bit 16 - LSI Ready Interrupt Clear"]
            #[inline(always)]
            pub fn lsirdyc(&mut self) -> LSIRDYC_W {
                LSIRDYC_W { w: self }
            }
            #[doc = "Bit 17 - LSE Ready Interrupt Clear"]
            #[inline(always)]
            pub fn lserdyc(&mut self) -> LSERDYC_W {
                LSERDYC_W { w: self }
            }
            #[doc = "Bit 18 - HSI Ready Interrupt Clear"]
            #[inline(always)]
            pub fn hsirdyc(&mut self) -> HSIRDYC_W {
                HSIRDYC_W { w: self }
            }
            #[doc = "Bit 19 - HSE Ready Interrupt Clear"]
            #[inline(always)]
            pub fn hserdyc(&mut self) -> HSERDYC_W {
                HSERDYC_W { w: self }
            }
            #[doc = "Bit 20 - PLL Ready Interrupt Clear"]
            #[inline(always)]
            pub fn pllrdyc(&mut self) -> PLLRDYC_W {
                PLLRDYC_W { w: self }
            }
            #[doc = "Bit 21 - HSI 14 MHz Ready Interrupt Clear"]
            #[inline(always)]
            pub fn hsi14rdyc(&mut self) -> HSI14RDYC_W {
                HSI14RDYC_W { w: self }
            }
            #[doc = "Bit 22 - HSI48 Ready Interrupt Clear"]
            #[inline(always)]
            pub fn hsi48rdyc(&mut self) -> HSI48RDYC_W {
                HSI48RDYC_W { w: self }
            }
            #[doc = "Bit 23 - Clock security system interrupt clear"]
            #[inline(always)]
            pub fn cssc(&mut self) -> CSSC_W {
                CSSC_W { w: self }
            }
        }
    }
    #[doc = "APB2 peripheral reset register (RCC_APB2RSTR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb2rstr](apb2rstr) module"]
    pub type APB2RSTR = crate::Reg<u32, _APB2RSTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB2RSTR;
    #[doc = "`read()` method returns [apb2rstr::R](apb2rstr::R) reader structure"]
    impl crate::Readable for APB2RSTR {}
    #[doc = "`write(|w| ..)` method takes [apb2rstr::W](apb2rstr::W) writer structure"]
    impl crate::Writable for APB2RSTR {}
    #[doc = "APB2 peripheral reset register (RCC_APB2RSTR)"]
    pub mod apb2rstr {
        #[doc = "Reader of register APB2RSTR"]
        pub type R = crate::R<u32, super::APB2RSTR>;
        #[doc = "Writer for register APB2RSTR"]
        pub type W = crate::W<u32, super::APB2RSTR>;
        #[doc = "Register APB2RSTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB2RSTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "SYSCFG and COMP reset\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SYSCFGRST_A {
            #[doc = "1: Reset the selected module"]
            RESET = 1,
        }
        impl From<SYSCFGRST_A> for bool {
            #[inline(always)]
            fn from(variant: SYSCFGRST_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SYSCFGRST`"]
        pub type SYSCFGRST_R = crate::R<bool, SYSCFGRST_A>;
        impl SYSCFGRST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, SYSCFGRST_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(SYSCFGRST_A::RESET),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == SYSCFGRST_A::RESET
            }
        }
        #[doc = "Write proxy for field `SYSCFGRST`"]
        pub struct SYSCFGRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYSCFGRST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SYSCFGRST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(SYSCFGRST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "ADC interface reset"]
        pub type ADCRST_A = SYSCFGRST_A;
        #[doc = "Reader of field `ADCRST`"]
        pub type ADCRST_R = crate::R<bool, SYSCFGRST_A>;
        #[doc = "Write proxy for field `ADCRST`"]
        pub struct ADCRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCRST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADCRST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(SYSCFGRST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "TIM1 timer reset"]
        pub type TIM1RST_A = SYSCFGRST_A;
        #[doc = "Reader of field `TIM1RST`"]
        pub type TIM1RST_R = crate::R<bool, SYSCFGRST_A>;
        #[doc = "Write proxy for field `TIM1RST`"]
        pub struct TIM1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM1RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM1RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(SYSCFGRST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "SPI 1 reset"]
        pub type SPI1RST_A = SYSCFGRST_A;
        #[doc = "Reader of field `SPI1RST`"]
        pub type SPI1RST_R = crate::R<bool, SYSCFGRST_A>;
        #[doc = "Write proxy for field `SPI1RST`"]
        pub struct SPI1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI1RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPI1RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(SYSCFGRST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "USART1 reset"]
        pub type USART1RST_A = SYSCFGRST_A;
        #[doc = "Reader of field `USART1RST`"]
        pub type USART1RST_R = crate::R<bool, SYSCFGRST_A>;
        #[doc = "Write proxy for field `USART1RST`"]
        pub struct USART1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART1RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(SYSCFGRST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "TIM15 timer reset"]
        pub type TIM15RST_A = SYSCFGRST_A;
        #[doc = "Reader of field `TIM15RST`"]
        pub type TIM15RST_R = crate::R<bool, SYSCFGRST_A>;
        #[doc = "Write proxy for field `TIM15RST`"]
        pub struct TIM15RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM15RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM15RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(SYSCFGRST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "TIM16 timer reset"]
        pub type TIM16RST_A = SYSCFGRST_A;
        #[doc = "Reader of field `TIM16RST`"]
        pub type TIM16RST_R = crate::R<bool, SYSCFGRST_A>;
        #[doc = "Write proxy for field `TIM16RST`"]
        pub struct TIM16RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM16RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM16RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(SYSCFGRST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "TIM17 timer reset"]
        pub type TIM17RST_A = SYSCFGRST_A;
        #[doc = "Reader of field `TIM17RST`"]
        pub type TIM17RST_R = crate::R<bool, SYSCFGRST_A>;
        #[doc = "Write proxy for field `TIM17RST`"]
        pub struct TIM17RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM17RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM17RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(SYSCFGRST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Debug MCU reset"]
        pub type DBGMCURST_A = SYSCFGRST_A;
        #[doc = "Reader of field `DBGMCURST`"]
        pub type DBGMCURST_R = crate::R<bool, SYSCFGRST_A>;
        #[doc = "Write proxy for field `DBGMCURST`"]
        pub struct DBGMCURST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBGMCURST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DBGMCURST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(SYSCFGRST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "USART6 reset"]
        pub type USART6RST_A = SYSCFGRST_A;
        #[doc = "Reader of field `USART6RST`"]
        pub type USART6RST_R = crate::R<bool, SYSCFGRST_A>;
        #[doc = "Write proxy for field `USART6RST`"]
        pub struct USART6RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART6RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART6RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(SYSCFGRST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - SYSCFG and COMP reset"]
            #[inline(always)]
            pub fn syscfgrst(&self) -> SYSCFGRST_R {
                SYSCFGRST_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 9 - ADC interface reset"]
            #[inline(always)]
            pub fn adcrst(&self) -> ADCRST_R {
                ADCRST_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TIM1 timer reset"]
            #[inline(always)]
            pub fn tim1rst(&self) -> TIM1RST_R {
                TIM1RST_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - SPI 1 reset"]
            #[inline(always)]
            pub fn spi1rst(&self) -> SPI1RST_R {
                SPI1RST_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 14 - USART1 reset"]
            #[inline(always)]
            pub fn usart1rst(&self) -> USART1RST_R {
                USART1RST_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 16 - TIM15 timer reset"]
            #[inline(always)]
            pub fn tim15rst(&self) -> TIM15RST_R {
                TIM15RST_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - TIM16 timer reset"]
            #[inline(always)]
            pub fn tim16rst(&self) -> TIM16RST_R {
                TIM16RST_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - TIM17 timer reset"]
            #[inline(always)]
            pub fn tim17rst(&self) -> TIM17RST_R {
                TIM17RST_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Debug MCU reset"]
            #[inline(always)]
            pub fn dbgmcurst(&self) -> DBGMCURST_R {
                DBGMCURST_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 5 - USART6 reset"]
            #[inline(always)]
            pub fn usart6rst(&self) -> USART6RST_R {
                USART6RST_R::new(((self.bits >> 5) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - SYSCFG and COMP reset"]
            #[inline(always)]
            pub fn syscfgrst(&mut self) -> SYSCFGRST_W {
                SYSCFGRST_W { w: self }
            }
            #[doc = "Bit 9 - ADC interface reset"]
            #[inline(always)]
            pub fn adcrst(&mut self) -> ADCRST_W {
                ADCRST_W { w: self }
            }
            #[doc = "Bit 11 - TIM1 timer reset"]
            #[inline(always)]
            pub fn tim1rst(&mut self) -> TIM1RST_W {
                TIM1RST_W { w: self }
            }
            #[doc = "Bit 12 - SPI 1 reset"]
            #[inline(always)]
            pub fn spi1rst(&mut self) -> SPI1RST_W {
                SPI1RST_W { w: self }
            }
            #[doc = "Bit 14 - USART1 reset"]
            #[inline(always)]
            pub fn usart1rst(&mut self) -> USART1RST_W {
                USART1RST_W { w: self }
            }
            #[doc = "Bit 16 - TIM15 timer reset"]
            #[inline(always)]
            pub fn tim15rst(&mut self) -> TIM15RST_W {
                TIM15RST_W { w: self }
            }
            #[doc = "Bit 17 - TIM16 timer reset"]
            #[inline(always)]
            pub fn tim16rst(&mut self) -> TIM16RST_W {
                TIM16RST_W { w: self }
            }
            #[doc = "Bit 18 - TIM17 timer reset"]
            #[inline(always)]
            pub fn tim17rst(&mut self) -> TIM17RST_W {
                TIM17RST_W { w: self }
            }
            #[doc = "Bit 22 - Debug MCU reset"]
            #[inline(always)]
            pub fn dbgmcurst(&mut self) -> DBGMCURST_W {
                DBGMCURST_W { w: self }
            }
            #[doc = "Bit 5 - USART6 reset"]
            #[inline(always)]
            pub fn usart6rst(&mut self) -> USART6RST_W {
                USART6RST_W { w: self }
            }
        }
    }
    #[doc = "APB1 peripheral reset register (RCC_APB1RSTR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb1rstr](apb1rstr) module"]
    pub type APB1RSTR = crate::Reg<u32, _APB1RSTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB1RSTR;
    #[doc = "`read()` method returns [apb1rstr::R](apb1rstr::R) reader structure"]
    impl crate::Readable for APB1RSTR {}
    #[doc = "`write(|w| ..)` method takes [apb1rstr::W](apb1rstr::W) writer structure"]
    impl crate::Writable for APB1RSTR {}
    #[doc = "APB1 peripheral reset register (RCC_APB1RSTR)"]
    pub mod apb1rstr {
        #[doc = "Reader of register APB1RSTR"]
        pub type R = crate::R<u32, super::APB1RSTR>;
        #[doc = "Writer for register APB1RSTR"]
        pub type W = crate::W<u32, super::APB1RSTR>;
        #[doc = "Register APB1RSTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB1RSTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Timer 3 reset\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIM3RST_A {
            #[doc = "1: Reset the selected module"]
            RESET = 1,
        }
        impl From<TIM3RST_A> for bool {
            #[inline(always)]
            fn from(variant: TIM3RST_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIM3RST`"]
        pub type TIM3RST_R = crate::R<bool, TIM3RST_A>;
        impl TIM3RST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, TIM3RST_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(TIM3RST_A::RESET),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == TIM3RST_A::RESET
            }
        }
        #[doc = "Write proxy for field `TIM3RST`"]
        pub struct TIM3RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM3RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM3RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(TIM3RST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Timer 6 reset"]
        pub type TIM6RST_A = TIM3RST_A;
        #[doc = "Reader of field `TIM6RST`"]
        pub type TIM6RST_R = crate::R<bool, TIM3RST_A>;
        #[doc = "Write proxy for field `TIM6RST`"]
        pub struct TIM6RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM6RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM6RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(TIM3RST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "TIM7 timer reset"]
        pub type TIM7RST_A = TIM3RST_A;
        #[doc = "Reader of field `TIM7RST`"]
        pub type TIM7RST_R = crate::R<bool, TIM3RST_A>;
        #[doc = "Write proxy for field `TIM7RST`"]
        pub struct TIM7RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM7RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM7RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(TIM3RST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Timer 14 reset"]
        pub type TIM14RST_A = TIM3RST_A;
        #[doc = "Reader of field `TIM14RST`"]
        pub type TIM14RST_R = crate::R<bool, TIM3RST_A>;
        #[doc = "Write proxy for field `TIM14RST`"]
        pub struct TIM14RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM14RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM14RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(TIM3RST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Window watchdog reset"]
        pub type WWDGRST_A = TIM3RST_A;
        #[doc = "Reader of field `WWDGRST`"]
        pub type WWDGRST_R = crate::R<bool, TIM3RST_A>;
        #[doc = "Write proxy for field `WWDGRST`"]
        pub struct WWDGRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WWDGRST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WWDGRST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(TIM3RST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "SPI2 reset"]
        pub type SPI2RST_A = TIM3RST_A;
        #[doc = "Reader of field `SPI2RST`"]
        pub type SPI2RST_R = crate::R<bool, TIM3RST_A>;
        #[doc = "Write proxy for field `SPI2RST`"]
        pub struct SPI2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI2RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPI2RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(TIM3RST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "USART 2 reset"]
        pub type USART2RST_A = TIM3RST_A;
        #[doc = "Reader of field `USART2RST`"]
        pub type USART2RST_R = crate::R<bool, TIM3RST_A>;
        #[doc = "Write proxy for field `USART2RST`"]
        pub struct USART2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART2RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART2RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(TIM3RST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "USART3 reset"]
        pub type USART3RST_A = TIM3RST_A;
        #[doc = "Reader of field `USART3RST`"]
        pub type USART3RST_R = crate::R<bool, TIM3RST_A>;
        #[doc = "Write proxy for field `USART3RST`"]
        pub struct USART3RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART3RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART3RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(TIM3RST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "USART4 reset"]
        pub type USART4RST_A = TIM3RST_A;
        #[doc = "Reader of field `USART4RST`"]
        pub type USART4RST_R = crate::R<bool, TIM3RST_A>;
        #[doc = "Write proxy for field `USART4RST`"]
        pub struct USART4RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART4RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART4RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(TIM3RST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "USART5 reset"]
        pub type USART5RST_A = TIM3RST_A;
        #[doc = "Reader of field `USART5RST`"]
        pub type USART5RST_R = crate::R<bool, TIM3RST_A>;
        #[doc = "Write proxy for field `USART5RST`"]
        pub struct USART5RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART5RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART5RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(TIM3RST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "I2C1 reset"]
        pub type I2C1RST_A = TIM3RST_A;
        #[doc = "Reader of field `I2C1RST`"]
        pub type I2C1RST_R = crate::R<bool, TIM3RST_A>;
        #[doc = "Write proxy for field `I2C1RST`"]
        pub struct I2C1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2C1RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(TIM3RST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "I2C2 reset"]
        pub type I2C2RST_A = TIM3RST_A;
        #[doc = "Reader of field `I2C2RST`"]
        pub type I2C2RST_R = crate::R<bool, TIM3RST_A>;
        #[doc = "Write proxy for field `I2C2RST`"]
        pub struct I2C2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C2RST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2C2RST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(TIM3RST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "USB interface reset"]
        pub type USBRST_A = TIM3RST_A;
        #[doc = "Reader of field `USBRST`"]
        pub type USBRST_R = crate::R<bool, TIM3RST_A>;
        #[doc = "Write proxy for field `USBRST`"]
        pub struct USBRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBRST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USBRST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(TIM3RST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Power interface reset"]
        pub type PWRRST_A = TIM3RST_A;
        #[doc = "Reader of field `PWRRST`"]
        pub type PWRRST_R = crate::R<bool, TIM3RST_A>;
        #[doc = "Write proxy for field `PWRRST`"]
        pub struct PWRRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWRRST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PWRRST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(TIM3RST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - Timer 3 reset"]
            #[inline(always)]
            pub fn tim3rst(&self) -> TIM3RST_R {
                TIM3RST_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Timer 6 reset"]
            #[inline(always)]
            pub fn tim6rst(&self) -> TIM6RST_R {
                TIM6RST_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TIM7 timer reset"]
            #[inline(always)]
            pub fn tim7rst(&self) -> TIM7RST_R {
                TIM7RST_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Timer 14 reset"]
            #[inline(always)]
            pub fn tim14rst(&self) -> TIM14RST_R {
                TIM14RST_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Window watchdog reset"]
            #[inline(always)]
            pub fn wwdgrst(&self) -> WWDGRST_R {
                WWDGRST_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 14 - SPI2 reset"]
            #[inline(always)]
            pub fn spi2rst(&self) -> SPI2RST_R {
                SPI2RST_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 17 - USART 2 reset"]
            #[inline(always)]
            pub fn usart2rst(&self) -> USART2RST_R {
                USART2RST_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - USART3 reset"]
            #[inline(always)]
            pub fn usart3rst(&self) -> USART3RST_R {
                USART3RST_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - USART4 reset"]
            #[inline(always)]
            pub fn usart4rst(&self) -> USART4RST_R {
                USART4RST_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - USART5 reset"]
            #[inline(always)]
            pub fn usart5rst(&self) -> USART5RST_R {
                USART5RST_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - I2C1 reset"]
            #[inline(always)]
            pub fn i2c1rst(&self) -> I2C1RST_R {
                I2C1RST_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - I2C2 reset"]
            #[inline(always)]
            pub fn i2c2rst(&self) -> I2C2RST_R {
                I2C2RST_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - USB interface reset"]
            #[inline(always)]
            pub fn usbrst(&self) -> USBRST_R {
                USBRST_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Power interface reset"]
            #[inline(always)]
            pub fn pwrrst(&self) -> PWRRST_R {
                PWRRST_R::new(((self.bits >> 28) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Timer 3 reset"]
            #[inline(always)]
            pub fn tim3rst(&mut self) -> TIM3RST_W {
                TIM3RST_W { w: self }
            }
            #[doc = "Bit 4 - Timer 6 reset"]
            #[inline(always)]
            pub fn tim6rst(&mut self) -> TIM6RST_W {
                TIM6RST_W { w: self }
            }
            #[doc = "Bit 5 - TIM7 timer reset"]
            #[inline(always)]
            pub fn tim7rst(&mut self) -> TIM7RST_W {
                TIM7RST_W { w: self }
            }
            #[doc = "Bit 8 - Timer 14 reset"]
            #[inline(always)]
            pub fn tim14rst(&mut self) -> TIM14RST_W {
                TIM14RST_W { w: self }
            }
            #[doc = "Bit 11 - Window watchdog reset"]
            #[inline(always)]
            pub fn wwdgrst(&mut self) -> WWDGRST_W {
                WWDGRST_W { w: self }
            }
            #[doc = "Bit 14 - SPI2 reset"]
            #[inline(always)]
            pub fn spi2rst(&mut self) -> SPI2RST_W {
                SPI2RST_W { w: self }
            }
            #[doc = "Bit 17 - USART 2 reset"]
            #[inline(always)]
            pub fn usart2rst(&mut self) -> USART2RST_W {
                USART2RST_W { w: self }
            }
            #[doc = "Bit 18 - USART3 reset"]
            #[inline(always)]
            pub fn usart3rst(&mut self) -> USART3RST_W {
                USART3RST_W { w: self }
            }
            #[doc = "Bit 19 - USART4 reset"]
            #[inline(always)]
            pub fn usart4rst(&mut self) -> USART4RST_W {
                USART4RST_W { w: self }
            }
            #[doc = "Bit 20 - USART5 reset"]
            #[inline(always)]
            pub fn usart5rst(&mut self) -> USART5RST_W {
                USART5RST_W { w: self }
            }
            #[doc = "Bit 21 - I2C1 reset"]
            #[inline(always)]
            pub fn i2c1rst(&mut self) -> I2C1RST_W {
                I2C1RST_W { w: self }
            }
            #[doc = "Bit 22 - I2C2 reset"]
            #[inline(always)]
            pub fn i2c2rst(&mut self) -> I2C2RST_W {
                I2C2RST_W { w: self }
            }
            #[doc = "Bit 23 - USB interface reset"]
            #[inline(always)]
            pub fn usbrst(&mut self) -> USBRST_W {
                USBRST_W { w: self }
            }
            #[doc = "Bit 28 - Power interface reset"]
            #[inline(always)]
            pub fn pwrrst(&mut self) -> PWRRST_W {
                PWRRST_W { w: self }
            }
        }
    }
    #[doc = "AHB Peripheral Clock enable register (RCC_AHBENR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ahbenr](ahbenr) module"]
    pub type AHBENR = crate::Reg<u32, _AHBENR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AHBENR;
    #[doc = "`read()` method returns [ahbenr::R](ahbenr::R) reader structure"]
    impl crate::Readable for AHBENR {}
    #[doc = "`write(|w| ..)` method takes [ahbenr::W](ahbenr::W) writer structure"]
    impl crate::Writable for AHBENR {}
    #[doc = "AHB Peripheral Clock enable register (RCC_AHBENR)"]
    pub mod ahbenr {
        #[doc = "Reader of register AHBENR"]
        pub type R = crate::R<u32, super::AHBENR>;
        #[doc = "Writer for register AHBENR"]
        pub type W = crate::W<u32, super::AHBENR>;
        #[doc = "Register AHBENR `reset()`'s with value 0x14"]
        impl crate::ResetValue for super::AHBENR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x14
            }
        }
        #[doc = "DMA1 clock enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DMA1EN_A {
            #[doc = "0: The selected clock is disabled"]
            DISABLED = 0,
            #[doc = "1: The selected clock is enabled"]
            ENABLED = 1,
        }
        impl From<DMA1EN_A> for bool {
            #[inline(always)]
            fn from(variant: DMA1EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DMA1EN`"]
        pub type DMA1EN_R = crate::R<bool, DMA1EN_A>;
        impl DMA1EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DMA1EN_A {
                match self.bits {
                    false => DMA1EN_A::DISABLED,
                    true => DMA1EN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == DMA1EN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == DMA1EN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `DMA1EN`"]
        pub struct DMA1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA1EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DMA1EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "SRAM interface clock enable"]
        pub type SRAMEN_A = DMA1EN_A;
        #[doc = "Reader of field `SRAMEN`"]
        pub type SRAMEN_R = crate::R<bool, DMA1EN_A>;
        #[doc = "Write proxy for field `SRAMEN`"]
        pub struct SRAMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRAMEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SRAMEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "FLITF clock enable"]
        pub type FLITFEN_A = DMA1EN_A;
        #[doc = "Reader of field `FLITFEN`"]
        pub type FLITFEN_R = crate::R<bool, DMA1EN_A>;
        #[doc = "Write proxy for field `FLITFEN`"]
        pub struct FLITFEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLITFEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLITFEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "CRC clock enable"]
        pub type CRCEN_A = DMA1EN_A;
        #[doc = "Reader of field `CRCEN`"]
        pub type CRCEN_R = crate::R<bool, DMA1EN_A>;
        #[doc = "Write proxy for field `CRCEN`"]
        pub struct CRCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CRCEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "I/O port A clock enable"]
        pub type IOPAEN_A = DMA1EN_A;
        #[doc = "Reader of field `IOPAEN`"]
        pub type IOPAEN_R = crate::R<bool, DMA1EN_A>;
        #[doc = "Write proxy for field `IOPAEN`"]
        pub struct IOPAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPAEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IOPAEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "I/O port B clock enable"]
        pub type IOPBEN_A = DMA1EN_A;
        #[doc = "Reader of field `IOPBEN`"]
        pub type IOPBEN_R = crate::R<bool, DMA1EN_A>;
        #[doc = "Write proxy for field `IOPBEN`"]
        pub struct IOPBEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPBEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IOPBEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "I/O port C clock enable"]
        pub type IOPCEN_A = DMA1EN_A;
        #[doc = "Reader of field `IOPCEN`"]
        pub type IOPCEN_R = crate::R<bool, DMA1EN_A>;
        #[doc = "Write proxy for field `IOPCEN`"]
        pub struct IOPCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPCEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IOPCEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "I/O port F clock enable"]
        pub type IOPFEN_A = DMA1EN_A;
        #[doc = "Reader of field `IOPFEN`"]
        pub type IOPFEN_R = crate::R<bool, DMA1EN_A>;
        #[doc = "Write proxy for field `IOPFEN`"]
        pub struct IOPFEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPFEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IOPFEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "I/O port D clock enable"]
        pub type IOPDEN_A = DMA1EN_A;
        #[doc = "Reader of field `IOPDEN`"]
        pub type IOPDEN_R = crate::R<bool, DMA1EN_A>;
        #[doc = "Write proxy for field `IOPDEN`"]
        pub struct IOPDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPDEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IOPDEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "DMA clock enable"]
        pub type DMAEN_A = DMA1EN_A;
        #[doc = "Reader of field `DMAEN`"]
        pub type DMAEN_R = crate::R<bool, DMA1EN_A>;
        #[doc = "Write proxy for field `DMAEN`"]
        pub struct DMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DMAEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMA1EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - DMA1 clock enable"]
            #[inline(always)]
            pub fn dma1en(&self) -> DMA1EN_R {
                DMA1EN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 2 - SRAM interface clock enable"]
            #[inline(always)]
            pub fn sramen(&self) -> SRAMEN_R {
                SRAMEN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 4 - FLITF clock enable"]
            #[inline(always)]
            pub fn flitfen(&self) -> FLITFEN_R {
                FLITFEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 6 - CRC clock enable"]
            #[inline(always)]
            pub fn crcen(&self) -> CRCEN_R {
                CRCEN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 17 - I/O port A clock enable"]
            #[inline(always)]
            pub fn iopaen(&self) -> IOPAEN_R {
                IOPAEN_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - I/O port B clock enable"]
            #[inline(always)]
            pub fn iopben(&self) -> IOPBEN_R {
                IOPBEN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - I/O port C clock enable"]
            #[inline(always)]
            pub fn iopcen(&self) -> IOPCEN_R {
                IOPCEN_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 22 - I/O port F clock enable"]
            #[inline(always)]
            pub fn iopfen(&self) -> IOPFEN_R {
                IOPFEN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 20 - I/O port D clock enable"]
            #[inline(always)]
            pub fn iopden(&self) -> IOPDEN_R {
                IOPDEN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DMA clock enable"]
            #[inline(always)]
            pub fn dmaen(&self) -> DMAEN_R {
                DMAEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - DMA1 clock enable"]
            #[inline(always)]
            pub fn dma1en(&mut self) -> DMA1EN_W {
                DMA1EN_W { w: self }
            }
            #[doc = "Bit 2 - SRAM interface clock enable"]
            #[inline(always)]
            pub fn sramen(&mut self) -> SRAMEN_W {
                SRAMEN_W { w: self }
            }
            #[doc = "Bit 4 - FLITF clock enable"]
            #[inline(always)]
            pub fn flitfen(&mut self) -> FLITFEN_W {
                FLITFEN_W { w: self }
            }
            #[doc = "Bit 6 - CRC clock enable"]
            #[inline(always)]
            pub fn crcen(&mut self) -> CRCEN_W {
                CRCEN_W { w: self }
            }
            #[doc = "Bit 17 - I/O port A clock enable"]
            #[inline(always)]
            pub fn iopaen(&mut self) -> IOPAEN_W {
                IOPAEN_W { w: self }
            }
            #[doc = "Bit 18 - I/O port B clock enable"]
            #[inline(always)]
            pub fn iopben(&mut self) -> IOPBEN_W {
                IOPBEN_W { w: self }
            }
            #[doc = "Bit 19 - I/O port C clock enable"]
            #[inline(always)]
            pub fn iopcen(&mut self) -> IOPCEN_W {
                IOPCEN_W { w: self }
            }
            #[doc = "Bit 22 - I/O port F clock enable"]
            #[inline(always)]
            pub fn iopfen(&mut self) -> IOPFEN_W {
                IOPFEN_W { w: self }
            }
            #[doc = "Bit 20 - I/O port D clock enable"]
            #[inline(always)]
            pub fn iopden(&mut self) -> IOPDEN_W {
                IOPDEN_W { w: self }
            }
            #[doc = "Bit 0 - DMA clock enable"]
            #[inline(always)]
            pub fn dmaen(&mut self) -> DMAEN_W {
                DMAEN_W { w: self }
            }
        }
    }
    #[doc = "APB2 peripheral clock enable register (RCC_APB2ENR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb2enr](apb2enr) module"]
    pub type APB2ENR = crate::Reg<u32, _APB2ENR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB2ENR;
    #[doc = "`read()` method returns [apb2enr::R](apb2enr::R) reader structure"]
    impl crate::Readable for APB2ENR {}
    #[doc = "`write(|w| ..)` method takes [apb2enr::W](apb2enr::W) writer structure"]
    impl crate::Writable for APB2ENR {}
    #[doc = "APB2 peripheral clock enable register (RCC_APB2ENR)"]
    pub mod apb2enr {
        #[doc = "Reader of register APB2ENR"]
        pub type R = crate::R<u32, super::APB2ENR>;
        #[doc = "Writer for register APB2ENR"]
        pub type W = crate::W<u32, super::APB2ENR>;
        #[doc = "Register APB2ENR `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB2ENR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "SYSCFG clock enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SYSCFGEN_A {
            #[doc = "0: The selected clock is disabled"]
            DISABLED = 0,
            #[doc = "1: The selected clock is enabled"]
            ENABLED = 1,
        }
        impl From<SYSCFGEN_A> for bool {
            #[inline(always)]
            fn from(variant: SYSCFGEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SYSCFGEN`"]
        pub type SYSCFGEN_R = crate::R<bool, SYSCFGEN_A>;
        impl SYSCFGEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SYSCFGEN_A {
                match self.bits {
                    false => SYSCFGEN_A::DISABLED,
                    true => SYSCFGEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SYSCFGEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == SYSCFGEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `SYSCFGEN`"]
        pub struct SYSCFGEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYSCFGEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SYSCFGEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "ADC 1 interface clock enable"]
        pub type ADCEN_A = SYSCFGEN_A;
        #[doc = "Reader of field `ADCEN`"]
        pub type ADCEN_R = crate::R<bool, SYSCFGEN_A>;
        #[doc = "Write proxy for field `ADCEN`"]
        pub struct ADCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADCEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "TIM1 Timer clock enable"]
        pub type TIM1EN_A = SYSCFGEN_A;
        #[doc = "Reader of field `TIM1EN`"]
        pub type TIM1EN_R = crate::R<bool, SYSCFGEN_A>;
        #[doc = "Write proxy for field `TIM1EN`"]
        pub struct TIM1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM1EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM1EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "SPI 1 clock enable"]
        pub type SPI1EN_A = SYSCFGEN_A;
        #[doc = "Reader of field `SPI1EN`"]
        pub type SPI1EN_R = crate::R<bool, SYSCFGEN_A>;
        #[doc = "Write proxy for field `SPI1EN`"]
        pub struct SPI1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI1EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPI1EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "USART1 clock enable"]
        pub type USART1EN_A = SYSCFGEN_A;
        #[doc = "Reader of field `USART1EN`"]
        pub type USART1EN_R = crate::R<bool, SYSCFGEN_A>;
        #[doc = "Write proxy for field `USART1EN`"]
        pub struct USART1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART1EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "TIM15 timer clock enable"]
        pub type TIM15EN_A = SYSCFGEN_A;
        #[doc = "Reader of field `TIM15EN`"]
        pub type TIM15EN_R = crate::R<bool, SYSCFGEN_A>;
        #[doc = "Write proxy for field `TIM15EN`"]
        pub struct TIM15EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM15EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM15EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "TIM16 timer clock enable"]
        pub type TIM16EN_A = SYSCFGEN_A;
        #[doc = "Reader of field `TIM16EN`"]
        pub type TIM16EN_R = crate::R<bool, SYSCFGEN_A>;
        #[doc = "Write proxy for field `TIM16EN`"]
        pub struct TIM16EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM16EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM16EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "TIM17 timer clock enable"]
        pub type TIM17EN_A = SYSCFGEN_A;
        #[doc = "Reader of field `TIM17EN`"]
        pub type TIM17EN_R = crate::R<bool, SYSCFGEN_A>;
        #[doc = "Write proxy for field `TIM17EN`"]
        pub struct TIM17EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM17EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM17EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "MCU debug module clock enable"]
        pub type DBGMCUEN_A = SYSCFGEN_A;
        #[doc = "Reader of field `DBGMCUEN`"]
        pub type DBGMCUEN_R = crate::R<bool, SYSCFGEN_A>;
        #[doc = "Write proxy for field `DBGMCUEN`"]
        pub struct DBGMCUEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBGMCUEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DBGMCUEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "USART6 clock enable"]
        pub type USART6EN_A = SYSCFGEN_A;
        #[doc = "Reader of field `USART6EN`"]
        pub type USART6EN_R = crate::R<bool, SYSCFGEN_A>;
        #[doc = "Write proxy for field `USART6EN`"]
        pub struct USART6EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART6EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART6EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SYSCFGEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - SYSCFG clock enable"]
            #[inline(always)]
            pub fn syscfgen(&self) -> SYSCFGEN_R {
                SYSCFGEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 9 - ADC 1 interface clock enable"]
            #[inline(always)]
            pub fn adcen(&self) -> ADCEN_R {
                ADCEN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TIM1 Timer clock enable"]
            #[inline(always)]
            pub fn tim1en(&self) -> TIM1EN_R {
                TIM1EN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - SPI 1 clock enable"]
            #[inline(always)]
            pub fn spi1en(&self) -> SPI1EN_R {
                SPI1EN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 14 - USART1 clock enable"]
            #[inline(always)]
            pub fn usart1en(&self) -> USART1EN_R {
                USART1EN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 16 - TIM15 timer clock enable"]
            #[inline(always)]
            pub fn tim15en(&self) -> TIM15EN_R {
                TIM15EN_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - TIM16 timer clock enable"]
            #[inline(always)]
            pub fn tim16en(&self) -> TIM16EN_R {
                TIM16EN_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - TIM17 timer clock enable"]
            #[inline(always)]
            pub fn tim17en(&self) -> TIM17EN_R {
                TIM17EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 22 - MCU debug module clock enable"]
            #[inline(always)]
            pub fn dbgmcuen(&self) -> DBGMCUEN_R {
                DBGMCUEN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 5 - USART6 clock enable"]
            #[inline(always)]
            pub fn usart6en(&self) -> USART6EN_R {
                USART6EN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - SYSCFG clock enable"]
            #[inline(always)]
            pub fn syscfgen(&mut self) -> SYSCFGEN_W {
                SYSCFGEN_W { w: self }
            }
            #[doc = "Bit 9 - ADC 1 interface clock enable"]
            #[inline(always)]
            pub fn adcen(&mut self) -> ADCEN_W {
                ADCEN_W { w: self }
            }
            #[doc = "Bit 11 - TIM1 Timer clock enable"]
            #[inline(always)]
            pub fn tim1en(&mut self) -> TIM1EN_W {
                TIM1EN_W { w: self }
            }
            #[doc = "Bit 12 - SPI 1 clock enable"]
            #[inline(always)]
            pub fn spi1en(&mut self) -> SPI1EN_W {
                SPI1EN_W { w: self }
            }
            #[doc = "Bit 14 - USART1 clock enable"]
            #[inline(always)]
            pub fn usart1en(&mut self) -> USART1EN_W {
                USART1EN_W { w: self }
            }
            #[doc = "Bit 16 - TIM15 timer clock enable"]
            #[inline(always)]
            pub fn tim15en(&mut self) -> TIM15EN_W {
                TIM15EN_W { w: self }
            }
            #[doc = "Bit 17 - TIM16 timer clock enable"]
            #[inline(always)]
            pub fn tim16en(&mut self) -> TIM16EN_W {
                TIM16EN_W { w: self }
            }
            #[doc = "Bit 18 - TIM17 timer clock enable"]
            #[inline(always)]
            pub fn tim17en(&mut self) -> TIM17EN_W {
                TIM17EN_W { w: self }
            }
            #[doc = "Bit 22 - MCU debug module clock enable"]
            #[inline(always)]
            pub fn dbgmcuen(&mut self) -> DBGMCUEN_W {
                DBGMCUEN_W { w: self }
            }
            #[doc = "Bit 5 - USART6 clock enable"]
            #[inline(always)]
            pub fn usart6en(&mut self) -> USART6EN_W {
                USART6EN_W { w: self }
            }
        }
    }
    #[doc = "APB1 peripheral clock enable register (RCC_APB1ENR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb1enr](apb1enr) module"]
    pub type APB1ENR = crate::Reg<u32, _APB1ENR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB1ENR;
    #[doc = "`read()` method returns [apb1enr::R](apb1enr::R) reader structure"]
    impl crate::Readable for APB1ENR {}
    #[doc = "`write(|w| ..)` method takes [apb1enr::W](apb1enr::W) writer structure"]
    impl crate::Writable for APB1ENR {}
    #[doc = "APB1 peripheral clock enable register (RCC_APB1ENR)"]
    pub mod apb1enr {
        #[doc = "Reader of register APB1ENR"]
        pub type R = crate::R<u32, super::APB1ENR>;
        #[doc = "Writer for register APB1ENR"]
        pub type W = crate::W<u32, super::APB1ENR>;
        #[doc = "Register APB1ENR `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB1ENR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Timer 3 clock enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIM3EN_A {
            #[doc = "0: The selected clock is disabled"]
            DISABLED = 0,
            #[doc = "1: The selected clock is enabled"]
            ENABLED = 1,
        }
        impl From<TIM3EN_A> for bool {
            #[inline(always)]
            fn from(variant: TIM3EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIM3EN`"]
        pub type TIM3EN_R = crate::R<bool, TIM3EN_A>;
        impl TIM3EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIM3EN_A {
                match self.bits {
                    false => TIM3EN_A::DISABLED,
                    true => TIM3EN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TIM3EN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TIM3EN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TIM3EN`"]
        pub struct TIM3EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM3EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM3EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Timer 6 clock enable"]
        pub type TIM6EN_A = TIM3EN_A;
        #[doc = "Reader of field `TIM6EN`"]
        pub type TIM6EN_R = crate::R<bool, TIM3EN_A>;
        #[doc = "Write proxy for field `TIM6EN`"]
        pub struct TIM6EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM6EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM6EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "TIM7 timer clock enable"]
        pub type TIM7EN_A = TIM3EN_A;
        #[doc = "Reader of field `TIM7EN`"]
        pub type TIM7EN_R = crate::R<bool, TIM3EN_A>;
        #[doc = "Write proxy for field `TIM7EN`"]
        pub struct TIM7EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM7EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM7EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Timer 14 clock enable"]
        pub type TIM14EN_A = TIM3EN_A;
        #[doc = "Reader of field `TIM14EN`"]
        pub type TIM14EN_R = crate::R<bool, TIM3EN_A>;
        #[doc = "Write proxy for field `TIM14EN`"]
        pub struct TIM14EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM14EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM14EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Window watchdog clock enable"]
        pub type WWDGEN_A = TIM3EN_A;
        #[doc = "Reader of field `WWDGEN`"]
        pub type WWDGEN_R = crate::R<bool, TIM3EN_A>;
        #[doc = "Write proxy for field `WWDGEN`"]
        pub struct WWDGEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WWDGEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WWDGEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "SPI 2 clock enable"]
        pub type SPI2EN_A = TIM3EN_A;
        #[doc = "Reader of field `SPI2EN`"]
        pub type SPI2EN_R = crate::R<bool, TIM3EN_A>;
        #[doc = "Write proxy for field `SPI2EN`"]
        pub struct SPI2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI2EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPI2EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "USART 2 clock enable"]
        pub type USART2EN_A = TIM3EN_A;
        #[doc = "Reader of field `USART2EN`"]
        pub type USART2EN_R = crate::R<bool, TIM3EN_A>;
        #[doc = "Write proxy for field `USART2EN`"]
        pub struct USART2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART2EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART2EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "USART3 clock enable"]
        pub type USART3EN_A = TIM3EN_A;
        #[doc = "Reader of field `USART3EN`"]
        pub type USART3EN_R = crate::R<bool, TIM3EN_A>;
        #[doc = "Write proxy for field `USART3EN`"]
        pub struct USART3EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART3EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART3EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "USART4 clock enable"]
        pub type USART4EN_A = TIM3EN_A;
        #[doc = "Reader of field `USART4EN`"]
        pub type USART4EN_R = crate::R<bool, TIM3EN_A>;
        #[doc = "Write proxy for field `USART4EN`"]
        pub struct USART4EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART4EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART4EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "USART5 clock enable"]
        pub type USART5EN_A = TIM3EN_A;
        #[doc = "Reader of field `USART5EN`"]
        pub type USART5EN_R = crate::R<bool, TIM3EN_A>;
        #[doc = "Write proxy for field `USART5EN`"]
        pub struct USART5EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART5EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART5EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "I2C 1 clock enable"]
        pub type I2C1EN_A = TIM3EN_A;
        #[doc = "Reader of field `I2C1EN`"]
        pub type I2C1EN_R = crate::R<bool, TIM3EN_A>;
        #[doc = "Write proxy for field `I2C1EN`"]
        pub struct I2C1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2C1EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "I2C 2 clock enable"]
        pub type I2C2EN_A = TIM3EN_A;
        #[doc = "Reader of field `I2C2EN`"]
        pub type I2C2EN_R = crate::R<bool, TIM3EN_A>;
        #[doc = "Write proxy for field `I2C2EN`"]
        pub struct I2C2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C2EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2C2EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "USB interface clock enable"]
        pub type USBEN_A = TIM3EN_A;
        #[doc = "Reader of field `USBEN`"]
        pub type USBEN_R = crate::R<bool, TIM3EN_A>;
        #[doc = "Write proxy for field `USBEN`"]
        pub struct USBEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USBEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Power interface clock enable"]
        pub type PWREN_A = TIM3EN_A;
        #[doc = "Reader of field `PWREN`"]
        pub type PWREN_R = crate::R<bool, TIM3EN_A>;
        #[doc = "Write proxy for field `PWREN`"]
        pub struct PWREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWREN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PWREN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The selected clock is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::DISABLED)
            }
            #[doc = "The selected clock is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TIM3EN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - Timer 3 clock enable"]
            #[inline(always)]
            pub fn tim3en(&self) -> TIM3EN_R {
                TIM3EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Timer 6 clock enable"]
            #[inline(always)]
            pub fn tim6en(&self) -> TIM6EN_R {
                TIM6EN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TIM7 timer clock enable"]
            #[inline(always)]
            pub fn tim7en(&self) -> TIM7EN_R {
                TIM7EN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Timer 14 clock enable"]
            #[inline(always)]
            pub fn tim14en(&self) -> TIM14EN_R {
                TIM14EN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Window watchdog clock enable"]
            #[inline(always)]
            pub fn wwdgen(&self) -> WWDGEN_R {
                WWDGEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 14 - SPI 2 clock enable"]
            #[inline(always)]
            pub fn spi2en(&self) -> SPI2EN_R {
                SPI2EN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 17 - USART 2 clock enable"]
            #[inline(always)]
            pub fn usart2en(&self) -> USART2EN_R {
                USART2EN_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - USART3 clock enable"]
            #[inline(always)]
            pub fn usart3en(&self) -> USART3EN_R {
                USART3EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - USART4 clock enable"]
            #[inline(always)]
            pub fn usart4en(&self) -> USART4EN_R {
                USART4EN_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - USART5 clock enable"]
            #[inline(always)]
            pub fn usart5en(&self) -> USART5EN_R {
                USART5EN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - I2C 1 clock enable"]
            #[inline(always)]
            pub fn i2c1en(&self) -> I2C1EN_R {
                I2C1EN_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - I2C 2 clock enable"]
            #[inline(always)]
            pub fn i2c2en(&self) -> I2C2EN_R {
                I2C2EN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - USB interface clock enable"]
            #[inline(always)]
            pub fn usben(&self) -> USBEN_R {
                USBEN_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Power interface clock enable"]
            #[inline(always)]
            pub fn pwren(&self) -> PWREN_R {
                PWREN_R::new(((self.bits >> 28) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Timer 3 clock enable"]
            #[inline(always)]
            pub fn tim3en(&mut self) -> TIM3EN_W {
                TIM3EN_W { w: self }
            }
            #[doc = "Bit 4 - Timer 6 clock enable"]
            #[inline(always)]
            pub fn tim6en(&mut self) -> TIM6EN_W {
                TIM6EN_W { w: self }
            }
            #[doc = "Bit 5 - TIM7 timer clock enable"]
            #[inline(always)]
            pub fn tim7en(&mut self) -> TIM7EN_W {
                TIM7EN_W { w: self }
            }
            #[doc = "Bit 8 - Timer 14 clock enable"]
            #[inline(always)]
            pub fn tim14en(&mut self) -> TIM14EN_W {
                TIM14EN_W { w: self }
            }
            #[doc = "Bit 11 - Window watchdog clock enable"]
            #[inline(always)]
            pub fn wwdgen(&mut self) -> WWDGEN_W {
                WWDGEN_W { w: self }
            }
            #[doc = "Bit 14 - SPI 2 clock enable"]
            #[inline(always)]
            pub fn spi2en(&mut self) -> SPI2EN_W {
                SPI2EN_W { w: self }
            }
            #[doc = "Bit 17 - USART 2 clock enable"]
            #[inline(always)]
            pub fn usart2en(&mut self) -> USART2EN_W {
                USART2EN_W { w: self }
            }
            #[doc = "Bit 18 - USART3 clock enable"]
            #[inline(always)]
            pub fn usart3en(&mut self) -> USART3EN_W {
                USART3EN_W { w: self }
            }
            #[doc = "Bit 19 - USART4 clock enable"]
            #[inline(always)]
            pub fn usart4en(&mut self) -> USART4EN_W {
                USART4EN_W { w: self }
            }
            #[doc = "Bit 20 - USART5 clock enable"]
            #[inline(always)]
            pub fn usart5en(&mut self) -> USART5EN_W {
                USART5EN_W { w: self }
            }
            #[doc = "Bit 21 - I2C 1 clock enable"]
            #[inline(always)]
            pub fn i2c1en(&mut self) -> I2C1EN_W {
                I2C1EN_W { w: self }
            }
            #[doc = "Bit 22 - I2C 2 clock enable"]
            #[inline(always)]
            pub fn i2c2en(&mut self) -> I2C2EN_W {
                I2C2EN_W { w: self }
            }
            #[doc = "Bit 23 - USB interface clock enable"]
            #[inline(always)]
            pub fn usben(&mut self) -> USBEN_W {
                USBEN_W { w: self }
            }
            #[doc = "Bit 28 - Power interface clock enable"]
            #[inline(always)]
            pub fn pwren(&mut self) -> PWREN_W {
                PWREN_W { w: self }
            }
        }
    }
    #[doc = "Backup domain control register (RCC_BDCR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdcr](bdcr) module"]
    pub type BDCR = crate::Reg<u32, _BDCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BDCR;
    #[doc = "`read()` method returns [bdcr::R](bdcr::R) reader structure"]
    impl crate::Readable for BDCR {}
    #[doc = "`write(|w| ..)` method takes [bdcr::W](bdcr::W) writer structure"]
    impl crate::Writable for BDCR {}
    #[doc = "Backup domain control register (RCC_BDCR)"]
    pub mod bdcr {
        #[doc = "Reader of register BDCR"]
        pub type R = crate::R<u32, super::BDCR>;
        #[doc = "Writer for register BDCR"]
        pub type W = crate::W<u32, super::BDCR>;
        #[doc = "Register BDCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BDCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "External Low Speed oscillator enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LSEON_A {
            #[doc = "0: LSE oscillator Off"]
            OFF = 0,
            #[doc = "1: LSE oscillator On"]
            ON = 1,
        }
        impl From<LSEON_A> for bool {
            #[inline(always)]
            fn from(variant: LSEON_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LSEON`"]
        pub type LSEON_R = crate::R<bool, LSEON_A>;
        impl LSEON_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LSEON_A {
                match self.bits {
                    false => LSEON_A::OFF,
                    true => LSEON_A::ON,
                }
            }
            #[doc = "Checks if the value of the field is `OFF`"]
            #[inline(always)]
            pub fn is_off(&self) -> bool {
                *self == LSEON_A::OFF
            }
            #[doc = "Checks if the value of the field is `ON`"]
            #[inline(always)]
            pub fn is_on(&self) -> bool {
                *self == LSEON_A::ON
            }
        }
        #[doc = "Write proxy for field `LSEON`"]
        pub struct LSEON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSEON_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LSEON_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "LSE oscillator Off"]
            #[inline(always)]
            pub fn off(self) -> &'a mut W {
                self.variant(LSEON_A::OFF)
            }
            #[doc = "LSE oscillator On"]
            #[inline(always)]
            pub fn on(self) -> &'a mut W {
                self.variant(LSEON_A::ON)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "External Low Speed oscillator ready\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LSERDY_A {
            #[doc = "0: LSE oscillator not ready"]
            NOTREADY = 0,
            #[doc = "1: LSE oscillator ready"]
            READY = 1,
        }
        impl From<LSERDY_A> for bool {
            #[inline(always)]
            fn from(variant: LSERDY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LSERDY`"]
        pub type LSERDY_R = crate::R<bool, LSERDY_A>;
        impl LSERDY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LSERDY_A {
                match self.bits {
                    false => LSERDY_A::NOTREADY,
                    true => LSERDY_A::READY,
                }
            }
            #[doc = "Checks if the value of the field is `NOTREADY`"]
            #[inline(always)]
            pub fn is_not_ready(&self) -> bool {
                *self == LSERDY_A::NOTREADY
            }
            #[doc = "Checks if the value of the field is `READY`"]
            #[inline(always)]
            pub fn is_ready(&self) -> bool {
                *self == LSERDY_A::READY
            }
        }
        #[doc = "External Low Speed oscillator bypass\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LSEBYP_A {
            #[doc = "0: LSE crystal oscillator not bypassed"]
            NOTBYPASSED = 0,
            #[doc = "1: LSE crystal oscillator bypassed with external clock"]
            BYPASSED = 1,
        }
        impl From<LSEBYP_A> for bool {
            #[inline(always)]
            fn from(variant: LSEBYP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LSEBYP`"]
        pub type LSEBYP_R = crate::R<bool, LSEBYP_A>;
        impl LSEBYP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LSEBYP_A {
                match self.bits {
                    false => LSEBYP_A::NOTBYPASSED,
                    true => LSEBYP_A::BYPASSED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTBYPASSED`"]
            #[inline(always)]
            pub fn is_not_bypassed(&self) -> bool {
                *self == LSEBYP_A::NOTBYPASSED
            }
            #[doc = "Checks if the value of the field is `BYPASSED`"]
            #[inline(always)]
            pub fn is_bypassed(&self) -> bool {
                *self == LSEBYP_A::BYPASSED
            }
        }
        #[doc = "Write proxy for field `LSEBYP`"]
        pub struct LSEBYP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSEBYP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LSEBYP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "LSE crystal oscillator not bypassed"]
            #[inline(always)]
            pub fn not_bypassed(self) -> &'a mut W {
                self.variant(LSEBYP_A::NOTBYPASSED)
            }
            #[doc = "LSE crystal oscillator bypassed with external clock"]
            #[inline(always)]
            pub fn bypassed(self) -> &'a mut W {
                self.variant(LSEBYP_A::BYPASSED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "LSE oscillator drive capability\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum LSEDRV_A {
            #[doc = "0: Low drive capacity"]
            LOW = 0,
            #[doc = "1: Medium-high drive capacity"]
            MEDIUMHIGH = 1,
            #[doc = "2: Medium-low drive capacity"]
            MEDIUMLOW = 2,
            #[doc = "3: High drive capacity"]
            HIGH = 3,
        }
        impl From<LSEDRV_A> for u8 {
            #[inline(always)]
            fn from(variant: LSEDRV_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `LSEDRV`"]
        pub type LSEDRV_R = crate::R<u8, LSEDRV_A>;
        impl LSEDRV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LSEDRV_A {
                match self.bits {
                    0 => LSEDRV_A::LOW,
                    1 => LSEDRV_A::MEDIUMHIGH,
                    2 => LSEDRV_A::MEDIUMLOW,
                    3 => LSEDRV_A::HIGH,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == LSEDRV_A::LOW
            }
            #[doc = "Checks if the value of the field is `MEDIUMHIGH`"]
            #[inline(always)]
            pub fn is_medium_high(&self) -> bool {
                *self == LSEDRV_A::MEDIUMHIGH
            }
            #[doc = "Checks if the value of the field is `MEDIUMLOW`"]
            #[inline(always)]
            pub fn is_medium_low(&self) -> bool {
                *self == LSEDRV_A::MEDIUMLOW
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == LSEDRV_A::HIGH
            }
        }
        #[doc = "Write proxy for field `LSEDRV`"]
        pub struct LSEDRV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSEDRV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LSEDRV_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low drive capacity"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(LSEDRV_A::LOW)
            }
            #[doc = "Medium-high drive capacity"]
            #[inline(always)]
            pub fn medium_high(self) -> &'a mut W {
                self.variant(LSEDRV_A::MEDIUMHIGH)
            }
            #[doc = "Medium-low drive capacity"]
            #[inline(always)]
            pub fn medium_low(self) -> &'a mut W {
                self.variant(LSEDRV_A::MEDIUMLOW)
            }
            #[doc = "High drive capacity"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(LSEDRV_A::HIGH)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | (((value as u32) & 0x03) << 3);
                self.w
            }
        }
        #[doc = "RTC clock source selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum RTCSEL_A {
            #[doc = "0: No clock"]
            NOCLOCK = 0,
            #[doc = "1: LSE oscillator clock used as RTC clock"]
            LSE = 1,
            #[doc = "2: LSI oscillator clock used as RTC clock"]
            LSI = 2,
            #[doc = "3: HSE oscillator clock divided by a prescaler used as RTC clock"]
            HSE = 3,
        }
        impl From<RTCSEL_A> for u8 {
            #[inline(always)]
            fn from(variant: RTCSEL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `RTCSEL`"]
        pub type RTCSEL_R = crate::R<u8, RTCSEL_A>;
        impl RTCSEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RTCSEL_A {
                match self.bits {
                    0 => RTCSEL_A::NOCLOCK,
                    1 => RTCSEL_A::LSE,
                    2 => RTCSEL_A::LSI,
                    3 => RTCSEL_A::HSE,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `NOCLOCK`"]
            #[inline(always)]
            pub fn is_no_clock(&self) -> bool {
                *self == RTCSEL_A::NOCLOCK
            }
            #[doc = "Checks if the value of the field is `LSE`"]
            #[inline(always)]
            pub fn is_lse(&self) -> bool {
                *self == RTCSEL_A::LSE
            }
            #[doc = "Checks if the value of the field is `LSI`"]
            #[inline(always)]
            pub fn is_lsi(&self) -> bool {
                *self == RTCSEL_A::LSI
            }
            #[doc = "Checks if the value of the field is `HSE`"]
            #[inline(always)]
            pub fn is_hse(&self) -> bool {
                *self == RTCSEL_A::HSE
            }
        }
        #[doc = "Write proxy for field `RTCSEL`"]
        pub struct RTCSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RTCSEL_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No clock"]
            #[inline(always)]
            pub fn no_clock(self) -> &'a mut W {
                self.variant(RTCSEL_A::NOCLOCK)
            }
            #[doc = "LSE oscillator clock used as RTC clock"]
            #[inline(always)]
            pub fn lse(self) -> &'a mut W {
                self.variant(RTCSEL_A::LSE)
            }
            #[doc = "LSI oscillator clock used as RTC clock"]
            #[inline(always)]
            pub fn lsi(self) -> &'a mut W {
                self.variant(RTCSEL_A::LSI)
            }
            #[doc = "HSE oscillator clock divided by a prescaler used as RTC clock"]
            #[inline(always)]
            pub fn hse(self) -> &'a mut W {
                self.variant(RTCSEL_A::HSE)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "RTC clock enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RTCEN_A {
            #[doc = "0: RTC clock disabled"]
            DISABLED = 0,
            #[doc = "1: RTC clock enabled"]
            ENABLED = 1,
        }
        impl From<RTCEN_A> for bool {
            #[inline(always)]
            fn from(variant: RTCEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RTCEN`"]
        pub type RTCEN_R = crate::R<bool, RTCEN_A>;
        impl RTCEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RTCEN_A {
                match self.bits {
                    false => RTCEN_A::DISABLED,
                    true => RTCEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == RTCEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == RTCEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `RTCEN`"]
        pub struct RTCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RTCEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "RTC clock disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(RTCEN_A::DISABLED)
            }
            #[doc = "RTC clock enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(RTCEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Backup domain software reset\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BDRST_A {
            #[doc = "0: Reset not activated"]
            DISABLED = 0,
            #[doc = "1: Reset the entire RTC domain"]
            ENABLED = 1,
        }
        impl From<BDRST_A> for bool {
            #[inline(always)]
            fn from(variant: BDRST_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BDRST`"]
        pub type BDRST_R = crate::R<bool, BDRST_A>;
        impl BDRST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BDRST_A {
                match self.bits {
                    false => BDRST_A::DISABLED,
                    true => BDRST_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == BDRST_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == BDRST_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `BDRST`"]
        pub struct BDRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BDRST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BDRST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset not activated"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(BDRST_A::DISABLED)
            }
            #[doc = "Reset the entire RTC domain"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(BDRST_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - External Low Speed oscillator enable"]
            #[inline(always)]
            pub fn lseon(&self) -> LSEON_R {
                LSEON_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - External Low Speed oscillator ready"]
            #[inline(always)]
            pub fn lserdy(&self) -> LSERDY_R {
                LSERDY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - External Low Speed oscillator bypass"]
            #[inline(always)]
            pub fn lsebyp(&self) -> LSEBYP_R {
                LSEBYP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 3:4 - LSE oscillator drive capability"]
            #[inline(always)]
            pub fn lsedrv(&self) -> LSEDRV_R {
                LSEDRV_R::new(((self.bits >> 3) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - RTC clock source selection"]
            #[inline(always)]
            pub fn rtcsel(&self) -> RTCSEL_R {
                RTCSEL_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 15 - RTC clock enable"]
            #[inline(always)]
            pub fn rtcen(&self) -> RTCEN_R {
                RTCEN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Backup domain software reset"]
            #[inline(always)]
            pub fn bdrst(&self) -> BDRST_R {
                BDRST_R::new(((self.bits >> 16) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - External Low Speed oscillator enable"]
            #[inline(always)]
            pub fn lseon(&mut self) -> LSEON_W {
                LSEON_W { w: self }
            }
            #[doc = "Bit 2 - External Low Speed oscillator bypass"]
            #[inline(always)]
            pub fn lsebyp(&mut self) -> LSEBYP_W {
                LSEBYP_W { w: self }
            }
            #[doc = "Bits 3:4 - LSE oscillator drive capability"]
            #[inline(always)]
            pub fn lsedrv(&mut self) -> LSEDRV_W {
                LSEDRV_W { w: self }
            }
            #[doc = "Bits 8:9 - RTC clock source selection"]
            #[inline(always)]
            pub fn rtcsel(&mut self) -> RTCSEL_W {
                RTCSEL_W { w: self }
            }
            #[doc = "Bit 15 - RTC clock enable"]
            #[inline(always)]
            pub fn rtcen(&mut self) -> RTCEN_W {
                RTCEN_W { w: self }
            }
            #[doc = "Bit 16 - Backup domain software reset"]
            #[inline(always)]
            pub fn bdrst(&mut self) -> BDRST_W {
                BDRST_W { w: self }
            }
        }
    }
    #[doc = "Control/status register (RCC_CSR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr](csr) module"]
    pub type CSR = crate::Reg<u32, _CSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CSR;
    #[doc = "`read()` method returns [csr::R](csr::R) reader structure"]
    impl crate::Readable for CSR {}
    #[doc = "`write(|w| ..)` method takes [csr::W](csr::W) writer structure"]
    impl crate::Writable for CSR {}
    #[doc = "Control/status register (RCC_CSR)"]
    pub mod csr {
        #[doc = "Reader of register CSR"]
        pub type R = crate::R<u32, super::CSR>;
        #[doc = "Writer for register CSR"]
        pub type W = crate::W<u32, super::CSR>;
        #[doc = "Register CSR `reset()`'s with value 0x0c00_0000"]
        impl crate::ResetValue for super::CSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0c00_0000
            }
        }
        #[doc = "Internal low speed oscillator enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LSION_A {
            #[doc = "0: LSI oscillator Off"]
            OFF = 0,
            #[doc = "1: LSI oscillator On"]
            ON = 1,
        }
        impl From<LSION_A> for bool {
            #[inline(always)]
            fn from(variant: LSION_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LSION`"]
        pub type LSION_R = crate::R<bool, LSION_A>;
        impl LSION_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LSION_A {
                match self.bits {
                    false => LSION_A::OFF,
                    true => LSION_A::ON,
                }
            }
            #[doc = "Checks if the value of the field is `OFF`"]
            #[inline(always)]
            pub fn is_off(&self) -> bool {
                *self == LSION_A::OFF
            }
            #[doc = "Checks if the value of the field is `ON`"]
            #[inline(always)]
            pub fn is_on(&self) -> bool {
                *self == LSION_A::ON
            }
        }
        #[doc = "Write proxy for field `LSION`"]
        pub struct LSION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSION_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LSION_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "LSI oscillator Off"]
            #[inline(always)]
            pub fn off(self) -> &'a mut W {
                self.variant(LSION_A::OFF)
            }
            #[doc = "LSI oscillator On"]
            #[inline(always)]
            pub fn on(self) -> &'a mut W {
                self.variant(LSION_A::ON)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Internal low speed oscillator ready\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LSIRDY_A {
            #[doc = "0: LSI oscillator not ready"]
            NOTREADY = 0,
            #[doc = "1: LSI oscillator ready"]
            READY = 1,
        }
        impl From<LSIRDY_A> for bool {
            #[inline(always)]
            fn from(variant: LSIRDY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LSIRDY`"]
        pub type LSIRDY_R = crate::R<bool, LSIRDY_A>;
        impl LSIRDY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LSIRDY_A {
                match self.bits {
                    false => LSIRDY_A::NOTREADY,
                    true => LSIRDY_A::READY,
                }
            }
            #[doc = "Checks if the value of the field is `NOTREADY`"]
            #[inline(always)]
            pub fn is_not_ready(&self) -> bool {
                *self == LSIRDY_A::NOTREADY
            }
            #[doc = "Checks if the value of the field is `READY`"]
            #[inline(always)]
            pub fn is_ready(&self) -> bool {
                *self == LSIRDY_A::READY
            }
        }
        #[doc = "Remove reset flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RMVF_A {
            #[doc = "1: Clears the reset flag"]
            CLEAR = 1,
        }
        impl From<RMVF_A> for bool {
            #[inline(always)]
            fn from(variant: RMVF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RMVF`"]
        pub type RMVF_R = crate::R<bool, RMVF_A>;
        impl RMVF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, RMVF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(RMVF_A::CLEAR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == RMVF_A::CLEAR
            }
        }
        #[doc = "Write proxy for field `RMVF`"]
        pub struct RMVF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RMVF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RMVF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the reset flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RMVF_A::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Option byte loader reset flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OBLRSTF_A {
            #[doc = "0: No reset has occured"]
            NORESET = 0,
            #[doc = "1: A reset has occured"]
            RESET = 1,
        }
        impl From<OBLRSTF_A> for bool {
            #[inline(always)]
            fn from(variant: OBLRSTF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OBLRSTF`"]
        pub type OBLRSTF_R = crate::R<bool, OBLRSTF_A>;
        impl OBLRSTF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OBLRSTF_A {
                match self.bits {
                    false => OBLRSTF_A::NORESET,
                    true => OBLRSTF_A::RESET,
                }
            }
            #[doc = "Checks if the value of the field is `NORESET`"]
            #[inline(always)]
            pub fn is_no_reset(&self) -> bool {
                *self == OBLRSTF_A::NORESET
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == OBLRSTF_A::RESET
            }
        }
        #[doc = "Write proxy for field `OBLRSTF`"]
        pub struct OBLRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OBLRSTF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OBLRSTF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No reset has occured"]
            #[inline(always)]
            pub fn no_reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::NORESET)
            }
            #[doc = "A reset has occured"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "PIN reset flag"]
        pub type PINRSTF_A = OBLRSTF_A;
        #[doc = "Reader of field `PINRSTF`"]
        pub type PINRSTF_R = crate::R<bool, OBLRSTF_A>;
        #[doc = "Write proxy for field `PINRSTF`"]
        pub struct PINRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINRSTF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PINRSTF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No reset has occured"]
            #[inline(always)]
            pub fn no_reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::NORESET)
            }
            #[doc = "A reset has occured"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "POR/PDR reset flag"]
        pub type PORRSTF_A = OBLRSTF_A;
        #[doc = "Reader of field `PORRSTF`"]
        pub type PORRSTF_R = crate::R<bool, OBLRSTF_A>;
        #[doc = "Write proxy for field `PORRSTF`"]
        pub struct PORRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORRSTF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PORRSTF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No reset has occured"]
            #[inline(always)]
            pub fn no_reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::NORESET)
            }
            #[doc = "A reset has occured"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Software reset flag"]
        pub type SFTRSTF_A = OBLRSTF_A;
        #[doc = "Reader of field `SFTRSTF`"]
        pub type SFTRSTF_R = crate::R<bool, OBLRSTF_A>;
        #[doc = "Write proxy for field `SFTRSTF`"]
        pub struct SFTRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SFTRSTF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SFTRSTF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No reset has occured"]
            #[inline(always)]
            pub fn no_reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::NORESET)
            }
            #[doc = "A reset has occured"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Independent watchdog reset flag"]
        pub type IWDGRSTF_A = OBLRSTF_A;
        #[doc = "Reader of field `IWDGRSTF`"]
        pub type IWDGRSTF_R = crate::R<bool, OBLRSTF_A>;
        #[doc = "Write proxy for field `IWDGRSTF`"]
        pub struct IWDGRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IWDGRSTF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IWDGRSTF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No reset has occured"]
            #[inline(always)]
            pub fn no_reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::NORESET)
            }
            #[doc = "A reset has occured"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Window watchdog reset flag"]
        pub type WWDGRSTF_A = OBLRSTF_A;
        #[doc = "Reader of field `WWDGRSTF`"]
        pub type WWDGRSTF_R = crate::R<bool, OBLRSTF_A>;
        #[doc = "Write proxy for field `WWDGRSTF`"]
        pub struct WWDGRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WWDGRSTF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WWDGRSTF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No reset has occured"]
            #[inline(always)]
            pub fn no_reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::NORESET)
            }
            #[doc = "A reset has occured"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Low-power reset flag"]
        pub type LPWRRSTF_A = OBLRSTF_A;
        #[doc = "Reader of field `LPWRRSTF`"]
        pub type LPWRRSTF_R = crate::R<bool, OBLRSTF_A>;
        #[doc = "Write proxy for field `LPWRRSTF`"]
        pub struct LPWRRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPWRRSTF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LPWRRSTF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No reset has occured"]
            #[inline(always)]
            pub fn no_reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::NORESET)
            }
            #[doc = "A reset has occured"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "1.8 V domain reset flag"]
        pub type V18PWRRSTF_A = OBLRSTF_A;
        #[doc = "Reader of field `V18PWRRSTF`"]
        pub type V18PWRRSTF_R = crate::R<bool, OBLRSTF_A>;
        #[doc = "Write proxy for field `V18PWRRSTF`"]
        pub struct V18PWRRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> V18PWRRSTF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: V18PWRRSTF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No reset has occured"]
            #[inline(always)]
            pub fn no_reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::NORESET)
            }
            #[doc = "A reset has occured"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(OBLRSTF_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Internal low speed oscillator enable"]
            #[inline(always)]
            pub fn lsion(&self) -> LSION_R {
                LSION_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Internal low speed oscillator ready"]
            #[inline(always)]
            pub fn lsirdy(&self) -> LSIRDY_R {
                LSIRDY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Remove reset flag"]
            #[inline(always)]
            pub fn rmvf(&self) -> RMVF_R {
                RMVF_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Option byte loader reset flag"]
            #[inline(always)]
            pub fn oblrstf(&self) -> OBLRSTF_R {
                OBLRSTF_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - PIN reset flag"]
            #[inline(always)]
            pub fn pinrstf(&self) -> PINRSTF_R {
                PINRSTF_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - POR/PDR reset flag"]
            #[inline(always)]
            pub fn porrstf(&self) -> PORRSTF_R {
                PORRSTF_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Software reset flag"]
            #[inline(always)]
            pub fn sftrstf(&self) -> SFTRSTF_R {
                SFTRSTF_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Independent watchdog reset flag"]
            #[inline(always)]
            pub fn iwdgrstf(&self) -> IWDGRSTF_R {
                IWDGRSTF_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Window watchdog reset flag"]
            #[inline(always)]
            pub fn wwdgrstf(&self) -> WWDGRSTF_R {
                WWDGRSTF_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Low-power reset flag"]
            #[inline(always)]
            pub fn lpwrrstf(&self) -> LPWRRSTF_R {
                LPWRRSTF_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 23 - 1.8 V domain reset flag"]
            #[inline(always)]
            pub fn v18pwrrstf(&self) -> V18PWRRSTF_R {
                V18PWRRSTF_R::new(((self.bits >> 23) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Internal low speed oscillator enable"]
            #[inline(always)]
            pub fn lsion(&mut self) -> LSION_W {
                LSION_W { w: self }
            }
            #[doc = "Bit 24 - Remove reset flag"]
            #[inline(always)]
            pub fn rmvf(&mut self) -> RMVF_W {
                RMVF_W { w: self }
            }
            #[doc = "Bit 25 - Option byte loader reset flag"]
            #[inline(always)]
            pub fn oblrstf(&mut self) -> OBLRSTF_W {
                OBLRSTF_W { w: self }
            }
            #[doc = "Bit 26 - PIN reset flag"]
            #[inline(always)]
            pub fn pinrstf(&mut self) -> PINRSTF_W {
                PINRSTF_W { w: self }
            }
            #[doc = "Bit 27 - POR/PDR reset flag"]
            #[inline(always)]
            pub fn porrstf(&mut self) -> PORRSTF_W {
                PORRSTF_W { w: self }
            }
            #[doc = "Bit 28 - Software reset flag"]
            #[inline(always)]
            pub fn sftrstf(&mut self) -> SFTRSTF_W {
                SFTRSTF_W { w: self }
            }
            #[doc = "Bit 29 - Independent watchdog reset flag"]
            #[inline(always)]
            pub fn iwdgrstf(&mut self) -> IWDGRSTF_W {
                IWDGRSTF_W { w: self }
            }
            #[doc = "Bit 30 - Window watchdog reset flag"]
            #[inline(always)]
            pub fn wwdgrstf(&mut self) -> WWDGRSTF_W {
                WWDGRSTF_W { w: self }
            }
            #[doc = "Bit 31 - Low-power reset flag"]
            #[inline(always)]
            pub fn lpwrrstf(&mut self) -> LPWRRSTF_W {
                LPWRRSTF_W { w: self }
            }
            #[doc = "Bit 23 - 1.8 V domain reset flag"]
            #[inline(always)]
            pub fn v18pwrrstf(&mut self) -> V18PWRRSTF_W {
                V18PWRRSTF_W { w: self }
            }
        }
    }
    #[doc = "AHB peripheral reset register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ahbrstr](ahbrstr) module"]
    pub type AHBRSTR = crate::Reg<u32, _AHBRSTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AHBRSTR;
    #[doc = "`read()` method returns [ahbrstr::R](ahbrstr::R) reader structure"]
    impl crate::Readable for AHBRSTR {}
    #[doc = "`write(|w| ..)` method takes [ahbrstr::W](ahbrstr::W) writer structure"]
    impl crate::Writable for AHBRSTR {}
    #[doc = "AHB peripheral reset register"]
    pub mod ahbrstr {
        #[doc = "Reader of register AHBRSTR"]
        pub type R = crate::R<u32, super::AHBRSTR>;
        #[doc = "Writer for register AHBRSTR"]
        pub type W = crate::W<u32, super::AHBRSTR>;
        #[doc = "Register AHBRSTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::AHBRSTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "I/O port A reset\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IOPARST_A {
            #[doc = "1: Reset the selected module"]
            RESET = 1,
        }
        impl From<IOPARST_A> for bool {
            #[inline(always)]
            fn from(variant: IOPARST_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IOPARST`"]
        pub type IOPARST_R = crate::R<bool, IOPARST_A>;
        impl IOPARST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, IOPARST_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(IOPARST_A::RESET),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == IOPARST_A::RESET
            }
        }
        #[doc = "Write proxy for field `IOPARST`"]
        pub struct IOPARST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPARST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IOPARST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(IOPARST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "I/O port B reset"]
        pub type IOPBRST_A = IOPARST_A;
        #[doc = "Reader of field `IOPBRST`"]
        pub type IOPBRST_R = crate::R<bool, IOPARST_A>;
        #[doc = "Write proxy for field `IOPBRST`"]
        pub struct IOPBRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPBRST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IOPBRST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(IOPARST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "I/O port C reset"]
        pub type IOPCRST_A = IOPARST_A;
        #[doc = "Reader of field `IOPCRST`"]
        pub type IOPCRST_R = crate::R<bool, IOPARST_A>;
        #[doc = "Write proxy for field `IOPCRST`"]
        pub struct IOPCRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPCRST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IOPCRST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(IOPARST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "I/O port D reset"]
        pub type IOPDRST_A = IOPARST_A;
        #[doc = "Reader of field `IOPDRST`"]
        pub type IOPDRST_R = crate::R<bool, IOPARST_A>;
        #[doc = "Write proxy for field `IOPDRST`"]
        pub struct IOPDRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPDRST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IOPDRST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(IOPARST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "I/O port F reset"]
        pub type IOPFRST_A = IOPARST_A;
        #[doc = "Reader of field `IOPFRST`"]
        pub type IOPFRST_R = crate::R<bool, IOPARST_A>;
        #[doc = "Write proxy for field `IOPFRST`"]
        pub struct IOPFRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPFRST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IOPFRST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Reset the selected module"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(IOPARST_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 17 - I/O port A reset"]
            #[inline(always)]
            pub fn ioparst(&self) -> IOPARST_R {
                IOPARST_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - I/O port B reset"]
            #[inline(always)]
            pub fn iopbrst(&self) -> IOPBRST_R {
                IOPBRST_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - I/O port C reset"]
            #[inline(always)]
            pub fn iopcrst(&self) -> IOPCRST_R {
                IOPCRST_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - I/O port D reset"]
            #[inline(always)]
            pub fn iopdrst(&self) -> IOPDRST_R {
                IOPDRST_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 22 - I/O port F reset"]
            #[inline(always)]
            pub fn iopfrst(&self) -> IOPFRST_R {
                IOPFRST_R::new(((self.bits >> 22) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 17 - I/O port A reset"]
            #[inline(always)]
            pub fn ioparst(&mut self) -> IOPARST_W {
                IOPARST_W { w: self }
            }
            #[doc = "Bit 18 - I/O port B reset"]
            #[inline(always)]
            pub fn iopbrst(&mut self) -> IOPBRST_W {
                IOPBRST_W { w: self }
            }
            #[doc = "Bit 19 - I/O port C reset"]
            #[inline(always)]
            pub fn iopcrst(&mut self) -> IOPCRST_W {
                IOPCRST_W { w: self }
            }
            #[doc = "Bit 20 - I/O port D reset"]
            #[inline(always)]
            pub fn iopdrst(&mut self) -> IOPDRST_W {
                IOPDRST_W { w: self }
            }
            #[doc = "Bit 22 - I/O port F reset"]
            #[inline(always)]
            pub fn iopfrst(&mut self) -> IOPFRST_W {
                IOPFRST_W { w: self }
            }
        }
    }
    #[doc = "Clock configuration register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr2](cfgr2) module"]
    pub type CFGR2 = crate::Reg<u32, _CFGR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR2;
    #[doc = "`read()` method returns [cfgr2::R](cfgr2::R) reader structure"]
    impl crate::Readable for CFGR2 {}
    #[doc = "`write(|w| ..)` method takes [cfgr2::W](cfgr2::W) writer structure"]
    impl crate::Writable for CFGR2 {}
    #[doc = "Clock configuration register 2"]
    pub mod cfgr2 {
        #[doc = "Reader of register CFGR2"]
        pub type R = crate::R<u32, super::CFGR2>;
        #[doc = "Writer for register CFGR2"]
        pub type W = crate::W<u32, super::CFGR2>;
        #[doc = "Register CFGR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFGR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "PREDIV division factor\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PREDIV_A {
            #[doc = "0: PREDIV input clock not divided"]
            DIV1 = 0,
            #[doc = "1: PREDIV input clock divided by 2"]
            DIV2 = 1,
            #[doc = "2: PREDIV input clock divided by 3"]
            DIV3 = 2,
            #[doc = "3: PREDIV input clock divided by 4"]
            DIV4 = 3,
            #[doc = "4: PREDIV input clock divided by 5"]
            DIV5 = 4,
            #[doc = "5: PREDIV input clock divided by 6"]
            DIV6 = 5,
            #[doc = "6: PREDIV input clock divided by 7"]
            DIV7 = 6,
            #[doc = "7: PREDIV input clock divided by 8"]
            DIV8 = 7,
            #[doc = "8: PREDIV input clock divided by 9"]
            DIV9 = 8,
            #[doc = "9: PREDIV input clock divided by 10"]
            DIV10 = 9,
            #[doc = "10: PREDIV input clock divided by 11"]
            DIV11 = 10,
            #[doc = "11: PREDIV input clock divided by 12"]
            DIV12 = 11,
            #[doc = "12: PREDIV input clock divided by 13"]
            DIV13 = 12,
            #[doc = "13: PREDIV input clock divided by 14"]
            DIV14 = 13,
            #[doc = "14: PREDIV input clock divided by 15"]
            DIV15 = 14,
            #[doc = "15: PREDIV input clock divided by 16"]
            DIV16 = 15,
        }
        impl From<PREDIV_A> for u8 {
            #[inline(always)]
            fn from(variant: PREDIV_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PREDIV`"]
        pub type PREDIV_R = crate::R<u8, PREDIV_A>;
        impl PREDIV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PREDIV_A {
                match self.bits {
                    0 => PREDIV_A::DIV1,
                    1 => PREDIV_A::DIV2,
                    2 => PREDIV_A::DIV3,
                    3 => PREDIV_A::DIV4,
                    4 => PREDIV_A::DIV5,
                    5 => PREDIV_A::DIV6,
                    6 => PREDIV_A::DIV7,
                    7 => PREDIV_A::DIV8,
                    8 => PREDIV_A::DIV9,
                    9 => PREDIV_A::DIV10,
                    10 => PREDIV_A::DIV11,
                    11 => PREDIV_A::DIV12,
                    12 => PREDIV_A::DIV13,
                    13 => PREDIV_A::DIV14,
                    14 => PREDIV_A::DIV15,
                    15 => PREDIV_A::DIV16,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == PREDIV_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == PREDIV_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV3`"]
            #[inline(always)]
            pub fn is_div3(&self) -> bool {
                *self == PREDIV_A::DIV3
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == PREDIV_A::DIV4
            }
            #[doc = "Checks if the value of the field is `DIV5`"]
            #[inline(always)]
            pub fn is_div5(&self) -> bool {
                *self == PREDIV_A::DIV5
            }
            #[doc = "Checks if the value of the field is `DIV6`"]
            #[inline(always)]
            pub fn is_div6(&self) -> bool {
                *self == PREDIV_A::DIV6
            }
            #[doc = "Checks if the value of the field is `DIV7`"]
            #[inline(always)]
            pub fn is_div7(&self) -> bool {
                *self == PREDIV_A::DIV7
            }
            #[doc = "Checks if the value of the field is `DIV8`"]
            #[inline(always)]
            pub fn is_div8(&self) -> bool {
                *self == PREDIV_A::DIV8
            }
            #[doc = "Checks if the value of the field is `DIV9`"]
            #[inline(always)]
            pub fn is_div9(&self) -> bool {
                *self == PREDIV_A::DIV9
            }
            #[doc = "Checks if the value of the field is `DIV10`"]
            #[inline(always)]
            pub fn is_div10(&self) -> bool {
                *self == PREDIV_A::DIV10
            }
            #[doc = "Checks if the value of the field is `DIV11`"]
            #[inline(always)]
            pub fn is_div11(&self) -> bool {
                *self == PREDIV_A::DIV11
            }
            #[doc = "Checks if the value of the field is `DIV12`"]
            #[inline(always)]
            pub fn is_div12(&self) -> bool {
                *self == PREDIV_A::DIV12
            }
            #[doc = "Checks if the value of the field is `DIV13`"]
            #[inline(always)]
            pub fn is_div13(&self) -> bool {
                *self == PREDIV_A::DIV13
            }
            #[doc = "Checks if the value of the field is `DIV14`"]
            #[inline(always)]
            pub fn is_div14(&self) -> bool {
                *self == PREDIV_A::DIV14
            }
            #[doc = "Checks if the value of the field is `DIV15`"]
            #[inline(always)]
            pub fn is_div15(&self) -> bool {
                *self == PREDIV_A::DIV15
            }
            #[doc = "Checks if the value of the field is `DIV16`"]
            #[inline(always)]
            pub fn is_div16(&self) -> bool {
                *self == PREDIV_A::DIV16
            }
        }
        #[doc = "Write proxy for field `PREDIV`"]
        pub struct PREDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PREDIV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PREDIV_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "PREDIV input clock not divided"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV1)
            }
            #[doc = "PREDIV input clock divided by 2"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV2)
            }
            #[doc = "PREDIV input clock divided by 3"]
            #[inline(always)]
            pub fn div3(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV3)
            }
            #[doc = "PREDIV input clock divided by 4"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV4)
            }
            #[doc = "PREDIV input clock divided by 5"]
            #[inline(always)]
            pub fn div5(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV5)
            }
            #[doc = "PREDIV input clock divided by 6"]
            #[inline(always)]
            pub fn div6(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV6)
            }
            #[doc = "PREDIV input clock divided by 7"]
            #[inline(always)]
            pub fn div7(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV7)
            }
            #[doc = "PREDIV input clock divided by 8"]
            #[inline(always)]
            pub fn div8(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV8)
            }
            #[doc = "PREDIV input clock divided by 9"]
            #[inline(always)]
            pub fn div9(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV9)
            }
            #[doc = "PREDIV input clock divided by 10"]
            #[inline(always)]
            pub fn div10(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV10)
            }
            #[doc = "PREDIV input clock divided by 11"]
            #[inline(always)]
            pub fn div11(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV11)
            }
            #[doc = "PREDIV input clock divided by 12"]
            #[inline(always)]
            pub fn div12(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV12)
            }
            #[doc = "PREDIV input clock divided by 13"]
            #[inline(always)]
            pub fn div13(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV13)
            }
            #[doc = "PREDIV input clock divided by 14"]
            #[inline(always)]
            pub fn div14(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV14)
            }
            #[doc = "PREDIV input clock divided by 15"]
            #[inline(always)]
            pub fn div15(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV15)
            }
            #[doc = "PREDIV input clock divided by 16"]
            #[inline(always)]
            pub fn div16(self) -> &'a mut W {
                self.variant(PREDIV_A::DIV16)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - PREDIV division factor"]
            #[inline(always)]
            pub fn prediv(&self) -> PREDIV_R {
                PREDIV_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - PREDIV division factor"]
            #[inline(always)]
            pub fn prediv(&mut self) -> PREDIV_W {
                PREDIV_W { w: self }
            }
        }
    }
    #[doc = "Clock configuration register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr3](cfgr3) module"]
    pub type CFGR3 = crate::Reg<u32, _CFGR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR3;
    #[doc = "`read()` method returns [cfgr3::R](cfgr3::R) reader structure"]
    impl crate::Readable for CFGR3 {}
    #[doc = "`write(|w| ..)` method takes [cfgr3::W](cfgr3::W) writer structure"]
    impl crate::Writable for CFGR3 {}
    #[doc = "Clock configuration register 3"]
    pub mod cfgr3 {
        #[doc = "Reader of register CFGR3"]
        pub type R = crate::R<u32, super::CFGR3>;
        #[doc = "Writer for register CFGR3"]
        pub type W = crate::W<u32, super::CFGR3>;
        #[doc = "Register CFGR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFGR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "USART1 clock source selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum USART1SW_A {
            #[doc = "0: PCLK selected as USART clock source"]
            PCLK = 0,
            #[doc = "1: SYSCLK selected as USART clock source"]
            SYSCLK = 1,
            #[doc = "2: LSE selected as USART clock source"]
            LSE = 2,
            #[doc = "3: HSI selected as USART clock source"]
            HSI = 3,
        }
        impl From<USART1SW_A> for u8 {
            #[inline(always)]
            fn from(variant: USART1SW_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `USART1SW`"]
        pub type USART1SW_R = crate::R<u8, USART1SW_A>;
        impl USART1SW_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> USART1SW_A {
                match self.bits {
                    0 => USART1SW_A::PCLK,
                    1 => USART1SW_A::SYSCLK,
                    2 => USART1SW_A::LSE,
                    3 => USART1SW_A::HSI,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `PCLK`"]
            #[inline(always)]
            pub fn is_pclk(&self) -> bool {
                *self == USART1SW_A::PCLK
            }
            #[doc = "Checks if the value of the field is `SYSCLK`"]
            #[inline(always)]
            pub fn is_sysclk(&self) -> bool {
                *self == USART1SW_A::SYSCLK
            }
            #[doc = "Checks if the value of the field is `LSE`"]
            #[inline(always)]
            pub fn is_lse(&self) -> bool {
                *self == USART1SW_A::LSE
            }
            #[doc = "Checks if the value of the field is `HSI`"]
            #[inline(always)]
            pub fn is_hsi(&self) -> bool {
                *self == USART1SW_A::HSI
            }
        }
        #[doc = "Write proxy for field `USART1SW`"]
        pub struct USART1SW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1SW_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART1SW_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "PCLK selected as USART clock source"]
            #[inline(always)]
            pub fn pclk(self) -> &'a mut W {
                self.variant(USART1SW_A::PCLK)
            }
            #[doc = "SYSCLK selected as USART clock source"]
            #[inline(always)]
            pub fn sysclk(self) -> &'a mut W {
                self.variant(USART1SW_A::SYSCLK)
            }
            #[doc = "LSE selected as USART clock source"]
            #[inline(always)]
            pub fn lse(self) -> &'a mut W {
                self.variant(USART1SW_A::LSE)
            }
            #[doc = "HSI selected as USART clock source"]
            #[inline(always)]
            pub fn hsi(self) -> &'a mut W {
                self.variant(USART1SW_A::HSI)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "I2C1 clock source selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum I2C1SW_A {
            #[doc = "0: HSI clock selected as I2C clock source"]
            HSI = 0,
            #[doc = "1: SYSCLK clock selected as I2C clock source"]
            SYSCLK = 1,
        }
        impl From<I2C1SW_A> for bool {
            #[inline(always)]
            fn from(variant: I2C1SW_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `I2C1SW`"]
        pub type I2C1SW_R = crate::R<bool, I2C1SW_A>;
        impl I2C1SW_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> I2C1SW_A {
                match self.bits {
                    false => I2C1SW_A::HSI,
                    true => I2C1SW_A::SYSCLK,
                }
            }
            #[doc = "Checks if the value of the field is `HSI`"]
            #[inline(always)]
            pub fn is_hsi(&self) -> bool {
                *self == I2C1SW_A::HSI
            }
            #[doc = "Checks if the value of the field is `SYSCLK`"]
            #[inline(always)]
            pub fn is_sysclk(&self) -> bool {
                *self == I2C1SW_A::SYSCLK
            }
        }
        #[doc = "Write proxy for field `I2C1SW`"]
        pub struct I2C1SW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1SW_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2C1SW_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "HSI clock selected as I2C clock source"]
            #[inline(always)]
            pub fn hsi(self) -> &'a mut W {
                self.variant(I2C1SW_A::HSI)
            }
            #[doc = "SYSCLK clock selected as I2C clock source"]
            #[inline(always)]
            pub fn sysclk(self) -> &'a mut W {
                self.variant(I2C1SW_A::SYSCLK)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "USB clock source selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum USBSW_A {
            #[doc = "0: USB clock disabled"]
            DISABLED = 0,
            #[doc = "1: PLL clock selected as USB clock source"]
            PLLCLK = 1,
        }
        impl From<USBSW_A> for bool {
            #[inline(always)]
            fn from(variant: USBSW_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `USBSW`"]
        pub type USBSW_R = crate::R<bool, USBSW_A>;
        impl USBSW_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> USBSW_A {
                match self.bits {
                    false => USBSW_A::DISABLED,
                    true => USBSW_A::PLLCLK,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == USBSW_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `PLLCLK`"]
            #[inline(always)]
            pub fn is_pllclk(&self) -> bool {
                *self == USBSW_A::PLLCLK
            }
        }
        #[doc = "Write proxy for field `USBSW`"]
        pub struct USBSW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBSW_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USBSW_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "USB clock disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(USBSW_A::DISABLED)
            }
            #[doc = "PLL clock selected as USB clock source"]
            #[inline(always)]
            pub fn pllclk(self) -> &'a mut W {
                self.variant(USBSW_A::PLLCLK)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `ADCSW`"]
        pub type ADCSW_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADCSW`"]
        pub struct ADCSW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCSW_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "USART2 clock source selection"]
        pub type USART2SW_A = USART1SW_A;
        #[doc = "Reader of field `USART2SW`"]
        pub type USART2SW_R = crate::R<u8, USART1SW_A>;
        #[doc = "Write proxy for field `USART2SW`"]
        pub struct USART2SW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART2SW_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART2SW_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "PCLK selected as USART clock source"]
            #[inline(always)]
            pub fn pclk(self) -> &'a mut W {
                self.variant(USART1SW_A::PCLK)
            }
            #[doc = "SYSCLK selected as USART clock source"]
            #[inline(always)]
            pub fn sysclk(self) -> &'a mut W {
                self.variant(USART1SW_A::SYSCLK)
            }
            #[doc = "LSE selected as USART clock source"]
            #[inline(always)]
            pub fn lse(self) -> &'a mut W {
                self.variant(USART1SW_A::LSE)
            }
            #[doc = "HSI selected as USART clock source"]
            #[inline(always)]
            pub fn hsi(self) -> &'a mut W {
                self.variant(USART1SW_A::HSI)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "USART3 clock source"]
        pub type USART3SW_A = USART1SW_A;
        #[doc = "Reader of field `USART3SW`"]
        pub type USART3SW_R = crate::R<u8, USART1SW_A>;
        #[doc = "Write proxy for field `USART3SW`"]
        pub struct USART3SW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART3SW_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART3SW_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "PCLK selected as USART clock source"]
            #[inline(always)]
            pub fn pclk(self) -> &'a mut W {
                self.variant(USART1SW_A::PCLK)
            }
            #[doc = "SYSCLK selected as USART clock source"]
            #[inline(always)]
            pub fn sysclk(self) -> &'a mut W {
                self.variant(USART1SW_A::SYSCLK)
            }
            #[doc = "LSE selected as USART clock source"]
            #[inline(always)]
            pub fn lse(self) -> &'a mut W {
                self.variant(USART1SW_A::LSE)
            }
            #[doc = "HSI selected as USART clock source"]
            #[inline(always)]
            pub fn hsi(self) -> &'a mut W {
                self.variant(USART1SW_A::HSI)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - USART1 clock source selection"]
            #[inline(always)]
            pub fn usart1sw(&self) -> USART1SW_R {
                USART1SW_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 4 - I2C1 clock source selection"]
            #[inline(always)]
            pub fn i2c1sw(&self) -> I2C1SW_R {
                I2C1SW_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 7 - USB clock source selection"]
            #[inline(always)]
            pub fn usbsw(&self) -> USBSW_R {
                USBSW_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ADCSW is deprecated. See ADC field in CFGR2 register."]
            #[inline(always)]
            pub fn adcsw(&self) -> ADCSW_R {
                ADCSW_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - USART2 clock source selection"]
            #[inline(always)]
            pub fn usart2sw(&self) -> USART2SW_R {
                USART2SW_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - USART3 clock source"]
            #[inline(always)]
            pub fn usart3sw(&self) -> USART3SW_R {
                USART3SW_R::new(((self.bits >> 18) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - USART1 clock source selection"]
            #[inline(always)]
            pub fn usart1sw(&mut self) -> USART1SW_W {
                USART1SW_W { w: self }
            }
            #[doc = "Bit 4 - I2C1 clock source selection"]
            #[inline(always)]
            pub fn i2c1sw(&mut self) -> I2C1SW_W {
                I2C1SW_W { w: self }
            }
            #[doc = "Bit 7 - USB clock source selection"]
            #[inline(always)]
            pub fn usbsw(&mut self) -> USBSW_W {
                USBSW_W { w: self }
            }
            #[doc = "Bit 8 - ADCSW is deprecated. See ADC field in CFGR2 register."]
            #[inline(always)]
            pub fn adcsw(&mut self) -> ADCSW_W {
                ADCSW_W { w: self }
            }
            #[doc = "Bits 16:17 - USART2 clock source selection"]
            #[inline(always)]
            pub fn usart2sw(&mut self) -> USART2SW_W {
                USART2SW_W { w: self }
            }
            #[doc = "Bits 18:19 - USART3 clock source"]
            #[inline(always)]
            pub fn usart3sw(&mut self) -> USART3SW_W {
                USART3SW_W { w: self }
            }
        }
    }
    #[doc = "Clock control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "Clock control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0x80"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x80
            }
        }
        #[doc = "HSI14 clock enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HSI14ON_A {
            #[doc = "0: HSI14 oscillator off"]
            OFF = 0,
            #[doc = "1: HSI14 oscillator on"]
            ON = 1,
        }
        impl From<HSI14ON_A> for bool {
            #[inline(always)]
            fn from(variant: HSI14ON_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HSI14ON`"]
        pub type HSI14ON_R = crate::R<bool, HSI14ON_A>;
        impl HSI14ON_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HSI14ON_A {
                match self.bits {
                    false => HSI14ON_A::OFF,
                    true => HSI14ON_A::ON,
                }
            }
            #[doc = "Checks if the value of the field is `OFF`"]
            #[inline(always)]
            pub fn is_off(&self) -> bool {
                *self == HSI14ON_A::OFF
            }
            #[doc = "Checks if the value of the field is `ON`"]
            #[inline(always)]
            pub fn is_on(&self) -> bool {
                *self == HSI14ON_A::ON
            }
        }
        #[doc = "Write proxy for field `HSI14ON`"]
        pub struct HSI14ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSI14ON_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HSI14ON_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "HSI14 oscillator off"]
            #[inline(always)]
            pub fn off(self) -> &'a mut W {
                self.variant(HSI14ON_A::OFF)
            }
            #[doc = "HSI14 oscillator on"]
            #[inline(always)]
            pub fn on(self) -> &'a mut W {
                self.variant(HSI14ON_A::ON)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "HR14 clock ready flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HSI14RDY_A {
            #[doc = "0: HSI14 oscillator not ready"]
            NOTREADY = 0,
            #[doc = "1: HSI14 oscillator ready"]
            READY = 1,
        }
        impl From<HSI14RDY_A> for bool {
            #[inline(always)]
            fn from(variant: HSI14RDY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HSI14RDY`"]
        pub type HSI14RDY_R = crate::R<bool, HSI14RDY_A>;
        impl HSI14RDY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HSI14RDY_A {
                match self.bits {
                    false => HSI14RDY_A::NOTREADY,
                    true => HSI14RDY_A::READY,
                }
            }
            #[doc = "Checks if the value of the field is `NOTREADY`"]
            #[inline(always)]
            pub fn is_not_ready(&self) -> bool {
                *self == HSI14RDY_A::NOTREADY
            }
            #[doc = "Checks if the value of the field is `READY`"]
            #[inline(always)]
            pub fn is_ready(&self) -> bool {
                *self == HSI14RDY_A::READY
            }
        }
        #[doc = "HSI14 clock request from ADC disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HSI14DIS_A {
            #[doc = "0: ADC can turn on the HSI14 oscillator"]
            ALLOW = 0,
            #[doc = "1: ADC can not turn on the HSI14 oscillator"]
            DISALLOW = 1,
        }
        impl From<HSI14DIS_A> for bool {
            #[inline(always)]
            fn from(variant: HSI14DIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HSI14DIS`"]
        pub type HSI14DIS_R = crate::R<bool, HSI14DIS_A>;
        impl HSI14DIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HSI14DIS_A {
                match self.bits {
                    false => HSI14DIS_A::ALLOW,
                    true => HSI14DIS_A::DISALLOW,
                }
            }
            #[doc = "Checks if the value of the field is `ALLOW`"]
            #[inline(always)]
            pub fn is_allow(&self) -> bool {
                *self == HSI14DIS_A::ALLOW
            }
            #[doc = "Checks if the value of the field is `DISALLOW`"]
            #[inline(always)]
            pub fn is_disallow(&self) -> bool {
                *self == HSI14DIS_A::DISALLOW
            }
        }
        #[doc = "Write proxy for field `HSI14DIS`"]
        pub struct HSI14DIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSI14DIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HSI14DIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ADC can turn on the HSI14 oscillator"]
            #[inline(always)]
            pub fn allow(self) -> &'a mut W {
                self.variant(HSI14DIS_A::ALLOW)
            }
            #[doc = "ADC can not turn on the HSI14 oscillator"]
            #[inline(always)]
            pub fn disallow(self) -> &'a mut W {
                self.variant(HSI14DIS_A::DISALLOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `HSI14TRIM`"]
        pub type HSI14TRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HSI14TRIM`"]
        pub struct HSI14TRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSI14TRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 3)) | (((value as u32) & 0x1f) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `HSI14CAL`"]
        pub type HSI14CAL_R = crate::R<u8, u8>;
        #[doc = "HSI48 clock enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HSI48ON_A {
            #[doc = "0: HSI48 oscillator off"]
            OFF = 0,
            #[doc = "1: HSI48 oscillator on"]
            ON = 1,
        }
        impl From<HSI48ON_A> for bool {
            #[inline(always)]
            fn from(variant: HSI48ON_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HSI48ON`"]
        pub type HSI48ON_R = crate::R<bool, HSI48ON_A>;
        impl HSI48ON_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HSI48ON_A {
                match self.bits {
                    false => HSI48ON_A::OFF,
                    true => HSI48ON_A::ON,
                }
            }
            #[doc = "Checks if the value of the field is `OFF`"]
            #[inline(always)]
            pub fn is_off(&self) -> bool {
                *self == HSI48ON_A::OFF
            }
            #[doc = "Checks if the value of the field is `ON`"]
            #[inline(always)]
            pub fn is_on(&self) -> bool {
                *self == HSI48ON_A::ON
            }
        }
        #[doc = "Write proxy for field `HSI48ON`"]
        pub struct HSI48ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSI48ON_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HSI48ON_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "HSI48 oscillator off"]
            #[inline(always)]
            pub fn off(self) -> &'a mut W {
                self.variant(HSI48ON_A::OFF)
            }
            #[doc = "HSI48 oscillator on"]
            #[inline(always)]
            pub fn on(self) -> &'a mut W {
                self.variant(HSI48ON_A::ON)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "HSI48 clock ready flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HSI48RDY_A {
            #[doc = "0: HSI48 oscillator ready"]
            NOTREADY = 0,
            #[doc = "1: HSI48 oscillator ready"]
            READY = 1,
        }
        impl From<HSI48RDY_A> for bool {
            #[inline(always)]
            fn from(variant: HSI48RDY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HSI48RDY`"]
        pub type HSI48RDY_R = crate::R<bool, HSI48RDY_A>;
        impl HSI48RDY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HSI48RDY_A {
                match self.bits {
                    false => HSI48RDY_A::NOTREADY,
                    true => HSI48RDY_A::READY,
                }
            }
            #[doc = "Checks if the value of the field is `NOTREADY`"]
            #[inline(always)]
            pub fn is_not_ready(&self) -> bool {
                *self == HSI48RDY_A::NOTREADY
            }
            #[doc = "Checks if the value of the field is `READY`"]
            #[inline(always)]
            pub fn is_ready(&self) -> bool {
                *self == HSI48RDY_A::READY
            }
        }
        #[doc = "Reader of field `HSI48CAL`"]
        pub type HSI48CAL_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bit 0 - HSI14 clock enable"]
            #[inline(always)]
            pub fn hsi14on(&self) -> HSI14ON_R {
                HSI14ON_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - HR14 clock ready flag"]
            #[inline(always)]
            pub fn hsi14rdy(&self) -> HSI14RDY_R {
                HSI14RDY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - HSI14 clock request from ADC disable"]
            #[inline(always)]
            pub fn hsi14dis(&self) -> HSI14DIS_R {
                HSI14DIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 3:7 - HSI14 clock trimming"]
            #[inline(always)]
            pub fn hsi14trim(&self) -> HSI14TRIM_R {
                HSI14TRIM_R::new(((self.bits >> 3) & 0x1f) as u8)
            }
            #[doc = "Bits 8:15 - HSI14 clock calibration"]
            #[inline(always)]
            pub fn hsi14cal(&self) -> HSI14CAL_R {
                HSI14CAL_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bit 16 - HSI48 clock enable"]
            #[inline(always)]
            pub fn hsi48on(&self) -> HSI48ON_R {
                HSI48ON_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - HSI48 clock ready flag"]
            #[inline(always)]
            pub fn hsi48rdy(&self) -> HSI48RDY_R {
                HSI48RDY_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bits 24:31 - HSI48 factory clock calibration"]
            #[inline(always)]
            pub fn hsi48cal(&self) -> HSI48CAL_R {
                HSI48CAL_R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - HSI14 clock enable"]
            #[inline(always)]
            pub fn hsi14on(&mut self) -> HSI14ON_W {
                HSI14ON_W { w: self }
            }
            #[doc = "Bit 2 - HSI14 clock request from ADC disable"]
            #[inline(always)]
            pub fn hsi14dis(&mut self) -> HSI14DIS_W {
                HSI14DIS_W { w: self }
            }
            #[doc = "Bits 3:7 - HSI14 clock trimming"]
            #[inline(always)]
            pub fn hsi14trim(&mut self) -> HSI14TRIM_W {
                HSI14TRIM_W { w: self }
            }
            #[doc = "Bit 16 - HSI48 clock enable"]
            #[inline(always)]
            pub fn hsi48on(&mut self) -> HSI48ON_W {
                HSI48ON_W { w: self }
            }
        }
    }
}
#[doc = "System configuration controller"]
pub struct SYSCFG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSCFG {}
impl SYSCFG {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const syscfg::RegisterBlock {
        0x4001_0000 as *const _
    }
}
impl Deref for SYSCFG {
    type Target = syscfg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SYSCFG::ptr() }
    }
}
#[doc = "System configuration controller"]
pub mod syscfg {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - configuration register 1"]
        pub cfgr1: CFGR1,
        _reserved1: [u8; 4usize],
        #[doc = "0x08 - external interrupt configuration register 1"]
        pub exticr1: EXTICR1,
        #[doc = "0x0c - external interrupt configuration register 2"]
        pub exticr2: EXTICR2,
        #[doc = "0x10 - external interrupt configuration register 3"]
        pub exticr3: EXTICR3,
        #[doc = "0x14 - external interrupt configuration register 4"]
        pub exticr4: EXTICR4,
        #[doc = "0x18 - configuration register 2"]
        pub cfgr2: CFGR2,
    }
    #[doc = "configuration register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr1](cfgr1) module"]
    pub type CFGR1 = crate::Reg<u32, _CFGR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR1;
    #[doc = "`read()` method returns [cfgr1::R](cfgr1::R) reader structure"]
    impl crate::Readable for CFGR1 {}
    #[doc = "`write(|w| ..)` method takes [cfgr1::W](cfgr1::W) writer structure"]
    impl crate::Writable for CFGR1 {}
    #[doc = "configuration register 1"]
    pub mod cfgr1 {
        #[doc = "Reader of register CFGR1"]
        pub type R = crate::R<u32, super::CFGR1>;
        #[doc = "Writer for register CFGR1"]
        pub type W = crate::W<u32, super::CFGR1>;
        #[doc = "Register CFGR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFGR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Memory mapping selection bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MEM_MODE_A {
            #[doc = "0: Main Flash memory mapped at 0x0000_0000"]
            MAINFLASH = 0,
            #[doc = "1: System Flash memory mapped at 0x0000_0000"]
            SYSTEMFLASH = 1,
            #[doc = "2: Main Flash memory mapped at 0x0000_0000"]
            MAINFLASH2 = 2,
            #[doc = "3: Embedded SRAM mapped at 0x0000_0000"]
            SRAM = 3,
        }
        impl From<MEM_MODE_A> for u8 {
            #[inline(always)]
            fn from(variant: MEM_MODE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MEM_MODE`"]
        pub type MEM_MODE_R = crate::R<u8, MEM_MODE_A>;
        impl MEM_MODE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MEM_MODE_A {
                match self.bits {
                    0 => MEM_MODE_A::MAINFLASH,
                    1 => MEM_MODE_A::SYSTEMFLASH,
                    2 => MEM_MODE_A::MAINFLASH2,
                    3 => MEM_MODE_A::SRAM,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `MAINFLASH`"]
            #[inline(always)]
            pub fn is_main_flash(&self) -> bool {
                *self == MEM_MODE_A::MAINFLASH
            }
            #[doc = "Checks if the value of the field is `SYSTEMFLASH`"]
            #[inline(always)]
            pub fn is_system_flash(&self) -> bool {
                *self == MEM_MODE_A::SYSTEMFLASH
            }
            #[doc = "Checks if the value of the field is `MAINFLASH2`"]
            #[inline(always)]
            pub fn is_main_flash2(&self) -> bool {
                *self == MEM_MODE_A::MAINFLASH2
            }
            #[doc = "Checks if the value of the field is `SRAM`"]
            #[inline(always)]
            pub fn is_sram(&self) -> bool {
                *self == MEM_MODE_A::SRAM
            }
        }
        #[doc = "Write proxy for field `MEM_MODE`"]
        pub struct MEM_MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM_MODE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MEM_MODE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Main Flash memory mapped at 0x0000_0000"]
            #[inline(always)]
            pub fn main_flash(self) -> &'a mut W {
                self.variant(MEM_MODE_A::MAINFLASH)
            }
            #[doc = "System Flash memory mapped at 0x0000_0000"]
            #[inline(always)]
            pub fn system_flash(self) -> &'a mut W {
                self.variant(MEM_MODE_A::SYSTEMFLASH)
            }
            #[doc = "Main Flash memory mapped at 0x0000_0000"]
            #[inline(always)]
            pub fn main_flash2(self) -> &'a mut W {
                self.variant(MEM_MODE_A::MAINFLASH2)
            }
            #[doc = "Embedded SRAM mapped at 0x0000_0000"]
            #[inline(always)]
            pub fn sram(self) -> &'a mut W {
                self.variant(MEM_MODE_A::SRAM)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "ADC DMA remapping bit\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADC_DMA_RMP_A {
            #[doc = "0: ADC DMA request mapped on DMA channel 1"]
            NOTREMAPPED = 0,
            #[doc = "1: ADC DMA request mapped on DMA channel 2"]
            REMAPPED = 1,
        }
        impl From<ADC_DMA_RMP_A> for bool {
            #[inline(always)]
            fn from(variant: ADC_DMA_RMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADC_DMA_RMP`"]
        pub type ADC_DMA_RMP_R = crate::R<bool, ADC_DMA_RMP_A>;
        impl ADC_DMA_RMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADC_DMA_RMP_A {
                match self.bits {
                    false => ADC_DMA_RMP_A::NOTREMAPPED,
                    true => ADC_DMA_RMP_A::REMAPPED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTREMAPPED`"]
            #[inline(always)]
            pub fn is_not_remapped(&self) -> bool {
                *self == ADC_DMA_RMP_A::NOTREMAPPED
            }
            #[doc = "Checks if the value of the field is `REMAPPED`"]
            #[inline(always)]
            pub fn is_remapped(&self) -> bool {
                *self == ADC_DMA_RMP_A::REMAPPED
            }
        }
        #[doc = "Write proxy for field `ADC_DMA_RMP`"]
        pub struct ADC_DMA_RMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_DMA_RMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADC_DMA_RMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ADC DMA request mapped on DMA channel 1"]
            #[inline(always)]
            pub fn not_remapped(self) -> &'a mut W {
                self.variant(ADC_DMA_RMP_A::NOTREMAPPED)
            }
            #[doc = "ADC DMA request mapped on DMA channel 2"]
            #[inline(always)]
            pub fn remapped(self) -> &'a mut W {
                self.variant(ADC_DMA_RMP_A::REMAPPED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "USART1_TX DMA remapping bit\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum USART1_TX_DMA_RMP_A {
            #[doc = "0: USART1_TX DMA request mapped on DMA channel 2"]
            NOTREMAPPED = 0,
            #[doc = "1: USART1_TX DMA request mapped on DMA channel 4"]
            REMAPPED = 1,
        }
        impl From<USART1_TX_DMA_RMP_A> for bool {
            #[inline(always)]
            fn from(variant: USART1_TX_DMA_RMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `USART1_TX_DMA_RMP`"]
        pub type USART1_TX_DMA_RMP_R = crate::R<bool, USART1_TX_DMA_RMP_A>;
        impl USART1_TX_DMA_RMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> USART1_TX_DMA_RMP_A {
                match self.bits {
                    false => USART1_TX_DMA_RMP_A::NOTREMAPPED,
                    true => USART1_TX_DMA_RMP_A::REMAPPED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTREMAPPED`"]
            #[inline(always)]
            pub fn is_not_remapped(&self) -> bool {
                *self == USART1_TX_DMA_RMP_A::NOTREMAPPED
            }
            #[doc = "Checks if the value of the field is `REMAPPED`"]
            #[inline(always)]
            pub fn is_remapped(&self) -> bool {
                *self == USART1_TX_DMA_RMP_A::REMAPPED
            }
        }
        #[doc = "Write proxy for field `USART1_TX_DMA_RMP`"]
        pub struct USART1_TX_DMA_RMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1_TX_DMA_RMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART1_TX_DMA_RMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "USART1_TX DMA request mapped on DMA channel 2"]
            #[inline(always)]
            pub fn not_remapped(self) -> &'a mut W {
                self.variant(USART1_TX_DMA_RMP_A::NOTREMAPPED)
            }
            #[doc = "USART1_TX DMA request mapped on DMA channel 4"]
            #[inline(always)]
            pub fn remapped(self) -> &'a mut W {
                self.variant(USART1_TX_DMA_RMP_A::REMAPPED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "USART1_RX DMA request remapping bit\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum USART1_RX_DMA_RMP_A {
            #[doc = "0: USART1_RX DMA request mapped on DMA channel 3"]
            NOTREMAPPED = 0,
            #[doc = "1: USART1_RX DMA request mapped on DMA channel 5"]
            REMAPPED = 1,
        }
        impl From<USART1_RX_DMA_RMP_A> for bool {
            #[inline(always)]
            fn from(variant: USART1_RX_DMA_RMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `USART1_RX_DMA_RMP`"]
        pub type USART1_RX_DMA_RMP_R = crate::R<bool, USART1_RX_DMA_RMP_A>;
        impl USART1_RX_DMA_RMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> USART1_RX_DMA_RMP_A {
                match self.bits {
                    false => USART1_RX_DMA_RMP_A::NOTREMAPPED,
                    true => USART1_RX_DMA_RMP_A::REMAPPED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTREMAPPED`"]
            #[inline(always)]
            pub fn is_not_remapped(&self) -> bool {
                *self == USART1_RX_DMA_RMP_A::NOTREMAPPED
            }
            #[doc = "Checks if the value of the field is `REMAPPED`"]
            #[inline(always)]
            pub fn is_remapped(&self) -> bool {
                *self == USART1_RX_DMA_RMP_A::REMAPPED
            }
        }
        #[doc = "Write proxy for field `USART1_RX_DMA_RMP`"]
        pub struct USART1_RX_DMA_RMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1_RX_DMA_RMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART1_RX_DMA_RMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "USART1_RX DMA request mapped on DMA channel 3"]
            #[inline(always)]
            pub fn not_remapped(self) -> &'a mut W {
                self.variant(USART1_RX_DMA_RMP_A::NOTREMAPPED)
            }
            #[doc = "USART1_RX DMA request mapped on DMA channel 5"]
            #[inline(always)]
            pub fn remapped(self) -> &'a mut W {
                self.variant(USART1_RX_DMA_RMP_A::REMAPPED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "TIM16 DMA request remapping bit\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIM16_DMA_RMP_A {
            #[doc = "0: TIM16_CH1 and TIM16_UP DMA request mapped on DMA channel 3"]
            NOTREMAPPED = 0,
            #[doc = "1: TIM16_CH1 and TIM16_UP DMA request mapped on DMA channel 4"]
            REMAPPED = 1,
        }
        impl From<TIM16_DMA_RMP_A> for bool {
            #[inline(always)]
            fn from(variant: TIM16_DMA_RMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIM16_DMA_RMP`"]
        pub type TIM16_DMA_RMP_R = crate::R<bool, TIM16_DMA_RMP_A>;
        impl TIM16_DMA_RMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIM16_DMA_RMP_A {
                match self.bits {
                    false => TIM16_DMA_RMP_A::NOTREMAPPED,
                    true => TIM16_DMA_RMP_A::REMAPPED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTREMAPPED`"]
            #[inline(always)]
            pub fn is_not_remapped(&self) -> bool {
                *self == TIM16_DMA_RMP_A::NOTREMAPPED
            }
            #[doc = "Checks if the value of the field is `REMAPPED`"]
            #[inline(always)]
            pub fn is_remapped(&self) -> bool {
                *self == TIM16_DMA_RMP_A::REMAPPED
            }
        }
        #[doc = "Write proxy for field `TIM16_DMA_RMP`"]
        pub struct TIM16_DMA_RMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM16_DMA_RMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM16_DMA_RMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIM16_CH1 and TIM16_UP DMA request mapped on DMA channel 3"]
            #[inline(always)]
            pub fn not_remapped(self) -> &'a mut W {
                self.variant(TIM16_DMA_RMP_A::NOTREMAPPED)
            }
            #[doc = "TIM16_CH1 and TIM16_UP DMA request mapped on DMA channel 4"]
            #[inline(always)]
            pub fn remapped(self) -> &'a mut W {
                self.variant(TIM16_DMA_RMP_A::REMAPPED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "TIM17 DMA request remapping bit\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIM17_DMA_RMP_A {
            #[doc = "0: TIM17_CH1 and TIM17_UP DMA request mapped on DMA channel 1"]
            NOTREMAPPED = 0,
            #[doc = "1: TIM17_CH1 and TIM17_UP DMA request mapped on DMA channel 2"]
            REMAPPED = 1,
        }
        impl From<TIM17_DMA_RMP_A> for bool {
            #[inline(always)]
            fn from(variant: TIM17_DMA_RMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIM17_DMA_RMP`"]
        pub type TIM17_DMA_RMP_R = crate::R<bool, TIM17_DMA_RMP_A>;
        impl TIM17_DMA_RMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIM17_DMA_RMP_A {
                match self.bits {
                    false => TIM17_DMA_RMP_A::NOTREMAPPED,
                    true => TIM17_DMA_RMP_A::REMAPPED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTREMAPPED`"]
            #[inline(always)]
            pub fn is_not_remapped(&self) -> bool {
                *self == TIM17_DMA_RMP_A::NOTREMAPPED
            }
            #[doc = "Checks if the value of the field is `REMAPPED`"]
            #[inline(always)]
            pub fn is_remapped(&self) -> bool {
                *self == TIM17_DMA_RMP_A::REMAPPED
            }
        }
        #[doc = "Write proxy for field `TIM17_DMA_RMP`"]
        pub struct TIM17_DMA_RMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM17_DMA_RMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIM17_DMA_RMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIM17_CH1 and TIM17_UP DMA request mapped on DMA channel 1"]
            #[inline(always)]
            pub fn not_remapped(self) -> &'a mut W {
                self.variant(TIM17_DMA_RMP_A::NOTREMAPPED)
            }
            #[doc = "TIM17_CH1 and TIM17_UP DMA request mapped on DMA channel 2"]
            #[inline(always)]
            pub fn remapped(self) -> &'a mut W {
                self.variant(TIM17_DMA_RMP_A::REMAPPED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Fast Mode Plus (FM plus) driving capability activation bits.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum I2C_PB6_FMP_A {
            #[doc = "0: PB6 pin operate in standard mode"]
            STANDARD = 0,
            #[doc = "1: I2C FM+ mode enabled on PB6 and the Speed control is bypassed"]
            FMP = 1,
        }
        impl From<I2C_PB6_FMP_A> for bool {
            #[inline(always)]
            fn from(variant: I2C_PB6_FMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `I2C_PB6_FMP`"]
        pub type I2C_PB6_FMP_R = crate::R<bool, I2C_PB6_FMP_A>;
        impl I2C_PB6_FMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> I2C_PB6_FMP_A {
                match self.bits {
                    false => I2C_PB6_FMP_A::STANDARD,
                    true => I2C_PB6_FMP_A::FMP,
                }
            }
            #[doc = "Checks if the value of the field is `STANDARD`"]
            #[inline(always)]
            pub fn is_standard(&self) -> bool {
                *self == I2C_PB6_FMP_A::STANDARD
            }
            #[doc = "Checks if the value of the field is `FMP`"]
            #[inline(always)]
            pub fn is_fmp(&self) -> bool {
                *self == I2C_PB6_FMP_A::FMP
            }
        }
        #[doc = "Write proxy for field `I2C_PB6_FMP`"]
        pub struct I2C_PB6_FMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C_PB6_FMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2C_PB6_FMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PB6 pin operate in standard mode"]
            #[inline(always)]
            pub fn standard(self) -> &'a mut W {
                self.variant(I2C_PB6_FMP_A::STANDARD)
            }
            #[doc = "I2C FM+ mode enabled on PB6 and the Speed control is bypassed"]
            #[inline(always)]
            pub fn fmp(self) -> &'a mut W {
                self.variant(I2C_PB6_FMP_A::FMP)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Fast Mode Plus (FM+) driving capability activation bits.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum I2C_PB7_FMP_A {
            #[doc = "0: PB7 pin operate in standard mode"]
            STANDARD = 0,
            #[doc = "1: I2C FM+ mode enabled on PB7 and the Speed control is bypassed"]
            FMP = 1,
        }
        impl From<I2C_PB7_FMP_A> for bool {
            #[inline(always)]
            fn from(variant: I2C_PB7_FMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `I2C_PB7_FMP`"]
        pub type I2C_PB7_FMP_R = crate::R<bool, I2C_PB7_FMP_A>;
        impl I2C_PB7_FMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> I2C_PB7_FMP_A {
                match self.bits {
                    false => I2C_PB7_FMP_A::STANDARD,
                    true => I2C_PB7_FMP_A::FMP,
                }
            }
            #[doc = "Checks if the value of the field is `STANDARD`"]
            #[inline(always)]
            pub fn is_standard(&self) -> bool {
                *self == I2C_PB7_FMP_A::STANDARD
            }
            #[doc = "Checks if the value of the field is `FMP`"]
            #[inline(always)]
            pub fn is_fmp(&self) -> bool {
                *self == I2C_PB7_FMP_A::FMP
            }
        }
        #[doc = "Write proxy for field `I2C_PB7_FMP`"]
        pub struct I2C_PB7_FMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C_PB7_FMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2C_PB7_FMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PB7 pin operate in standard mode"]
            #[inline(always)]
            pub fn standard(self) -> &'a mut W {
                self.variant(I2C_PB7_FMP_A::STANDARD)
            }
            #[doc = "I2C FM+ mode enabled on PB7 and the Speed control is bypassed"]
            #[inline(always)]
            pub fn fmp(self) -> &'a mut W {
                self.variant(I2C_PB7_FMP_A::FMP)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Fast Mode Plus (FM+) driving capability activation bits.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum I2C_PB8_FMP_A {
            #[doc = "0: PB8 pin operate in standard mode"]
            STANDARD = 0,
            #[doc = "1: I2C FM+ mode enabled on PB8 and the Speed control is bypassed"]
            FMP = 1,
        }
        impl From<I2C_PB8_FMP_A> for bool {
            #[inline(always)]
            fn from(variant: I2C_PB8_FMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `I2C_PB8_FMP`"]
        pub type I2C_PB8_FMP_R = crate::R<bool, I2C_PB8_FMP_A>;
        impl I2C_PB8_FMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> I2C_PB8_FMP_A {
                match self.bits {
                    false => I2C_PB8_FMP_A::STANDARD,
                    true => I2C_PB8_FMP_A::FMP,
                }
            }
            #[doc = "Checks if the value of the field is `STANDARD`"]
            #[inline(always)]
            pub fn is_standard(&self) -> bool {
                *self == I2C_PB8_FMP_A::STANDARD
            }
            #[doc = "Checks if the value of the field is `FMP`"]
            #[inline(always)]
            pub fn is_fmp(&self) -> bool {
                *self == I2C_PB8_FMP_A::FMP
            }
        }
        #[doc = "Write proxy for field `I2C_PB8_FMP`"]
        pub struct I2C_PB8_FMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C_PB8_FMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2C_PB8_FMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PB8 pin operate in standard mode"]
            #[inline(always)]
            pub fn standard(self) -> &'a mut W {
                self.variant(I2C_PB8_FMP_A::STANDARD)
            }
            #[doc = "I2C FM+ mode enabled on PB8 and the Speed control is bypassed"]
            #[inline(always)]
            pub fn fmp(self) -> &'a mut W {
                self.variant(I2C_PB8_FMP_A::FMP)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Fast Mode Plus (FM+) driving capability activation bits.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum I2C_PB9_FMP_A {
            #[doc = "0: PB9 pin operate in standard mode"]
            STANDARD = 0,
            #[doc = "1: I2C FM+ mode enabled on PB9 and the Speed control is bypassed"]
            FMP = 1,
        }
        impl From<I2C_PB9_FMP_A> for bool {
            #[inline(always)]
            fn from(variant: I2C_PB9_FMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `I2C_PB9_FMP`"]
        pub type I2C_PB9_FMP_R = crate::R<bool, I2C_PB9_FMP_A>;
        impl I2C_PB9_FMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> I2C_PB9_FMP_A {
                match self.bits {
                    false => I2C_PB9_FMP_A::STANDARD,
                    true => I2C_PB9_FMP_A::FMP,
                }
            }
            #[doc = "Checks if the value of the field is `STANDARD`"]
            #[inline(always)]
            pub fn is_standard(&self) -> bool {
                *self == I2C_PB9_FMP_A::STANDARD
            }
            #[doc = "Checks if the value of the field is `FMP`"]
            #[inline(always)]
            pub fn is_fmp(&self) -> bool {
                *self == I2C_PB9_FMP_A::FMP
            }
        }
        #[doc = "Write proxy for field `I2C_PB9_FMP`"]
        pub struct I2C_PB9_FMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C_PB9_FMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2C_PB9_FMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PB9 pin operate in standard mode"]
            #[inline(always)]
            pub fn standard(self) -> &'a mut W {
                self.variant(I2C_PB9_FMP_A::STANDARD)
            }
            #[doc = "I2C FM+ mode enabled on PB9 and the Speed control is bypassed"]
            #[inline(always)]
            pub fn fmp(self) -> &'a mut W {
                self.variant(I2C_PB9_FMP_A::FMP)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "FM+ driving capability activation for I2C1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum I2C1_FMP_A {
            #[doc = "0: FM+ mode is controlled by I2C_Pxx_FMP bits only"]
            STANDARD = 0,
            #[doc = "1: FM+ mode is enabled on all I2C1 pins selected through selection bits in GPIOx_AFR registers"]
            FMP = 1,
        }
        impl From<I2C1_FMP_A> for bool {
            #[inline(always)]
            fn from(variant: I2C1_FMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `I2C1_FMP`"]
        pub type I2C1_FMP_R = crate::R<bool, I2C1_FMP_A>;
        impl I2C1_FMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> I2C1_FMP_A {
                match self.bits {
                    false => I2C1_FMP_A::STANDARD,
                    true => I2C1_FMP_A::FMP,
                }
            }
            #[doc = "Checks if the value of the field is `STANDARD`"]
            #[inline(always)]
            pub fn is_standard(&self) -> bool {
                *self == I2C1_FMP_A::STANDARD
            }
            #[doc = "Checks if the value of the field is `FMP`"]
            #[inline(always)]
            pub fn is_fmp(&self) -> bool {
                *self == I2C1_FMP_A::FMP
            }
        }
        #[doc = "Write proxy for field `I2C1_FMP`"]
        pub struct I2C1_FMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1_FMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2C1_FMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FM+ mode is controlled by I2C_Pxx_FMP bits only"]
            #[inline(always)]
            pub fn standard(self) -> &'a mut W {
                self.variant(I2C1_FMP_A::STANDARD)
            }
            #[doc = "FM+ mode is enabled on all I2C1 pins selected through selection bits in GPIOx_AFR registers"]
            #[inline(always)]
            pub fn fmp(self) -> &'a mut W {
                self.variant(I2C1_FMP_A::FMP)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "USART3 DMA request remapping bit\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum USART3_DMA_RMP_A {
            #[doc = "0: USART3_RX and USART3_TX DMA requests mapped on DMA channel 6 and 7 respectively (or simply disabled on STM32F0x0)"]
            NOTREMAPPED = 0,
            #[doc = "1: USART3_RX and USART3_TX DMA requests mapped on DMA channel 3 and 2 respectively"]
            REMAPPED = 1,
        }
        impl From<USART3_DMA_RMP_A> for bool {
            #[inline(always)]
            fn from(variant: USART3_DMA_RMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `USART3_DMA_RMP`"]
        pub type USART3_DMA_RMP_R = crate::R<bool, USART3_DMA_RMP_A>;
        impl USART3_DMA_RMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> USART3_DMA_RMP_A {
                match self.bits {
                    false => USART3_DMA_RMP_A::NOTREMAPPED,
                    true => USART3_DMA_RMP_A::REMAPPED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTREMAPPED`"]
            #[inline(always)]
            pub fn is_not_remapped(&self) -> bool {
                *self == USART3_DMA_RMP_A::NOTREMAPPED
            }
            #[doc = "Checks if the value of the field is `REMAPPED`"]
            #[inline(always)]
            pub fn is_remapped(&self) -> bool {
                *self == USART3_DMA_RMP_A::REMAPPED
            }
        }
        #[doc = "Write proxy for field `USART3_DMA_RMP`"]
        pub struct USART3_DMA_RMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART3_DMA_RMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USART3_DMA_RMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "USART3_RX and USART3_TX DMA requests mapped on DMA channel 6 and 7 respectively (or simply disabled on STM32F0x0)"]
            #[inline(always)]
            pub fn not_remapped(self) -> &'a mut W {
                self.variant(USART3_DMA_RMP_A::NOTREMAPPED)
            }
            #[doc = "USART3_RX and USART3_TX DMA requests mapped on DMA channel 3 and 2 respectively"]
            #[inline(always)]
            pub fn remapped(self) -> &'a mut W {
                self.variant(USART3_DMA_RMP_A::REMAPPED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "PA11 and PA12 remapping bit for small packages (28 and 20 pins)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PA11_PA12_RMP_A {
            #[doc = "0: Pin pair PA9/PA10 mapped on the pins"]
            NOTREMAPPED = 0,
            #[doc = "1: Pin pair PA11/PA12 mapped instead of PA9/PA10"]
            REMAPPED = 1,
        }
        impl From<PA11_PA12_RMP_A> for bool {
            #[inline(always)]
            fn from(variant: PA11_PA12_RMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PA11_PA12_RMP`"]
        pub type PA11_PA12_RMP_R = crate::R<bool, PA11_PA12_RMP_A>;
        impl PA11_PA12_RMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PA11_PA12_RMP_A {
                match self.bits {
                    false => PA11_PA12_RMP_A::NOTREMAPPED,
                    true => PA11_PA12_RMP_A::REMAPPED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTREMAPPED`"]
            #[inline(always)]
            pub fn is_not_remapped(&self) -> bool {
                *self == PA11_PA12_RMP_A::NOTREMAPPED
            }
            #[doc = "Checks if the value of the field is `REMAPPED`"]
            #[inline(always)]
            pub fn is_remapped(&self) -> bool {
                *self == PA11_PA12_RMP_A::REMAPPED
            }
        }
        #[doc = "Write proxy for field `PA11_PA12_RMP`"]
        pub struct PA11_PA12_RMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA11_PA12_RMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PA11_PA12_RMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin pair PA9/PA10 mapped on the pins"]
            #[inline(always)]
            pub fn not_remapped(self) -> &'a mut W {
                self.variant(PA11_PA12_RMP_A::NOTREMAPPED)
            }
            #[doc = "Pin pair PA11/PA12 mapped instead of PA9/PA10"]
            #[inline(always)]
            pub fn remapped(self) -> &'a mut W {
                self.variant(PA11_PA12_RMP_A::REMAPPED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Fast Mode Plus (FM+) driving capability activation bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum I2C_PA9_FMP_A {
            #[doc = "0: PA9 pin operate in standard mode"]
            STANDARD = 0,
            #[doc = "1: I2C FM+ mode enabled on PA9 and the Speed control is bypassed"]
            FMP = 1,
        }
        impl From<I2C_PA9_FMP_A> for bool {
            #[inline(always)]
            fn from(variant: I2C_PA9_FMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `I2C_PA9_FMP`"]
        pub type I2C_PA9_FMP_R = crate::R<bool, I2C_PA9_FMP_A>;
        impl I2C_PA9_FMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> I2C_PA9_FMP_A {
                match self.bits {
                    false => I2C_PA9_FMP_A::STANDARD,
                    true => I2C_PA9_FMP_A::FMP,
                }
            }
            #[doc = "Checks if the value of the field is `STANDARD`"]
            #[inline(always)]
            pub fn is_standard(&self) -> bool {
                *self == I2C_PA9_FMP_A::STANDARD
            }
            #[doc = "Checks if the value of the field is `FMP`"]
            #[inline(always)]
            pub fn is_fmp(&self) -> bool {
                *self == I2C_PA9_FMP_A::FMP
            }
        }
        #[doc = "Write proxy for field `I2C_PA9_FMP`"]
        pub struct I2C_PA9_FMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C_PA9_FMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2C_PA9_FMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PA9 pin operate in standard mode"]
            #[inline(always)]
            pub fn standard(self) -> &'a mut W {
                self.variant(I2C_PA9_FMP_A::STANDARD)
            }
            #[doc = "I2C FM+ mode enabled on PA9 and the Speed control is bypassed"]
            #[inline(always)]
            pub fn fmp(self) -> &'a mut W {
                self.variant(I2C_PA9_FMP_A::FMP)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Fast Mode Plus (FM+) driving capability activation bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum I2C_PA10_FMP_A {
            #[doc = "0: PA10 pin operate in standard mode"]
            STANDARD = 0,
            #[doc = "1: I2C FM+ mode enabled on PA10 and the Speed control is bypassed"]
            FMP = 1,
        }
        impl From<I2C_PA10_FMP_A> for bool {
            #[inline(always)]
            fn from(variant: I2C_PA10_FMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `I2C_PA10_FMP`"]
        pub type I2C_PA10_FMP_R = crate::R<bool, I2C_PA10_FMP_A>;
        impl I2C_PA10_FMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> I2C_PA10_FMP_A {
                match self.bits {
                    false => I2C_PA10_FMP_A::STANDARD,
                    true => I2C_PA10_FMP_A::FMP,
                }
            }
            #[doc = "Checks if the value of the field is `STANDARD`"]
            #[inline(always)]
            pub fn is_standard(&self) -> bool {
                *self == I2C_PA10_FMP_A::STANDARD
            }
            #[doc = "Checks if the value of the field is `FMP`"]
            #[inline(always)]
            pub fn is_fmp(&self) -> bool {
                *self == I2C_PA10_FMP_A::FMP
            }
        }
        #[doc = "Write proxy for field `I2C_PA10_FMP`"]
        pub struct I2C_PA10_FMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C_PA10_FMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2C_PA10_FMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PA10 pin operate in standard mode"]
            #[inline(always)]
            pub fn standard(self) -> &'a mut W {
                self.variant(I2C_PA10_FMP_A::STANDARD)
            }
            #[doc = "I2C FM+ mode enabled on PA10 and the Speed control is bypassed"]
            #[inline(always)]
            pub fn fmp(self) -> &'a mut W {
                self.variant(I2C_PA10_FMP_A::FMP)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Memory mapping selection bits"]
            #[inline(always)]
            pub fn mem_mode(&self) -> MEM_MODE_R {
                MEM_MODE_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 8 - ADC DMA remapping bit"]
            #[inline(always)]
            pub fn adc_dma_rmp(&self) -> ADC_DMA_RMP_R {
                ADC_DMA_RMP_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - USART1_TX DMA remapping bit"]
            #[inline(always)]
            pub fn usart1_tx_dma_rmp(&self) -> USART1_TX_DMA_RMP_R {
                USART1_TX_DMA_RMP_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - USART1_RX DMA request remapping bit"]
            #[inline(always)]
            pub fn usart1_rx_dma_rmp(&self) -> USART1_RX_DMA_RMP_R {
                USART1_RX_DMA_RMP_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TIM16 DMA request remapping bit"]
            #[inline(always)]
            pub fn tim16_dma_rmp(&self) -> TIM16_DMA_RMP_R {
                TIM16_DMA_RMP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - TIM17 DMA request remapping bit"]
            #[inline(always)]
            pub fn tim17_dma_rmp(&self) -> TIM17_DMA_RMP_R {
                TIM17_DMA_RMP_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Fast Mode Plus (FM plus) driving capability activation bits."]
            #[inline(always)]
            pub fn i2c_pb6_fmp(&self) -> I2C_PB6_FMP_R {
                I2C_PB6_FMP_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Fast Mode Plus (FM+) driving capability activation bits."]
            #[inline(always)]
            pub fn i2c_pb7_fmp(&self) -> I2C_PB7_FMP_R {
                I2C_PB7_FMP_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Fast Mode Plus (FM+) driving capability activation bits."]
            #[inline(always)]
            pub fn i2c_pb8_fmp(&self) -> I2C_PB8_FMP_R {
                I2C_PB8_FMP_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Fast Mode Plus (FM+) driving capability activation bits."]
            #[inline(always)]
            pub fn i2c_pb9_fmp(&self) -> I2C_PB9_FMP_R {
                I2C_PB9_FMP_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - FM+ driving capability activation for I2C1"]
            #[inline(always)]
            pub fn i2c1_fmp(&self) -> I2C1_FMP_R {
                I2C1_FMP_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 26 - USART3 DMA request remapping bit"]
            #[inline(always)]
            pub fn usart3_dma_rmp(&self) -> USART3_DMA_RMP_R {
                USART3_DMA_RMP_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 4 - PA11 and PA12 remapping bit for small packages (28 and 20 pins)"]
            #[inline(always)]
            pub fn pa11_pa12_rmp(&self) -> PA11_PA12_RMP_R {
                PA11_PA12_RMP_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Fast Mode Plus (FM+) driving capability activation bits"]
            #[inline(always)]
            pub fn i2c_pa9_fmp(&self) -> I2C_PA9_FMP_R {
                I2C_PA9_FMP_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Fast Mode Plus (FM+) driving capability activation bits"]
            #[inline(always)]
            pub fn i2c_pa10_fmp(&self) -> I2C_PA10_FMP_R {
                I2C_PA10_FMP_R::new(((self.bits >> 23) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Memory mapping selection bits"]
            #[inline(always)]
            pub fn mem_mode(&mut self) -> MEM_MODE_W {
                MEM_MODE_W { w: self }
            }
            #[doc = "Bit 8 - ADC DMA remapping bit"]
            #[inline(always)]
            pub fn adc_dma_rmp(&mut self) -> ADC_DMA_RMP_W {
                ADC_DMA_RMP_W { w: self }
            }
            #[doc = "Bit 9 - USART1_TX DMA remapping bit"]
            #[inline(always)]
            pub fn usart1_tx_dma_rmp(&mut self) -> USART1_TX_DMA_RMP_W {
                USART1_TX_DMA_RMP_W { w: self }
            }
            #[doc = "Bit 10 - USART1_RX DMA request remapping bit"]
            #[inline(always)]
            pub fn usart1_rx_dma_rmp(&mut self) -> USART1_RX_DMA_RMP_W {
                USART1_RX_DMA_RMP_W { w: self }
            }
            #[doc = "Bit 11 - TIM16 DMA request remapping bit"]
            #[inline(always)]
            pub fn tim16_dma_rmp(&mut self) -> TIM16_DMA_RMP_W {
                TIM16_DMA_RMP_W { w: self }
            }
            #[doc = "Bit 12 - TIM17 DMA request remapping bit"]
            #[inline(always)]
            pub fn tim17_dma_rmp(&mut self) -> TIM17_DMA_RMP_W {
                TIM17_DMA_RMP_W { w: self }
            }
            #[doc = "Bit 16 - Fast Mode Plus (FM plus) driving capability activation bits."]
            #[inline(always)]
            pub fn i2c_pb6_fmp(&mut self) -> I2C_PB6_FMP_W {
                I2C_PB6_FMP_W { w: self }
            }
            #[doc = "Bit 17 - Fast Mode Plus (FM+) driving capability activation bits."]
            #[inline(always)]
            pub fn i2c_pb7_fmp(&mut self) -> I2C_PB7_FMP_W {
                I2C_PB7_FMP_W { w: self }
            }
            #[doc = "Bit 18 - Fast Mode Plus (FM+) driving capability activation bits."]
            #[inline(always)]
            pub fn i2c_pb8_fmp(&mut self) -> I2C_PB8_FMP_W {
                I2C_PB8_FMP_W { w: self }
            }
            #[doc = "Bit 19 - Fast Mode Plus (FM+) driving capability activation bits."]
            #[inline(always)]
            pub fn i2c_pb9_fmp(&mut self) -> I2C_PB9_FMP_W {
                I2C_PB9_FMP_W { w: self }
            }
            #[doc = "Bit 20 - FM+ driving capability activation for I2C1"]
            #[inline(always)]
            pub fn i2c1_fmp(&mut self) -> I2C1_FMP_W {
                I2C1_FMP_W { w: self }
            }
            #[doc = "Bit 26 - USART3 DMA request remapping bit"]
            #[inline(always)]
            pub fn usart3_dma_rmp(&mut self) -> USART3_DMA_RMP_W {
                USART3_DMA_RMP_W { w: self }
            }
            #[doc = "Bit 4 - PA11 and PA12 remapping bit for small packages (28 and 20 pins)"]
            #[inline(always)]
            pub fn pa11_pa12_rmp(&mut self) -> PA11_PA12_RMP_W {
                PA11_PA12_RMP_W { w: self }
            }
            #[doc = "Bit 22 - Fast Mode Plus (FM+) driving capability activation bits"]
            #[inline(always)]
            pub fn i2c_pa9_fmp(&mut self) -> I2C_PA9_FMP_W {
                I2C_PA9_FMP_W { w: self }
            }
            #[doc = "Bit 23 - Fast Mode Plus (FM+) driving capability activation bits"]
            #[inline(always)]
            pub fn i2c_pa10_fmp(&mut self) -> I2C_PA10_FMP_W {
                I2C_PA10_FMP_W { w: self }
            }
        }
    }
    #[doc = "external interrupt configuration register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr1](exticr1) module"]
    pub type EXTICR1 = crate::Reg<u32, _EXTICR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXTICR1;
    #[doc = "`read()` method returns [exticr1::R](exticr1::R) reader structure"]
    impl crate::Readable for EXTICR1 {}
    #[doc = "`write(|w| ..)` method takes [exticr1::W](exticr1::W) writer structure"]
    impl crate::Writable for EXTICR1 {}
    #[doc = "external interrupt configuration register 1"]
    pub mod exticr1 {
        #[doc = "Reader of register EXTICR1"]
        pub type R = crate::R<u32, super::EXTICR1>;
        #[doc = "Writer for register EXTICR1"]
        pub type W = crate::W<u32, super::EXTICR1>;
        #[doc = "Register EXTICR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::EXTICR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "EXTI 3 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI3_A {
            #[doc = "0: Select PA3 as the source input for the EXTI3 external interrupt"]
            PA3 = 0,
            #[doc = "1: Select PB3 as the source input for the EXTI3 external interrupt"]
            PB3 = 1,
            #[doc = "2: Select PC3 as the source input for the EXTI3 external interrupt"]
            PC3 = 2,
            #[doc = "3: Select PD3 as the source input for the EXTI3 external interrupt"]
            PD3 = 3,
            #[doc = "5: Select PF3 as the source input for the EXTI3 external interrupt"]
            PF3 = 5,
        }
        impl From<EXTI3_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI3_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI3`"]
        pub type EXTI3_R = crate::R<u8, EXTI3_A>;
        impl EXTI3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI3_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI3_A::PA3),
                    1 => Val(EXTI3_A::PB3),
                    2 => Val(EXTI3_A::PC3),
                    3 => Val(EXTI3_A::PD3),
                    5 => Val(EXTI3_A::PF3),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA3`"]
            #[inline(always)]
            pub fn is_pa3(&self) -> bool {
                *self == EXTI3_A::PA3
            }
            #[doc = "Checks if the value of the field is `PB3`"]
            #[inline(always)]
            pub fn is_pb3(&self) -> bool {
                *self == EXTI3_A::PB3
            }
            #[doc = "Checks if the value of the field is `PC3`"]
            #[inline(always)]
            pub fn is_pc3(&self) -> bool {
                *self == EXTI3_A::PC3
            }
            #[doc = "Checks if the value of the field is `PD3`"]
            #[inline(always)]
            pub fn is_pd3(&self) -> bool {
                *self == EXTI3_A::PD3
            }
            #[doc = "Checks if the value of the field is `PF3`"]
            #[inline(always)]
            pub fn is_pf3(&self) -> bool {
                *self == EXTI3_A::PF3
            }
        }
        #[doc = "Write proxy for field `EXTI3`"]
        pub struct EXTI3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI3_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA3 as the source input for the EXTI3 external interrupt"]
            #[inline(always)]
            pub fn pa3(self) -> &'a mut W {
                self.variant(EXTI3_A::PA3)
            }
            #[doc = "Select PB3 as the source input for the EXTI3 external interrupt"]
            #[inline(always)]
            pub fn pb3(self) -> &'a mut W {
                self.variant(EXTI3_A::PB3)
            }
            #[doc = "Select PC3 as the source input for the EXTI3 external interrupt"]
            #[inline(always)]
            pub fn pc3(self) -> &'a mut W {
                self.variant(EXTI3_A::PC3)
            }
            #[doc = "Select PD3 as the source input for the EXTI3 external interrupt"]
            #[inline(always)]
            pub fn pd3(self) -> &'a mut W {
                self.variant(EXTI3_A::PD3)
            }
            #[doc = "Select PF3 as the source input for the EXTI3 external interrupt"]
            #[inline(always)]
            pub fn pf3(self) -> &'a mut W {
                self.variant(EXTI3_A::PF3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "EXTI 2 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI2_A {
            #[doc = "0: Select PA2 as the source input for the EXTI2 external interrupt"]
            PA2 = 0,
            #[doc = "1: Select PB2 as the source input for the EXTI2 external interrupt"]
            PB2 = 1,
            #[doc = "2: Select PC2 as the source input for the EXTI2 external interrupt"]
            PC2 = 2,
            #[doc = "3: Select PD2 as the source input for the EXTI2 external interrupt"]
            PD2 = 3,
            #[doc = "5: Select PF2 as the source input for the EXTI2 external interrupt"]
            PF2 = 5,
        }
        impl From<EXTI2_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI2_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI2`"]
        pub type EXTI2_R = crate::R<u8, EXTI2_A>;
        impl EXTI2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI2_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI2_A::PA2),
                    1 => Val(EXTI2_A::PB2),
                    2 => Val(EXTI2_A::PC2),
                    3 => Val(EXTI2_A::PD2),
                    5 => Val(EXTI2_A::PF2),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA2`"]
            #[inline(always)]
            pub fn is_pa2(&self) -> bool {
                *self == EXTI2_A::PA2
            }
            #[doc = "Checks if the value of the field is `PB2`"]
            #[inline(always)]
            pub fn is_pb2(&self) -> bool {
                *self == EXTI2_A::PB2
            }
            #[doc = "Checks if the value of the field is `PC2`"]
            #[inline(always)]
            pub fn is_pc2(&self) -> bool {
                *self == EXTI2_A::PC2
            }
            #[doc = "Checks if the value of the field is `PD2`"]
            #[inline(always)]
            pub fn is_pd2(&self) -> bool {
                *self == EXTI2_A::PD2
            }
            #[doc = "Checks if the value of the field is `PF2`"]
            #[inline(always)]
            pub fn is_pf2(&self) -> bool {
                *self == EXTI2_A::PF2
            }
        }
        #[doc = "Write proxy for field `EXTI2`"]
        pub struct EXTI2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI2_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA2 as the source input for the EXTI2 external interrupt"]
            #[inline(always)]
            pub fn pa2(self) -> &'a mut W {
                self.variant(EXTI2_A::PA2)
            }
            #[doc = "Select PB2 as the source input for the EXTI2 external interrupt"]
            #[inline(always)]
            pub fn pb2(self) -> &'a mut W {
                self.variant(EXTI2_A::PB2)
            }
            #[doc = "Select PC2 as the source input for the EXTI2 external interrupt"]
            #[inline(always)]
            pub fn pc2(self) -> &'a mut W {
                self.variant(EXTI2_A::PC2)
            }
            #[doc = "Select PD2 as the source input for the EXTI2 external interrupt"]
            #[inline(always)]
            pub fn pd2(self) -> &'a mut W {
                self.variant(EXTI2_A::PD2)
            }
            #[doc = "Select PF2 as the source input for the EXTI2 external interrupt"]
            #[inline(always)]
            pub fn pf2(self) -> &'a mut W {
                self.variant(EXTI2_A::PF2)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "EXTI 1 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI1_A {
            #[doc = "0: Select PA1 as the source input for the EXTI1 external interrupt"]
            PA1 = 0,
            #[doc = "1: Select PB1 as the source input for the EXTI1 external interrupt"]
            PB1 = 1,
            #[doc = "2: Select PC1 as the source input for the EXTI1 external interrupt"]
            PC1 = 2,
            #[doc = "3: Select PD1 as the source input for the EXTI1 external interrupt"]
            PD1 = 3,
            #[doc = "5: Select PF1 as the source input for the EXTI1 external interrupt"]
            PF1 = 5,
        }
        impl From<EXTI1_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI1_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI1`"]
        pub type EXTI1_R = crate::R<u8, EXTI1_A>;
        impl EXTI1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI1_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI1_A::PA1),
                    1 => Val(EXTI1_A::PB1),
                    2 => Val(EXTI1_A::PC1),
                    3 => Val(EXTI1_A::PD1),
                    5 => Val(EXTI1_A::PF1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA1`"]
            #[inline(always)]
            pub fn is_pa1(&self) -> bool {
                *self == EXTI1_A::PA1
            }
            #[doc = "Checks if the value of the field is `PB1`"]
            #[inline(always)]
            pub fn is_pb1(&self) -> bool {
                *self == EXTI1_A::PB1
            }
            #[doc = "Checks if the value of the field is `PC1`"]
            #[inline(always)]
            pub fn is_pc1(&self) -> bool {
                *self == EXTI1_A::PC1
            }
            #[doc = "Checks if the value of the field is `PD1`"]
            #[inline(always)]
            pub fn is_pd1(&self) -> bool {
                *self == EXTI1_A::PD1
            }
            #[doc = "Checks if the value of the field is `PF1`"]
            #[inline(always)]
            pub fn is_pf1(&self) -> bool {
                *self == EXTI1_A::PF1
            }
        }
        #[doc = "Write proxy for field `EXTI1`"]
        pub struct EXTI1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI1_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA1 as the source input for the EXTI1 external interrupt"]
            #[inline(always)]
            pub fn pa1(self) -> &'a mut W {
                self.variant(EXTI1_A::PA1)
            }
            #[doc = "Select PB1 as the source input for the EXTI1 external interrupt"]
            #[inline(always)]
            pub fn pb1(self) -> &'a mut W {
                self.variant(EXTI1_A::PB1)
            }
            #[doc = "Select PC1 as the source input for the EXTI1 external interrupt"]
            #[inline(always)]
            pub fn pc1(self) -> &'a mut W {
                self.variant(EXTI1_A::PC1)
            }
            #[doc = "Select PD1 as the source input for the EXTI1 external interrupt"]
            #[inline(always)]
            pub fn pd1(self) -> &'a mut W {
                self.variant(EXTI1_A::PD1)
            }
            #[doc = "Select PF1 as the source input for the EXTI1 external interrupt"]
            #[inline(always)]
            pub fn pf1(self) -> &'a mut W {
                self.variant(EXTI1_A::PF1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "EXTI 0 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI0_A {
            #[doc = "0: Select PA0 as the source input for the EXTI0 external interrupt"]
            PA0 = 0,
            #[doc = "1: Select PB0 as the source input for the EXTI0 external interrupt"]
            PB0 = 1,
            #[doc = "2: Select PC0 as the source input for the EXTI0 external interrupt"]
            PC0 = 2,
            #[doc = "3: Select PD0 as the source input for the EXTI0 external interrupt"]
            PD0 = 3,
            #[doc = "5: Select PF0 as the source input for the EXTI0 external interrupt"]
            PF0 = 5,
        }
        impl From<EXTI0_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI0_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI0`"]
        pub type EXTI0_R = crate::R<u8, EXTI0_A>;
        impl EXTI0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI0_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI0_A::PA0),
                    1 => Val(EXTI0_A::PB0),
                    2 => Val(EXTI0_A::PC0),
                    3 => Val(EXTI0_A::PD0),
                    5 => Val(EXTI0_A::PF0),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA0`"]
            #[inline(always)]
            pub fn is_pa0(&self) -> bool {
                *self == EXTI0_A::PA0
            }
            #[doc = "Checks if the value of the field is `PB0`"]
            #[inline(always)]
            pub fn is_pb0(&self) -> bool {
                *self == EXTI0_A::PB0
            }
            #[doc = "Checks if the value of the field is `PC0`"]
            #[inline(always)]
            pub fn is_pc0(&self) -> bool {
                *self == EXTI0_A::PC0
            }
            #[doc = "Checks if the value of the field is `PD0`"]
            #[inline(always)]
            pub fn is_pd0(&self) -> bool {
                *self == EXTI0_A::PD0
            }
            #[doc = "Checks if the value of the field is `PF0`"]
            #[inline(always)]
            pub fn is_pf0(&self) -> bool {
                *self == EXTI0_A::PF0
            }
        }
        #[doc = "Write proxy for field `EXTI0`"]
        pub struct EXTI0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI0_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA0 as the source input for the EXTI0 external interrupt"]
            #[inline(always)]
            pub fn pa0(self) -> &'a mut W {
                self.variant(EXTI0_A::PA0)
            }
            #[doc = "Select PB0 as the source input for the EXTI0 external interrupt"]
            #[inline(always)]
            pub fn pb0(self) -> &'a mut W {
                self.variant(EXTI0_A::PB0)
            }
            #[doc = "Select PC0 as the source input for the EXTI0 external interrupt"]
            #[inline(always)]
            pub fn pc0(self) -> &'a mut W {
                self.variant(EXTI0_A::PC0)
            }
            #[doc = "Select PD0 as the source input for the EXTI0 external interrupt"]
            #[inline(always)]
            pub fn pd0(self) -> &'a mut W {
                self.variant(EXTI0_A::PD0)
            }
            #[doc = "Select PF0 as the source input for the EXTI0 external interrupt"]
            #[inline(always)]
            pub fn pf0(self) -> &'a mut W {
                self.variant(EXTI0_A::PF0)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - EXTI 3 configuration bits"]
            #[inline(always)]
            pub fn exti3(&self) -> EXTI3_R {
                EXTI3_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI 2 configuration bits"]
            #[inline(always)]
            pub fn exti2(&self) -> EXTI2_R {
                EXTI2_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI 1 configuration bits"]
            #[inline(always)]
            pub fn exti1(&self) -> EXTI1_R {
                EXTI1_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - EXTI 0 configuration bits"]
            #[inline(always)]
            pub fn exti0(&self) -> EXTI0_R {
                EXTI0_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - EXTI 3 configuration bits"]
            #[inline(always)]
            pub fn exti3(&mut self) -> EXTI3_W {
                EXTI3_W { w: self }
            }
            #[doc = "Bits 8:11 - EXTI 2 configuration bits"]
            #[inline(always)]
            pub fn exti2(&mut self) -> EXTI2_W {
                EXTI2_W { w: self }
            }
            #[doc = "Bits 4:7 - EXTI 1 configuration bits"]
            #[inline(always)]
            pub fn exti1(&mut self) -> EXTI1_W {
                EXTI1_W { w: self }
            }
            #[doc = "Bits 0:3 - EXTI 0 configuration bits"]
            #[inline(always)]
            pub fn exti0(&mut self) -> EXTI0_W {
                EXTI0_W { w: self }
            }
        }
    }
    #[doc = "external interrupt configuration register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr2](exticr2) module"]
    pub type EXTICR2 = crate::Reg<u32, _EXTICR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXTICR2;
    #[doc = "`read()` method returns [exticr2::R](exticr2::R) reader structure"]
    impl crate::Readable for EXTICR2 {}
    #[doc = "`write(|w| ..)` method takes [exticr2::W](exticr2::W) writer structure"]
    impl crate::Writable for EXTICR2 {}
    #[doc = "external interrupt configuration register 2"]
    pub mod exticr2 {
        #[doc = "Reader of register EXTICR2"]
        pub type R = crate::R<u32, super::EXTICR2>;
        #[doc = "Writer for register EXTICR2"]
        pub type W = crate::W<u32, super::EXTICR2>;
        #[doc = "Register EXTICR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::EXTICR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "EXTI 7 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI7_A {
            #[doc = "0: Select PA7 as the source input for the EXTI7 external interrupt"]
            PA7 = 0,
            #[doc = "1: Select PB7 as the source input for the EXTI7 external interrupt"]
            PB7 = 1,
            #[doc = "2: Select PC7 as the source input for the EXTI7 external interrupt"]
            PC7 = 2,
            #[doc = "3: Select PD7 as the source input for the EXTI7 external interrupt"]
            PD7 = 3,
            #[doc = "5: Select PF7 as the source input for the EXTI7 external interrupt"]
            PF7 = 5,
        }
        impl From<EXTI7_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI7_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI7`"]
        pub type EXTI7_R = crate::R<u8, EXTI7_A>;
        impl EXTI7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI7_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI7_A::PA7),
                    1 => Val(EXTI7_A::PB7),
                    2 => Val(EXTI7_A::PC7),
                    3 => Val(EXTI7_A::PD7),
                    5 => Val(EXTI7_A::PF7),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA7`"]
            #[inline(always)]
            pub fn is_pa7(&self) -> bool {
                *self == EXTI7_A::PA7
            }
            #[doc = "Checks if the value of the field is `PB7`"]
            #[inline(always)]
            pub fn is_pb7(&self) -> bool {
                *self == EXTI7_A::PB7
            }
            #[doc = "Checks if the value of the field is `PC7`"]
            #[inline(always)]
            pub fn is_pc7(&self) -> bool {
                *self == EXTI7_A::PC7
            }
            #[doc = "Checks if the value of the field is `PD7`"]
            #[inline(always)]
            pub fn is_pd7(&self) -> bool {
                *self == EXTI7_A::PD7
            }
            #[doc = "Checks if the value of the field is `PF7`"]
            #[inline(always)]
            pub fn is_pf7(&self) -> bool {
                *self == EXTI7_A::PF7
            }
        }
        #[doc = "Write proxy for field `EXTI7`"]
        pub struct EXTI7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI7_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA7 as the source input for the EXTI7 external interrupt"]
            #[inline(always)]
            pub fn pa7(self) -> &'a mut W {
                self.variant(EXTI7_A::PA7)
            }
            #[doc = "Select PB7 as the source input for the EXTI7 external interrupt"]
            #[inline(always)]
            pub fn pb7(self) -> &'a mut W {
                self.variant(EXTI7_A::PB7)
            }
            #[doc = "Select PC7 as the source input for the EXTI7 external interrupt"]
            #[inline(always)]
            pub fn pc7(self) -> &'a mut W {
                self.variant(EXTI7_A::PC7)
            }
            #[doc = "Select PD7 as the source input for the EXTI7 external interrupt"]
            #[inline(always)]
            pub fn pd7(self) -> &'a mut W {
                self.variant(EXTI7_A::PD7)
            }
            #[doc = "Select PF7 as the source input for the EXTI7 external interrupt"]
            #[inline(always)]
            pub fn pf7(self) -> &'a mut W {
                self.variant(EXTI7_A::PF7)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "EXTI 6 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI6_A {
            #[doc = "0: Select PA6 as the source input for the EXTI6 external interrupt"]
            PA6 = 0,
            #[doc = "1: Select PB6 as the source input for the EXTI6 external interrupt"]
            PB6 = 1,
            #[doc = "2: Select PC6 as the source input for the EXTI6 external interrupt"]
            PC6 = 2,
            #[doc = "3: Select PD6 as the source input for the EXTI6 external interrupt"]
            PD6 = 3,
            #[doc = "5: Select PF6 as the source input for the EXTI6 external interrupt"]
            PF6 = 5,
        }
        impl From<EXTI6_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI6_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI6`"]
        pub type EXTI6_R = crate::R<u8, EXTI6_A>;
        impl EXTI6_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI6_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI6_A::PA6),
                    1 => Val(EXTI6_A::PB6),
                    2 => Val(EXTI6_A::PC6),
                    3 => Val(EXTI6_A::PD6),
                    5 => Val(EXTI6_A::PF6),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA6`"]
            #[inline(always)]
            pub fn is_pa6(&self) -> bool {
                *self == EXTI6_A::PA6
            }
            #[doc = "Checks if the value of the field is `PB6`"]
            #[inline(always)]
            pub fn is_pb6(&self) -> bool {
                *self == EXTI6_A::PB6
            }
            #[doc = "Checks if the value of the field is `PC6`"]
            #[inline(always)]
            pub fn is_pc6(&self) -> bool {
                *self == EXTI6_A::PC6
            }
            #[doc = "Checks if the value of the field is `PD6`"]
            #[inline(always)]
            pub fn is_pd6(&self) -> bool {
                *self == EXTI6_A::PD6
            }
            #[doc = "Checks if the value of the field is `PF6`"]
            #[inline(always)]
            pub fn is_pf6(&self) -> bool {
                *self == EXTI6_A::PF6
            }
        }
        #[doc = "Write proxy for field `EXTI6`"]
        pub struct EXTI6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI6_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA6 as the source input for the EXTI6 external interrupt"]
            #[inline(always)]
            pub fn pa6(self) -> &'a mut W {
                self.variant(EXTI6_A::PA6)
            }
            #[doc = "Select PB6 as the source input for the EXTI6 external interrupt"]
            #[inline(always)]
            pub fn pb6(self) -> &'a mut W {
                self.variant(EXTI6_A::PB6)
            }
            #[doc = "Select PC6 as the source input for the EXTI6 external interrupt"]
            #[inline(always)]
            pub fn pc6(self) -> &'a mut W {
                self.variant(EXTI6_A::PC6)
            }
            #[doc = "Select PD6 as the source input for the EXTI6 external interrupt"]
            #[inline(always)]
            pub fn pd6(self) -> &'a mut W {
                self.variant(EXTI6_A::PD6)
            }
            #[doc = "Select PF6 as the source input for the EXTI6 external interrupt"]
            #[inline(always)]
            pub fn pf6(self) -> &'a mut W {
                self.variant(EXTI6_A::PF6)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "EXTI 5 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI5_A {
            #[doc = "0: Select PA5 as the source input for the EXTI5 external interrupt"]
            PA5 = 0,
            #[doc = "1: Select PB5 as the source input for the EXTI5 external interrupt"]
            PB5 = 1,
            #[doc = "2: Select PC5 as the source input for the EXTI5 external interrupt"]
            PC5 = 2,
            #[doc = "3: Select PD5 as the source input for the EXTI5 external interrupt"]
            PD5 = 3,
            #[doc = "5: Select PF5 as the source input for the EXTI5 external interrupt"]
            PF5 = 5,
        }
        impl From<EXTI5_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI5_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI5`"]
        pub type EXTI5_R = crate::R<u8, EXTI5_A>;
        impl EXTI5_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI5_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI5_A::PA5),
                    1 => Val(EXTI5_A::PB5),
                    2 => Val(EXTI5_A::PC5),
                    3 => Val(EXTI5_A::PD5),
                    5 => Val(EXTI5_A::PF5),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA5`"]
            #[inline(always)]
            pub fn is_pa5(&self) -> bool {
                *self == EXTI5_A::PA5
            }
            #[doc = "Checks if the value of the field is `PB5`"]
            #[inline(always)]
            pub fn is_pb5(&self) -> bool {
                *self == EXTI5_A::PB5
            }
            #[doc = "Checks if the value of the field is `PC5`"]
            #[inline(always)]
            pub fn is_pc5(&self) -> bool {
                *self == EXTI5_A::PC5
            }
            #[doc = "Checks if the value of the field is `PD5`"]
            #[inline(always)]
            pub fn is_pd5(&self) -> bool {
                *self == EXTI5_A::PD5
            }
            #[doc = "Checks if the value of the field is `PF5`"]
            #[inline(always)]
            pub fn is_pf5(&self) -> bool {
                *self == EXTI5_A::PF5
            }
        }
        #[doc = "Write proxy for field `EXTI5`"]
        pub struct EXTI5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI5_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA5 as the source input for the EXTI5 external interrupt"]
            #[inline(always)]
            pub fn pa5(self) -> &'a mut W {
                self.variant(EXTI5_A::PA5)
            }
            #[doc = "Select PB5 as the source input for the EXTI5 external interrupt"]
            #[inline(always)]
            pub fn pb5(self) -> &'a mut W {
                self.variant(EXTI5_A::PB5)
            }
            #[doc = "Select PC5 as the source input for the EXTI5 external interrupt"]
            #[inline(always)]
            pub fn pc5(self) -> &'a mut W {
                self.variant(EXTI5_A::PC5)
            }
            #[doc = "Select PD5 as the source input for the EXTI5 external interrupt"]
            #[inline(always)]
            pub fn pd5(self) -> &'a mut W {
                self.variant(EXTI5_A::PD5)
            }
            #[doc = "Select PF5 as the source input for the EXTI5 external interrupt"]
            #[inline(always)]
            pub fn pf5(self) -> &'a mut W {
                self.variant(EXTI5_A::PF5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "EXTI 4 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI4_A {
            #[doc = "0: Select PA4 as the source input for the EXTI4 external interrupt"]
            PA4 = 0,
            #[doc = "1: Select PB4 as the source input for the EXTI4 external interrupt"]
            PB4 = 1,
            #[doc = "2: Select PC4 as the source input for the EXTI4 external interrupt"]
            PC4 = 2,
            #[doc = "3: Select PD4 as the source input for the EXTI4 external interrupt"]
            PD4 = 3,
            #[doc = "5: Select PF4 as the source input for the EXTI4 external interrupt"]
            PF4 = 5,
        }
        impl From<EXTI4_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI4_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI4`"]
        pub type EXTI4_R = crate::R<u8, EXTI4_A>;
        impl EXTI4_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI4_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI4_A::PA4),
                    1 => Val(EXTI4_A::PB4),
                    2 => Val(EXTI4_A::PC4),
                    3 => Val(EXTI4_A::PD4),
                    5 => Val(EXTI4_A::PF4),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA4`"]
            #[inline(always)]
            pub fn is_pa4(&self) -> bool {
                *self == EXTI4_A::PA4
            }
            #[doc = "Checks if the value of the field is `PB4`"]
            #[inline(always)]
            pub fn is_pb4(&self) -> bool {
                *self == EXTI4_A::PB4
            }
            #[doc = "Checks if the value of the field is `PC4`"]
            #[inline(always)]
            pub fn is_pc4(&self) -> bool {
                *self == EXTI4_A::PC4
            }
            #[doc = "Checks if the value of the field is `PD4`"]
            #[inline(always)]
            pub fn is_pd4(&self) -> bool {
                *self == EXTI4_A::PD4
            }
            #[doc = "Checks if the value of the field is `PF4`"]
            #[inline(always)]
            pub fn is_pf4(&self) -> bool {
                *self == EXTI4_A::PF4
            }
        }
        #[doc = "Write proxy for field `EXTI4`"]
        pub struct EXTI4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI4_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA4 as the source input for the EXTI4 external interrupt"]
            #[inline(always)]
            pub fn pa4(self) -> &'a mut W {
                self.variant(EXTI4_A::PA4)
            }
            #[doc = "Select PB4 as the source input for the EXTI4 external interrupt"]
            #[inline(always)]
            pub fn pb4(self) -> &'a mut W {
                self.variant(EXTI4_A::PB4)
            }
            #[doc = "Select PC4 as the source input for the EXTI4 external interrupt"]
            #[inline(always)]
            pub fn pc4(self) -> &'a mut W {
                self.variant(EXTI4_A::PC4)
            }
            #[doc = "Select PD4 as the source input for the EXTI4 external interrupt"]
            #[inline(always)]
            pub fn pd4(self) -> &'a mut W {
                self.variant(EXTI4_A::PD4)
            }
            #[doc = "Select PF4 as the source input for the EXTI4 external interrupt"]
            #[inline(always)]
            pub fn pf4(self) -> &'a mut W {
                self.variant(EXTI4_A::PF4)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - EXTI 7 configuration bits"]
            #[inline(always)]
            pub fn exti7(&self) -> EXTI7_R {
                EXTI7_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI 6 configuration bits"]
            #[inline(always)]
            pub fn exti6(&self) -> EXTI6_R {
                EXTI6_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI 5 configuration bits"]
            #[inline(always)]
            pub fn exti5(&self) -> EXTI5_R {
                EXTI5_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - EXTI 4 configuration bits"]
            #[inline(always)]
            pub fn exti4(&self) -> EXTI4_R {
                EXTI4_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - EXTI 7 configuration bits"]
            #[inline(always)]
            pub fn exti7(&mut self) -> EXTI7_W {
                EXTI7_W { w: self }
            }
            #[doc = "Bits 8:11 - EXTI 6 configuration bits"]
            #[inline(always)]
            pub fn exti6(&mut self) -> EXTI6_W {
                EXTI6_W { w: self }
            }
            #[doc = "Bits 4:7 - EXTI 5 configuration bits"]
            #[inline(always)]
            pub fn exti5(&mut self) -> EXTI5_W {
                EXTI5_W { w: self }
            }
            #[doc = "Bits 0:3 - EXTI 4 configuration bits"]
            #[inline(always)]
            pub fn exti4(&mut self) -> EXTI4_W {
                EXTI4_W { w: self }
            }
        }
    }
    #[doc = "external interrupt configuration register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr3](exticr3) module"]
    pub type EXTICR3 = crate::Reg<u32, _EXTICR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXTICR3;
    #[doc = "`read()` method returns [exticr3::R](exticr3::R) reader structure"]
    impl crate::Readable for EXTICR3 {}
    #[doc = "`write(|w| ..)` method takes [exticr3::W](exticr3::W) writer structure"]
    impl crate::Writable for EXTICR3 {}
    #[doc = "external interrupt configuration register 3"]
    pub mod exticr3 {
        #[doc = "Reader of register EXTICR3"]
        pub type R = crate::R<u32, super::EXTICR3>;
        #[doc = "Writer for register EXTICR3"]
        pub type W = crate::W<u32, super::EXTICR3>;
        #[doc = "Register EXTICR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::EXTICR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "EXTI 11 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI11_A {
            #[doc = "0: Select PA11 as the source input for the EXTI11 external interrupt"]
            PA11 = 0,
            #[doc = "1: Select PB11 as the source input for the EXTI11 external interrupt"]
            PB11 = 1,
            #[doc = "2: Select PC11 as the source input for the EXTI11 external interrupt"]
            PC11 = 2,
            #[doc = "3: Select PD11 as the source input for the EXTI11 external interrupt"]
            PD11 = 3,
            #[doc = "5: Select PF11 as the source input for the EXTI11 external interrupt"]
            PF11 = 5,
        }
        impl From<EXTI11_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI11_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI11`"]
        pub type EXTI11_R = crate::R<u8, EXTI11_A>;
        impl EXTI11_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI11_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI11_A::PA11),
                    1 => Val(EXTI11_A::PB11),
                    2 => Val(EXTI11_A::PC11),
                    3 => Val(EXTI11_A::PD11),
                    5 => Val(EXTI11_A::PF11),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA11`"]
            #[inline(always)]
            pub fn is_pa11(&self) -> bool {
                *self == EXTI11_A::PA11
            }
            #[doc = "Checks if the value of the field is `PB11`"]
            #[inline(always)]
            pub fn is_pb11(&self) -> bool {
                *self == EXTI11_A::PB11
            }
            #[doc = "Checks if the value of the field is `PC11`"]
            #[inline(always)]
            pub fn is_pc11(&self) -> bool {
                *self == EXTI11_A::PC11
            }
            #[doc = "Checks if the value of the field is `PD11`"]
            #[inline(always)]
            pub fn is_pd11(&self) -> bool {
                *self == EXTI11_A::PD11
            }
            #[doc = "Checks if the value of the field is `PF11`"]
            #[inline(always)]
            pub fn is_pf11(&self) -> bool {
                *self == EXTI11_A::PF11
            }
        }
        #[doc = "Write proxy for field `EXTI11`"]
        pub struct EXTI11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI11_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA11 as the source input for the EXTI11 external interrupt"]
            #[inline(always)]
            pub fn pa11(self) -> &'a mut W {
                self.variant(EXTI11_A::PA11)
            }
            #[doc = "Select PB11 as the source input for the EXTI11 external interrupt"]
            #[inline(always)]
            pub fn pb11(self) -> &'a mut W {
                self.variant(EXTI11_A::PB11)
            }
            #[doc = "Select PC11 as the source input for the EXTI11 external interrupt"]
            #[inline(always)]
            pub fn pc11(self) -> &'a mut W {
                self.variant(EXTI11_A::PC11)
            }
            #[doc = "Select PD11 as the source input for the EXTI11 external interrupt"]
            #[inline(always)]
            pub fn pd11(self) -> &'a mut W {
                self.variant(EXTI11_A::PD11)
            }
            #[doc = "Select PF11 as the source input for the EXTI11 external interrupt"]
            #[inline(always)]
            pub fn pf11(self) -> &'a mut W {
                self.variant(EXTI11_A::PF11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "EXTI 10 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI10_A {
            #[doc = "0: Select PA10 as the source input for the EXTI10 external interrupt"]
            PA10 = 0,
            #[doc = "1: Select PB10 as the source input for the EXTI10 external interrupt"]
            PB10 = 1,
            #[doc = "2: Select PC10 as the source input for the EXTI10 external interrupt"]
            PC10 = 2,
            #[doc = "3: Select PD10 as the source input for the EXTI10 external interrupt"]
            PD10 = 3,
            #[doc = "5: Select PF10 as the source input for the EXTI10 external interrupt"]
            PF10 = 5,
        }
        impl From<EXTI10_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI10_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI10`"]
        pub type EXTI10_R = crate::R<u8, EXTI10_A>;
        impl EXTI10_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI10_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI10_A::PA10),
                    1 => Val(EXTI10_A::PB10),
                    2 => Val(EXTI10_A::PC10),
                    3 => Val(EXTI10_A::PD10),
                    5 => Val(EXTI10_A::PF10),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA10`"]
            #[inline(always)]
            pub fn is_pa10(&self) -> bool {
                *self == EXTI10_A::PA10
            }
            #[doc = "Checks if the value of the field is `PB10`"]
            #[inline(always)]
            pub fn is_pb10(&self) -> bool {
                *self == EXTI10_A::PB10
            }
            #[doc = "Checks if the value of the field is `PC10`"]
            #[inline(always)]
            pub fn is_pc10(&self) -> bool {
                *self == EXTI10_A::PC10
            }
            #[doc = "Checks if the value of the field is `PD10`"]
            #[inline(always)]
            pub fn is_pd10(&self) -> bool {
                *self == EXTI10_A::PD10
            }
            #[doc = "Checks if the value of the field is `PF10`"]
            #[inline(always)]
            pub fn is_pf10(&self) -> bool {
                *self == EXTI10_A::PF10
            }
        }
        #[doc = "Write proxy for field `EXTI10`"]
        pub struct EXTI10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI10_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA10 as the source input for the EXTI10 external interrupt"]
            #[inline(always)]
            pub fn pa10(self) -> &'a mut W {
                self.variant(EXTI10_A::PA10)
            }
            #[doc = "Select PB10 as the source input for the EXTI10 external interrupt"]
            #[inline(always)]
            pub fn pb10(self) -> &'a mut W {
                self.variant(EXTI10_A::PB10)
            }
            #[doc = "Select PC10 as the source input for the EXTI10 external interrupt"]
            #[inline(always)]
            pub fn pc10(self) -> &'a mut W {
                self.variant(EXTI10_A::PC10)
            }
            #[doc = "Select PD10 as the source input for the EXTI10 external interrupt"]
            #[inline(always)]
            pub fn pd10(self) -> &'a mut W {
                self.variant(EXTI10_A::PD10)
            }
            #[doc = "Select PF10 as the source input for the EXTI10 external interrupt"]
            #[inline(always)]
            pub fn pf10(self) -> &'a mut W {
                self.variant(EXTI10_A::PF10)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "EXTI 9 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI9_A {
            #[doc = "0: Select PA9 as the source input for the EXTI9 external interrupt"]
            PA9 = 0,
            #[doc = "1: Select PB9 as the source input for the EXTI9 external interrupt"]
            PB9 = 1,
            #[doc = "2: Select PC9 as the source input for the EXTI9 external interrupt"]
            PC9 = 2,
            #[doc = "3: Select PD9 as the source input for the EXTI9 external interrupt"]
            PD9 = 3,
            #[doc = "5: Select PF9 as the source input for the EXTI9 external interrupt"]
            PF9 = 5,
        }
        impl From<EXTI9_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI9_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI9`"]
        pub type EXTI9_R = crate::R<u8, EXTI9_A>;
        impl EXTI9_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI9_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI9_A::PA9),
                    1 => Val(EXTI9_A::PB9),
                    2 => Val(EXTI9_A::PC9),
                    3 => Val(EXTI9_A::PD9),
                    5 => Val(EXTI9_A::PF9),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA9`"]
            #[inline(always)]
            pub fn is_pa9(&self) -> bool {
                *self == EXTI9_A::PA9
            }
            #[doc = "Checks if the value of the field is `PB9`"]
            #[inline(always)]
            pub fn is_pb9(&self) -> bool {
                *self == EXTI9_A::PB9
            }
            #[doc = "Checks if the value of the field is `PC9`"]
            #[inline(always)]
            pub fn is_pc9(&self) -> bool {
                *self == EXTI9_A::PC9
            }
            #[doc = "Checks if the value of the field is `PD9`"]
            #[inline(always)]
            pub fn is_pd9(&self) -> bool {
                *self == EXTI9_A::PD9
            }
            #[doc = "Checks if the value of the field is `PF9`"]
            #[inline(always)]
            pub fn is_pf9(&self) -> bool {
                *self == EXTI9_A::PF9
            }
        }
        #[doc = "Write proxy for field `EXTI9`"]
        pub struct EXTI9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI9_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA9 as the source input for the EXTI9 external interrupt"]
            #[inline(always)]
            pub fn pa9(self) -> &'a mut W {
                self.variant(EXTI9_A::PA9)
            }
            #[doc = "Select PB9 as the source input for the EXTI9 external interrupt"]
            #[inline(always)]
            pub fn pb9(self) -> &'a mut W {
                self.variant(EXTI9_A::PB9)
            }
            #[doc = "Select PC9 as the source input for the EXTI9 external interrupt"]
            #[inline(always)]
            pub fn pc9(self) -> &'a mut W {
                self.variant(EXTI9_A::PC9)
            }
            #[doc = "Select PD9 as the source input for the EXTI9 external interrupt"]
            #[inline(always)]
            pub fn pd9(self) -> &'a mut W {
                self.variant(EXTI9_A::PD9)
            }
            #[doc = "Select PF9 as the source input for the EXTI9 external interrupt"]
            #[inline(always)]
            pub fn pf9(self) -> &'a mut W {
                self.variant(EXTI9_A::PF9)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "EXTI 8 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI8_A {
            #[doc = "0: Select PA8 as the source input for the EXTI8 external interrupt"]
            PA8 = 0,
            #[doc = "1: Select PB8 as the source input for the EXTI8 external interrupt"]
            PB8 = 1,
            #[doc = "2: Select PC8 as the source input for the EXTI8 external interrupt"]
            PC8 = 2,
            #[doc = "3: Select PD8 as the source input for the EXTI8 external interrupt"]
            PD8 = 3,
            #[doc = "5: Select PF8 as the source input for the EXTI8 external interrupt"]
            PF8 = 5,
        }
        impl From<EXTI8_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI8_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI8`"]
        pub type EXTI8_R = crate::R<u8, EXTI8_A>;
        impl EXTI8_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI8_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI8_A::PA8),
                    1 => Val(EXTI8_A::PB8),
                    2 => Val(EXTI8_A::PC8),
                    3 => Val(EXTI8_A::PD8),
                    5 => Val(EXTI8_A::PF8),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA8`"]
            #[inline(always)]
            pub fn is_pa8(&self) -> bool {
                *self == EXTI8_A::PA8
            }
            #[doc = "Checks if the value of the field is `PB8`"]
            #[inline(always)]
            pub fn is_pb8(&self) -> bool {
                *self == EXTI8_A::PB8
            }
            #[doc = "Checks if the value of the field is `PC8`"]
            #[inline(always)]
            pub fn is_pc8(&self) -> bool {
                *self == EXTI8_A::PC8
            }
            #[doc = "Checks if the value of the field is `PD8`"]
            #[inline(always)]
            pub fn is_pd8(&self) -> bool {
                *self == EXTI8_A::PD8
            }
            #[doc = "Checks if the value of the field is `PF8`"]
            #[inline(always)]
            pub fn is_pf8(&self) -> bool {
                *self == EXTI8_A::PF8
            }
        }
        #[doc = "Write proxy for field `EXTI8`"]
        pub struct EXTI8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI8_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA8 as the source input for the EXTI8 external interrupt"]
            #[inline(always)]
            pub fn pa8(self) -> &'a mut W {
                self.variant(EXTI8_A::PA8)
            }
            #[doc = "Select PB8 as the source input for the EXTI8 external interrupt"]
            #[inline(always)]
            pub fn pb8(self) -> &'a mut W {
                self.variant(EXTI8_A::PB8)
            }
            #[doc = "Select PC8 as the source input for the EXTI8 external interrupt"]
            #[inline(always)]
            pub fn pc8(self) -> &'a mut W {
                self.variant(EXTI8_A::PC8)
            }
            #[doc = "Select PD8 as the source input for the EXTI8 external interrupt"]
            #[inline(always)]
            pub fn pd8(self) -> &'a mut W {
                self.variant(EXTI8_A::PD8)
            }
            #[doc = "Select PF8 as the source input for the EXTI8 external interrupt"]
            #[inline(always)]
            pub fn pf8(self) -> &'a mut W {
                self.variant(EXTI8_A::PF8)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - EXTI 11 configuration bits"]
            #[inline(always)]
            pub fn exti11(&self) -> EXTI11_R {
                EXTI11_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI 10 configuration bits"]
            #[inline(always)]
            pub fn exti10(&self) -> EXTI10_R {
                EXTI10_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI 9 configuration bits"]
            #[inline(always)]
            pub fn exti9(&self) -> EXTI9_R {
                EXTI9_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - EXTI 8 configuration bits"]
            #[inline(always)]
            pub fn exti8(&self) -> EXTI8_R {
                EXTI8_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - EXTI 11 configuration bits"]
            #[inline(always)]
            pub fn exti11(&mut self) -> EXTI11_W {
                EXTI11_W { w: self }
            }
            #[doc = "Bits 8:11 - EXTI 10 configuration bits"]
            #[inline(always)]
            pub fn exti10(&mut self) -> EXTI10_W {
                EXTI10_W { w: self }
            }
            #[doc = "Bits 4:7 - EXTI 9 configuration bits"]
            #[inline(always)]
            pub fn exti9(&mut self) -> EXTI9_W {
                EXTI9_W { w: self }
            }
            #[doc = "Bits 0:3 - EXTI 8 configuration bits"]
            #[inline(always)]
            pub fn exti8(&mut self) -> EXTI8_W {
                EXTI8_W { w: self }
            }
        }
    }
    #[doc = "external interrupt configuration register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr4](exticr4) module"]
    pub type EXTICR4 = crate::Reg<u32, _EXTICR4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXTICR4;
    #[doc = "`read()` method returns [exticr4::R](exticr4::R) reader structure"]
    impl crate::Readable for EXTICR4 {}
    #[doc = "`write(|w| ..)` method takes [exticr4::W](exticr4::W) writer structure"]
    impl crate::Writable for EXTICR4 {}
    #[doc = "external interrupt configuration register 4"]
    pub mod exticr4 {
        #[doc = "Reader of register EXTICR4"]
        pub type R = crate::R<u32, super::EXTICR4>;
        #[doc = "Writer for register EXTICR4"]
        pub type W = crate::W<u32, super::EXTICR4>;
        #[doc = "Register EXTICR4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::EXTICR4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "EXTI 15 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI15_A {
            #[doc = "0: Select PA15 as the source input for the EXTI15 external interrupt"]
            PA15 = 0,
            #[doc = "1: Select PB15 as the source input for the EXTI15 external interrupt"]
            PB15 = 1,
            #[doc = "2: Select PC15 as the source input for the EXTI15 external interrupt"]
            PC15 = 2,
            #[doc = "3: Select PD15 as the source input for the EXTI15 external interrupt"]
            PD15 = 3,
            #[doc = "5: Select PF15 as the source input for the EXTI15 external interrupt"]
            PF15 = 5,
        }
        impl From<EXTI15_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI15`"]
        pub type EXTI15_R = crate::R<u8, EXTI15_A>;
        impl EXTI15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI15_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI15_A::PA15),
                    1 => Val(EXTI15_A::PB15),
                    2 => Val(EXTI15_A::PC15),
                    3 => Val(EXTI15_A::PD15),
                    5 => Val(EXTI15_A::PF15),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA15`"]
            #[inline(always)]
            pub fn is_pa15(&self) -> bool {
                *self == EXTI15_A::PA15
            }
            #[doc = "Checks if the value of the field is `PB15`"]
            #[inline(always)]
            pub fn is_pb15(&self) -> bool {
                *self == EXTI15_A::PB15
            }
            #[doc = "Checks if the value of the field is `PC15`"]
            #[inline(always)]
            pub fn is_pc15(&self) -> bool {
                *self == EXTI15_A::PC15
            }
            #[doc = "Checks if the value of the field is `PD15`"]
            #[inline(always)]
            pub fn is_pd15(&self) -> bool {
                *self == EXTI15_A::PD15
            }
            #[doc = "Checks if the value of the field is `PF15`"]
            #[inline(always)]
            pub fn is_pf15(&self) -> bool {
                *self == EXTI15_A::PF15
            }
        }
        #[doc = "Write proxy for field `EXTI15`"]
        pub struct EXTI15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI15_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA15 as the source input for the EXTI15 external interrupt"]
            #[inline(always)]
            pub fn pa15(self) -> &'a mut W {
                self.variant(EXTI15_A::PA15)
            }
            #[doc = "Select PB15 as the source input for the EXTI15 external interrupt"]
            #[inline(always)]
            pub fn pb15(self) -> &'a mut W {
                self.variant(EXTI15_A::PB15)
            }
            #[doc = "Select PC15 as the source input for the EXTI15 external interrupt"]
            #[inline(always)]
            pub fn pc15(self) -> &'a mut W {
                self.variant(EXTI15_A::PC15)
            }
            #[doc = "Select PD15 as the source input for the EXTI15 external interrupt"]
            #[inline(always)]
            pub fn pd15(self) -> &'a mut W {
                self.variant(EXTI15_A::PD15)
            }
            #[doc = "Select PF15 as the source input for the EXTI15 external interrupt"]
            #[inline(always)]
            pub fn pf15(self) -> &'a mut W {
                self.variant(EXTI15_A::PF15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "EXTI 14 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI14_A {
            #[doc = "0: Select PA14 as the source input for the EXTI14 external interrupt"]
            PA14 = 0,
            #[doc = "1: Select PB14 as the source input for the EXTI14 external interrupt"]
            PB14 = 1,
            #[doc = "2: Select PC14 as the source input for the EXTI14 external interrupt"]
            PC14 = 2,
            #[doc = "3: Select PD14 as the source input for the EXTI14 external interrupt"]
            PD14 = 3,
            #[doc = "5: Select PF14 as the source input for the EXTI14 external interrupt"]
            PF14 = 5,
        }
        impl From<EXTI14_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI14_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI14`"]
        pub type EXTI14_R = crate::R<u8, EXTI14_A>;
        impl EXTI14_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI14_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI14_A::PA14),
                    1 => Val(EXTI14_A::PB14),
                    2 => Val(EXTI14_A::PC14),
                    3 => Val(EXTI14_A::PD14),
                    5 => Val(EXTI14_A::PF14),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA14`"]
            #[inline(always)]
            pub fn is_pa14(&self) -> bool {
                *self == EXTI14_A::PA14
            }
            #[doc = "Checks if the value of the field is `PB14`"]
            #[inline(always)]
            pub fn is_pb14(&self) -> bool {
                *self == EXTI14_A::PB14
            }
            #[doc = "Checks if the value of the field is `PC14`"]
            #[inline(always)]
            pub fn is_pc14(&self) -> bool {
                *self == EXTI14_A::PC14
            }
            #[doc = "Checks if the value of the field is `PD14`"]
            #[inline(always)]
            pub fn is_pd14(&self) -> bool {
                *self == EXTI14_A::PD14
            }
            #[doc = "Checks if the value of the field is `PF14`"]
            #[inline(always)]
            pub fn is_pf14(&self) -> bool {
                *self == EXTI14_A::PF14
            }
        }
        #[doc = "Write proxy for field `EXTI14`"]
        pub struct EXTI14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI14_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA14 as the source input for the EXTI14 external interrupt"]
            #[inline(always)]
            pub fn pa14(self) -> &'a mut W {
                self.variant(EXTI14_A::PA14)
            }
            #[doc = "Select PB14 as the source input for the EXTI14 external interrupt"]
            #[inline(always)]
            pub fn pb14(self) -> &'a mut W {
                self.variant(EXTI14_A::PB14)
            }
            #[doc = "Select PC14 as the source input for the EXTI14 external interrupt"]
            #[inline(always)]
            pub fn pc14(self) -> &'a mut W {
                self.variant(EXTI14_A::PC14)
            }
            #[doc = "Select PD14 as the source input for the EXTI14 external interrupt"]
            #[inline(always)]
            pub fn pd14(self) -> &'a mut W {
                self.variant(EXTI14_A::PD14)
            }
            #[doc = "Select PF14 as the source input for the EXTI14 external interrupt"]
            #[inline(always)]
            pub fn pf14(self) -> &'a mut W {
                self.variant(EXTI14_A::PF14)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "EXTI 13 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI13_A {
            #[doc = "0: Select PA13 as the source input for the EXTI13 external interrupt"]
            PA13 = 0,
            #[doc = "1: Select PB13 as the source input for the EXTI13 external interrupt"]
            PB13 = 1,
            #[doc = "2: Select PC13 as the source input for the EXTI13 external interrupt"]
            PC13 = 2,
            #[doc = "3: Select PD13 as the source input for the EXTI13 external interrupt"]
            PD13 = 3,
            #[doc = "5: Select PF13 as the source input for the EXTI13 external interrupt"]
            PF13 = 5,
        }
        impl From<EXTI13_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI13_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI13`"]
        pub type EXTI13_R = crate::R<u8, EXTI13_A>;
        impl EXTI13_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI13_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI13_A::PA13),
                    1 => Val(EXTI13_A::PB13),
                    2 => Val(EXTI13_A::PC13),
                    3 => Val(EXTI13_A::PD13),
                    5 => Val(EXTI13_A::PF13),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA13`"]
            #[inline(always)]
            pub fn is_pa13(&self) -> bool {
                *self == EXTI13_A::PA13
            }
            #[doc = "Checks if the value of the field is `PB13`"]
            #[inline(always)]
            pub fn is_pb13(&self) -> bool {
                *self == EXTI13_A::PB13
            }
            #[doc = "Checks if the value of the field is `PC13`"]
            #[inline(always)]
            pub fn is_pc13(&self) -> bool {
                *self == EXTI13_A::PC13
            }
            #[doc = "Checks if the value of the field is `PD13`"]
            #[inline(always)]
            pub fn is_pd13(&self) -> bool {
                *self == EXTI13_A::PD13
            }
            #[doc = "Checks if the value of the field is `PF13`"]
            #[inline(always)]
            pub fn is_pf13(&self) -> bool {
                *self == EXTI13_A::PF13
            }
        }
        #[doc = "Write proxy for field `EXTI13`"]
        pub struct EXTI13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI13_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA13 as the source input for the EXTI13 external interrupt"]
            #[inline(always)]
            pub fn pa13(self) -> &'a mut W {
                self.variant(EXTI13_A::PA13)
            }
            #[doc = "Select PB13 as the source input for the EXTI13 external interrupt"]
            #[inline(always)]
            pub fn pb13(self) -> &'a mut W {
                self.variant(EXTI13_A::PB13)
            }
            #[doc = "Select PC13 as the source input for the EXTI13 external interrupt"]
            #[inline(always)]
            pub fn pc13(self) -> &'a mut W {
                self.variant(EXTI13_A::PC13)
            }
            #[doc = "Select PD13 as the source input for the EXTI13 external interrupt"]
            #[inline(always)]
            pub fn pd13(self) -> &'a mut W {
                self.variant(EXTI13_A::PD13)
            }
            #[doc = "Select PF13 as the source input for the EXTI13 external interrupt"]
            #[inline(always)]
            pub fn pf13(self) -> &'a mut W {
                self.variant(EXTI13_A::PF13)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "EXTI 12 configuration bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI12_A {
            #[doc = "0: Select PA12 as the source input for the EXTI12 external interrupt"]
            PA12 = 0,
            #[doc = "1: Select PB12 as the source input for the EXTI12 external interrupt"]
            PB12 = 1,
            #[doc = "2: Select PC12 as the source input for the EXTI12 external interrupt"]
            PC12 = 2,
            #[doc = "3: Select PD12 as the source input for the EXTI12 external interrupt"]
            PD12 = 3,
            #[doc = "5: Select PF12 as the source input for the EXTI12 external interrupt"]
            PF12 = 5,
        }
        impl From<EXTI12_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI12_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI12`"]
        pub type EXTI12_R = crate::R<u8, EXTI12_A>;
        impl EXTI12_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI12_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI12_A::PA12),
                    1 => Val(EXTI12_A::PB12),
                    2 => Val(EXTI12_A::PC12),
                    3 => Val(EXTI12_A::PD12),
                    5 => Val(EXTI12_A::PF12),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA12`"]
            #[inline(always)]
            pub fn is_pa12(&self) -> bool {
                *self == EXTI12_A::PA12
            }
            #[doc = "Checks if the value of the field is `PB12`"]
            #[inline(always)]
            pub fn is_pb12(&self) -> bool {
                *self == EXTI12_A::PB12
            }
            #[doc = "Checks if the value of the field is `PC12`"]
            #[inline(always)]
            pub fn is_pc12(&self) -> bool {
                *self == EXTI12_A::PC12
            }
            #[doc = "Checks if the value of the field is `PD12`"]
            #[inline(always)]
            pub fn is_pd12(&self) -> bool {
                *self == EXTI12_A::PD12
            }
            #[doc = "Checks if the value of the field is `PF12`"]
            #[inline(always)]
            pub fn is_pf12(&self) -> bool {
                *self == EXTI12_A::PF12
            }
        }
        #[doc = "Write proxy for field `EXTI12`"]
        pub struct EXTI12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI12_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Select PA12 as the source input for the EXTI12 external interrupt"]
            #[inline(always)]
            pub fn pa12(self) -> &'a mut W {
                self.variant(EXTI12_A::PA12)
            }
            #[doc = "Select PB12 as the source input for the EXTI12 external interrupt"]
            #[inline(always)]
            pub fn pb12(self) -> &'a mut W {
                self.variant(EXTI12_A::PB12)
            }
            #[doc = "Select PC12 as the source input for the EXTI12 external interrupt"]
            #[inline(always)]
            pub fn pc12(self) -> &'a mut W {
                self.variant(EXTI12_A::PC12)
            }
            #[doc = "Select PD12 as the source input for the EXTI12 external interrupt"]
            #[inline(always)]
            pub fn pd12(self) -> &'a mut W {
                self.variant(EXTI12_A::PD12)
            }
            #[doc = "Select PF12 as the source input for the EXTI12 external interrupt"]
            #[inline(always)]
            pub fn pf12(self) -> &'a mut W {
                self.variant(EXTI12_A::PF12)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - EXTI 15 configuration bits"]
            #[inline(always)]
            pub fn exti15(&self) -> EXTI15_R {
                EXTI15_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI 14 configuration bits"]
            #[inline(always)]
            pub fn exti14(&self) -> EXTI14_R {
                EXTI14_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI 13 configuration bits"]
            #[inline(always)]
            pub fn exti13(&self) -> EXTI13_R {
                EXTI13_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - EXTI 12 configuration bits"]
            #[inline(always)]
            pub fn exti12(&self) -> EXTI12_R {
                EXTI12_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - EXTI 15 configuration bits"]
            #[inline(always)]
            pub fn exti15(&mut self) -> EXTI15_W {
                EXTI15_W { w: self }
            }
            #[doc = "Bits 8:11 - EXTI 14 configuration bits"]
            #[inline(always)]
            pub fn exti14(&mut self) -> EXTI14_W {
                EXTI14_W { w: self }
            }
            #[doc = "Bits 4:7 - EXTI 13 configuration bits"]
            #[inline(always)]
            pub fn exti13(&mut self) -> EXTI13_W {
                EXTI13_W { w: self }
            }
            #[doc = "Bits 0:3 - EXTI 12 configuration bits"]
            #[inline(always)]
            pub fn exti12(&mut self) -> EXTI12_W {
                EXTI12_W { w: self }
            }
        }
    }
    #[doc = "configuration register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr2](cfgr2) module"]
    pub type CFGR2 = crate::Reg<u32, _CFGR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR2;
    #[doc = "`read()` method returns [cfgr2::R](cfgr2::R) reader structure"]
    impl crate::Readable for CFGR2 {}
    #[doc = "`write(|w| ..)` method takes [cfgr2::W](cfgr2::W) writer structure"]
    impl crate::Writable for CFGR2 {}
    #[doc = "configuration register 2"]
    pub mod cfgr2 {
        #[doc = "Reader of register CFGR2"]
        pub type R = crate::R<u32, super::CFGR2>;
        #[doc = "Writer for register CFGR2"]
        pub type W = crate::W<u32, super::CFGR2>;
        #[doc = "Register CFGR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFGR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "SRAM parity flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SRAM_PEF_A {
            #[doc = "0: No SRAM parity error detected"]
            NOPARITYERROR = 0,
            #[doc = "1: SRAM parity error detected"]
            PARITYERRORDETECTED = 1,
        }
        impl From<SRAM_PEF_A> for bool {
            #[inline(always)]
            fn from(variant: SRAM_PEF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SRAM_PEF`"]
        pub type SRAM_PEF_R = crate::R<bool, SRAM_PEF_A>;
        impl SRAM_PEF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SRAM_PEF_A {
                match self.bits {
                    false => SRAM_PEF_A::NOPARITYERROR,
                    true => SRAM_PEF_A::PARITYERRORDETECTED,
                }
            }
            #[doc = "Checks if the value of the field is `NOPARITYERROR`"]
            #[inline(always)]
            pub fn is_no_parity_error(&self) -> bool {
                *self == SRAM_PEF_A::NOPARITYERROR
            }
            #[doc = "Checks if the value of the field is `PARITYERRORDETECTED`"]
            #[inline(always)]
            pub fn is_parity_error_detected(&self) -> bool {
                *self == SRAM_PEF_A::PARITYERRORDETECTED
            }
        }
        #[doc = "SRAM parity flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SRAM_PEF_AW {
            #[doc = "1: Clear SRAM parity error flag"]
            CLEAR = 1,
        }
        impl From<SRAM_PEF_AW> for bool {
            #[inline(always)]
            fn from(variant: SRAM_PEF_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `SRAM_PEF`"]
        pub struct SRAM_PEF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRAM_PEF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SRAM_PEF_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear SRAM parity error flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(SRAM_PEF_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "SRAM parity lock bit\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SRAM_PARITY_LOCK_A {
            #[doc = "0: SRAM parity error disconnected from TIM1/15/16/17 Break input"]
            DISCONNECTED = 0,
            #[doc = "1: SRAM parity error connected to TIM1/15/16/17 Break input"]
            CONNECTED = 1,
        }
        impl From<SRAM_PARITY_LOCK_A> for bool {
            #[inline(always)]
            fn from(variant: SRAM_PARITY_LOCK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SRAM_PARITY_LOCK`"]
        pub type SRAM_PARITY_LOCK_R = crate::R<bool, SRAM_PARITY_LOCK_A>;
        impl SRAM_PARITY_LOCK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SRAM_PARITY_LOCK_A {
                match self.bits {
                    false => SRAM_PARITY_LOCK_A::DISCONNECTED,
                    true => SRAM_PARITY_LOCK_A::CONNECTED,
                }
            }
            #[doc = "Checks if the value of the field is `DISCONNECTED`"]
            #[inline(always)]
            pub fn is_disconnected(&self) -> bool {
                *self == SRAM_PARITY_LOCK_A::DISCONNECTED
            }
            #[doc = "Checks if the value of the field is `CONNECTED`"]
            #[inline(always)]
            pub fn is_connected(&self) -> bool {
                *self == SRAM_PARITY_LOCK_A::CONNECTED
            }
        }
        #[doc = "Write proxy for field `SRAM_PARITY_LOCK`"]
        pub struct SRAM_PARITY_LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRAM_PARITY_LOCK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SRAM_PARITY_LOCK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SRAM parity error disconnected from TIM1/15/16/17 Break input"]
            #[inline(always)]
            pub fn disconnected(self) -> &'a mut W {
                self.variant(SRAM_PARITY_LOCK_A::DISCONNECTED)
            }
            #[doc = "SRAM parity error connected to TIM1/15/16/17 Break input"]
            #[inline(always)]
            pub fn connected(self) -> &'a mut W {
                self.variant(SRAM_PARITY_LOCK_A::CONNECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Cortex-M0 LOCKUP bit enable bit\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LOCKUP_LOCK_A {
            #[doc = "0: Cortex-M0 LOCKUP output disconnected from TIM1/15/16/17 Break input"]
            DISCONNECTED = 0,
            #[doc = "1: Cortex-M0 LOCKUP output connected to TIM1/15/16/17 Break input"]
            CONNECTED = 1,
        }
        impl From<LOCKUP_LOCK_A> for bool {
            #[inline(always)]
            fn from(variant: LOCKUP_LOCK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LOCKUP_LOCK`"]
        pub type LOCKUP_LOCK_R = crate::R<bool, LOCKUP_LOCK_A>;
        impl LOCKUP_LOCK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LOCKUP_LOCK_A {
                match self.bits {
                    false => LOCKUP_LOCK_A::DISCONNECTED,
                    true => LOCKUP_LOCK_A::CONNECTED,
                }
            }
            #[doc = "Checks if the value of the field is `DISCONNECTED`"]
            #[inline(always)]
            pub fn is_disconnected(&self) -> bool {
                *self == LOCKUP_LOCK_A::DISCONNECTED
            }
            #[doc = "Checks if the value of the field is `CONNECTED`"]
            #[inline(always)]
            pub fn is_connected(&self) -> bool {
                *self == LOCKUP_LOCK_A::CONNECTED
            }
        }
        #[doc = "Write proxy for field `LOCKUP_LOCK`"]
        pub struct LOCKUP_LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOCKUP_LOCK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LOCKUP_LOCK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Cortex-M0 LOCKUP output disconnected from TIM1/15/16/17 Break input"]
            #[inline(always)]
            pub fn disconnected(self) -> &'a mut W {
                self.variant(LOCKUP_LOCK_A::DISCONNECTED)
            }
            #[doc = "Cortex-M0 LOCKUP output connected to TIM1/15/16/17 Break input"]
            #[inline(always)]
            pub fn connected(self) -> &'a mut W {
                self.variant(LOCKUP_LOCK_A::CONNECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - SRAM parity flag"]
            #[inline(always)]
            pub fn sram_pef(&self) -> SRAM_PEF_R {
                SRAM_PEF_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SRAM parity lock bit"]
            #[inline(always)]
            pub fn sram_parity_lock(&self) -> SRAM_PARITY_LOCK_R {
                SRAM_PARITY_LOCK_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Cortex-M0 LOCKUP bit enable bit"]
            #[inline(always)]
            pub fn lockup_lock(&self) -> LOCKUP_LOCK_R {
                LOCKUP_LOCK_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - SRAM parity flag"]
            #[inline(always)]
            pub fn sram_pef(&mut self) -> SRAM_PEF_W {
                SRAM_PEF_W { w: self }
            }
            #[doc = "Bit 1 - SRAM parity lock bit"]
            #[inline(always)]
            pub fn sram_parity_lock(&mut self) -> SRAM_PARITY_LOCK_W {
                SRAM_PARITY_LOCK_W { w: self }
            }
            #[doc = "Bit 0 - Cortex-M0 LOCKUP bit enable bit"]
            #[inline(always)]
            pub fn lockup_lock(&mut self) -> LOCKUP_LOCK_W {
                LOCKUP_LOCK_W { w: self }
            }
        }
    }
}
#[doc = "Analog-to-digital converter"]
pub struct ADC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC {}
impl ADC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc::RegisterBlock {
        0x4001_2400 as *const _
    }
}
impl Deref for ADC {
    type Target = adc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*ADC::ptr() }
    }
}
#[doc = "Analog-to-digital converter"]
pub mod adc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - interrupt and status register"]
        pub isr: ISR,
        #[doc = "0x04 - interrupt enable register"]
        pub ier: IER,
        #[doc = "0x08 - control register"]
        pub cr: CR,
        #[doc = "0x0c - configuration register 1"]
        pub cfgr1: CFGR1,
        #[doc = "0x10 - configuration register 2"]
        pub cfgr2: CFGR2,
        #[doc = "0x14 - sampling time register"]
        pub smpr: SMPR,
        _reserved6: [u8; 8usize],
        #[doc = "0x20 - watchdog threshold register"]
        pub tr: TR,
        _reserved7: [u8; 4usize],
        #[doc = "0x28 - channel selection register"]
        pub chselr: CHSELR,
        _reserved8: [u8; 20usize],
        #[doc = "0x40 - data register"]
        pub dr: DR,
        _reserved9: [u8; 708usize],
        #[doc = "0x308 - common configuration register"]
        pub ccr: CCR,
    }
    #[doc = "interrupt and status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr](isr) module"]
    pub type ISR = crate::Reg<u32, _ISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISR;
    #[doc = "`read()` method returns [isr::R](isr::R) reader structure"]
    impl crate::Readable for ISR {}
    #[doc = "`write(|w| ..)` method takes [isr::W](isr::W) writer structure"]
    impl crate::Writable for ISR {}
    #[doc = "interrupt and status register"]
    pub mod isr {
        #[doc = "Reader of register ISR"]
        pub type R = crate::R<u32, super::ISR>;
        #[doc = "Writer for register ISR"]
        pub type W = crate::W<u32, super::ISR>;
        #[doc = "Register ISR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ISR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Analog watchdog flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum AWD_A {
            #[doc = "0: No analog watchdog event occurred"]
            NOEVENT = 0,
            #[doc = "1: Analog watchdog event occurred"]
            EVENT = 1,
        }
        impl From<AWD_A> for bool {
            #[inline(always)]
            fn from(variant: AWD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `AWD`"]
        pub type AWD_R = crate::R<bool, AWD_A>;
        impl AWD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AWD_A {
                match self.bits {
                    false => AWD_A::NOEVENT,
                    true => AWD_A::EVENT,
                }
            }
            #[doc = "Checks if the value of the field is `NOEVENT`"]
            #[inline(always)]
            pub fn is_no_event(&self) -> bool {
                *self == AWD_A::NOEVENT
            }
            #[doc = "Checks if the value of the field is `EVENT`"]
            #[inline(always)]
            pub fn is_event(&self) -> bool {
                *self == AWD_A::EVENT
            }
        }
        #[doc = "Analog watchdog flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum AWD_AW {
            #[doc = "1: Clear the analog watchdog event flag"]
            CLEAR = 1,
        }
        impl From<AWD_AW> for bool {
            #[inline(always)]
            fn from(variant: AWD_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `AWD`"]
        pub struct AWD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AWD_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear the analog watchdog event flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(AWD_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "ADC overrun\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OVR_A {
            #[doc = "0: No overrun occurred"]
            NOOVERRUN = 0,
            #[doc = "1: Overrun occurred"]
            OVERRUN = 1,
        }
        impl From<OVR_A> for bool {
            #[inline(always)]
            fn from(variant: OVR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OVR`"]
        pub type OVR_R = crate::R<bool, OVR_A>;
        impl OVR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OVR_A {
                match self.bits {
                    false => OVR_A::NOOVERRUN,
                    true => OVR_A::OVERRUN,
                }
            }
            #[doc = "Checks if the value of the field is `NOOVERRUN`"]
            #[inline(always)]
            pub fn is_no_overrun(&self) -> bool {
                *self == OVR_A::NOOVERRUN
            }
            #[doc = "Checks if the value of the field is `OVERRUN`"]
            #[inline(always)]
            pub fn is_overrun(&self) -> bool {
                *self == OVR_A::OVERRUN
            }
        }
        #[doc = "ADC overrun\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OVR_AW {
            #[doc = "1: Clear the overrun flag"]
            CLEAR = 1,
        }
        impl From<OVR_AW> for bool {
            #[inline(always)]
            fn from(variant: OVR_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `OVR`"]
        pub struct OVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OVR_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear the overrun flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(OVR_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "End of sequence flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EOSEQ_A {
            #[doc = "0: Conversion sequence is not complete"]
            NOTCOMPLETE = 0,
            #[doc = "1: Conversion sequence complete"]
            COMPLETE = 1,
        }
        impl From<EOSEQ_A> for bool {
            #[inline(always)]
            fn from(variant: EOSEQ_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EOSEQ`"]
        pub type EOSEQ_R = crate::R<bool, EOSEQ_A>;
        impl EOSEQ_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EOSEQ_A {
                match self.bits {
                    false => EOSEQ_A::NOTCOMPLETE,
                    true => EOSEQ_A::COMPLETE,
                }
            }
            #[doc = "Checks if the value of the field is `NOTCOMPLETE`"]
            #[inline(always)]
            pub fn is_not_complete(&self) -> bool {
                *self == EOSEQ_A::NOTCOMPLETE
            }
            #[doc = "Checks if the value of the field is `COMPLETE`"]
            #[inline(always)]
            pub fn is_complete(&self) -> bool {
                *self == EOSEQ_A::COMPLETE
            }
        }
        #[doc = "End of sequence flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EOSEQ_AW {
            #[doc = "1: Clear the conversion sequence flag"]
            CLEAR = 1,
        }
        impl From<EOSEQ_AW> for bool {
            #[inline(always)]
            fn from(variant: EOSEQ_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `EOSEQ`"]
        pub struct EOSEQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOSEQ_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EOSEQ_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear the conversion sequence flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(EOSEQ_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "End of conversion flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EOC_A {
            #[doc = "0: Channel conversion is not complete"]
            NOTCOMPLETE = 0,
            #[doc = "1: Channel conversion complete"]
            COMPLETE = 1,
        }
        impl From<EOC_A> for bool {
            #[inline(always)]
            fn from(variant: EOC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EOC`"]
        pub type EOC_R = crate::R<bool, EOC_A>;
        impl EOC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EOC_A {
                match self.bits {
                    false => EOC_A::NOTCOMPLETE,
                    true => EOC_A::COMPLETE,
                }
            }
            #[doc = "Checks if the value of the field is `NOTCOMPLETE`"]
            #[inline(always)]
            pub fn is_not_complete(&self) -> bool {
                *self == EOC_A::NOTCOMPLETE
            }
            #[doc = "Checks if the value of the field is `COMPLETE`"]
            #[inline(always)]
            pub fn is_complete(&self) -> bool {
                *self == EOC_A::COMPLETE
            }
        }
        #[doc = "End of conversion flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EOC_AW {
            #[doc = "1: Clear the channel conversion flag"]
            CLEAR = 1,
        }
        impl From<EOC_AW> for bool {
            #[inline(always)]
            fn from(variant: EOC_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `EOC`"]
        pub struct EOC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EOC_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear the channel conversion flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(EOC_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "End of sampling flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EOSMP_A {
            #[doc = "0: Not at the end of the samplings phase"]
            NOTATEND = 0,
            #[doc = "1: End of sampling phase reached"]
            ATEND = 1,
        }
        impl From<EOSMP_A> for bool {
            #[inline(always)]
            fn from(variant: EOSMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EOSMP`"]
        pub type EOSMP_R = crate::R<bool, EOSMP_A>;
        impl EOSMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EOSMP_A {
                match self.bits {
                    false => EOSMP_A::NOTATEND,
                    true => EOSMP_A::ATEND,
                }
            }
            #[doc = "Checks if the value of the field is `NOTATEND`"]
            #[inline(always)]
            pub fn is_not_at_end(&self) -> bool {
                *self == EOSMP_A::NOTATEND
            }
            #[doc = "Checks if the value of the field is `ATEND`"]
            #[inline(always)]
            pub fn is_at_end(&self) -> bool {
                *self == EOSMP_A::ATEND
            }
        }
        #[doc = "End of sampling flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EOSMP_AW {
            #[doc = "1: Clear the sampling phase flag"]
            CLEAR = 1,
        }
        impl From<EOSMP_AW> for bool {
            #[inline(always)]
            fn from(variant: EOSMP_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `EOSMP`"]
        pub struct EOSMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOSMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EOSMP_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear the sampling phase flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(EOSMP_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "ADC ready\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADRDY_A {
            #[doc = "0: ADC not yet ready to start conversion"]
            NOTREADY = 0,
            #[doc = "1: ADC ready to start conversion"]
            READY = 1,
        }
        impl From<ADRDY_A> for bool {
            #[inline(always)]
            fn from(variant: ADRDY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADRDY`"]
        pub type ADRDY_R = crate::R<bool, ADRDY_A>;
        impl ADRDY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADRDY_A {
                match self.bits {
                    false => ADRDY_A::NOTREADY,
                    true => ADRDY_A::READY,
                }
            }
            #[doc = "Checks if the value of the field is `NOTREADY`"]
            #[inline(always)]
            pub fn is_not_ready(&self) -> bool {
                *self == ADRDY_A::NOTREADY
            }
            #[doc = "Checks if the value of the field is `READY`"]
            #[inline(always)]
            pub fn is_ready(&self) -> bool {
                *self == ADRDY_A::READY
            }
        }
        #[doc = "ADC ready\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADRDY_AW {
            #[doc = "1: Clear the ADC ready flag"]
            CLEAR = 1,
        }
        impl From<ADRDY_AW> for bool {
            #[inline(always)]
            fn from(variant: ADRDY_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `ADRDY`"]
        pub struct ADRDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADRDY_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADRDY_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear the ADC ready flag"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(ADRDY_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - Analog watchdog flag"]
            #[inline(always)]
            pub fn awd(&self) -> AWD_R {
                AWD_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 4 - ADC overrun"]
            #[inline(always)]
            pub fn ovr(&self) -> OVR_R {
                OVR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - End of sequence flag"]
            #[inline(always)]
            pub fn eoseq(&self) -> EOSEQ_R {
                EOSEQ_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - End of conversion flag"]
            #[inline(always)]
            pub fn eoc(&self) -> EOC_R {
                EOC_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - End of sampling flag"]
            #[inline(always)]
            pub fn eosmp(&self) -> EOSMP_R {
                EOSMP_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - ADC ready"]
            #[inline(always)]
            pub fn adrdy(&self) -> ADRDY_R {
                ADRDY_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - Analog watchdog flag"]
            #[inline(always)]
            pub fn awd(&mut self) -> AWD_W {
                AWD_W { w: self }
            }
            #[doc = "Bit 4 - ADC overrun"]
            #[inline(always)]
            pub fn ovr(&mut self) -> OVR_W {
                OVR_W { w: self }
            }
            #[doc = "Bit 3 - End of sequence flag"]
            #[inline(always)]
            pub fn eoseq(&mut self) -> EOSEQ_W {
                EOSEQ_W { w: self }
            }
            #[doc = "Bit 2 - End of conversion flag"]
            #[inline(always)]
            pub fn eoc(&mut self) -> EOC_W {
                EOC_W { w: self }
            }
            #[doc = "Bit 1 - End of sampling flag"]
            #[inline(always)]
            pub fn eosmp(&mut self) -> EOSMP_W {
                EOSMP_W { w: self }
            }
            #[doc = "Bit 0 - ADC ready"]
            #[inline(always)]
            pub fn adrdy(&mut self) -> ADRDY_W {
                ADRDY_W { w: self }
            }
        }
    }
    #[doc = "interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ier](ier) module"]
    pub type IER = crate::Reg<u32, _IER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IER;
    #[doc = "`read()` method returns [ier::R](ier::R) reader structure"]
    impl crate::Readable for IER {}
    #[doc = "`write(|w| ..)` method takes [ier::W](ier::W) writer structure"]
    impl crate::Writable for IER {}
    #[doc = "interrupt enable register"]
    pub mod ier {
        #[doc = "Reader of register IER"]
        pub type R = crate::R<u32, super::IER>;
        #[doc = "Writer for register IER"]
        pub type W = crate::W<u32, super::IER>;
        #[doc = "Register IER `reset()`'s with value 0"]
        impl crate::ResetValue for super::IER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Analog watchdog interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum AWDIE_A {
            #[doc = "0: Analog watchdog interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Analog watchdog interrupt enabled"]
            ENABLED = 1,
        }
        impl From<AWDIE_A> for bool {
            #[inline(always)]
            fn from(variant: AWDIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `AWDIE`"]
        pub type AWDIE_R = crate::R<bool, AWDIE_A>;
        impl AWDIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AWDIE_A {
                match self.bits {
                    false => AWDIE_A::DISABLED,
                    true => AWDIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == AWDIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == AWDIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `AWDIE`"]
        pub struct AWDIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWDIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AWDIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Analog watchdog interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(AWDIE_A::DISABLED)
            }
            #[doc = "Analog watchdog interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(AWDIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Overrun interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OVRIE_A {
            #[doc = "0: Overrun interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Overrun interrupt enabled"]
            ENABLED = 1,
        }
        impl From<OVRIE_A> for bool {
            #[inline(always)]
            fn from(variant: OVRIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OVRIE`"]
        pub type OVRIE_R = crate::R<bool, OVRIE_A>;
        impl OVRIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OVRIE_A {
                match self.bits {
                    false => OVRIE_A::DISABLED,
                    true => OVRIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OVRIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OVRIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OVRIE`"]
        pub struct OVRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVRIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OVRIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Overrun interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OVRIE_A::DISABLED)
            }
            #[doc = "Overrun interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OVRIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "End of conversion sequence interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EOSEQIE_A {
            #[doc = "0: End of conversion sequence interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: End of conversion sequence interrupt enabled"]
            ENABLED = 1,
        }
        impl From<EOSEQIE_A> for bool {
            #[inline(always)]
            fn from(variant: EOSEQIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EOSEQIE`"]
        pub type EOSEQIE_R = crate::R<bool, EOSEQIE_A>;
        impl EOSEQIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EOSEQIE_A {
                match self.bits {
                    false => EOSEQIE_A::DISABLED,
                    true => EOSEQIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == EOSEQIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == EOSEQIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `EOSEQIE`"]
        pub struct EOSEQIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOSEQIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EOSEQIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "End of conversion sequence interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(EOSEQIE_A::DISABLED)
            }
            #[doc = "End of conversion sequence interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(EOSEQIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "End of conversion interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EOCIE_A {
            #[doc = "0: End of conversion interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: End of conversion interrupt enabled"]
            ENABLED = 1,
        }
        impl From<EOCIE_A> for bool {
            #[inline(always)]
            fn from(variant: EOCIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EOCIE`"]
        pub type EOCIE_R = crate::R<bool, EOCIE_A>;
        impl EOCIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EOCIE_A {
                match self.bits {
                    false => EOCIE_A::DISABLED,
                    true => EOCIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == EOCIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == EOCIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `EOCIE`"]
        pub struct EOCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOCIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EOCIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "End of conversion interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(EOCIE_A::DISABLED)
            }
            #[doc = "End of conversion interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(EOCIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "End of sampling flag interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EOSMPIE_A {
            #[doc = "0: End of sampling interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: End of sampling interrupt enabled"]
            ENABLED = 1,
        }
        impl From<EOSMPIE_A> for bool {
            #[inline(always)]
            fn from(variant: EOSMPIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EOSMPIE`"]
        pub type EOSMPIE_R = crate::R<bool, EOSMPIE_A>;
        impl EOSMPIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EOSMPIE_A {
                match self.bits {
                    false => EOSMPIE_A::DISABLED,
                    true => EOSMPIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == EOSMPIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == EOSMPIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `EOSMPIE`"]
        pub struct EOSMPIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOSMPIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EOSMPIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "End of sampling interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(EOSMPIE_A::DISABLED)
            }
            #[doc = "End of sampling interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(EOSMPIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "ADC ready interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADRDYIE_A {
            #[doc = "0: ADC ready interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: ADC ready interrupt enabled"]
            ENABLED = 1,
        }
        impl From<ADRDYIE_A> for bool {
            #[inline(always)]
            fn from(variant: ADRDYIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADRDYIE`"]
        pub type ADRDYIE_R = crate::R<bool, ADRDYIE_A>;
        impl ADRDYIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADRDYIE_A {
                match self.bits {
                    false => ADRDYIE_A::DISABLED,
                    true => ADRDYIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ADRDYIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ADRDYIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ADRDYIE`"]
        pub struct ADRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADRDYIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADRDYIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ADC ready interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ADRDYIE_A::DISABLED)
            }
            #[doc = "ADC ready interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ADRDYIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - Analog watchdog interrupt enable"]
            #[inline(always)]
            pub fn awdie(&self) -> AWDIE_R {
                AWDIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Overrun interrupt enable"]
            #[inline(always)]
            pub fn ovrie(&self) -> OVRIE_R {
                OVRIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - End of conversion sequence interrupt enable"]
            #[inline(always)]
            pub fn eoseqie(&self) -> EOSEQIE_R {
                EOSEQIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - End of conversion interrupt enable"]
            #[inline(always)]
            pub fn eocie(&self) -> EOCIE_R {
                EOCIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - End of sampling flag interrupt enable"]
            #[inline(always)]
            pub fn eosmpie(&self) -> EOSMPIE_R {
                EOSMPIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - ADC ready interrupt enable"]
            #[inline(always)]
            pub fn adrdyie(&self) -> ADRDYIE_R {
                ADRDYIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - Analog watchdog interrupt enable"]
            #[inline(always)]
            pub fn awdie(&mut self) -> AWDIE_W {
                AWDIE_W { w: self }
            }
            #[doc = "Bit 4 - Overrun interrupt enable"]
            #[inline(always)]
            pub fn ovrie(&mut self) -> OVRIE_W {
                OVRIE_W { w: self }
            }
            #[doc = "Bit 3 - End of conversion sequence interrupt enable"]
            #[inline(always)]
            pub fn eoseqie(&mut self) -> EOSEQIE_W {
                EOSEQIE_W { w: self }
            }
            #[doc = "Bit 2 - End of conversion interrupt enable"]
            #[inline(always)]
            pub fn eocie(&mut self) -> EOCIE_W {
                EOCIE_W { w: self }
            }
            #[doc = "Bit 1 - End of sampling flag interrupt enable"]
            #[inline(always)]
            pub fn eosmpie(&mut self) -> EOSMPIE_W {
                EOSMPIE_W { w: self }
            }
            #[doc = "Bit 0 - ADC ready interrupt enable"]
            #[inline(always)]
            pub fn adrdyie(&mut self) -> ADRDYIE_W {
                ADRDYIE_W { w: self }
            }
        }
    }
    #[doc = "control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "ADC calibration\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADCAL_A {
            #[doc = "0: ADC calibration either not yet performed or completed"]
            NOTCALIBRATING = 0,
            #[doc = "1: ADC calibration in progress"]
            CALIBRATING = 1,
        }
        impl From<ADCAL_A> for bool {
            #[inline(always)]
            fn from(variant: ADCAL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADCAL`"]
        pub type ADCAL_R = crate::R<bool, ADCAL_A>;
        impl ADCAL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADCAL_A {
                match self.bits {
                    false => ADCAL_A::NOTCALIBRATING,
                    true => ADCAL_A::CALIBRATING,
                }
            }
            #[doc = "Checks if the value of the field is `NOTCALIBRATING`"]
            #[inline(always)]
            pub fn is_not_calibrating(&self) -> bool {
                *self == ADCAL_A::NOTCALIBRATING
            }
            #[doc = "Checks if the value of the field is `CALIBRATING`"]
            #[inline(always)]
            pub fn is_calibrating(&self) -> bool {
                *self == ADCAL_A::CALIBRATING
            }
        }
        #[doc = "ADC calibration\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADCAL_AW {
            #[doc = "1: Start the ADC calibration sequence"]
            STARTCALIBRATION = 1,
        }
        impl From<ADCAL_AW> for bool {
            #[inline(always)]
            fn from(variant: ADCAL_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `ADCAL`"]
        pub struct ADCAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCAL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADCAL_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Start the ADC calibration sequence"]
            #[inline(always)]
            pub fn start_calibration(self) -> &'a mut W {
                self.variant(ADCAL_AW::STARTCALIBRATION)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "ADC stop conversion command\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADSTP_A {
            #[doc = "0: No stop command active"]
            NOTSTOPPING = 0,
            #[doc = "1: ADC stopping conversion"]
            STOPPING = 1,
        }
        impl From<ADSTP_A> for bool {
            #[inline(always)]
            fn from(variant: ADSTP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADSTP`"]
        pub type ADSTP_R = crate::R<bool, ADSTP_A>;
        impl ADSTP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADSTP_A {
                match self.bits {
                    false => ADSTP_A::NOTSTOPPING,
                    true => ADSTP_A::STOPPING,
                }
            }
            #[doc = "Checks if the value of the field is `NOTSTOPPING`"]
            #[inline(always)]
            pub fn is_not_stopping(&self) -> bool {
                *self == ADSTP_A::NOTSTOPPING
            }
            #[doc = "Checks if the value of the field is `STOPPING`"]
            #[inline(always)]
            pub fn is_stopping(&self) -> bool {
                *self == ADSTP_A::STOPPING
            }
        }
        #[doc = "ADC stop conversion command\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADSTP_AW {
            #[doc = "1: Stop the active conversion"]
            STOPCONVERSION = 1,
        }
        impl From<ADSTP_AW> for bool {
            #[inline(always)]
            fn from(variant: ADSTP_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `ADSTP`"]
        pub struct ADSTP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADSTP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADSTP_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Stop the active conversion"]
            #[inline(always)]
            pub fn stop_conversion(self) -> &'a mut W {
                self.variant(ADSTP_AW::STOPCONVERSION)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "ADC start conversion command\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADSTART_A {
            #[doc = "0: No conversion ongoing"]
            NOTACTIVE = 0,
            #[doc = "1: ADC operating and may be converting"]
            ACTIVE = 1,
        }
        impl From<ADSTART_A> for bool {
            #[inline(always)]
            fn from(variant: ADSTART_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADSTART`"]
        pub type ADSTART_R = crate::R<bool, ADSTART_A>;
        impl ADSTART_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADSTART_A {
                match self.bits {
                    false => ADSTART_A::NOTACTIVE,
                    true => ADSTART_A::ACTIVE,
                }
            }
            #[doc = "Checks if the value of the field is `NOTACTIVE`"]
            #[inline(always)]
            pub fn is_not_active(&self) -> bool {
                *self == ADSTART_A::NOTACTIVE
            }
            #[doc = "Checks if the value of the field is `ACTIVE`"]
            #[inline(always)]
            pub fn is_active(&self) -> bool {
                *self == ADSTART_A::ACTIVE
            }
        }
        #[doc = "ADC start conversion command\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADSTART_AW {
            #[doc = "1: Start the ADC conversion (may be delayed for hardware triggers)"]
            STARTCONVERSION = 1,
        }
        impl From<ADSTART_AW> for bool {
            #[inline(always)]
            fn from(variant: ADSTART_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `ADSTART`"]
        pub struct ADSTART_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADSTART_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADSTART_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Start the ADC conversion (may be delayed for hardware triggers)"]
            #[inline(always)]
            pub fn start_conversion(self) -> &'a mut W {
                self.variant(ADSTART_AW::STARTCONVERSION)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "ADC disable command\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADDIS_A {
            #[doc = "0: No disable command active"]
            NOTDISABLING = 0,
            #[doc = "1: ADC disabling"]
            DISABLING = 1,
        }
        impl From<ADDIS_A> for bool {
            #[inline(always)]
            fn from(variant: ADDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADDIS`"]
        pub type ADDIS_R = crate::R<bool, ADDIS_A>;
        impl ADDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADDIS_A {
                match self.bits {
                    false => ADDIS_A::NOTDISABLING,
                    true => ADDIS_A::DISABLING,
                }
            }
            #[doc = "Checks if the value of the field is `NOTDISABLING`"]
            #[inline(always)]
            pub fn is_not_disabling(&self) -> bool {
                *self == ADDIS_A::NOTDISABLING
            }
            #[doc = "Checks if the value of the field is `DISABLING`"]
            #[inline(always)]
            pub fn is_disabling(&self) -> bool {
                *self == ADDIS_A::DISABLING
            }
        }
        #[doc = "ADC disable command\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADDIS_AW {
            #[doc = "1: Disable the ADC"]
            DISABLE = 1,
        }
        impl From<ADDIS_AW> for bool {
            #[inline(always)]
            fn from(variant: ADDIS_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `ADDIS`"]
        pub struct ADDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADDIS_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disable the ADC"]
            #[inline(always)]
            pub fn disable(self) -> &'a mut W {
                self.variant(ADDIS_AW::DISABLE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "ADC enable command\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADEN_A {
            #[doc = "0: ADC disabled"]
            DISABLED = 0,
            #[doc = "1: ADC enabled"]
            ENABLED = 1,
        }
        impl From<ADEN_A> for bool {
            #[inline(always)]
            fn from(variant: ADEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADEN`"]
        pub type ADEN_R = crate::R<bool, ADEN_A>;
        impl ADEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADEN_A {
                match self.bits {
                    false => ADEN_A::DISABLED,
                    true => ADEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ADEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ADEN_A::ENABLED
            }
        }
        #[doc = "ADC enable command\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADEN_AW {
            #[doc = "1: Enable the ADC"]
            ENABLED = 1,
        }
        impl From<ADEN_AW> for bool {
            #[inline(always)]
            fn from(variant: ADEN_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `ADEN`"]
        pub struct ADEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADEN_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Enable the ADC"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ADEN_AW::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - ADC calibration"]
            #[inline(always)]
            pub fn adcal(&self) -> ADCAL_R {
                ADCAL_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 4 - ADC stop conversion command"]
            #[inline(always)]
            pub fn adstp(&self) -> ADSTP_R {
                ADSTP_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 2 - ADC start conversion command"]
            #[inline(always)]
            pub fn adstart(&self) -> ADSTART_R {
                ADSTART_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - ADC disable command"]
            #[inline(always)]
            pub fn addis(&self) -> ADDIS_R {
                ADDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - ADC enable command"]
            #[inline(always)]
            pub fn aden(&self) -> ADEN_R {
                ADEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - ADC calibration"]
            #[inline(always)]
            pub fn adcal(&mut self) -> ADCAL_W {
                ADCAL_W { w: self }
            }
            #[doc = "Bit 4 - ADC stop conversion command"]
            #[inline(always)]
            pub fn adstp(&mut self) -> ADSTP_W {
                ADSTP_W { w: self }
            }
            #[doc = "Bit 2 - ADC start conversion command"]
            #[inline(always)]
            pub fn adstart(&mut self) -> ADSTART_W {
                ADSTART_W { w: self }
            }
            #[doc = "Bit 1 - ADC disable command"]
            #[inline(always)]
            pub fn addis(&mut self) -> ADDIS_W {
                ADDIS_W { w: self }
            }
            #[doc = "Bit 0 - ADC enable command"]
            #[inline(always)]
            pub fn aden(&mut self) -> ADEN_W {
                ADEN_W { w: self }
            }
        }
    }
    #[doc = "configuration register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr1](cfgr1) module"]
    pub type CFGR1 = crate::Reg<u32, _CFGR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR1;
    #[doc = "`read()` method returns [cfgr1::R](cfgr1::R) reader structure"]
    impl crate::Readable for CFGR1 {}
    #[doc = "`write(|w| ..)` method takes [cfgr1::W](cfgr1::W) writer structure"]
    impl crate::Writable for CFGR1 {}
    #[doc = "configuration register 1"]
    pub mod cfgr1 {
        #[doc = "Reader of register CFGR1"]
        pub type R = crate::R<u32, super::CFGR1>;
        #[doc = "Writer for register CFGR1"]
        pub type W = crate::W<u32, super::CFGR1>;
        #[doc = "Register CFGR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFGR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AWDCH`"]
        pub type AWDCH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AWDCH`"]
        pub struct AWDCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWDCH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 26)) | (((value as u32) & 0x1f) << 26);
                self.w
            }
        }
        #[doc = "Analog watchdog enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum AWDEN_A {
            #[doc = "0: Analog watchdog disabled on regular channels"]
            DISABLED = 0,
            #[doc = "1: Analog watchdog enabled on regular channels"]
            ENABLED = 1,
        }
        impl From<AWDEN_A> for bool {
            #[inline(always)]
            fn from(variant: AWDEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `AWDEN`"]
        pub type AWDEN_R = crate::R<bool, AWDEN_A>;
        impl AWDEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AWDEN_A {
                match self.bits {
                    false => AWDEN_A::DISABLED,
                    true => AWDEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == AWDEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == AWDEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `AWDEN`"]
        pub struct AWDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWDEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AWDEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Analog watchdog disabled on regular channels"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(AWDEN_A::DISABLED)
            }
            #[doc = "Analog watchdog enabled on regular channels"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(AWDEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Enable the watchdog on a single channel or on all channels\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum AWDSGL_A {
            #[doc = "0: Analog watchdog enabled on all channels"]
            ALLCHANNELS = 0,
            #[doc = "1: Analog watchdog enabled on a single channel"]
            SINGLECHANNEL = 1,
        }
        impl From<AWDSGL_A> for bool {
            #[inline(always)]
            fn from(variant: AWDSGL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `AWDSGL`"]
        pub type AWDSGL_R = crate::R<bool, AWDSGL_A>;
        impl AWDSGL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AWDSGL_A {
                match self.bits {
                    false => AWDSGL_A::ALLCHANNELS,
                    true => AWDSGL_A::SINGLECHANNEL,
                }
            }
            #[doc = "Checks if the value of the field is `ALLCHANNELS`"]
            #[inline(always)]
            pub fn is_all_channels(&self) -> bool {
                *self == AWDSGL_A::ALLCHANNELS
            }
            #[doc = "Checks if the value of the field is `SINGLECHANNEL`"]
            #[inline(always)]
            pub fn is_single_channel(&self) -> bool {
                *self == AWDSGL_A::SINGLECHANNEL
            }
        }
        #[doc = "Write proxy for field `AWDSGL`"]
        pub struct AWDSGL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWDSGL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AWDSGL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Analog watchdog enabled on all channels"]
            #[inline(always)]
            pub fn all_channels(self) -> &'a mut W {
                self.variant(AWDSGL_A::ALLCHANNELS)
            }
            #[doc = "Analog watchdog enabled on a single channel"]
            #[inline(always)]
            pub fn single_channel(self) -> &'a mut W {
                self.variant(AWDSGL_A::SINGLECHANNEL)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Discontinuous mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DISCEN_A {
            #[doc = "0: Discontinuous mode on regular channels disabled"]
            DISABLED = 0,
            #[doc = "1: Discontinuous mode on regular channels enabled"]
            ENABLED = 1,
        }
        impl From<DISCEN_A> for bool {
            #[inline(always)]
            fn from(variant: DISCEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DISCEN`"]
        pub type DISCEN_R = crate::R<bool, DISCEN_A>;
        impl DISCEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DISCEN_A {
                match self.bits {
                    false => DISCEN_A::DISABLED,
                    true => DISCEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == DISCEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == DISCEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `DISCEN`"]
        pub struct DISCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISCEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DISCEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Discontinuous mode on regular channels disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DISCEN_A::DISABLED)
            }
            #[doc = "Discontinuous mode on regular channels enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DISCEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Auto-off mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum AUTOFF_A {
            #[doc = "0: Auto-off mode disabled"]
            DISABLED = 0,
            #[doc = "1: Auto-off mode enabled"]
            ENABLED = 1,
        }
        impl From<AUTOFF_A> for bool {
            #[inline(always)]
            fn from(variant: AUTOFF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `AUTOFF`"]
        pub type AUTOFF_R = crate::R<bool, AUTOFF_A>;
        impl AUTOFF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AUTOFF_A {
                match self.bits {
                    false => AUTOFF_A::DISABLED,
                    true => AUTOFF_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == AUTOFF_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == AUTOFF_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `AUTOFF`"]
        pub struct AUTOFF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUTOFF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AUTOFF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Auto-off mode disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(AUTOFF_A::DISABLED)
            }
            #[doc = "Auto-off mode enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(AUTOFF_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `AUTDLY`"]
        pub type AUTDLY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUTDLY`"]
        pub struct AUTDLY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUTDLY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Single / continuous conversion mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CONT_A {
            #[doc = "0: Single conversion mode"]
            SINGLE = 0,
            #[doc = "1: Continuous conversion mode"]
            CONTINUOUS = 1,
        }
        impl From<CONT_A> for bool {
            #[inline(always)]
            fn from(variant: CONT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CONT`"]
        pub type CONT_R = crate::R<bool, CONT_A>;
        impl CONT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CONT_A {
                match self.bits {
                    false => CONT_A::SINGLE,
                    true => CONT_A::CONTINUOUS,
                }
            }
            #[doc = "Checks if the value of the field is `SINGLE`"]
            #[inline(always)]
            pub fn is_single(&self) -> bool {
                *self == CONT_A::SINGLE
            }
            #[doc = "Checks if the value of the field is `CONTINUOUS`"]
            #[inline(always)]
            pub fn is_continuous(&self) -> bool {
                *self == CONT_A::CONTINUOUS
            }
        }
        #[doc = "Write proxy for field `CONT`"]
        pub struct CONT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CONT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CONT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Single conversion mode"]
            #[inline(always)]
            pub fn single(self) -> &'a mut W {
                self.variant(CONT_A::SINGLE)
            }
            #[doc = "Continuous conversion mode"]
            #[inline(always)]
            pub fn continuous(self) -> &'a mut W {
                self.variant(CONT_A::CONTINUOUS)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Overrun management mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OVRMOD_A {
            #[doc = "0: ADC_DR register is preserved with the old data when an overrun is detected"]
            PRESERVED = 0,
            #[doc = "1: ADC_DR register is overwritten with the last conversion result when an overrun is detected"]
            OVERWRITTEN = 1,
        }
        impl From<OVRMOD_A> for bool {
            #[inline(always)]
            fn from(variant: OVRMOD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OVRMOD`"]
        pub type OVRMOD_R = crate::R<bool, OVRMOD_A>;
        impl OVRMOD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OVRMOD_A {
                match self.bits {
                    false => OVRMOD_A::PRESERVED,
                    true => OVRMOD_A::OVERWRITTEN,
                }
            }
            #[doc = "Checks if the value of the field is `PRESERVED`"]
            #[inline(always)]
            pub fn is_preserved(&self) -> bool {
                *self == OVRMOD_A::PRESERVED
            }
            #[doc = "Checks if the value of the field is `OVERWRITTEN`"]
            #[inline(always)]
            pub fn is_overwritten(&self) -> bool {
                *self == OVRMOD_A::OVERWRITTEN
            }
        }
        #[doc = "Write proxy for field `OVRMOD`"]
        pub struct OVRMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVRMOD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OVRMOD_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ADC_DR register is preserved with the old data when an overrun is detected"]
            #[inline(always)]
            pub fn preserved(self) -> &'a mut W {
                self.variant(OVRMOD_A::PRESERVED)
            }
            #[doc = "ADC_DR register is overwritten with the last conversion result when an overrun is detected"]
            #[inline(always)]
            pub fn overwritten(self) -> &'a mut W {
                self.variant(OVRMOD_A::OVERWRITTEN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "External trigger enable and polarity selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTEN_A {
            #[doc = "0: Trigger detection disabled"]
            DISABLED = 0,
            #[doc = "1: Trigger detection on the rising edge"]
            RISINGEDGE = 1,
            #[doc = "2: Trigger detection on the falling edge"]
            FALLINGEDGE = 2,
            #[doc = "3: Trigger detection on both the rising and falling edges"]
            BOTHEDGES = 3,
        }
        impl From<EXTEN_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTEN_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTEN`"]
        pub type EXTEN_R = crate::R<u8, EXTEN_A>;
        impl EXTEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EXTEN_A {
                match self.bits {
                    0 => EXTEN_A::DISABLED,
                    1 => EXTEN_A::RISINGEDGE,
                    2 => EXTEN_A::FALLINGEDGE,
                    3 => EXTEN_A::BOTHEDGES,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == EXTEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `RISINGEDGE`"]
            #[inline(always)]
            pub fn is_rising_edge(&self) -> bool {
                *self == EXTEN_A::RISINGEDGE
            }
            #[doc = "Checks if the value of the field is `FALLINGEDGE`"]
            #[inline(always)]
            pub fn is_falling_edge(&self) -> bool {
                *self == EXTEN_A::FALLINGEDGE
            }
            #[doc = "Checks if the value of the field is `BOTHEDGES`"]
            #[inline(always)]
            pub fn is_both_edges(&self) -> bool {
                *self == EXTEN_A::BOTHEDGES
            }
        }
        #[doc = "Write proxy for field `EXTEN`"]
        pub struct EXTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTEN_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Trigger detection disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(EXTEN_A::DISABLED)
            }
            #[doc = "Trigger detection on the rising edge"]
            #[inline(always)]
            pub fn rising_edge(self) -> &'a mut W {
                self.variant(EXTEN_A::RISINGEDGE)
            }
            #[doc = "Trigger detection on the falling edge"]
            #[inline(always)]
            pub fn falling_edge(self) -> &'a mut W {
                self.variant(EXTEN_A::FALLINGEDGE)
            }
            #[doc = "Trigger detection on both the rising and falling edges"]
            #[inline(always)]
            pub fn both_edges(self) -> &'a mut W {
                self.variant(EXTEN_A::BOTHEDGES)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "External trigger selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTSEL_A {
            #[doc = "0: Timer 1 TRGO Event"]
            TIM1_TRGO = 0,
            #[doc = "1: Timer 1 CC4 event"]
            TIM1_CC4 = 1,
            #[doc = "3: Timer 3 TRGO event"]
            TIM3_TRGO = 3,
            #[doc = "4: Timer 15 TRGO event"]
            TIM15_TRGO = 4,
        }
        impl From<EXTSEL_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTSEL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTSEL`"]
        pub type EXTSEL_R = crate::R<u8, EXTSEL_A>;
        impl EXTSEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTSEL_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTSEL_A::TIM1_TRGO),
                    1 => Val(EXTSEL_A::TIM1_CC4),
                    3 => Val(EXTSEL_A::TIM3_TRGO),
                    4 => Val(EXTSEL_A::TIM15_TRGO),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `TIM1_TRGO`"]
            #[inline(always)]
            pub fn is_tim1_trgo(&self) -> bool {
                *self == EXTSEL_A::TIM1_TRGO
            }
            #[doc = "Checks if the value of the field is `TIM1_CC4`"]
            #[inline(always)]
            pub fn is_tim1_cc4(&self) -> bool {
                *self == EXTSEL_A::TIM1_CC4
            }
            #[doc = "Checks if the value of the field is `TIM3_TRGO`"]
            #[inline(always)]
            pub fn is_tim3_trgo(&self) -> bool {
                *self == EXTSEL_A::TIM3_TRGO
            }
            #[doc = "Checks if the value of the field is `TIM15_TRGO`"]
            #[inline(always)]
            pub fn is_tim15_trgo(&self) -> bool {
                *self == EXTSEL_A::TIM15_TRGO
            }
        }
        #[doc = "Write proxy for field `EXTSEL`"]
        pub struct EXTSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTSEL_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Timer 1 TRGO Event"]
            #[inline(always)]
            pub fn tim1_trgo(self) -> &'a mut W {
                self.variant(EXTSEL_A::TIM1_TRGO)
            }
            #[doc = "Timer 1 CC4 event"]
            #[inline(always)]
            pub fn tim1_cc4(self) -> &'a mut W {
                self.variant(EXTSEL_A::TIM1_CC4)
            }
            #[doc = "Timer 3 TRGO event"]
            #[inline(always)]
            pub fn tim3_trgo(self) -> &'a mut W {
                self.variant(EXTSEL_A::TIM3_TRGO)
            }
            #[doc = "Timer 15 TRGO event"]
            #[inline(always)]
            pub fn tim15_trgo(self) -> &'a mut W {
                self.variant(EXTSEL_A::TIM15_TRGO)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 6)) | (((value as u32) & 0x07) << 6);
                self.w
            }
        }
        #[doc = "Data alignment\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ALIGN_A {
            #[doc = "0: Right alignment"]
            RIGHT = 0,
            #[doc = "1: Left alignment"]
            LEFT = 1,
        }
        impl From<ALIGN_A> for bool {
            #[inline(always)]
            fn from(variant: ALIGN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ALIGN`"]
        pub type ALIGN_R = crate::R<bool, ALIGN_A>;
        impl ALIGN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ALIGN_A {
                match self.bits {
                    false => ALIGN_A::RIGHT,
                    true => ALIGN_A::LEFT,
                }
            }
            #[doc = "Checks if the value of the field is `RIGHT`"]
            #[inline(always)]
            pub fn is_right(&self) -> bool {
                *self == ALIGN_A::RIGHT
            }
            #[doc = "Checks if the value of the field is `LEFT`"]
            #[inline(always)]
            pub fn is_left(&self) -> bool {
                *self == ALIGN_A::LEFT
            }
        }
        #[doc = "Write proxy for field `ALIGN`"]
        pub struct ALIGN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALIGN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ALIGN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Right alignment"]
            #[inline(always)]
            pub fn right(self) -> &'a mut W {
                self.variant(ALIGN_A::RIGHT)
            }
            #[doc = "Left alignment"]
            #[inline(always)]
            pub fn left(self) -> &'a mut W {
                self.variant(ALIGN_A::LEFT)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Data resolution\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum RES_A {
            #[doc = "0: 12-bit (14 ADCCLK cycles)"]
            TWELVEBIT = 0,
            #[doc = "1: 10-bit (13 ADCCLK cycles)"]
            TENBIT = 1,
            #[doc = "2: 8-bit (11 ADCCLK cycles)"]
            EIGHTBIT = 2,
            #[doc = "3: 6-bit (9 ADCCLK cycles)"]
            SIXBIT = 3,
        }
        impl From<RES_A> for u8 {
            #[inline(always)]
            fn from(variant: RES_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `RES`"]
        pub type RES_R = crate::R<u8, RES_A>;
        impl RES_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RES_A {
                match self.bits {
                    0 => RES_A::TWELVEBIT,
                    1 => RES_A::TENBIT,
                    2 => RES_A::EIGHTBIT,
                    3 => RES_A::SIXBIT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `TWELVEBIT`"]
            #[inline(always)]
            pub fn is_twelve_bit(&self) -> bool {
                *self == RES_A::TWELVEBIT
            }
            #[doc = "Checks if the value of the field is `TENBIT`"]
            #[inline(always)]
            pub fn is_ten_bit(&self) -> bool {
                *self == RES_A::TENBIT
            }
            #[doc = "Checks if the value of the field is `EIGHTBIT`"]
            #[inline(always)]
            pub fn is_eight_bit(&self) -> bool {
                *self == RES_A::EIGHTBIT
            }
            #[doc = "Checks if the value of the field is `SIXBIT`"]
            #[inline(always)]
            pub fn is_six_bit(&self) -> bool {
                *self == RES_A::SIXBIT
            }
        }
        #[doc = "Write proxy for field `RES`"]
        pub struct RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RES_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RES_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "12-bit (14 ADCCLK cycles)"]
            #[inline(always)]
            pub fn twelve_bit(self) -> &'a mut W {
                self.variant(RES_A::TWELVEBIT)
            }
            #[doc = "10-bit (13 ADCCLK cycles)"]
            #[inline(always)]
            pub fn ten_bit(self) -> &'a mut W {
                self.variant(RES_A::TENBIT)
            }
            #[doc = "8-bit (11 ADCCLK cycles)"]
            #[inline(always)]
            pub fn eight_bit(self) -> &'a mut W {
                self.variant(RES_A::EIGHTBIT)
            }
            #[doc = "6-bit (9 ADCCLK cycles)"]
            #[inline(always)]
            pub fn six_bit(self) -> &'a mut W {
                self.variant(RES_A::SIXBIT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | (((value as u32) & 0x03) << 3);
                self.w
            }
        }
        #[doc = "Scan sequence direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SCANDIR_A {
            #[doc = "0: Upward scan (from CHSEL0 to CHSEL18)"]
            UPWARD = 0,
            #[doc = "1: Backward scan (from CHSEL18 to CHSEL0)"]
            BACKWARD = 1,
        }
        impl From<SCANDIR_A> for bool {
            #[inline(always)]
            fn from(variant: SCANDIR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SCANDIR`"]
        pub type SCANDIR_R = crate::R<bool, SCANDIR_A>;
        impl SCANDIR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SCANDIR_A {
                match self.bits {
                    false => SCANDIR_A::UPWARD,
                    true => SCANDIR_A::BACKWARD,
                }
            }
            #[doc = "Checks if the value of the field is `UPWARD`"]
            #[inline(always)]
            pub fn is_upward(&self) -> bool {
                *self == SCANDIR_A::UPWARD
            }
            #[doc = "Checks if the value of the field is `BACKWARD`"]
            #[inline(always)]
            pub fn is_backward(&self) -> bool {
                *self == SCANDIR_A::BACKWARD
            }
        }
        #[doc = "Write proxy for field `SCANDIR`"]
        pub struct SCANDIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCANDIR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SCANDIR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Upward scan (from CHSEL0 to CHSEL18)"]
            #[inline(always)]
            pub fn upward(self) -> &'a mut W {
                self.variant(SCANDIR_A::UPWARD)
            }
            #[doc = "Backward scan (from CHSEL18 to CHSEL0)"]
            #[inline(always)]
            pub fn backward(self) -> &'a mut W {
                self.variant(SCANDIR_A::BACKWARD)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Direct memery access configuration\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DMACFG_A {
            #[doc = "0: DMA one shot mode"]
            ONESHOT = 0,
            #[doc = "1: DMA circular mode"]
            CIRCULAR = 1,
        }
        impl From<DMACFG_A> for bool {
            #[inline(always)]
            fn from(variant: DMACFG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DMACFG`"]
        pub type DMACFG_R = crate::R<bool, DMACFG_A>;
        impl DMACFG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DMACFG_A {
                match self.bits {
                    false => DMACFG_A::ONESHOT,
                    true => DMACFG_A::CIRCULAR,
                }
            }
            #[doc = "Checks if the value of the field is `ONESHOT`"]
            #[inline(always)]
            pub fn is_one_shot(&self) -> bool {
                *self == DMACFG_A::ONESHOT
            }
            #[doc = "Checks if the value of the field is `CIRCULAR`"]
            #[inline(always)]
            pub fn is_circular(&self) -> bool {
                *self == DMACFG_A::CIRCULAR
            }
        }
        #[doc = "Write proxy for field `DMACFG`"]
        pub struct DMACFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMACFG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DMACFG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DMA one shot mode"]
            #[inline(always)]
            pub fn one_shot(self) -> &'a mut W {
                self.variant(DMACFG_A::ONESHOT)
            }
            #[doc = "DMA circular mode"]
            #[inline(always)]
            pub fn circular(self) -> &'a mut W {
                self.variant(DMACFG_A::CIRCULAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Direct memory access enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DMAEN_A {
            #[doc = "0: DMA mode disabled"]
            DISABLED = 0,
            #[doc = "1: DMA mode enabled"]
            ENABLED = 1,
        }
        impl From<DMAEN_A> for bool {
            #[inline(always)]
            fn from(variant: DMAEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DMAEN`"]
        pub type DMAEN_R = crate::R<bool, DMAEN_A>;
        impl DMAEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DMAEN_A {
                match self.bits {
                    false => DMAEN_A::DISABLED,
                    true => DMAEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == DMAEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == DMAEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `DMAEN`"]
        pub struct DMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DMAEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DMA mode disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMAEN_A::DISABLED)
            }
            #[doc = "DMA mode enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMAEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Wait conversion mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WAIT_A {
            #[doc = "0: Wait conversion mode off"]
            DISABLED = 0,
            #[doc = "1: Wait conversion mode on"]
            ENABLED = 1,
        }
        impl From<WAIT_A> for bool {
            #[inline(always)]
            fn from(variant: WAIT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WAIT`"]
        pub type WAIT_R = crate::R<bool, WAIT_A>;
        impl WAIT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WAIT_A {
                match self.bits {
                    false => WAIT_A::DISABLED,
                    true => WAIT_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == WAIT_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == WAIT_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `WAIT`"]
        pub struct WAIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAIT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WAIT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Wait conversion mode off"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(WAIT_A::DISABLED)
            }
            #[doc = "Wait conversion mode on"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(WAIT_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 26:30 - Analog watchdog channel selection"]
            #[inline(always)]
            pub fn awdch(&self) -> AWDCH_R {
                AWDCH_R::new(((self.bits >> 26) & 0x1f) as u8)
            }
            #[doc = "Bit 23 - Analog watchdog enable"]
            #[inline(always)]
            pub fn awden(&self) -> AWDEN_R {
                AWDEN_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Enable the watchdog on a single channel or on all channels"]
            #[inline(always)]
            pub fn awdsgl(&self) -> AWDSGL_R {
                AWDSGL_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Discontinuous mode"]
            #[inline(always)]
            pub fn discen(&self) -> DISCEN_R {
                DISCEN_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Auto-off mode"]
            #[inline(always)]
            pub fn autoff(&self) -> AUTOFF_R {
                AUTOFF_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Auto-delayed conversion mode"]
            #[inline(always)]
            pub fn autdly(&self) -> AUTDLY_R {
                AUTDLY_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Single / continuous conversion mode"]
            #[inline(always)]
            pub fn cont(&self) -> CONT_R {
                CONT_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Overrun management mode"]
            #[inline(always)]
            pub fn ovrmod(&self) -> OVRMOD_R {
                OVRMOD_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - External trigger enable and polarity selection"]
            #[inline(always)]
            pub fn exten(&self) -> EXTEN_R {
                EXTEN_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 6:8 - External trigger selection"]
            #[inline(always)]
            pub fn extsel(&self) -> EXTSEL_R {
                EXTSEL_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bit 5 - Data alignment"]
            #[inline(always)]
            pub fn align(&self) -> ALIGN_R {
                ALIGN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bits 3:4 - Data resolution"]
            #[inline(always)]
            pub fn res(&self) -> RES_R {
                RES_R::new(((self.bits >> 3) & 0x03) as u8)
            }
            #[doc = "Bit 2 - Scan sequence direction"]
            #[inline(always)]
            pub fn scandir(&self) -> SCANDIR_R {
                SCANDIR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Direct memery access configuration"]
            #[inline(always)]
            pub fn dmacfg(&self) -> DMACFG_R {
                DMACFG_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Direct memory access enable"]
            #[inline(always)]
            pub fn dmaen(&self) -> DMAEN_R {
                DMAEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 14 - Wait conversion mode"]
            #[inline(always)]
            pub fn wait(&self) -> WAIT_R {
                WAIT_R::new(((self.bits >> 14) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 26:30 - Analog watchdog channel selection"]
            #[inline(always)]
            pub fn awdch(&mut self) -> AWDCH_W {
                AWDCH_W { w: self }
            }
            #[doc = "Bit 23 - Analog watchdog enable"]
            #[inline(always)]
            pub fn awden(&mut self) -> AWDEN_W {
                AWDEN_W { w: self }
            }
            #[doc = "Bit 22 - Enable the watchdog on a single channel or on all channels"]
            #[inline(always)]
            pub fn awdsgl(&mut self) -> AWDSGL_W {
                AWDSGL_W { w: self }
            }
            #[doc = "Bit 16 - Discontinuous mode"]
            #[inline(always)]
            pub fn discen(&mut self) -> DISCEN_W {
                DISCEN_W { w: self }
            }
            #[doc = "Bit 15 - Auto-off mode"]
            #[inline(always)]
            pub fn autoff(&mut self) -> AUTOFF_W {
                AUTOFF_W { w: self }
            }
            #[doc = "Bit 14 - Auto-delayed conversion mode"]
            #[inline(always)]
            pub fn autdly(&mut self) -> AUTDLY_W {
                AUTDLY_W { w: self }
            }
            #[doc = "Bit 13 - Single / continuous conversion mode"]
            #[inline(always)]
            pub fn cont(&mut self) -> CONT_W {
                CONT_W { w: self }
            }
            #[doc = "Bit 12 - Overrun management mode"]
            #[inline(always)]
            pub fn ovrmod(&mut self) -> OVRMOD_W {
                OVRMOD_W { w: self }
            }
            #[doc = "Bits 10:11 - External trigger enable and polarity selection"]
            #[inline(always)]
            pub fn exten(&mut self) -> EXTEN_W {
                EXTEN_W { w: self }
            }
            #[doc = "Bits 6:8 - External trigger selection"]
            #[inline(always)]
            pub fn extsel(&mut self) -> EXTSEL_W {
                EXTSEL_W { w: self }
            }
            #[doc = "Bit 5 - Data alignment"]
            #[inline(always)]
            pub fn align(&mut self) -> ALIGN_W {
                ALIGN_W { w: self }
            }
            #[doc = "Bits 3:4 - Data resolution"]
            #[inline(always)]
            pub fn res(&mut self) -> RES_W {
                RES_W { w: self }
            }
            #[doc = "Bit 2 - Scan sequence direction"]
            #[inline(always)]
            pub fn scandir(&mut self) -> SCANDIR_W {
                SCANDIR_W { w: self }
            }
            #[doc = "Bit 1 - Direct memery access configuration"]
            #[inline(always)]
            pub fn dmacfg(&mut self) -> DMACFG_W {
                DMACFG_W { w: self }
            }
            #[doc = "Bit 0 - Direct memory access enable"]
            #[inline(always)]
            pub fn dmaen(&mut self) -> DMAEN_W {
                DMAEN_W { w: self }
            }
            #[doc = "Bit 14 - Wait conversion mode"]
            #[inline(always)]
            pub fn wait(&mut self) -> WAIT_W {
                WAIT_W { w: self }
            }
        }
    }
    #[doc = "configuration register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr2](cfgr2) module"]
    pub type CFGR2 = crate::Reg<u32, _CFGR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR2;
    #[doc = "`read()` method returns [cfgr2::R](cfgr2::R) reader structure"]
    impl crate::Readable for CFGR2 {}
    #[doc = "`write(|w| ..)` method takes [cfgr2::W](cfgr2::W) writer structure"]
    impl crate::Writable for CFGR2 {}
    #[doc = "configuration register 2"]
    pub mod cfgr2 {
        #[doc = "Reader of register CFGR2"]
        pub type R = crate::R<u32, super::CFGR2>;
        #[doc = "Writer for register CFGR2"]
        pub type W = crate::W<u32, super::CFGR2>;
        #[doc = "Register CFGR2 `reset()`'s with value 0x8000"]
        impl crate::ResetValue for super::CFGR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x8000
            }
        }
        #[doc = "ADC clock mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CKMODE_A {
            #[doc = "0: Asynchronous clock mode"]
            ADCCLK = 0,
            #[doc = "1: Synchronous clock mode (PCLK/2)"]
            PCLK_DIV2 = 1,
            #[doc = "2: Sychronous clock mode (PCLK/4)"]
            PCLK_DIV4 = 2,
        }
        impl From<CKMODE_A> for u8 {
            #[inline(always)]
            fn from(variant: CKMODE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CKMODE`"]
        pub type CKMODE_R = crate::R<u8, CKMODE_A>;
        impl CKMODE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CKMODE_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CKMODE_A::ADCCLK),
                    1 => Val(CKMODE_A::PCLK_DIV2),
                    2 => Val(CKMODE_A::PCLK_DIV4),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `ADCCLK`"]
            #[inline(always)]
            pub fn is_adcclk(&self) -> bool {
                *self == CKMODE_A::ADCCLK
            }
            #[doc = "Checks if the value of the field is `PCLK_DIV2`"]
            #[inline(always)]
            pub fn is_pclk_div2(&self) -> bool {
                *self == CKMODE_A::PCLK_DIV2
            }
            #[doc = "Checks if the value of the field is `PCLK_DIV4`"]
            #[inline(always)]
            pub fn is_pclk_div4(&self) -> bool {
                *self == CKMODE_A::PCLK_DIV4
            }
        }
        #[doc = "Write proxy for field `CKMODE`"]
        pub struct CKMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKMODE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CKMODE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Asynchronous clock mode"]
            #[inline(always)]
            pub fn adcclk(self) -> &'a mut W {
                self.variant(CKMODE_A::ADCCLK)
            }
            #[doc = "Synchronous clock mode (PCLK/2)"]
            #[inline(always)]
            pub fn pclk_div2(self) -> &'a mut W {
                self.variant(CKMODE_A::PCLK_DIV2)
            }
            #[doc = "Sychronous clock mode (PCLK/4)"]
            #[inline(always)]
            pub fn pclk_div4(self) -> &'a mut W {
                self.variant(CKMODE_A::PCLK_DIV4)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - ADC clock mode"]
            #[inline(always)]
            pub fn ckmode(&self) -> CKMODE_R {
                CKMODE_R::new(((self.bits >> 30) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - ADC clock mode"]
            #[inline(always)]
            pub fn ckmode(&mut self) -> CKMODE_W {
                CKMODE_W { w: self }
            }
        }
    }
    #[doc = "sampling time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smpr](smpr) module"]
    pub type SMPR = crate::Reg<u32, _SMPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPR;
    #[doc = "`read()` method returns [smpr::R](smpr::R) reader structure"]
    impl crate::Readable for SMPR {}
    #[doc = "`write(|w| ..)` method takes [smpr::W](smpr::W) writer structure"]
    impl crate::Writable for SMPR {}
    #[doc = "sampling time register"]
    pub mod smpr {
        #[doc = "Reader of register SMPR"]
        pub type R = crate::R<u32, super::SMPR>;
        #[doc = "Writer for register SMPR"]
        pub type W = crate::W<u32, super::SMPR>;
        #[doc = "Register SMPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Sampling time selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SMP_A {
            #[doc = "0: 1.5 cycles"]
            CYCLES1_5 = 0,
            #[doc = "1: 7.5 cycles"]
            CYCLES7_5 = 1,
            #[doc = "2: 13.5 cycles"]
            CYCLES13_5 = 2,
            #[doc = "3: 28.5 cycles"]
            CYCLES28_5 = 3,
            #[doc = "4: 41.5 cycles"]
            CYCLES41_5 = 4,
            #[doc = "5: 55.5 cycles"]
            CYCLES55_5 = 5,
            #[doc = "6: 71.5 cycles"]
            CYCLES71_5 = 6,
            #[doc = "7: 239.5 cycles"]
            CYCLES239_5 = 7,
        }
        impl From<SMP_A> for u8 {
            #[inline(always)]
            fn from(variant: SMP_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `SMP`"]
        pub type SMP_R = crate::R<u8, SMP_A>;
        impl SMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SMP_A {
                match self.bits {
                    0 => SMP_A::CYCLES1_5,
                    1 => SMP_A::CYCLES7_5,
                    2 => SMP_A::CYCLES13_5,
                    3 => SMP_A::CYCLES28_5,
                    4 => SMP_A::CYCLES41_5,
                    5 => SMP_A::CYCLES55_5,
                    6 => SMP_A::CYCLES71_5,
                    7 => SMP_A::CYCLES239_5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `CYCLES1_5`"]
            #[inline(always)]
            pub fn is_cycles1_5(&self) -> bool {
                *self == SMP_A::CYCLES1_5
            }
            #[doc = "Checks if the value of the field is `CYCLES7_5`"]
            #[inline(always)]
            pub fn is_cycles7_5(&self) -> bool {
                *self == SMP_A::CYCLES7_5
            }
            #[doc = "Checks if the value of the field is `CYCLES13_5`"]
            #[inline(always)]
            pub fn is_cycles13_5(&self) -> bool {
                *self == SMP_A::CYCLES13_5
            }
            #[doc = "Checks if the value of the field is `CYCLES28_5`"]
            #[inline(always)]
            pub fn is_cycles28_5(&self) -> bool {
                *self == SMP_A::CYCLES28_5
            }
            #[doc = "Checks if the value of the field is `CYCLES41_5`"]
            #[inline(always)]
            pub fn is_cycles41_5(&self) -> bool {
                *self == SMP_A::CYCLES41_5
            }
            #[doc = "Checks if the value of the field is `CYCLES55_5`"]
            #[inline(always)]
            pub fn is_cycles55_5(&self) -> bool {
                *self == SMP_A::CYCLES55_5
            }
            #[doc = "Checks if the value of the field is `CYCLES71_5`"]
            #[inline(always)]
            pub fn is_cycles71_5(&self) -> bool {
                *self == SMP_A::CYCLES71_5
            }
            #[doc = "Checks if the value of the field is `CYCLES239_5`"]
            #[inline(always)]
            pub fn is_cycles239_5(&self) -> bool {
                *self == SMP_A::CYCLES239_5
            }
        }
        #[doc = "Write proxy for field `SMP`"]
        pub struct SMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SMP_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "1.5 cycles"]
            #[inline(always)]
            pub fn cycles1_5(self) -> &'a mut W {
                self.variant(SMP_A::CYCLES1_5)
            }
            #[doc = "7.5 cycles"]
            #[inline(always)]
            pub fn cycles7_5(self) -> &'a mut W {
                self.variant(SMP_A::CYCLES7_5)
            }
            #[doc = "13.5 cycles"]
            #[inline(always)]
            pub fn cycles13_5(self) -> &'a mut W {
                self.variant(SMP_A::CYCLES13_5)
            }
            #[doc = "28.5 cycles"]
            #[inline(always)]
            pub fn cycles28_5(self) -> &'a mut W {
                self.variant(SMP_A::CYCLES28_5)
            }
            #[doc = "41.5 cycles"]
            #[inline(always)]
            pub fn cycles41_5(self) -> &'a mut W {
                self.variant(SMP_A::CYCLES41_5)
            }
            #[doc = "55.5 cycles"]
            #[inline(always)]
            pub fn cycles55_5(self) -> &'a mut W {
                self.variant(SMP_A::CYCLES55_5)
            }
            #[doc = "71.5 cycles"]
            #[inline(always)]
            pub fn cycles71_5(self) -> &'a mut W {
                self.variant(SMP_A::CYCLES71_5)
            }
            #[doc = "239.5 cycles"]
            #[inline(always)]
            pub fn cycles239_5(self) -> &'a mut W {
                self.variant(SMP_A::CYCLES239_5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Sampling time selection"]
            #[inline(always)]
            pub fn smp(&self) -> SMP_R {
                SMP_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Sampling time selection"]
            #[inline(always)]
            pub fn smp(&mut self) -> SMP_W {
                SMP_W { w: self }
            }
        }
    }
    #[doc = "watchdog threshold register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tr](tr) module"]
    pub type TR = crate::Reg<u32, _TR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TR;
    #[doc = "`read()` method returns [tr::R](tr::R) reader structure"]
    impl crate::Readable for TR {}
    #[doc = "`write(|w| ..)` method takes [tr::W](tr::W) writer structure"]
    impl crate::Writable for TR {}
    #[doc = "watchdog threshold register"]
    pub mod tr {
        #[doc = "Reader of register TR"]
        pub type R = crate::R<u32, super::TR>;
        #[doc = "Writer for register TR"]
        pub type W = crate::W<u32, super::TR>;
        #[doc = "Register TR `reset()`'s with value 0x0fff"]
        impl crate::ResetValue for super::TR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0fff
            }
        }
        #[doc = "Reader of field `HT`"]
        pub type HT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `HT`"]
        pub struct HT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 16)) | (((value as u32) & 0x0fff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `LT`"]
        pub type LT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `LT`"]
        pub struct LT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:27 - Analog watchdog higher threshold"]
            #[inline(always)]
            pub fn ht(&self) -> HT_R {
                HT_R::new(((self.bits >> 16) & 0x0fff) as u16)
            }
            #[doc = "Bits 0:11 - Analog watchdog lower threshold"]
            #[inline(always)]
            pub fn lt(&self) -> LT_R {
                LT_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:27 - Analog watchdog higher threshold"]
            #[inline(always)]
            pub fn ht(&mut self) -> HT_W {
                HT_W { w: self }
            }
            #[doc = "Bits 0:11 - Analog watchdog lower threshold"]
            #[inline(always)]
            pub fn lt(&mut self) -> LT_W {
                LT_W { w: self }
            }
        }
    }
    #[doc = "channel selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [chselr](chselr) module"]
    pub type CHSELR = crate::Reg<u32, _CHSELR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CHSELR;
    #[doc = "`read()` method returns [chselr::R](chselr::R) reader structure"]
    impl crate::Readable for CHSELR {}
    #[doc = "`write(|w| ..)` method takes [chselr::W](chselr::W) writer structure"]
    impl crate::Writable for CHSELR {}
    #[doc = "channel selection register"]
    pub mod chselr {
        #[doc = "Reader of register CHSELR"]
        pub type R = crate::R<u32, super::CHSELR>;
        #[doc = "Writer for register CHSELR"]
        pub type W = crate::W<u32, super::CHSELR>;
        #[doc = "Register CHSELR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CHSELR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel-x selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CHSEL18_A {
            #[doc = "0: Input Channel is not selected for conversion"]
            NOTSELECTED = 0,
            #[doc = "1: Input Channel is selected for conversion"]
            SELECTED = 1,
        }
        impl From<CHSEL18_A> for bool {
            #[inline(always)]
            fn from(variant: CHSEL18_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CHSEL18`"]
        pub type CHSEL18_R = crate::R<bool, CHSEL18_A>;
        impl CHSEL18_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CHSEL18_A {
                match self.bits {
                    false => CHSEL18_A::NOTSELECTED,
                    true => CHSEL18_A::SELECTED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTSELECTED`"]
            #[inline(always)]
            pub fn is_not_selected(&self) -> bool {
                *self == CHSEL18_A::NOTSELECTED
            }
            #[doc = "Checks if the value of the field is `SELECTED`"]
            #[inline(always)]
            pub fn is_selected(&self) -> bool {
                *self == CHSEL18_A::SELECTED
            }
        }
        #[doc = "Write proxy for field `CHSEL18`"]
        pub struct CHSEL18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL18_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL17_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL17`"]
        pub type CHSEL17_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL17`"]
        pub struct CHSEL17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL17_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL16_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL16`"]
        pub type CHSEL16_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL16`"]
        pub struct CHSEL16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL15_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL15`"]
        pub type CHSEL15_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL15`"]
        pub struct CHSEL15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL14_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL14`"]
        pub type CHSEL14_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL14`"]
        pub struct CHSEL14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL13_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL13`"]
        pub type CHSEL13_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL13`"]
        pub struct CHSEL13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL12_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL12`"]
        pub type CHSEL12_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL12`"]
        pub struct CHSEL12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL11_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL11`"]
        pub type CHSEL11_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL11`"]
        pub struct CHSEL11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL10_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL10`"]
        pub type CHSEL10_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL10`"]
        pub struct CHSEL10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL9_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL9`"]
        pub type CHSEL9_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL9`"]
        pub struct CHSEL9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL8_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL8`"]
        pub type CHSEL8_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL8`"]
        pub struct CHSEL8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL7_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL7`"]
        pub type CHSEL7_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL7`"]
        pub struct CHSEL7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL6_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL6`"]
        pub type CHSEL6_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL6`"]
        pub struct CHSEL6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL5_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL5`"]
        pub type CHSEL5_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL5`"]
        pub struct CHSEL5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL4_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL4`"]
        pub type CHSEL4_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL4`"]
        pub struct CHSEL4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL3_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL3`"]
        pub type CHSEL3_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL3`"]
        pub struct CHSEL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL2_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL2`"]
        pub type CHSEL2_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL2`"]
        pub struct CHSEL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL1_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL1`"]
        pub type CHSEL1_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL1`"]
        pub struct CHSEL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel-x selection"]
        pub type CHSEL0_A = CHSEL18_A;
        #[doc = "Reader of field `CHSEL0`"]
        pub type CHSEL0_R = crate::R<bool, CHSEL18_A>;
        #[doc = "Write proxy for field `CHSEL0`"]
        pub struct CHSEL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHSEL0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Input Channel is not selected for conversion"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::NOTSELECTED)
            }
            #[doc = "Input Channel is selected for conversion"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(CHSEL18_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 18 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel18(&self) -> CHSEL18_R {
                CHSEL18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel17(&self) -> CHSEL17_R {
                CHSEL17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel16(&self) -> CHSEL16_R {
                CHSEL16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel15(&self) -> CHSEL15_R {
                CHSEL15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel14(&self) -> CHSEL14_R {
                CHSEL14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel13(&self) -> CHSEL13_R {
                CHSEL13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel12(&self) -> CHSEL12_R {
                CHSEL12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel11(&self) -> CHSEL11_R {
                CHSEL11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel10(&self) -> CHSEL10_R {
                CHSEL10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel9(&self) -> CHSEL9_R {
                CHSEL9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel8(&self) -> CHSEL8_R {
                CHSEL8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel7(&self) -> CHSEL7_R {
                CHSEL7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel6(&self) -> CHSEL6_R {
                CHSEL6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel5(&self) -> CHSEL5_R {
                CHSEL5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel4(&self) -> CHSEL4_R {
                CHSEL4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel3(&self) -> CHSEL3_R {
                CHSEL3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel2(&self) -> CHSEL2_R {
                CHSEL2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel1(&self) -> CHSEL1_R {
                CHSEL1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel0(&self) -> CHSEL0_R {
                CHSEL0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 18 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel18(&mut self) -> CHSEL18_W {
                CHSEL18_W { w: self }
            }
            #[doc = "Bit 17 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel17(&mut self) -> CHSEL17_W {
                CHSEL17_W { w: self }
            }
            #[doc = "Bit 16 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel16(&mut self) -> CHSEL16_W {
                CHSEL16_W { w: self }
            }
            #[doc = "Bit 15 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel15(&mut self) -> CHSEL15_W {
                CHSEL15_W { w: self }
            }
            #[doc = "Bit 14 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel14(&mut self) -> CHSEL14_W {
                CHSEL14_W { w: self }
            }
            #[doc = "Bit 13 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel13(&mut self) -> CHSEL13_W {
                CHSEL13_W { w: self }
            }
            #[doc = "Bit 12 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel12(&mut self) -> CHSEL12_W {
                CHSEL12_W { w: self }
            }
            #[doc = "Bit 11 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel11(&mut self) -> CHSEL11_W {
                CHSEL11_W { w: self }
            }
            #[doc = "Bit 10 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel10(&mut self) -> CHSEL10_W {
                CHSEL10_W { w: self }
            }
            #[doc = "Bit 9 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel9(&mut self) -> CHSEL9_W {
                CHSEL9_W { w: self }
            }
            #[doc = "Bit 8 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel8(&mut self) -> CHSEL8_W {
                CHSEL8_W { w: self }
            }
            #[doc = "Bit 7 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel7(&mut self) -> CHSEL7_W {
                CHSEL7_W { w: self }
            }
            #[doc = "Bit 6 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel6(&mut self) -> CHSEL6_W {
                CHSEL6_W { w: self }
            }
            #[doc = "Bit 5 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel5(&mut self) -> CHSEL5_W {
                CHSEL5_W { w: self }
            }
            #[doc = "Bit 4 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel4(&mut self) -> CHSEL4_W {
                CHSEL4_W { w: self }
            }
            #[doc = "Bit 3 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel3(&mut self) -> CHSEL3_W {
                CHSEL3_W { w: self }
            }
            #[doc = "Bit 2 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel2(&mut self) -> CHSEL2_W {
                CHSEL2_W { w: self }
            }
            #[doc = "Bit 1 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel1(&mut self) -> CHSEL1_W {
                CHSEL1_W { w: self }
            }
            #[doc = "Bit 0 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel0(&mut self) -> CHSEL0_W {
                CHSEL0_W { w: self }
            }
        }
    }
    #[doc = "data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "data register"]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Reader of field `DATA`"]
        pub type DATA_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Converted data"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "common configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr](ccr) module"]
    pub type CCR = crate::Reg<u32, _CCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR;
    #[doc = "`read()` method returns [ccr::R](ccr::R) reader structure"]
    impl crate::Readable for CCR {}
    #[doc = "`write(|w| ..)` method takes [ccr::W](ccr::W) writer structure"]
    impl crate::Writable for CCR {}
    #[doc = "common configuration register"]
    pub mod ccr {
        #[doc = "Reader of register CCR"]
        pub type R = crate::R<u32, super::CCR>;
        #[doc = "Writer for register CCR"]
        pub type W = crate::W<u32, super::CCR>;
        #[doc = "Register CCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Temperature sensor enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TSEN_A {
            #[doc = "0: Temperature sensor disabled"]
            DISABLED = 0,
            #[doc = "1: Temperature sensor enabled"]
            ENABLED = 1,
        }
        impl From<TSEN_A> for bool {
            #[inline(always)]
            fn from(variant: TSEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TSEN`"]
        pub type TSEN_R = crate::R<bool, TSEN_A>;
        impl TSEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TSEN_A {
                match self.bits {
                    false => TSEN_A::DISABLED,
                    true => TSEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TSEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TSEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TSEN`"]
        pub struct TSEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TSEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Temperature sensor disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TSEN_A::DISABLED)
            }
            #[doc = "Temperature sensor enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TSEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Temperature sensor and VREFINT enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum VREFEN_A {
            #[doc = "0: V_REFINT channel disabled"]
            DISABLED = 0,
            #[doc = "1: V_REFINT channel enabled"]
            ENABLED = 1,
        }
        impl From<VREFEN_A> for bool {
            #[inline(always)]
            fn from(variant: VREFEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `VREFEN`"]
        pub type VREFEN_R = crate::R<bool, VREFEN_A>;
        impl VREFEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> VREFEN_A {
                match self.bits {
                    false => VREFEN_A::DISABLED,
                    true => VREFEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == VREFEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == VREFEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `VREFEN`"]
        pub struct VREFEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VREFEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: VREFEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "V_REFINT channel disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(VREFEN_A::DISABLED)
            }
            #[doc = "V_REFINT channel enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(VREFEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 23 - Temperature sensor enable"]
            #[inline(always)]
            pub fn tsen(&self) -> TSEN_R {
                TSEN_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Temperature sensor and VREFINT enable"]
            #[inline(always)]
            pub fn vrefen(&self) -> VREFEN_R {
                VREFEN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 23 - Temperature sensor enable"]
            #[inline(always)]
            pub fn tsen(&mut self) -> TSEN_W {
                TSEN_W { w: self }
            }
            #[doc = "Bit 22 - Temperature sensor and VREFINT enable"]
            #[inline(always)]
            pub fn vrefen(&mut self) -> VREFEN_W {
                VREFEN_W { w: self }
            }
        }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct USART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART1 {}
impl USART1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        0x4001_3800 as *const _
    }
}
impl Deref for USART1 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*USART1::ptr() }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod usart1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - Control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - Control register 3"]
        pub cr3: CR3,
        #[doc = "0x0c - Baud rate register"]
        pub brr: BRR,
        #[doc = "0x10 - Guard time and prescaler register"]
        pub gtpr: GTPR,
        #[doc = "0x14 - Receiver timeout register"]
        pub rtor: RTOR,
        #[doc = "0x18 - Request register"]
        pub rqr: RQR,
        #[doc = "0x1c - Interrupt & status register"]
        pub isr: ISR,
        #[doc = "0x20 - Interrupt flag clear register"]
        pub icr: ICR,
        #[doc = "0x24 - Receive data register"]
        pub rdr: RDR,
        #[doc = "0x28 - Transmit data register"]
        pub tdr: TDR,
    }
    #[doc = "Control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "Control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "USART enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UE_A {
            #[doc = "0: UART is disabled"]
            DISABLED = 0,
            #[doc = "1: UART is enabled"]
            ENABLED = 1,
        }
        impl From<UE_A> for bool {
            #[inline(always)]
            fn from(variant: UE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UE`"]
        pub type UE_R = crate::R<bool, UE_A>;
        impl UE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UE_A {
                match self.bits {
                    false => UE_A::DISABLED,
                    true => UE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UE`"]
        pub struct UE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "UART is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UE_A::DISABLED)
            }
            #[doc = "UART is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "USART enable in Stop mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UESM_A {
            #[doc = "0: USART not able to wake up the MCU from Stop mode"]
            DISABLED = 0,
            #[doc = "1: USART able to wake up the MCU from Stop mode"]
            ENABLED = 1,
        }
        impl From<UESM_A> for bool {
            #[inline(always)]
            fn from(variant: UESM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UESM`"]
        pub type UESM_R = crate::R<bool, UESM_A>;
        impl UESM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UESM_A {
                match self.bits {
                    false => UESM_A::DISABLED,
                    true => UESM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UESM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UESM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UESM`"]
        pub struct UESM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UESM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UESM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "USART not able to wake up the MCU from Stop mode"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UESM_A::DISABLED)
            }
            #[doc = "USART able to wake up the MCU from Stop mode"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UESM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Receiver enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RE_A {
            #[doc = "0: Receiver is disabled"]
            DISABLED = 0,
            #[doc = "1: Receiver is enabled"]
            ENABLED = 1,
        }
        impl From<RE_A> for bool {
            #[inline(always)]
            fn from(variant: RE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RE`"]
        pub type RE_R = crate::R<bool, RE_A>;
        impl RE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RE_A {
                match self.bits {
                    false => RE_A::DISABLED,
                    true => RE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == RE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == RE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `RE`"]
        pub struct RE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Receiver is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(RE_A::DISABLED)
            }
            #[doc = "Receiver is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(RE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Transmitter enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TE_A {
            #[doc = "0: Transmitter is disabled"]
            DISABLED = 0,
            #[doc = "1: Transmitter is enabled"]
            ENABLED = 1,
        }
        impl From<TE_A> for bool {
            #[inline(always)]
            fn from(variant: TE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TE`"]
        pub type TE_R = crate::R<bool, TE_A>;
        impl TE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TE_A {
                match self.bits {
                    false => TE_A::DISABLED,
                    true => TE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TE`"]
        pub struct TE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Transmitter is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TE_A::DISABLED)
            }
            #[doc = "Transmitter is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "IDLE interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IDLEIE_A {
            #[doc = "0: Interrupt is disabled"]
            DISABLED = 0,
            #[doc = "1: Interrupt is generated whenever IDLE=1 in the ISR register"]
            ENABLED = 1,
        }
        impl From<IDLEIE_A> for bool {
            #[inline(always)]
            fn from(variant: IDLEIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IDLEIE`"]
        pub type IDLEIE_R = crate::R<bool, IDLEIE_A>;
        impl IDLEIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IDLEIE_A {
                match self.bits {
                    false => IDLEIE_A::DISABLED,
                    true => IDLEIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == IDLEIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == IDLEIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `IDLEIE`"]
        pub struct IDLEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDLEIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IDLEIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(IDLEIE_A::DISABLED)
            }
            #[doc = "Interrupt is generated whenever IDLE=1 in the ISR register"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(IDLEIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "RXNE interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXNEIE_A {
            #[doc = "0: Interrupt is disabled"]
            DISABLED = 0,
            #[doc = "1: Interrupt is generated whenever ORE=1 or RXNE=1 in the ISR register"]
            ENABLED = 1,
        }
        impl From<RXNEIE_A> for bool {
            #[inline(always)]
            fn from(variant: RXNEIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXNEIE`"]
        pub type RXNEIE_R = crate::R<bool, RXNEIE_A>;
        impl RXNEIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXNEIE_A {
                match self.bits {
                    false => RXNEIE_A::DISABLED,
                    true => RXNEIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == RXNEIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == RXNEIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `RXNEIE`"]
        pub struct RXNEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXNEIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RXNEIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(RXNEIE_A::DISABLED)
            }
            #[doc = "Interrupt is generated whenever ORE=1 or RXNE=1 in the ISR register"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(RXNEIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Transmission complete interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TCIE_A {
            #[doc = "0: Interrupt is disabled"]
            DISABLED = 0,
            #[doc = "1: Interrupt is generated whenever TC=1 in the ISR register"]
            ENABLED = 1,
        }
        impl From<TCIE_A> for bool {
            #[inline(always)]
            fn from(variant: TCIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TCIE`"]
        pub type TCIE_R = crate::R<bool, TCIE_A>;
        impl TCIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TCIE_A {
                match self.bits {
                    false => TCIE_A::DISABLED,
                    true => TCIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TCIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TCIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TCIE`"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TCIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TCIE_A::DISABLED)
            }
            #[doc = "Interrupt is generated whenever TC=1 in the ISR register"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TCIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXEIE_A {
            #[doc = "0: Interrupt is disabled"]
            DISABLED = 0,
            #[doc = "1: Interrupt is generated whenever TXE=1 in the ISR register"]
            ENABLED = 1,
        }
        impl From<TXEIE_A> for bool {
            #[inline(always)]
            fn from(variant: TXEIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TXEIE`"]
        pub type TXEIE_R = crate::R<bool, TXEIE_A>;
        impl TXEIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TXEIE_A {
                match self.bits {
                    false => TXEIE_A::DISABLED,
                    true => TXEIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TXEIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TXEIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TXEIE`"]
        pub struct TXEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXEIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TXEIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TXEIE_A::DISABLED)
            }
            #[doc = "Interrupt is generated whenever TXE=1 in the ISR register"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TXEIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "PE interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PEIE_A {
            #[doc = "0: Interrupt is disabled"]
            DISABLED = 0,
            #[doc = "1: Interrupt is generated whenever PE=1 in the ISR register"]
            ENABLED = 1,
        }
        impl From<PEIE_A> for bool {
            #[inline(always)]
            fn from(variant: PEIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PEIE`"]
        pub type PEIE_R = crate::R<bool, PEIE_A>;
        impl PEIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PEIE_A {
                match self.bits {
                    false => PEIE_A::DISABLED,
                    true => PEIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == PEIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == PEIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `PEIE`"]
        pub struct PEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PEIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(PEIE_A::DISABLED)
            }
            #[doc = "Interrupt is generated whenever PE=1 in the ISR register"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(PEIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Parity selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PS_A {
            #[doc = "0: Even parity"]
            EVEN = 0,
            #[doc = "1: Odd parity"]
            ODD = 1,
        }
        impl From<PS_A> for bool {
            #[inline(always)]
            fn from(variant: PS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PS`"]
        pub type PS_R = crate::R<bool, PS_A>;
        impl PS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PS_A {
                match self.bits {
                    false => PS_A::EVEN,
                    true => PS_A::ODD,
                }
            }
            #[doc = "Checks if the value of the field is `EVEN`"]
            #[inline(always)]
            pub fn is_even(&self) -> bool {
                *self == PS_A::EVEN
            }
            #[doc = "Checks if the value of the field is `ODD`"]
            #[inline(always)]
            pub fn is_odd(&self) -> bool {
                *self == PS_A::ODD
            }
        }
        #[doc = "Write proxy for field `PS`"]
        pub struct PS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Even parity"]
            #[inline(always)]
            pub fn even(self) -> &'a mut W {
                self.variant(PS_A::EVEN)
            }
            #[doc = "Odd parity"]
            #[inline(always)]
            pub fn odd(self) -> &'a mut W {
                self.variant(PS_A::ODD)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Parity control enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PCE_A {
            #[doc = "0: Parity control disabled"]
            DISABLED = 0,
            #[doc = "1: Parity control enabled"]
            ENABLED = 1,
        }
        impl From<PCE_A> for bool {
            #[inline(always)]
            fn from(variant: PCE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PCE`"]
        pub type PCE_R = crate::R<bool, PCE_A>;
        impl PCE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PCE_A {
                match self.bits {
                    false => PCE_A::DISABLED,
                    true => PCE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == PCE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == PCE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `PCE`"]
        pub struct PCE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PCE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PCE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Parity control disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(PCE_A::DISABLED)
            }
            #[doc = "Parity control enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(PCE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Receiver wakeup method\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WAKE_A {
            #[doc = "0: Idle line"]
            IDLE = 0,
            #[doc = "1: Address mask"]
            ADDRESS = 1,
        }
        impl From<WAKE_A> for bool {
            #[inline(always)]
            fn from(variant: WAKE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WAKE`"]
        pub type WAKE_R = crate::R<bool, WAKE_A>;
        impl WAKE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WAKE_A {
                match self.bits {
                    false => WAKE_A::IDLE,
                    true => WAKE_A::ADDRESS,
                }
            }
            #[doc = "Checks if the value of the field is `IDLE`"]
            #[inline(always)]
            pub fn is_idle(&self) -> bool {
                *self == WAKE_A::IDLE
            }
            #[doc = "Checks if the value of the field is `ADDRESS`"]
            #[inline(always)]
            pub fn is_address(&self) -> bool {
                *self == WAKE_A::ADDRESS
            }
        }
        #[doc = "Write proxy for field `WAKE`"]
        pub struct WAKE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAKE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WAKE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Idle line"]
            #[inline(always)]
            pub fn idle(self) -> &'a mut W {
                self.variant(WAKE_A::IDLE)
            }
            #[doc = "Address mask"]
            #[inline(always)]
            pub fn address(self) -> &'a mut W {
                self.variant(WAKE_A::ADDRESS)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Word length\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum M0_A {
            #[doc = "0: 1 start bit, 8 data bits, n stop bits"]
            BIT8 = 0,
            #[doc = "1: 1 start bit, 9 data bits, n stop bits"]
            BIT9 = 1,
        }
        impl From<M0_A> for bool {
            #[inline(always)]
            fn from(variant: M0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `M0`"]
        pub type M0_R = crate::R<bool, M0_A>;
        impl M0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> M0_A {
                match self.bits {
                    false => M0_A::BIT8,
                    true => M0_A::BIT9,
                }
            }
            #[doc = "Checks if the value of the field is `BIT8`"]
            #[inline(always)]
            pub fn is_bit8(&self) -> bool {
                *self == M0_A::BIT8
            }
            #[doc = "Checks if the value of the field is `BIT9`"]
            #[inline(always)]
            pub fn is_bit9(&self) -> bool {
                *self == M0_A::BIT9
            }
        }
        #[doc = "Write proxy for field `M0`"]
        pub struct M0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> M0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: M0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "1 start bit, 8 data bits, n stop bits"]
            #[inline(always)]
            pub fn bit8(self) -> &'a mut W {
                self.variant(M0_A::BIT8)
            }
            #[doc = "1 start bit, 9 data bits, n stop bits"]
            #[inline(always)]
            pub fn bit9(self) -> &'a mut W {
                self.variant(M0_A::BIT9)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Mute mode enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MME_A {
            #[doc = "0: Receiver in active mode permanently"]
            DISABLED = 0,
            #[doc = "1: Receiver can switch between mute mode and active mode"]
            ENABLED = 1,
        }
        impl From<MME_A> for bool {
            #[inline(always)]
            fn from(variant: MME_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MME`"]
        pub type MME_R = crate::R<bool, MME_A>;
        impl MME_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MME_A {
                match self.bits {
                    false => MME_A::DISABLED,
                    true => MME_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == MME_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == MME_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `MME`"]
        pub struct MME_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MME_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MME_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Receiver in active mode permanently"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(MME_A::DISABLED)
            }
            #[doc = "Receiver can switch between mute mode and active mode"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(MME_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Character match interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CMIE_A {
            #[doc = "0: Interrupt is disabled"]
            DISABLED = 0,
            #[doc = "1: Interrupt is generated when the CMF bit is set in the ISR register"]
            ENABLED = 1,
        }
        impl From<CMIE_A> for bool {
            #[inline(always)]
            fn from(variant: CMIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CMIE`"]
        pub type CMIE_R = crate::R<bool, CMIE_A>;
        impl CMIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CMIE_A {
                match self.bits {
                    false => CMIE_A::DISABLED,
                    true => CMIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CMIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CMIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CMIE`"]
        pub struct CMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CMIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CMIE_A::DISABLED)
            }
            #[doc = "Interrupt is generated when the CMF bit is set in the ISR register"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CMIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Oversampling mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OVER8_A {
            #[doc = "0: Oversampling by 16"]
            OVERSAMPLING16 = 0,
            #[doc = "1: Oversampling by 8"]
            OVERSAMPLING8 = 1,
        }
        impl From<OVER8_A> for bool {
            #[inline(always)]
            fn from(variant: OVER8_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OVER8`"]
        pub type OVER8_R = crate::R<bool, OVER8_A>;
        impl OVER8_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OVER8_A {
                match self.bits {
                    false => OVER8_A::OVERSAMPLING16,
                    true => OVER8_A::OVERSAMPLING8,
                }
            }
            #[doc = "Checks if the value of the field is `OVERSAMPLING16`"]
            #[inline(always)]
            pub fn is_oversampling16(&self) -> bool {
                *self == OVER8_A::OVERSAMPLING16
            }
            #[doc = "Checks if the value of the field is `OVERSAMPLING8`"]
            #[inline(always)]
            pub fn is_oversampling8(&self) -> bool {
                *self == OVER8_A::OVERSAMPLING8
            }
        }
        #[doc = "Write proxy for field `OVER8`"]
        pub struct OVER8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVER8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OVER8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Oversampling by 16"]
            #[inline(always)]
            pub fn oversampling16(self) -> &'a mut W {
                self.variant(OVER8_A::OVERSAMPLING16)
            }
            #[doc = "Oversampling by 8"]
            #[inline(always)]
            pub fn oversampling8(self) -> &'a mut W {
                self.variant(OVER8_A::OVERSAMPLING8)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `DEDT`"]
        pub type DEDT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DEDT`"]
        pub struct DEDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 16)) | (((value as u32) & 0x1f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DEAT`"]
        pub type DEAT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DEAT`"]
        pub struct DEAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEAT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 21)) | (((value as u32) & 0x1f) << 21);
                self.w
            }
        }
        #[doc = "Receiver timeout interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RTOIE_A {
            #[doc = "0: Interrupt is inhibited"]
            DISABLED = 0,
            #[doc = "1: An USART interrupt is generated when the RTOF bit is set in the ISR register"]
            ENABLED = 1,
        }
        impl From<RTOIE_A> for bool {
            #[inline(always)]
            fn from(variant: RTOIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RTOIE`"]
        pub type RTOIE_R = crate::R<bool, RTOIE_A>;
        impl RTOIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RTOIE_A {
                match self.bits {
                    false => RTOIE_A::DISABLED,
                    true => RTOIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == RTOIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == RTOIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `RTOIE`"]
        pub struct RTOIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTOIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RTOIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt is inhibited"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(RTOIE_A::DISABLED)
            }
            #[doc = "An USART interrupt is generated when the RTOF bit is set in the ISR register"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(RTOIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "End of Block interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EOBIE_A {
            #[doc = "0: Interrupt is inhibited"]
            DISABLED = 0,
            #[doc = "1: A USART interrupt is generated when the EOBF flag is set in the ISR register"]
            ENABLED = 1,
        }
        impl From<EOBIE_A> for bool {
            #[inline(always)]
            fn from(variant: EOBIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EOBIE`"]
        pub type EOBIE_R = crate::R<bool, EOBIE_A>;
        impl EOBIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EOBIE_A {
                match self.bits {
                    false => EOBIE_A::DISABLED,
                    true => EOBIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == EOBIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == EOBIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `EOBIE`"]
        pub struct EOBIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOBIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EOBIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt is inhibited"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(EOBIE_A::DISABLED)
            }
            #[doc = "A USART interrupt is generated when the EOBF flag is set in the ISR register"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(EOBIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Word length\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum M1_A {
            #[doc = "0: Use M0 to set the data bits"]
            M0 = 0,
            #[doc = "1: 1 start bit, 7 data bits, n stop bits"]
            BIT7 = 1,
        }
        impl From<M1_A> for bool {
            #[inline(always)]
            fn from(variant: M1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `M1`"]
        pub type M1_R = crate::R<bool, M1_A>;
        impl M1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> M1_A {
                match self.bits {
                    false => M1_A::M0,
                    true => M1_A::BIT7,
                }
            }
            #[doc = "Checks if the value of the field is `M0`"]
            #[inline(always)]
            pub fn is_m0(&self) -> bool {
                *self == M1_A::M0
            }
            #[doc = "Checks if the value of the field is `BIT7`"]
            #[inline(always)]
            pub fn is_bit7(&self) -> bool {
                *self == M1_A::BIT7
            }
        }
        #[doc = "Write proxy for field `M1`"]
        pub struct M1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> M1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: M1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Use M0 to set the data bits"]
            #[inline(always)]
            pub fn m0(self) -> &'a mut W {
                self.variant(M1_A::M0)
            }
            #[doc = "1 start bit, 7 data bits, n stop bits"]
            #[inline(always)]
            pub fn bit7(self) -> &'a mut W {
                self.variant(M1_A::BIT7)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - USART enable"]
            #[inline(always)]
            pub fn ue(&self) -> UE_R {
                UE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - USART enable in Stop mode"]
            #[inline(always)]
            pub fn uesm(&self) -> UESM_R {
                UESM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Receiver enable"]
            #[inline(always)]
            pub fn re(&self) -> RE_R {
                RE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Transmitter enable"]
            #[inline(always)]
            pub fn te(&self) -> TE_R {
                TE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - IDLE interrupt enable"]
            #[inline(always)]
            pub fn idleie(&self) -> IDLEIE_R {
                IDLEIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - RXNE interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&self) -> RXNEIE_R {
                RXNEIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Transmission complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - interrupt enable"]
            #[inline(always)]
            pub fn txeie(&self) -> TXEIE_R {
                TXEIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - PE interrupt enable"]
            #[inline(always)]
            pub fn peie(&self) -> PEIE_R {
                PEIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Parity selection"]
            #[inline(always)]
            pub fn ps(&self) -> PS_R {
                PS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Parity control enable"]
            #[inline(always)]
            pub fn pce(&self) -> PCE_R {
                PCE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Receiver wakeup method"]
            #[inline(always)]
            pub fn wake(&self) -> WAKE_R {
                WAKE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Word length"]
            #[inline(always)]
            pub fn m0(&self) -> M0_R {
                M0_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Mute mode enable"]
            #[inline(always)]
            pub fn mme(&self) -> MME_R {
                MME_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Character match interrupt enable"]
            #[inline(always)]
            pub fn cmie(&self) -> CMIE_R {
                CMIE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Oversampling mode"]
            #[inline(always)]
            pub fn over8(&self) -> OVER8_R {
                OVER8_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 16:20 - Driver Enable deassertion time"]
            #[inline(always)]
            pub fn dedt(&self) -> DEDT_R {
                DEDT_R::new(((self.bits >> 16) & 0x1f) as u8)
            }
            #[doc = "Bits 21:25 - Driver Enable assertion time"]
            #[inline(always)]
            pub fn deat(&self) -> DEAT_R {
                DEAT_R::new(((self.bits >> 21) & 0x1f) as u8)
            }
            #[doc = "Bit 26 - Receiver timeout interrupt enable"]
            #[inline(always)]
            pub fn rtoie(&self) -> RTOIE_R {
                RTOIE_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - End of Block interrupt enable"]
            #[inline(always)]
            pub fn eobie(&self) -> EOBIE_R {
                EOBIE_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Word length"]
            #[inline(always)]
            pub fn m1(&self) -> M1_R {
                M1_R::new(((self.bits >> 28) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - USART enable"]
            #[inline(always)]
            pub fn ue(&mut self) -> UE_W {
                UE_W { w: self }
            }
            #[doc = "Bit 1 - USART enable in Stop mode"]
            #[inline(always)]
            pub fn uesm(&mut self) -> UESM_W {
                UESM_W { w: self }
            }
            #[doc = "Bit 2 - Receiver enable"]
            #[inline(always)]
            pub fn re(&mut self) -> RE_W {
                RE_W { w: self }
            }
            #[doc = "Bit 3 - Transmitter enable"]
            #[inline(always)]
            pub fn te(&mut self) -> TE_W {
                TE_W { w: self }
            }
            #[doc = "Bit 4 - IDLE interrupt enable"]
            #[inline(always)]
            pub fn idleie(&mut self) -> IDLEIE_W {
                IDLEIE_W { w: self }
            }
            #[doc = "Bit 5 - RXNE interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&mut self) -> RXNEIE_W {
                RXNEIE_W { w: self }
            }
            #[doc = "Bit 6 - Transmission complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 7 - interrupt enable"]
            #[inline(always)]
            pub fn txeie(&mut self) -> TXEIE_W {
                TXEIE_W { w: self }
            }
            #[doc = "Bit 8 - PE interrupt enable"]
            #[inline(always)]
            pub fn peie(&mut self) -> PEIE_W {
                PEIE_W { w: self }
            }
            #[doc = "Bit 9 - Parity selection"]
            #[inline(always)]
            pub fn ps(&mut self) -> PS_W {
                PS_W { w: self }
            }
            #[doc = "Bit 10 - Parity control enable"]
            #[inline(always)]
            pub fn pce(&mut self) -> PCE_W {
                PCE_W { w: self }
            }
            #[doc = "Bit 11 - Receiver wakeup method"]
            #[inline(always)]
            pub fn wake(&mut self) -> WAKE_W {
                WAKE_W { w: self }
            }
            #[doc = "Bit 12 - Word length"]
            #[inline(always)]
            pub fn m0(&mut self) -> M0_W {
                M0_W { w: self }
            }
            #[doc = "Bit 13 - Mute mode enable"]
            #[inline(always)]
            pub fn mme(&mut self) -> MME_W {
                MME_W { w: self }
            }
            #[doc = "Bit 14 - Character match interrupt enable"]
            #[inline(always)]
            pub fn cmie(&mut self) -> CMIE_W {
                CMIE_W { w: self }
            }
            #[doc = "Bit 15 - Oversampling mode"]
            #[inline(always)]
            pub fn over8(&mut self) -> OVER8_W {
                OVER8_W { w: self }
            }
            #[doc = "Bits 16:20 - Driver Enable deassertion time"]
            #[inline(always)]
            pub fn dedt(&mut self) -> DEDT_W {
                DEDT_W { w: self }
            }
            #[doc = "Bits 21:25 - Driver Enable assertion time"]
            #[inline(always)]
            pub fn deat(&mut self) -> DEAT_W {
                DEAT_W { w: self }
            }
            #[doc = "Bit 26 - Receiver timeout interrupt enable"]
            #[inline(always)]
            pub fn rtoie(&mut self) -> RTOIE_W {
                RTOIE_W { w: self }
            }
            #[doc = "Bit 27 - End of Block interrupt enable"]
            #[inline(always)]
            pub fn eobie(&mut self) -> EOBIE_W {
                EOBIE_W { w: self }
            }
            #[doc = "Bit 28 - Word length"]
            #[inline(always)]
            pub fn m1(&mut self) -> M1_W {
                M1_W { w: self }
            }
        }
    }
    #[doc = "Control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "Control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Receiver timeout enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RTOEN_A {
            #[doc = "0: Receiver timeout feature disabled"]
            DISABLED = 0,
            #[doc = "1: Receiver timeout feature enabled"]
            ENABLED = 1,
        }
        impl From<RTOEN_A> for bool {
            #[inline(always)]
            fn from(variant: RTOEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RTOEN`"]
        pub type RTOEN_R = crate::R<bool, RTOEN_A>;
        impl RTOEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RTOEN_A {
                match self.bits {
                    false => RTOEN_A::DISABLED,
                    true => RTOEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == RTOEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == RTOEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `RTOEN`"]
        pub struct RTOEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTOEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RTOEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Receiver timeout feature disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(RTOEN_A::DISABLED)
            }
            #[doc = "Receiver timeout feature enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(RTOEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Auto baud rate mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ABRMOD_A {
            #[doc = "0: Measurement of the start bit is used to detect the baud rate"]
            START = 0,
            #[doc = "1: Falling edge to falling edge measurement"]
            EDGE = 1,
            #[doc = "2: 0x7F frame detection"]
            FRAME7F = 2,
            #[doc = "3: 0x55 frame detection"]
            FRAME55 = 3,
        }
        impl From<ABRMOD_A> for u8 {
            #[inline(always)]
            fn from(variant: ABRMOD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ABRMOD`"]
        pub type ABRMOD_R = crate::R<u8, ABRMOD_A>;
        impl ABRMOD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ABRMOD_A {
                match self.bits {
                    0 => ABRMOD_A::START,
                    1 => ABRMOD_A::EDGE,
                    2 => ABRMOD_A::FRAME7F,
                    3 => ABRMOD_A::FRAME55,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `START`"]
            #[inline(always)]
            pub fn is_start(&self) -> bool {
                *self == ABRMOD_A::START
            }
            #[doc = "Checks if the value of the field is `EDGE`"]
            #[inline(always)]
            pub fn is_edge(&self) -> bool {
                *self == ABRMOD_A::EDGE
            }
            #[doc = "Checks if the value of the field is `FRAME7F`"]
            #[inline(always)]
            pub fn is_frame7f(&self) -> bool {
                *self == ABRMOD_A::FRAME7F
            }
            #[doc = "Checks if the value of the field is `FRAME55`"]
            #[inline(always)]
            pub fn is_frame55(&self) -> bool {
                *self == ABRMOD_A::FRAME55
            }
        }
        #[doc = "Write proxy for field `ABRMOD`"]
        pub struct ABRMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ABRMOD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ABRMOD_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Measurement of the start bit is used to detect the baud rate"]
            #[inline(always)]
            pub fn start(self) -> &'a mut W {
                self.variant(ABRMOD_A::START)
            }
            #[doc = "Falling edge to falling edge measurement"]
            #[inline(always)]
            pub fn edge(self) -> &'a mut W {
                self.variant(ABRMOD_A::EDGE)
            }
            #[doc = "0x7F frame detection"]
            #[inline(always)]
            pub fn frame7f(self) -> &'a mut W {
                self.variant(ABRMOD_A::FRAME7F)
            }
            #[doc = "0x55 frame detection"]
            #[inline(always)]
            pub fn frame55(self) -> &'a mut W {
                self.variant(ABRMOD_A::FRAME55)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 21)) | (((value as u32) & 0x03) << 21);
                self.w
            }
        }
        #[doc = "Auto baud rate enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ABREN_A {
            #[doc = "0: Auto baud rate detection is disabled"]
            DISABLED = 0,
            #[doc = "1: Auto baud rate detection is enabled"]
            ENABLED = 1,
        }
        impl From<ABREN_A> for bool {
            #[inline(always)]
            fn from(variant: ABREN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ABREN`"]
        pub type ABREN_R = crate::R<bool, ABREN_A>;
        impl ABREN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ABREN_A {
                match self.bits {
                    false => ABREN_A::DISABLED,
                    true => ABREN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ABREN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ABREN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ABREN`"]
        pub struct ABREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ABREN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ABREN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Auto baud rate detection is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ABREN_A::DISABLED)
            }
            #[doc = "Auto baud rate detection is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ABREN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Most significant bit first\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MSBFIRST_A {
            #[doc = "0: data is transmitted/received with data bit 0 first, following the start bit"]
            LSB = 0,
            #[doc = "1: data is transmitted/received with MSB (bit 7/8/9) first, following the start bit"]
            MSB = 1,
        }
        impl From<MSBFIRST_A> for bool {
            #[inline(always)]
            fn from(variant: MSBFIRST_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MSBFIRST`"]
        pub type MSBFIRST_R = crate::R<bool, MSBFIRST_A>;
        impl MSBFIRST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MSBFIRST_A {
                match self.bits {
                    false => MSBFIRST_A::LSB,
                    true => MSBFIRST_A::MSB,
                }
            }
            #[doc = "Checks if the value of the field is `LSB`"]
            #[inline(always)]
            pub fn is_lsb(&self) -> bool {
                *self == MSBFIRST_A::LSB
            }
            #[doc = "Checks if the value of the field is `MSB`"]
            #[inline(always)]
            pub fn is_msb(&self) -> bool {
                *self == MSBFIRST_A::MSB
            }
        }
        #[doc = "Write proxy for field `MSBFIRST`"]
        pub struct MSBFIRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSBFIRST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MSBFIRST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "data is transmitted/received with data bit 0 first, following the start bit"]
            #[inline(always)]
            pub fn lsb(self) -> &'a mut W {
                self.variant(MSBFIRST_A::LSB)
            }
            #[doc = "data is transmitted/received with MSB (bit 7/8/9) first, following the start bit"]
            #[inline(always)]
            pub fn msb(self) -> &'a mut W {
                self.variant(MSBFIRST_A::MSB)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Binary data inversion\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DATAINV_A {
            #[doc = "0: Logical data from the data register are send/received in positive/direct logic"]
            POSITIVE = 0,
            #[doc = "1: Logical data from the data register are send/received in negative/inverse logic"]
            NEGATIVE = 1,
        }
        impl From<DATAINV_A> for bool {
            #[inline(always)]
            fn from(variant: DATAINV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DATAINV`"]
        pub type DATAINV_R = crate::R<bool, DATAINV_A>;
        impl DATAINV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DATAINV_A {
                match self.bits {
                    false => DATAINV_A::POSITIVE,
                    true => DATAINV_A::NEGATIVE,
                }
            }
            #[doc = "Checks if the value of the field is `POSITIVE`"]
            #[inline(always)]
            pub fn is_positive(&self) -> bool {
                *self == DATAINV_A::POSITIVE
            }
            #[doc = "Checks if the value of the field is `NEGATIVE`"]
            #[inline(always)]
            pub fn is_negative(&self) -> bool {
                *self == DATAINV_A::NEGATIVE
            }
        }
        #[doc = "Write proxy for field `DATAINV`"]
        pub struct DATAINV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATAINV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DATAINV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logical data from the data register are send/received in positive/direct logic"]
            #[inline(always)]
            pub fn positive(self) -> &'a mut W {
                self.variant(DATAINV_A::POSITIVE)
            }
            #[doc = "Logical data from the data register are send/received in negative/inverse logic"]
            #[inline(always)]
            pub fn negative(self) -> &'a mut W {
                self.variant(DATAINV_A::NEGATIVE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "TX pin active level inversion\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXINV_A {
            #[doc = "0: TX pin signal works using the standard logic levels"]
            STANDARD = 0,
            #[doc = "1: TX pin signal values are inverted"]
            INVERTED = 1,
        }
        impl From<TXINV_A> for bool {
            #[inline(always)]
            fn from(variant: TXINV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TXINV`"]
        pub type TXINV_R = crate::R<bool, TXINV_A>;
        impl TXINV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TXINV_A {
                match self.bits {
                    false => TXINV_A::STANDARD,
                    true => TXINV_A::INVERTED,
                }
            }
            #[doc = "Checks if the value of the field is `STANDARD`"]
            #[inline(always)]
            pub fn is_standard(&self) -> bool {
                *self == TXINV_A::STANDARD
            }
            #[doc = "Checks if the value of the field is `INVERTED`"]
            #[inline(always)]
            pub fn is_inverted(&self) -> bool {
                *self == TXINV_A::INVERTED
            }
        }
        #[doc = "Write proxy for field `TXINV`"]
        pub struct TXINV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXINV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TXINV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TX pin signal works using the standard logic levels"]
            #[inline(always)]
            pub fn standard(self) -> &'a mut W {
                self.variant(TXINV_A::STANDARD)
            }
            #[doc = "TX pin signal values are inverted"]
            #[inline(always)]
            pub fn inverted(self) -> &'a mut W {
                self.variant(TXINV_A::INVERTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "RX pin active level inversion\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXINV_A {
            #[doc = "0: RX pin signal works using the standard logic levels"]
            STANDARD = 0,
            #[doc = "1: RX pin signal values are inverted"]
            INVERTED = 1,
        }
        impl From<RXINV_A> for bool {
            #[inline(always)]
            fn from(variant: RXINV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXINV`"]
        pub type RXINV_R = crate::R<bool, RXINV_A>;
        impl RXINV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXINV_A {
                match self.bits {
                    false => RXINV_A::STANDARD,
                    true => RXINV_A::INVERTED,
                }
            }
            #[doc = "Checks if the value of the field is `STANDARD`"]
            #[inline(always)]
            pub fn is_standard(&self) -> bool {
                *self == RXINV_A::STANDARD
            }
            #[doc = "Checks if the value of the field is `INVERTED`"]
            #[inline(always)]
            pub fn is_inverted(&self) -> bool {
                *self == RXINV_A::INVERTED
            }
        }
        #[doc = "Write proxy for field `RXINV`"]
        pub struct RXINV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXINV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RXINV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "RX pin signal works using the standard logic levels"]
            #[inline(always)]
            pub fn standard(self) -> &'a mut W {
                self.variant(RXINV_A::STANDARD)
            }
            #[doc = "RX pin signal values are inverted"]
            #[inline(always)]
            pub fn inverted(self) -> &'a mut W {
                self.variant(RXINV_A::INVERTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Swap TX/RX pins\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWAP_A {
            #[doc = "0: TX/RX pins are used as defined in standard pinout"]
            STANDARD = 0,
            #[doc = "1: The TX and RX pins functions are swapped"]
            SWAPPED = 1,
        }
        impl From<SWAP_A> for bool {
            #[inline(always)]
            fn from(variant: SWAP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWAP`"]
        pub type SWAP_R = crate::R<bool, SWAP_A>;
        impl SWAP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWAP_A {
                match self.bits {
                    false => SWAP_A::STANDARD,
                    true => SWAP_A::SWAPPED,
                }
            }
            #[doc = "Checks if the value of the field is `STANDARD`"]
            #[inline(always)]
            pub fn is_standard(&self) -> bool {
                *self == SWAP_A::STANDARD
            }
            #[doc = "Checks if the value of the field is `SWAPPED`"]
            #[inline(always)]
            pub fn is_swapped(&self) -> bool {
                *self == SWAP_A::SWAPPED
            }
        }
        #[doc = "Write proxy for field `SWAP`"]
        pub struct SWAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWAP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWAP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TX/RX pins are used as defined in standard pinout"]
            #[inline(always)]
            pub fn standard(self) -> &'a mut W {
                self.variant(SWAP_A::STANDARD)
            }
            #[doc = "The TX and RX pins functions are swapped"]
            #[inline(always)]
            pub fn swapped(self) -> &'a mut W {
                self.variant(SWAP_A::SWAPPED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "LIN mode enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LINEN_A {
            #[doc = "0: LIN mode disabled"]
            DISABLED = 0,
            #[doc = "1: LIN mode enabled"]
            ENABLED = 1,
        }
        impl From<LINEN_A> for bool {
            #[inline(always)]
            fn from(variant: LINEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LINEN`"]
        pub type LINEN_R = crate::R<bool, LINEN_A>;
        impl LINEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LINEN_A {
                match self.bits {
                    false => LINEN_A::DISABLED,
                    true => LINEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == LINEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == LINEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `LINEN`"]
        pub struct LINEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LINEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LINEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "LIN mode disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(LINEN_A::DISABLED)
            }
            #[doc = "LIN mode enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(LINEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "STOP bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STOP_A {
            #[doc = "0: 1 stop bit"]
            STOP1 = 0,
            #[doc = "1: 0.5 stop bit"]
            STOP0P5 = 1,
            #[doc = "2: 2 stop bit"]
            STOP2 = 2,
            #[doc = "3: 1.5 stop bit"]
            STOP1P5 = 3,
        }
        impl From<STOP_A> for u8 {
            #[inline(always)]
            fn from(variant: STOP_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STOP`"]
        pub type STOP_R = crate::R<u8, STOP_A>;
        impl STOP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STOP_A {
                match self.bits {
                    0 => STOP_A::STOP1,
                    1 => STOP_A::STOP0P5,
                    2 => STOP_A::STOP2,
                    3 => STOP_A::STOP1P5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `STOP1`"]
            #[inline(always)]
            pub fn is_stop1(&self) -> bool {
                *self == STOP_A::STOP1
            }
            #[doc = "Checks if the value of the field is `STOP0P5`"]
            #[inline(always)]
            pub fn is_stop0p5(&self) -> bool {
                *self == STOP_A::STOP0P5
            }
            #[doc = "Checks if the value of the field is `STOP2`"]
            #[inline(always)]
            pub fn is_stop2(&self) -> bool {
                *self == STOP_A::STOP2
            }
            #[doc = "Checks if the value of the field is `STOP1P5`"]
            #[inline(always)]
            pub fn is_stop1p5(&self) -> bool {
                *self == STOP_A::STOP1P5
            }
        }
        #[doc = "Write proxy for field `STOP`"]
        pub struct STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STOP_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "1 stop bit"]
            #[inline(always)]
            pub fn stop1(self) -> &'a mut W {
                self.variant(STOP_A::STOP1)
            }
            #[doc = "0.5 stop bit"]
            #[inline(always)]
            pub fn stop0p5(self) -> &'a mut W {
                self.variant(STOP_A::STOP0P5)
            }
            #[doc = "2 stop bit"]
            #[inline(always)]
            pub fn stop2(self) -> &'a mut W {
                self.variant(STOP_A::STOP2)
            }
            #[doc = "1.5 stop bit"]
            #[inline(always)]
            pub fn stop1p5(self) -> &'a mut W {
                self.variant(STOP_A::STOP1P5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Clock enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CLKEN_A {
            #[doc = "0: CK pin disabled"]
            DISABLED = 0,
            #[doc = "1: CK pin enabled"]
            ENABLED = 1,
        }
        impl From<CLKEN_A> for bool {
            #[inline(always)]
            fn from(variant: CLKEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CLKEN`"]
        pub type CLKEN_R = crate::R<bool, CLKEN_A>;
        impl CLKEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CLKEN_A {
                match self.bits {
                    false => CLKEN_A::DISABLED,
                    true => CLKEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CLKEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CLKEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CLKEN`"]
        pub struct CLKEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CLKEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CK pin disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CLKEN_A::DISABLED)
            }
            #[doc = "CK pin enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CLKEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Clock polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CPOL_A {
            #[doc = "0: Steady low value on CK pin outside transmission window"]
            LOW = 0,
            #[doc = "1: Steady high value on CK pin outside transmission window"]
            HIGH = 1,
        }
        impl From<CPOL_A> for bool {
            #[inline(always)]
            fn from(variant: CPOL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CPOL`"]
        pub type CPOL_R = crate::R<bool, CPOL_A>;
        impl CPOL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CPOL_A {
                match self.bits {
                    false => CPOL_A::LOW,
                    true => CPOL_A::HIGH,
                }
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == CPOL_A::LOW
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == CPOL_A::HIGH
            }
        }
        #[doc = "Write proxy for field `CPOL`"]
        pub struct CPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPOL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CPOL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Steady low value on CK pin outside transmission window"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(CPOL_A::LOW)
            }
            #[doc = "Steady high value on CK pin outside transmission window"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(CPOL_A::HIGH)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Clock phase\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CPHA_A {
            #[doc = "0: The first clock transition is the first data capture edge"]
            FIRST = 0,
            #[doc = "1: The second clock transition is the first data capture edge"]
            SECOND = 1,
        }
        impl From<CPHA_A> for bool {
            #[inline(always)]
            fn from(variant: CPHA_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CPHA`"]
        pub type CPHA_R = crate::R<bool, CPHA_A>;
        impl CPHA_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CPHA_A {
                match self.bits {
                    false => CPHA_A::FIRST,
                    true => CPHA_A::SECOND,
                }
            }
            #[doc = "Checks if the value of the field is `FIRST`"]
            #[inline(always)]
            pub fn is_first(&self) -> bool {
                *self == CPHA_A::FIRST
            }
            #[doc = "Checks if the value of the field is `SECOND`"]
            #[inline(always)]
            pub fn is_second(&self) -> bool {
                *self == CPHA_A::SECOND
            }
        }
        #[doc = "Write proxy for field `CPHA`"]
        pub struct CPHA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPHA_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CPHA_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The first clock transition is the first data capture edge"]
            #[inline(always)]
            pub fn first(self) -> &'a mut W {
                self.variant(CPHA_A::FIRST)
            }
            #[doc = "The second clock transition is the first data capture edge"]
            #[inline(always)]
            pub fn second(self) -> &'a mut W {
                self.variant(CPHA_A::SECOND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Last bit clock pulse\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LBCL_A {
            #[doc = "0: The clock pulse of the last data bit is not output to the CK pin"]
            NOTOUTPUT = 0,
            #[doc = "1: The clock pulse of the last data bit is output to the CK pin"]
            OUTPUT = 1,
        }
        impl From<LBCL_A> for bool {
            #[inline(always)]
            fn from(variant: LBCL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LBCL`"]
        pub type LBCL_R = crate::R<bool, LBCL_A>;
        impl LBCL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LBCL_A {
                match self.bits {
                    false => LBCL_A::NOTOUTPUT,
                    true => LBCL_A::OUTPUT,
                }
            }
            #[doc = "Checks if the value of the field is `NOTOUTPUT`"]
            #[inline(always)]
            pub fn is_not_output(&self) -> bool {
                *self == LBCL_A::NOTOUTPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                *self == LBCL_A::OUTPUT
            }
        }
        #[doc = "Write proxy for field `LBCL`"]
        pub struct LBCL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBCL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LBCL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The clock pulse of the last data bit is not output to the CK pin"]
            #[inline(always)]
            pub fn not_output(self) -> &'a mut W {
                self.variant(LBCL_A::NOTOUTPUT)
            }
            #[doc = "The clock pulse of the last data bit is output to the CK pin"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(LBCL_A::OUTPUT)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "LIN break detection interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LBDIE_A {
            #[doc = "0: Interrupt is inhibited"]
            DISABLED = 0,
            #[doc = "1: An interrupt is generated whenever LBDF=1 in the ISR register"]
            ENABLED = 1,
        }
        impl From<LBDIE_A> for bool {
            #[inline(always)]
            fn from(variant: LBDIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LBDIE`"]
        pub type LBDIE_R = crate::R<bool, LBDIE_A>;
        impl LBDIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LBDIE_A {
                match self.bits {
                    false => LBDIE_A::DISABLED,
                    true => LBDIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == LBDIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == LBDIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `LBDIE`"]
        pub struct LBDIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBDIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LBDIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt is inhibited"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(LBDIE_A::DISABLED)
            }
            #[doc = "An interrupt is generated whenever LBDF=1 in the ISR register"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(LBDIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "LIN break detection length\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LBDL_A {
            #[doc = "0: 10-bit break detection"]
            BIT10 = 0,
            #[doc = "1: 11-bit break detection"]
            BIT11 = 1,
        }
        impl From<LBDL_A> for bool {
            #[inline(always)]
            fn from(variant: LBDL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LBDL`"]
        pub type LBDL_R = crate::R<bool, LBDL_A>;
        impl LBDL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LBDL_A {
                match self.bits {
                    false => LBDL_A::BIT10,
                    true => LBDL_A::BIT11,
                }
            }
            #[doc = "Checks if the value of the field is `BIT10`"]
            #[inline(always)]
            pub fn is_bit10(&self) -> bool {
                *self == LBDL_A::BIT10
            }
            #[doc = "Checks if the value of the field is `BIT11`"]
            #[inline(always)]
            pub fn is_bit11(&self) -> bool {
                *self == LBDL_A::BIT11
            }
        }
        #[doc = "Write proxy for field `LBDL`"]
        pub struct LBDL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBDL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LBDL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "10-bit break detection"]
            #[inline(always)]
            pub fn bit10(self) -> &'a mut W {
                self.variant(LBDL_A::BIT10)
            }
            #[doc = "11-bit break detection"]
            #[inline(always)]
            pub fn bit11(self) -> &'a mut W {
                self.variant(LBDL_A::BIT11)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "7-bit Address Detection/4-bit Address Detection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADDM7_A {
            #[doc = "0: 4-bit address detection"]
            BIT4 = 0,
            #[doc = "1: 7-bit address detection"]
            BIT7 = 1,
        }
        impl From<ADDM7_A> for bool {
            #[inline(always)]
            fn from(variant: ADDM7_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADDM7`"]
        pub type ADDM7_R = crate::R<bool, ADDM7_A>;
        impl ADDM7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADDM7_A {
                match self.bits {
                    false => ADDM7_A::BIT4,
                    true => ADDM7_A::BIT7,
                }
            }
            #[doc = "Checks if the value of the field is `BIT4`"]
            #[inline(always)]
            pub fn is_bit4(&self) -> bool {
                *self == ADDM7_A::BIT4
            }
            #[doc = "Checks if the value of the field is `BIT7`"]
            #[inline(always)]
            pub fn is_bit7(&self) -> bool {
                *self == ADDM7_A::BIT7
            }
        }
        #[doc = "Write proxy for field `ADDM7`"]
        pub struct ADDM7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDM7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADDM7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "4-bit address detection"]
            #[inline(always)]
            pub fn bit4(self) -> &'a mut W {
                self.variant(ADDM7_A::BIT4)
            }
            #[doc = "7-bit address detection"]
            #[inline(always)]
            pub fn bit7(self) -> &'a mut W {
                self.variant(ADDM7_A::BIT7)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `ADD`"]
        pub type ADD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADD`"]
        pub struct ADD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | (((value as u32) & 0xff) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 23 - Receiver timeout enable"]
            #[inline(always)]
            pub fn rtoen(&self) -> RTOEN_R {
                RTOEN_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bits 21:22 - Auto baud rate mode"]
            #[inline(always)]
            pub fn abrmod(&self) -> ABRMOD_R {
                ABRMOD_R::new(((self.bits >> 21) & 0x03) as u8)
            }
            #[doc = "Bit 20 - Auto baud rate enable"]
            #[inline(always)]
            pub fn abren(&self) -> ABREN_R {
                ABREN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Most significant bit first"]
            #[inline(always)]
            pub fn msbfirst(&self) -> MSBFIRST_R {
                MSBFIRST_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Binary data inversion"]
            #[inline(always)]
            pub fn datainv(&self) -> DATAINV_R {
                DATAINV_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - TX pin active level inversion"]
            #[inline(always)]
            pub fn txinv(&self) -> TXINV_R {
                TXINV_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - RX pin active level inversion"]
            #[inline(always)]
            pub fn rxinv(&self) -> RXINV_R {
                RXINV_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Swap TX/RX pins"]
            #[inline(always)]
            pub fn swap(&self) -> SWAP_R {
                SWAP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - LIN mode enable"]
            #[inline(always)]
            pub fn linen(&self) -> LINEN_R {
                LINEN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - STOP bits"]
            #[inline(always)]
            pub fn stop(&self) -> STOP_R {
                STOP_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Clock enable"]
            #[inline(always)]
            pub fn clken(&self) -> CLKEN_R {
                CLKEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&self) -> CPOL_R {
                CPOL_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&self) -> CPHA_R {
                CPHA_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Last bit clock pulse"]
            #[inline(always)]
            pub fn lbcl(&self) -> LBCL_R {
                LBCL_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - LIN break detection interrupt enable"]
            #[inline(always)]
            pub fn lbdie(&self) -> LBDIE_R {
                LBDIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - LIN break detection length"]
            #[inline(always)]
            pub fn lbdl(&self) -> LBDL_R {
                LBDL_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - 7-bit Address Detection/4-bit Address Detection"]
            #[inline(always)]
            pub fn addm7(&self) -> ADDM7_R {
                ADDM7_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 24:31 - Address of the USART node"]
            #[inline(always)]
            pub fn add(&self) -> ADD_R {
                ADD_R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 23 - Receiver timeout enable"]
            #[inline(always)]
            pub fn rtoen(&mut self) -> RTOEN_W {
                RTOEN_W { w: self }
            }
            #[doc = "Bits 21:22 - Auto baud rate mode"]
            #[inline(always)]
            pub fn abrmod(&mut self) -> ABRMOD_W {
                ABRMOD_W { w: self }
            }
            #[doc = "Bit 20 - Auto baud rate enable"]
            #[inline(always)]
            pub fn abren(&mut self) -> ABREN_W {
                ABREN_W { w: self }
            }
            #[doc = "Bit 19 - Most significant bit first"]
            #[inline(always)]
            pub fn msbfirst(&mut self) -> MSBFIRST_W {
                MSBFIRST_W { w: self }
            }
            #[doc = "Bit 18 - Binary data inversion"]
            #[inline(always)]
            pub fn datainv(&mut self) -> DATAINV_W {
                DATAINV_W { w: self }
            }
            #[doc = "Bit 17 - TX pin active level inversion"]
            #[inline(always)]
            pub fn txinv(&mut self) -> TXINV_W {
                TXINV_W { w: self }
            }
            #[doc = "Bit 16 - RX pin active level inversion"]
            #[inline(always)]
            pub fn rxinv(&mut self) -> RXINV_W {
                RXINV_W { w: self }
            }
            #[doc = "Bit 15 - Swap TX/RX pins"]
            #[inline(always)]
            pub fn swap(&mut self) -> SWAP_W {
                SWAP_W { w: self }
            }
            #[doc = "Bit 14 - LIN mode enable"]
            #[inline(always)]
            pub fn linen(&mut self) -> LINEN_W {
                LINEN_W { w: self }
            }
            #[doc = "Bits 12:13 - STOP bits"]
            #[inline(always)]
            pub fn stop(&mut self) -> STOP_W {
                STOP_W { w: self }
            }
            #[doc = "Bit 11 - Clock enable"]
            #[inline(always)]
            pub fn clken(&mut self) -> CLKEN_W {
                CLKEN_W { w: self }
            }
            #[doc = "Bit 10 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&mut self) -> CPOL_W {
                CPOL_W { w: self }
            }
            #[doc = "Bit 9 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&mut self) -> CPHA_W {
                CPHA_W { w: self }
            }
            #[doc = "Bit 8 - Last bit clock pulse"]
            #[inline(always)]
            pub fn lbcl(&mut self) -> LBCL_W {
                LBCL_W { w: self }
            }
            #[doc = "Bit 6 - LIN break detection interrupt enable"]
            #[inline(always)]
            pub fn lbdie(&mut self) -> LBDIE_W {
                LBDIE_W { w: self }
            }
            #[doc = "Bit 5 - LIN break detection length"]
            #[inline(always)]
            pub fn lbdl(&mut self) -> LBDL_W {
                LBDL_W { w: self }
            }
            #[doc = "Bit 4 - 7-bit Address Detection/4-bit Address Detection"]
            #[inline(always)]
            pub fn addm7(&mut self) -> ADDM7_W {
                ADDM7_W { w: self }
            }
            #[doc = "Bits 24:31 - Address of the USART node"]
            #[inline(always)]
            pub fn add(&mut self) -> ADD_W {
                ADD_W { w: self }
            }
        }
    }
    #[doc = "Control register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr3](cr3) module"]
    pub type CR3 = crate::Reg<u32, _CR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR3;
    #[doc = "`read()` method returns [cr3::R](cr3::R) reader structure"]
    impl crate::Readable for CR3 {}
    #[doc = "`write(|w| ..)` method takes [cr3::W](cr3::W) writer structure"]
    impl crate::Writable for CR3 {}
    #[doc = "Control register 3"]
    pub mod cr3 {
        #[doc = "Reader of register CR3"]
        pub type R = crate::R<u32, super::CR3>;
        #[doc = "Writer for register CR3"]
        pub type W = crate::W<u32, super::CR3>;
        #[doc = "Register CR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Wakeup from Stop mode interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WUFIE_A {
            #[doc = "0: Interrupt is inhibited"]
            DISABLED = 0,
            #[doc = "1: An USART interrupt is generated whenever WUF=1 in the ISR register"]
            ENABLED = 1,
        }
        impl From<WUFIE_A> for bool {
            #[inline(always)]
            fn from(variant: WUFIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WUFIE`"]
        pub type WUFIE_R = crate::R<bool, WUFIE_A>;
        impl WUFIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WUFIE_A {
                match self.bits {
                    false => WUFIE_A::DISABLED,
                    true => WUFIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == WUFIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == WUFIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `WUFIE`"]
        pub struct WUFIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUFIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WUFIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt is inhibited"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(WUFIE_A::DISABLED)
            }
            #[doc = "An USART interrupt is generated whenever WUF=1 in the ISR register"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(WUFIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Wakeup from Stop mode interrupt flag selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum WUS_A {
            #[doc = "0: WUF active on address match"]
            ADDRESS = 0,
            #[doc = "2: WuF active on Start bit detection"]
            START = 2,
            #[doc = "3: WUF active on RXNE"]
            RXNE = 3,
        }
        impl From<WUS_A> for u8 {
            #[inline(always)]
            fn from(variant: WUS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `WUS`"]
        pub type WUS_R = crate::R<u8, WUS_A>;
        impl WUS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, WUS_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(WUS_A::ADDRESS),
                    2 => Val(WUS_A::START),
                    3 => Val(WUS_A::RXNE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `ADDRESS`"]
            #[inline(always)]
            pub fn is_address(&self) -> bool {
                *self == WUS_A::ADDRESS
            }
            #[doc = "Checks if the value of the field is `START`"]
            #[inline(always)]
            pub fn is_start(&self) -> bool {
                *self == WUS_A::START
            }
            #[doc = "Checks if the value of the field is `RXNE`"]
            #[inline(always)]
            pub fn is_rxne(&self) -> bool {
                *self == WUS_A::RXNE
            }
        }
        #[doc = "Write proxy for field `WUS`"]
        pub struct WUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WUS_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "WUF active on address match"]
            #[inline(always)]
            pub fn address(self) -> &'a mut W {
                self.variant(WUS_A::ADDRESS)
            }
            #[doc = "WuF active on Start bit detection"]
            #[inline(always)]
            pub fn start(self) -> &'a mut W {
                self.variant(WUS_A::START)
            }
            #[doc = "WUF active on RXNE"]
            #[inline(always)]
            pub fn rxne(self) -> &'a mut W {
                self.variant(WUS_A::RXNE)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `SCARCNT`"]
        pub type SCARCNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SCARCNT`"]
        pub struct SCARCNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCARCNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 17)) | (((value as u32) & 0x07) << 17);
                self.w
            }
        }
        #[doc = "Driver enable polarity selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DEP_A {
            #[doc = "0: DE signal is active high"]
            HIGH = 0,
            #[doc = "1: DE signal is active low"]
            LOW = 1,
        }
        impl From<DEP_A> for bool {
            #[inline(always)]
            fn from(variant: DEP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DEP`"]
        pub type DEP_R = crate::R<bool, DEP_A>;
        impl DEP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DEP_A {
                match self.bits {
                    false => DEP_A::HIGH,
                    true => DEP_A::LOW,
                }
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == DEP_A::HIGH
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == DEP_A::LOW
            }
        }
        #[doc = "Write proxy for field `DEP`"]
        pub struct DEP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DEP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DE signal is active high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(DEP_A::HIGH)
            }
            #[doc = "DE signal is active low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(DEP_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Driver enable mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DEM_A {
            #[doc = "0: DE function is disabled"]
            DISABLED = 0,
            #[doc = "1: The DE signal is output on the RTS pin"]
            ENABLED = 1,
        }
        impl From<DEM_A> for bool {
            #[inline(always)]
            fn from(variant: DEM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DEM`"]
        pub type DEM_R = crate::R<bool, DEM_A>;
        impl DEM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DEM_A {
                match self.bits {
                    false => DEM_A::DISABLED,
                    true => DEM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == DEM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == DEM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `DEM`"]
        pub struct DEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DEM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DE function is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DEM_A::DISABLED)
            }
            #[doc = "The DE signal is output on the RTS pin"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DEM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "DMA Disable on Reception Error\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DDRE_A {
            #[doc = "0: DMA is not disabled in case of reception error"]
            NOTDISABLED = 0,
            #[doc = "1: DMA is disabled following a reception error"]
            DISABLED = 1,
        }
        impl From<DDRE_A> for bool {
            #[inline(always)]
            fn from(variant: DDRE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DDRE`"]
        pub type DDRE_R = crate::R<bool, DDRE_A>;
        impl DDRE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DDRE_A {
                match self.bits {
                    false => DDRE_A::NOTDISABLED,
                    true => DDRE_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTDISABLED`"]
            #[inline(always)]
            pub fn is_not_disabled(&self) -> bool {
                *self == DDRE_A::NOTDISABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == DDRE_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `DDRE`"]
        pub struct DDRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DDRE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DDRE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DMA is not disabled in case of reception error"]
            #[inline(always)]
            pub fn not_disabled(self) -> &'a mut W {
                self.variant(DDRE_A::NOTDISABLED)
            }
            #[doc = "DMA is disabled following a reception error"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DDRE_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Overrun Disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OVRDIS_A {
            #[doc = "0: Overrun Error Flag, ORE, is set when received data is not read before receiving new data"]
            ENABLED = 0,
            #[doc = "1: Overrun functionality is disabled. If new data is received while the RXNE flag is still set the ORE flag is not set and the new received data overwrites the previous content of the RDR register"]
            DISABLED = 1,
        }
        impl From<OVRDIS_A> for bool {
            #[inline(always)]
            fn from(variant: OVRDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OVRDIS`"]
        pub type OVRDIS_R = crate::R<bool, OVRDIS_A>;
        impl OVRDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OVRDIS_A {
                match self.bits {
                    false => OVRDIS_A::ENABLED,
                    true => OVRDIS_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OVRDIS_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OVRDIS_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `OVRDIS`"]
        pub struct OVRDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVRDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OVRDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Overrun Error Flag, ORE, is set when received data is not read before receiving new data"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OVRDIS_A::ENABLED)
            }
            #[doc = "Overrun functionality is disabled. If new data is received while the RXNE flag is still set the ORE flag is not set and the new received data overwrites the previous content of the RDR register"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OVRDIS_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "One sample bit method enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ONEBIT_A {
            #[doc = "0: Three sample bit method"]
            SAMPLE3 = 0,
            #[doc = "1: One sample bit method"]
            SAMPLE1 = 1,
        }
        impl From<ONEBIT_A> for bool {
            #[inline(always)]
            fn from(variant: ONEBIT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ONEBIT`"]
        pub type ONEBIT_R = crate::R<bool, ONEBIT_A>;
        impl ONEBIT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ONEBIT_A {
                match self.bits {
                    false => ONEBIT_A::SAMPLE3,
                    true => ONEBIT_A::SAMPLE1,
                }
            }
            #[doc = "Checks if the value of the field is `SAMPLE3`"]
            #[inline(always)]
            pub fn is_sample3(&self) -> bool {
                *self == ONEBIT_A::SAMPLE3
            }
            #[doc = "Checks if the value of the field is `SAMPLE1`"]
            #[inline(always)]
            pub fn is_sample1(&self) -> bool {
                *self == ONEBIT_A::SAMPLE1
            }
        }
        #[doc = "Write proxy for field `ONEBIT`"]
        pub struct ONEBIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ONEBIT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ONEBIT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Three sample bit method"]
            #[inline(always)]
            pub fn sample3(self) -> &'a mut W {
                self.variant(ONEBIT_A::SAMPLE3)
            }
            #[doc = "One sample bit method"]
            #[inline(always)]
            pub fn sample1(self) -> &'a mut W {
                self.variant(ONEBIT_A::SAMPLE1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "CTS interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CTSIE_A {
            #[doc = "0: Interrupt is inhibited"]
            DISABLED = 0,
            #[doc = "1: An interrupt is generated whenever CTSIF=1 in the ISR register"]
            ENABLED = 1,
        }
        impl From<CTSIE_A> for bool {
            #[inline(always)]
            fn from(variant: CTSIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CTSIE`"]
        pub type CTSIE_R = crate::R<bool, CTSIE_A>;
        impl CTSIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CTSIE_A {
                match self.bits {
                    false => CTSIE_A::DISABLED,
                    true => CTSIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CTSIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CTSIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CTSIE`"]
        pub struct CTSIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTSIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt is inhibited"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CTSIE_A::DISABLED)
            }
            #[doc = "An interrupt is generated whenever CTSIF=1 in the ISR register"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CTSIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "CTS enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CTSE_A {
            #[doc = "0: CTS hardware flow control disabled"]
            DISABLED = 0,
            #[doc = "1: CTS mode enabled, data is only transmitted when the CTS input is asserted"]
            ENABLED = 1,
        }
        impl From<CTSE_A> for bool {
            #[inline(always)]
            fn from(variant: CTSE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CTSE`"]
        pub type CTSE_R = crate::R<bool, CTSE_A>;
        impl CTSE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CTSE_A {
                match self.bits {
                    false => CTSE_A::DISABLED,
                    true => CTSE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CTSE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CTSE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CTSE`"]
        pub struct CTSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTSE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CTS hardware flow control disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CTSE_A::DISABLED)
            }
            #[doc = "CTS mode enabled, data is only transmitted when the CTS input is asserted"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CTSE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "RTS enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RTSE_A {
            #[doc = "0: RTS hardware flow control disabled"]
            DISABLED = 0,
            #[doc = "1: RTS output enabled, data is only requested when there is space in the receive buffer"]
            ENABLED = 1,
        }
        impl From<RTSE_A> for bool {
            #[inline(always)]
            fn from(variant: RTSE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RTSE`"]
        pub type RTSE_R = crate::R<bool, RTSE_A>;
        impl RTSE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RTSE_A {
                match self.bits {
                    false => RTSE_A::DISABLED,
                    true => RTSE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == RTSE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == RTSE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `RTSE`"]
        pub struct RTSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTSE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RTSE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "RTS hardware flow control disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(RTSE_A::DISABLED)
            }
            #[doc = "RTS output enabled, data is only requested when there is space in the receive buffer"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(RTSE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "DMA enable transmitter\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DMAT_A {
            #[doc = "0: DMA mode is disabled for transmission"]
            DISABLED = 0,
            #[doc = "1: DMA mode is enabled for transmission"]
            ENABLED = 1,
        }
        impl From<DMAT_A> for bool {
            #[inline(always)]
            fn from(variant: DMAT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DMAT`"]
        pub type DMAT_R = crate::R<bool, DMAT_A>;
        impl DMAT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DMAT_A {
                match self.bits {
                    false => DMAT_A::DISABLED,
                    true => DMAT_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == DMAT_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == DMAT_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `DMAT`"]
        pub struct DMAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DMAT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DMA mode is disabled for transmission"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMAT_A::DISABLED)
            }
            #[doc = "DMA mode is enabled for transmission"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMAT_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "DMA enable receiver\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DMAR_A {
            #[doc = "0: DMA mode is disabled for reception"]
            DISABLED = 0,
            #[doc = "1: DMA mode is enabled for reception"]
            ENABLED = 1,
        }
        impl From<DMAR_A> for bool {
            #[inline(always)]
            fn from(variant: DMAR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DMAR`"]
        pub type DMAR_R = crate::R<bool, DMAR_A>;
        impl DMAR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DMAR_A {
                match self.bits {
                    false => DMAR_A::DISABLED,
                    true => DMAR_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == DMAR_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == DMAR_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `DMAR`"]
        pub struct DMAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DMAR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "DMA mode is disabled for reception"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DMAR_A::DISABLED)
            }
            #[doc = "DMA mode is enabled for reception"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DMAR_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Smartcard mode enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SCEN_A {
            #[doc = "0: Smartcard Mode disabled"]
            DISABLED = 0,
            #[doc = "1: Smartcard Mode enabled"]
            ENABLED = 1,
        }
        impl From<SCEN_A> for bool {
            #[inline(always)]
            fn from(variant: SCEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SCEN`"]
        pub type SCEN_R = crate::R<bool, SCEN_A>;
        impl SCEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SCEN_A {
                match self.bits {
                    false => SCEN_A::DISABLED,
                    true => SCEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SCEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == SCEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `SCEN`"]
        pub struct SCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SCEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Smartcard Mode disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SCEN_A::DISABLED)
            }
            #[doc = "Smartcard Mode enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SCEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Smartcard NACK enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NACK_A {
            #[doc = "0: NACK transmission in case of parity error is disabled"]
            DISABLED = 0,
            #[doc = "1: NACK transmission during parity error is enabled"]
            ENABLED = 1,
        }
        impl From<NACK_A> for bool {
            #[inline(always)]
            fn from(variant: NACK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `NACK`"]
        pub type NACK_R = crate::R<bool, NACK_A>;
        impl NACK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> NACK_A {
                match self.bits {
                    false => NACK_A::DISABLED,
                    true => NACK_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == NACK_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == NACK_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `NACK`"]
        pub struct NACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NACK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: NACK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "NACK transmission in case of parity error is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(NACK_A::DISABLED)
            }
            #[doc = "NACK transmission during parity error is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(NACK_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Half-duplex selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HDSEL_A {
            #[doc = "0: Half duplex mode is not selected"]
            NOTSELECTED = 0,
            #[doc = "1: Half duplex mode is selected"]
            SELECTED = 1,
        }
        impl From<HDSEL_A> for bool {
            #[inline(always)]
            fn from(variant: HDSEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HDSEL`"]
        pub type HDSEL_R = crate::R<bool, HDSEL_A>;
        impl HDSEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HDSEL_A {
                match self.bits {
                    false => HDSEL_A::NOTSELECTED,
                    true => HDSEL_A::SELECTED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTSELECTED`"]
            #[inline(always)]
            pub fn is_not_selected(&self) -> bool {
                *self == HDSEL_A::NOTSELECTED
            }
            #[doc = "Checks if the value of the field is `SELECTED`"]
            #[inline(always)]
            pub fn is_selected(&self) -> bool {
                *self == HDSEL_A::SELECTED
            }
        }
        #[doc = "Write proxy for field `HDSEL`"]
        pub struct HDSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HDSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HDSEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Half duplex mode is not selected"]
            #[inline(always)]
            pub fn not_selected(self) -> &'a mut W {
                self.variant(HDSEL_A::NOTSELECTED)
            }
            #[doc = "Half duplex mode is selected"]
            #[inline(always)]
            pub fn selected(self) -> &'a mut W {
                self.variant(HDSEL_A::SELECTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "IrDA low-power\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IRLP_A {
            #[doc = "0: Normal mode"]
            NORMAL = 0,
            #[doc = "1: Low-power mode"]
            LOWPOWER = 1,
        }
        impl From<IRLP_A> for bool {
            #[inline(always)]
            fn from(variant: IRLP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IRLP`"]
        pub type IRLP_R = crate::R<bool, IRLP_A>;
        impl IRLP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IRLP_A {
                match self.bits {
                    false => IRLP_A::NORMAL,
                    true => IRLP_A::LOWPOWER,
                }
            }
            #[doc = "Checks if the value of the field is `NORMAL`"]
            #[inline(always)]
            pub fn is_normal(&self) -> bool {
                *self == IRLP_A::NORMAL
            }
            #[doc = "Checks if the value of the field is `LOWPOWER`"]
            #[inline(always)]
            pub fn is_low_power(&self) -> bool {
                *self == IRLP_A::LOWPOWER
            }
        }
        #[doc = "Write proxy for field `IRLP`"]
        pub struct IRLP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRLP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IRLP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Normal mode"]
            #[inline(always)]
            pub fn normal(self) -> &'a mut W {
                self.variant(IRLP_A::NORMAL)
            }
            #[doc = "Low-power mode"]
            #[inline(always)]
            pub fn low_power(self) -> &'a mut W {
                self.variant(IRLP_A::LOWPOWER)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "IrDA mode enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IREN_A {
            #[doc = "0: IrDA disabled"]
            DISABLED = 0,
            #[doc = "1: IrDA enabled"]
            ENABLED = 1,
        }
        impl From<IREN_A> for bool {
            #[inline(always)]
            fn from(variant: IREN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IREN`"]
        pub type IREN_R = crate::R<bool, IREN_A>;
        impl IREN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IREN_A {
                match self.bits {
                    false => IREN_A::DISABLED,
                    true => IREN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == IREN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == IREN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `IREN`"]
        pub struct IREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IREN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IREN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "IrDA disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(IREN_A::DISABLED)
            }
            #[doc = "IrDA enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(IREN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Error interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EIE_A {
            #[doc = "0: Interrupt is inhibited"]
            DISABLED = 0,
            #[doc = "1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the ISR register"]
            ENABLED = 1,
        }
        impl From<EIE_A> for bool {
            #[inline(always)]
            fn from(variant: EIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EIE`"]
        pub type EIE_R = crate::R<bool, EIE_A>;
        impl EIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EIE_A {
                match self.bits {
                    false => EIE_A::DISABLED,
                    true => EIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == EIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == EIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `EIE`"]
        pub struct EIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt is inhibited"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(EIE_A::DISABLED)
            }
            #[doc = "An interrupt is generated when FE=1 or ORE=1 or NF=1 in the ISR register"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(EIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 22 - Wakeup from Stop mode interrupt enable"]
            #[inline(always)]
            pub fn wufie(&self) -> WUFIE_R {
                WUFIE_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - Wakeup from Stop mode interrupt flag selection"]
            #[inline(always)]
            pub fn wus(&self) -> WUS_R {
                WUS_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 17:19 - Smartcard auto-retry count"]
            #[inline(always)]
            pub fn scarcnt(&self) -> SCARCNT_R {
                SCARCNT_R::new(((self.bits >> 17) & 0x07) as u8)
            }
            #[doc = "Bit 15 - Driver enable polarity selection"]
            #[inline(always)]
            pub fn dep(&self) -> DEP_R {
                DEP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Driver enable mode"]
            #[inline(always)]
            pub fn dem(&self) -> DEM_R {
                DEM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMA Disable on Reception Error"]
            #[inline(always)]
            pub fn ddre(&self) -> DDRE_R {
                DDRE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Overrun Disable"]
            #[inline(always)]
            pub fn ovrdis(&self) -> OVRDIS_R {
                OVRDIS_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - One sample bit method enable"]
            #[inline(always)]
            pub fn onebit(&self) -> ONEBIT_R {
                ONEBIT_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CTS interrupt enable"]
            #[inline(always)]
            pub fn ctsie(&self) -> CTSIE_R {
                CTSIE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CTS enable"]
            #[inline(always)]
            pub fn ctse(&self) -> CTSE_R {
                CTSE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - RTS enable"]
            #[inline(always)]
            pub fn rtse(&self) -> RTSE_R {
                RTSE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - DMA enable transmitter"]
            #[inline(always)]
            pub fn dmat(&self) -> DMAT_R {
                DMAT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - DMA enable receiver"]
            #[inline(always)]
            pub fn dmar(&self) -> DMAR_R {
                DMAR_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Smartcard mode enable"]
            #[inline(always)]
            pub fn scen(&self) -> SCEN_R {
                SCEN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Smartcard NACK enable"]
            #[inline(always)]
            pub fn nack(&self) -> NACK_R {
                NACK_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Half-duplex selection"]
            #[inline(always)]
            pub fn hdsel(&self) -> HDSEL_R {
                HDSEL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - IrDA low-power"]
            #[inline(always)]
            pub fn irlp(&self) -> IRLP_R {
                IRLP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - IrDA mode enable"]
            #[inline(always)]
            pub fn iren(&self) -> IREN_R {
                IREN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Error interrupt enable"]
            #[inline(always)]
            pub fn eie(&self) -> EIE_R {
                EIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 22 - Wakeup from Stop mode interrupt enable"]
            #[inline(always)]
            pub fn wufie(&mut self) -> WUFIE_W {
                WUFIE_W { w: self }
            }
            #[doc = "Bits 20:21 - Wakeup from Stop mode interrupt flag selection"]
            #[inline(always)]
            pub fn wus(&mut self) -> WUS_W {
                WUS_W { w: self }
            }
            #[doc = "Bits 17:19 - Smartcard auto-retry count"]
            #[inline(always)]
            pub fn scarcnt(&mut self) -> SCARCNT_W {
                SCARCNT_W { w: self }
            }
            #[doc = "Bit 15 - Driver enable polarity selection"]
            #[inline(always)]
            pub fn dep(&mut self) -> DEP_W {
                DEP_W { w: self }
            }
            #[doc = "Bit 14 - Driver enable mode"]
            #[inline(always)]
            pub fn dem(&mut self) -> DEM_W {
                DEM_W { w: self }
            }
            #[doc = "Bit 13 - DMA Disable on Reception Error"]
            #[inline(always)]
            pub fn ddre(&mut self) -> DDRE_W {
                DDRE_W { w: self }
            }
            #[doc = "Bit 12 - Overrun Disable"]
            #[inline(always)]
            pub fn ovrdis(&mut self) -> OVRDIS_W {
                OVRDIS_W { w: self }
            }
            #[doc = "Bit 11 - One sample bit method enable"]
            #[inline(always)]
            pub fn onebit(&mut self) -> ONEBIT_W {
                ONEBIT_W { w: self }
            }
            #[doc = "Bit 10 - CTS interrupt enable"]
            #[inline(always)]
            pub fn ctsie(&mut self) -> CTSIE_W {
                CTSIE_W { w: self }
            }
            #[doc = "Bit 9 - CTS enable"]
            #[inline(always)]
            pub fn ctse(&mut self) -> CTSE_W {
                CTSE_W { w: self }
            }
            #[doc = "Bit 8 - RTS enable"]
            #[inline(always)]
            pub fn rtse(&mut self) -> RTSE_W {
                RTSE_W { w: self }
            }
            #[doc = "Bit 7 - DMA enable transmitter"]
            #[inline(always)]
            pub fn dmat(&mut self) -> DMAT_W {
                DMAT_W { w: self }
            }
            #[doc = "Bit 6 - DMA enable receiver"]
            #[inline(always)]
            pub fn dmar(&mut self) -> DMAR_W {
                DMAR_W { w: self }
            }
            #[doc = "Bit 5 - Smartcard mode enable"]
            #[inline(always)]
            pub fn scen(&mut self) -> SCEN_W {
                SCEN_W { w: self }
            }
            #[doc = "Bit 4 - Smartcard NACK enable"]
            #[inline(always)]
            pub fn nack(&mut self) -> NACK_W {
                NACK_W { w: self }
            }
            #[doc = "Bit 3 - Half-duplex selection"]
            #[inline(always)]
            pub fn hdsel(&mut self) -> HDSEL_W {
                HDSEL_W { w: self }
            }
            #[doc = "Bit 2 - IrDA low-power"]
            #[inline(always)]
            pub fn irlp(&mut self) -> IRLP_W {
                IRLP_W { w: self }
            }
            #[doc = "Bit 1 - IrDA mode enable"]
            #[inline(always)]
            pub fn iren(&mut self) -> IREN_W {
                IREN_W { w: self }
            }
            #[doc = "Bit 0 - Error interrupt enable"]
            #[inline(always)]
            pub fn eie(&mut self) -> EIE_W {
                EIE_W { w: self }
            }
        }
    }
    #[doc = "Baud rate register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [brr](brr) module"]
    pub type BRR = crate::Reg<u32, _BRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BRR;
    #[doc = "`read()` method returns [brr::R](brr::R) reader structure"]
    impl crate::Readable for BRR {}
    #[doc = "`write(|w| ..)` method takes [brr::W](brr::W) writer structure"]
    impl crate::Writable for BRR {}
    #[doc = "Baud rate register"]
    pub mod brr {
        #[doc = "Reader of register BRR"]
        pub type R = crate::R<u32, super::BRR>;
        #[doc = "Writer for register BRR"]
        pub type W = crate::W<u32, super::BRR>;
        #[doc = "Register BRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BRR`"]
        pub type BRR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `BRR`"]
        pub struct BRR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BRR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - mantissa of USARTDIV"]
            #[inline(always)]
            pub fn brr(&self) -> BRR_R {
                BRR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - mantissa of USARTDIV"]
            #[inline(always)]
            pub fn brr(&mut self) -> BRR_W {
                BRR_W { w: self }
            }
        }
    }
    #[doc = "Guard time and prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gtpr](gtpr) module"]
    pub type GTPR = crate::Reg<u32, _GTPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GTPR;
    #[doc = "`read()` method returns [gtpr::R](gtpr::R) reader structure"]
    impl crate::Readable for GTPR {}
    #[doc = "`write(|w| ..)` method takes [gtpr::W](gtpr::W) writer structure"]
    impl crate::Writable for GTPR {}
    #[doc = "Guard time and prescaler register"]
    pub mod gtpr {
        #[doc = "Reader of register GTPR"]
        pub type R = crate::R<u32, super::GTPR>;
        #[doc = "Writer for register GTPR"]
        pub type W = crate::W<u32, super::GTPR>;
        #[doc = "Register GTPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::GTPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `GT`"]
        pub type GT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GT`"]
        pub struct GT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - Guard time value"]
            #[inline(always)]
            pub fn gt(&self) -> GT_R {
                GT_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - Guard time value"]
            #[inline(always)]
            pub fn gt(&mut self) -> GT_W {
                GT_W { w: self }
            }
            #[doc = "Bits 0:7 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "Receiver timeout register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtor](rtor) module"]
    pub type RTOR = crate::Reg<u32, _RTOR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RTOR;
    #[doc = "`read()` method returns [rtor::R](rtor::R) reader structure"]
    impl crate::Readable for RTOR {}
    #[doc = "`write(|w| ..)` method takes [rtor::W](rtor::W) writer structure"]
    impl crate::Writable for RTOR {}
    #[doc = "Receiver timeout register"]
    pub mod rtor {
        #[doc = "Reader of register RTOR"]
        pub type R = crate::R<u32, super::RTOR>;
        #[doc = "Writer for register RTOR"]
        pub type W = crate::W<u32, super::RTOR>;
        #[doc = "Register RTOR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RTOR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BLEN`"]
        pub type BLEN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BLEN`"]
        pub struct BLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BLEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | (((value as u32) & 0xff) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `RTO`"]
        pub type RTO_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `RTO`"]
        pub struct RTO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTO_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:31 - Block Length"]
            #[inline(always)]
            pub fn blen(&self) -> BLEN_R {
                BLEN_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 0:23 - Receiver timeout value"]
            #[inline(always)]
            pub fn rto(&self) -> RTO_R {
                RTO_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 24:31 - Block Length"]
            #[inline(always)]
            pub fn blen(&mut self) -> BLEN_W {
                BLEN_W { w: self }
            }
            #[doc = "Bits 0:23 - Receiver timeout value"]
            #[inline(always)]
            pub fn rto(&mut self) -> RTO_W {
                RTO_W { w: self }
            }
        }
    }
    #[doc = "Request register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rqr](rqr) module"]
    pub type RQR = crate::Reg<u32, _RQR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RQR;
    #[doc = "`read()` method returns [rqr::R](rqr::R) reader structure"]
    impl crate::Readable for RQR {}
    #[doc = "`write(|w| ..)` method takes [rqr::W](rqr::W) writer structure"]
    impl crate::Writable for RQR {}
    #[doc = "Request register"]
    pub mod rqr {
        #[doc = "Reader of register RQR"]
        pub type R = crate::R<u32, super::RQR>;
        #[doc = "Writer for register RQR"]
        pub type W = crate::W<u32, super::RQR>;
        #[doc = "Register RQR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RQR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Transmit data flush request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXFRQ_A {
            #[doc = "1: Set the TXE flags. This allows to discard the transmit data"]
            DISCARD = 1,
        }
        impl From<TXFRQ_A> for bool {
            #[inline(always)]
            fn from(variant: TXFRQ_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TXFRQ`"]
        pub type TXFRQ_R = crate::R<bool, TXFRQ_A>;
        impl TXFRQ_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, TXFRQ_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(TXFRQ_A::DISCARD),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DISCARD`"]
            #[inline(always)]
            pub fn is_discard(&self) -> bool {
                *self == TXFRQ_A::DISCARD
            }
        }
        #[doc = "Write proxy for field `TXFRQ`"]
        pub struct TXFRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFRQ_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TXFRQ_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Set the TXE flags. This allows to discard the transmit data"]
            #[inline(always)]
            pub fn discard(self) -> &'a mut W {
                self.variant(TXFRQ_A::DISCARD)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Receive data flush request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXFRQ_A {
            #[doc = "1: clears the RXNE flag. This allows to discard the received data without reading it, and avoid an overrun condition"]
            DISCARD = 1,
        }
        impl From<RXFRQ_A> for bool {
            #[inline(always)]
            fn from(variant: RXFRQ_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXFRQ`"]
        pub type RXFRQ_R = crate::R<bool, RXFRQ_A>;
        impl RXFRQ_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, RXFRQ_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(RXFRQ_A::DISCARD),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DISCARD`"]
            #[inline(always)]
            pub fn is_discard(&self) -> bool {
                *self == RXFRQ_A::DISCARD
            }
        }
        #[doc = "Write proxy for field `RXFRQ`"]
        pub struct RXFRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFRQ_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RXFRQ_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "clears the RXNE flag. This allows to discard the received data without reading it, and avoid an overrun condition"]
            #[inline(always)]
            pub fn discard(self) -> &'a mut W {
                self.variant(RXFRQ_A::DISCARD)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Mute mode request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MMRQ_A {
            #[doc = "1: Puts the USART in mute mode and sets the RWU flag"]
            MUTE = 1,
        }
        impl From<MMRQ_A> for bool {
            #[inline(always)]
            fn from(variant: MMRQ_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MMRQ`"]
        pub type MMRQ_R = crate::R<bool, MMRQ_A>;
        impl MMRQ_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, MMRQ_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(MMRQ_A::MUTE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `MUTE`"]
            #[inline(always)]
            pub fn is_mute(&self) -> bool {
                *self == MMRQ_A::MUTE
            }
        }
        #[doc = "Write proxy for field `MMRQ`"]
        pub struct MMRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMRQ_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MMRQ_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Puts the USART in mute mode and sets the RWU flag"]
            #[inline(always)]
            pub fn mute(self) -> &'a mut W {
                self.variant(MMRQ_A::MUTE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Send break request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SBKRQ_A {
            #[doc = "1: sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available"]
            BREAK = 1,
        }
        impl From<SBKRQ_A> for bool {
            #[inline(always)]
            fn from(variant: SBKRQ_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SBKRQ`"]
        pub type SBKRQ_R = crate::R<bool, SBKRQ_A>;
        impl SBKRQ_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, SBKRQ_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(SBKRQ_A::BREAK),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `BREAK`"]
            #[inline(always)]
            pub fn is_break_(&self) -> bool {
                *self == SBKRQ_A::BREAK
            }
        }
        #[doc = "Write proxy for field `SBKRQ`"]
        pub struct SBKRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBKRQ_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SBKRQ_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available"]
            #[inline(always)]
            pub fn break_(self) -> &'a mut W {
                self.variant(SBKRQ_A::BREAK)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Auto baud rate request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ABRRQ_A {
            #[doc = "1: resets the ABRF flag in the USART_ISR and request an automatic baud rate measurement on the next received data frame"]
            REQUEST = 1,
        }
        impl From<ABRRQ_A> for bool {
            #[inline(always)]
            fn from(variant: ABRRQ_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ABRRQ`"]
        pub type ABRRQ_R = crate::R<bool, ABRRQ_A>;
        impl ABRRQ_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, ABRRQ_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(ABRRQ_A::REQUEST),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `REQUEST`"]
            #[inline(always)]
            pub fn is_request(&self) -> bool {
                *self == ABRRQ_A::REQUEST
            }
        }
        #[doc = "Write proxy for field `ABRRQ`"]
        pub struct ABRRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ABRRQ_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ABRRQ_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "resets the ABRF flag in the USART_ISR and request an automatic baud rate measurement on the next received data frame"]
            #[inline(always)]
            pub fn request(self) -> &'a mut W {
                self.variant(ABRRQ_A::REQUEST)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 4 - Transmit data flush request"]
            #[inline(always)]
            pub fn txfrq(&self) -> TXFRQ_R {
                TXFRQ_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Receive data flush request"]
            #[inline(always)]
            pub fn rxfrq(&self) -> RXFRQ_R {
                RXFRQ_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Mute mode request"]
            #[inline(always)]
            pub fn mmrq(&self) -> MMRQ_R {
                MMRQ_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Send break request"]
            #[inline(always)]
            pub fn sbkrq(&self) -> SBKRQ_R {
                SBKRQ_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Auto baud rate request"]
            #[inline(always)]
            pub fn abrrq(&self) -> ABRRQ_R {
                ABRRQ_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 4 - Transmit data flush request"]
            #[inline(always)]
            pub fn txfrq(&mut self) -> TXFRQ_W {
                TXFRQ_W { w: self }
            }
            #[doc = "Bit 3 - Receive data flush request"]
            #[inline(always)]
            pub fn rxfrq(&mut self) -> RXFRQ_W {
                RXFRQ_W { w: self }
            }
            #[doc = "Bit 2 - Mute mode request"]
            #[inline(always)]
            pub fn mmrq(&mut self) -> MMRQ_W {
                MMRQ_W { w: self }
            }
            #[doc = "Bit 1 - Send break request"]
            #[inline(always)]
            pub fn sbkrq(&mut self) -> SBKRQ_W {
                SBKRQ_W { w: self }
            }
            #[doc = "Bit 0 - Auto baud rate request"]
            #[inline(always)]
            pub fn abrrq(&mut self) -> ABRRQ_W {
                ABRRQ_W { w: self }
            }
        }
    }
    #[doc = "Interrupt & status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr](isr) module"]
    pub type ISR = crate::Reg<u32, _ISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISR;
    #[doc = "`read()` method returns [isr::R](isr::R) reader structure"]
    impl crate::Readable for ISR {}
    #[doc = "Interrupt & status register"]
    pub mod isr {
        #[doc = "Reader of register ISR"]
        pub type R = crate::R<u32, super::ISR>;
        #[doc = "Reader of field `REACK`"]
        pub type REACK_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TEACK`"]
        pub type TEACK_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WUF`"]
        pub type WUF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RWU`"]
        pub type RWU_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SBKF`"]
        pub type SBKF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CMF`"]
        pub type CMF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BUSY`"]
        pub type BUSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ABRF`"]
        pub type ABRF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ABRE`"]
        pub type ABRE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EOBF`"]
        pub type EOBF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTOF`"]
        pub type RTOF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CTS`"]
        pub type CTS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CTSIF`"]
        pub type CTSIF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `LBDF`"]
        pub type LBDF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXE`"]
        pub type TXE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TC`"]
        pub type TC_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXNE`"]
        pub type RXNE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDLE`"]
        pub type IDLE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ORE`"]
        pub type ORE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `NF`"]
        pub type NF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `FE`"]
        pub type FE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PE`"]
        pub type PE_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 22 - Receive enable acknowledge flag"]
            #[inline(always)]
            pub fn reack(&self) -> REACK_R {
                REACK_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Transmit enable acknowledge flag"]
            #[inline(always)]
            pub fn teack(&self) -> TEACK_R {
                TEACK_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Wakeup from Stop mode flag"]
            #[inline(always)]
            pub fn wuf(&self) -> WUF_R {
                WUF_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Receiver wakeup from Mute mode"]
            #[inline(always)]
            pub fn rwu(&self) -> RWU_R {
                RWU_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Send break flag"]
            #[inline(always)]
            pub fn sbkf(&self) -> SBKF_R {
                SBKF_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - character match flag"]
            #[inline(always)]
            pub fn cmf(&self) -> CMF_R {
                CMF_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Busy flag"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Auto baud rate flag"]
            #[inline(always)]
            pub fn abrf(&self) -> ABRF_R {
                ABRF_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Auto baud rate error"]
            #[inline(always)]
            pub fn abre(&self) -> ABRE_R {
                ABRE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 12 - End of block flag"]
            #[inline(always)]
            pub fn eobf(&self) -> EOBF_R {
                EOBF_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Receiver timeout"]
            #[inline(always)]
            pub fn rtof(&self) -> RTOF_R {
                RTOF_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CTS flag"]
            #[inline(always)]
            pub fn cts(&self) -> CTS_R {
                CTS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CTS interrupt flag"]
            #[inline(always)]
            pub fn ctsif(&self) -> CTSIF_R {
                CTSIF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - LIN break detection flag"]
            #[inline(always)]
            pub fn lbdf(&self) -> LBDF_R {
                LBDF_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Transmit data register empty"]
            #[inline(always)]
            pub fn txe(&self) -> TXE_R {
                TXE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Transmission complete"]
            #[inline(always)]
            pub fn tc(&self) -> TC_R {
                TC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Read data register not empty"]
            #[inline(always)]
            pub fn rxne(&self) -> RXNE_R {
                RXNE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Idle line detected"]
            #[inline(always)]
            pub fn idle(&self) -> IDLE_R {
                IDLE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Overrun error"]
            #[inline(always)]
            pub fn ore(&self) -> ORE_R {
                ORE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Noise detected flag"]
            #[inline(always)]
            pub fn nf(&self) -> NF_R {
                NF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Framing error"]
            #[inline(always)]
            pub fn fe(&self) -> FE_R {
                FE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Parity error"]
            #[inline(always)]
            pub fn pe(&self) -> PE_R {
                PE_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Interrupt flag clear register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](icr) module"]
    pub type ICR = crate::Reg<u32, _ICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICR;
    #[doc = "`read()` method returns [icr::R](icr::R) reader structure"]
    impl crate::Readable for ICR {}
    #[doc = "`write(|w| ..)` method takes [icr::W](icr::W) writer structure"]
    impl crate::Writable for ICR {}
    #[doc = "Interrupt flag clear register"]
    pub mod icr {
        #[doc = "Reader of register ICR"]
        pub type R = crate::R<u32, super::ICR>;
        #[doc = "Writer for register ICR"]
        pub type W = crate::W<u32, super::ICR>;
        #[doc = "Register ICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Wakeup from Stop mode clear flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WUCF_A {
            #[doc = "1: Clears the WUF flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<WUCF_A> for bool {
            #[inline(always)]
            fn from(variant: WUCF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WUCF`"]
        pub type WUCF_R = crate::R<bool, WUCF_A>;
        impl WUCF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, WUCF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(WUCF_A::CLEAR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == WUCF_A::CLEAR
            }
        }
        #[doc = "Write proxy for field `WUCF`"]
        pub struct WUCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WUCF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the WUF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(WUCF_A::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Character match clear flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CMCF_A {
            #[doc = "1: Clears the CMF flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<CMCF_A> for bool {
            #[inline(always)]
            fn from(variant: CMCF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CMCF`"]
        pub type CMCF_R = crate::R<bool, CMCF_A>;
        impl CMCF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, CMCF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(CMCF_A::CLEAR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == CMCF_A::CLEAR
            }
        }
        #[doc = "Write proxy for field `CMCF`"]
        pub struct CMCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CMCF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the CMF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CMCF_A::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "End of timeout clear flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EOBCF_A {
            #[doc = "1: Clears the EOBF flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<EOBCF_A> for bool {
            #[inline(always)]
            fn from(variant: EOBCF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EOBCF`"]
        pub type EOBCF_R = crate::R<bool, EOBCF_A>;
        impl EOBCF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, EOBCF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(EOBCF_A::CLEAR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == EOBCF_A::CLEAR
            }
        }
        #[doc = "Write proxy for field `EOBCF`"]
        pub struct EOBCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOBCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EOBCF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the EOBF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(EOBCF_A::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Receiver timeout clear flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RTOCF_A {
            #[doc = "1: Clears the RTOF flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<RTOCF_A> for bool {
            #[inline(always)]
            fn from(variant: RTOCF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RTOCF`"]
        pub type RTOCF_R = crate::R<bool, RTOCF_A>;
        impl RTOCF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, RTOCF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(RTOCF_A::CLEAR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == RTOCF_A::CLEAR
            }
        }
        #[doc = "Write proxy for field `RTOCF`"]
        pub struct RTOCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTOCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RTOCF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the RTOF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RTOCF_A::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "CTS clear flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CTSCF_A {
            #[doc = "1: Clears the CTSIF flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<CTSCF_A> for bool {
            #[inline(always)]
            fn from(variant: CTSCF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CTSCF`"]
        pub type CTSCF_R = crate::R<bool, CTSCF_A>;
        impl CTSCF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, CTSCF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(CTSCF_A::CLEAR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == CTSCF_A::CLEAR
            }
        }
        #[doc = "Write proxy for field `CTSCF`"]
        pub struct CTSCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTSCF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the CTSIF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(CTSCF_A::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "LIN break detection clear flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LBDCF_A {
            #[doc = "1: Clears the LBDF flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<LBDCF_A> for bool {
            #[inline(always)]
            fn from(variant: LBDCF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LBDCF`"]
        pub type LBDCF_R = crate::R<bool, LBDCF_A>;
        impl LBDCF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, LBDCF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(LBDCF_A::CLEAR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == LBDCF_A::CLEAR
            }
        }
        #[doc = "Write proxy for field `LBDCF`"]
        pub struct LBDCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBDCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LBDCF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the LBDF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(LBDCF_A::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Transmission complete clear flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TCCF_A {
            #[doc = "1: Clears the TC flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<TCCF_A> for bool {
            #[inline(always)]
            fn from(variant: TCCF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TCCF`"]
        pub type TCCF_R = crate::R<bool, TCCF_A>;
        impl TCCF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, TCCF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(TCCF_A::CLEAR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == TCCF_A::CLEAR
            }
        }
        #[doc = "Write proxy for field `TCCF`"]
        pub struct TCCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TCCF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the TC flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(TCCF_A::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Idle line detected clear flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IDLECF_A {
            #[doc = "1: Clears the IDLE flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<IDLECF_A> for bool {
            #[inline(always)]
            fn from(variant: IDLECF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IDLECF`"]
        pub type IDLECF_R = crate::R<bool, IDLECF_A>;
        impl IDLECF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, IDLECF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(IDLECF_A::CLEAR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == IDLECF_A::CLEAR
            }
        }
        #[doc = "Write proxy for field `IDLECF`"]
        pub struct IDLECF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDLECF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IDLECF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the IDLE flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(IDLECF_A::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Overrun error clear flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ORECF_A {
            #[doc = "1: Clears the ORE flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<ORECF_A> for bool {
            #[inline(always)]
            fn from(variant: ORECF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ORECF`"]
        pub type ORECF_R = crate::R<bool, ORECF_A>;
        impl ORECF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, ORECF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(ORECF_A::CLEAR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == ORECF_A::CLEAR
            }
        }
        #[doc = "Write proxy for field `ORECF`"]
        pub struct ORECF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ORECF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ORECF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the ORE flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(ORECF_A::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Noise detected clear flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NCF_A {
            #[doc = "1: Clears the NF flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<NCF_A> for bool {
            #[inline(always)]
            fn from(variant: NCF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `NCF`"]
        pub type NCF_R = crate::R<bool, NCF_A>;
        impl NCF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, NCF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(NCF_A::CLEAR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == NCF_A::CLEAR
            }
        }
        #[doc = "Write proxy for field `NCF`"]
        pub struct NCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NCF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: NCF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the NF flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(NCF_A::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Framing error clear flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FECF_A {
            #[doc = "1: Clears the FE flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<FECF_A> for bool {
            #[inline(always)]
            fn from(variant: FECF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FECF`"]
        pub type FECF_R = crate::R<bool, FECF_A>;
        impl FECF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, FECF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(FECF_A::CLEAR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == FECF_A::CLEAR
            }
        }
        #[doc = "Write proxy for field `FECF`"]
        pub struct FECF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FECF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FECF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the FE flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FECF_A::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Parity error clear flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PECF_A {
            #[doc = "1: Clears the PE flag in the ISR register"]
            CLEAR = 1,
        }
        impl From<PECF_A> for bool {
            #[inline(always)]
            fn from(variant: PECF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PECF`"]
        pub type PECF_R = crate::R<bool, PECF_A>;
        impl PECF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, PECF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(PECF_A::CLEAR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == PECF_A::CLEAR
            }
        }
        #[doc = "Write proxy for field `PECF`"]
        pub struct PECF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PECF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PECF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears the PE flag in the ISR register"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(PECF_A::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 20 - Wakeup from Stop mode clear flag"]
            #[inline(always)]
            pub fn wucf(&self) -> WUCF_R {
                WUCF_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Character match clear flag"]
            #[inline(always)]
            pub fn cmcf(&self) -> CMCF_R {
                CMCF_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 12 - End of timeout clear flag"]
            #[inline(always)]
            pub fn eobcf(&self) -> EOBCF_R {
                EOBCF_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Receiver timeout clear flag"]
            #[inline(always)]
            pub fn rtocf(&self) -> RTOCF_R {
                RTOCF_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CTS clear flag"]
            #[inline(always)]
            pub fn ctscf(&self) -> CTSCF_R {
                CTSCF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - LIN break detection clear flag"]
            #[inline(always)]
            pub fn lbdcf(&self) -> LBDCF_R {
                LBDCF_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Transmission complete clear flag"]
            #[inline(always)]
            pub fn tccf(&self) -> TCCF_R {
                TCCF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Idle line detected clear flag"]
            #[inline(always)]
            pub fn idlecf(&self) -> IDLECF_R {
                IDLECF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Overrun error clear flag"]
            #[inline(always)]
            pub fn orecf(&self) -> ORECF_R {
                ORECF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Noise detected clear flag"]
            #[inline(always)]
            pub fn ncf(&self) -> NCF_R {
                NCF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Framing error clear flag"]
            #[inline(always)]
            pub fn fecf(&self) -> FECF_R {
                FECF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Parity error clear flag"]
            #[inline(always)]
            pub fn pecf(&self) -> PECF_R {
                PECF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 20 - Wakeup from Stop mode clear flag"]
            #[inline(always)]
            pub fn wucf(&mut self) -> WUCF_W {
                WUCF_W { w: self }
            }
            #[doc = "Bit 17 - Character match clear flag"]
            #[inline(always)]
            pub fn cmcf(&mut self) -> CMCF_W {
                CMCF_W { w: self }
            }
            #[doc = "Bit 12 - End of timeout clear flag"]
            #[inline(always)]
            pub fn eobcf(&mut self) -> EOBCF_W {
                EOBCF_W { w: self }
            }
            #[doc = "Bit 11 - Receiver timeout clear flag"]
            #[inline(always)]
            pub fn rtocf(&mut self) -> RTOCF_W {
                RTOCF_W { w: self }
            }
            #[doc = "Bit 9 - CTS clear flag"]
            #[inline(always)]
            pub fn ctscf(&mut self) -> CTSCF_W {
                CTSCF_W { w: self }
            }
            #[doc = "Bit 8 - LIN break detection clear flag"]
            #[inline(always)]
            pub fn lbdcf(&mut self) -> LBDCF_W {
                LBDCF_W { w: self }
            }
            #[doc = "Bit 6 - Transmission complete clear flag"]
            #[inline(always)]
            pub fn tccf(&mut self) -> TCCF_W {
                TCCF_W { w: self }
            }
            #[doc = "Bit 4 - Idle line detected clear flag"]
            #[inline(always)]
            pub fn idlecf(&mut self) -> IDLECF_W {
                IDLECF_W { w: self }
            }
            #[doc = "Bit 3 - Overrun error clear flag"]
            #[inline(always)]
            pub fn orecf(&mut self) -> ORECF_W {
                ORECF_W { w: self }
            }
            #[doc = "Bit 2 - Noise detected clear flag"]
            #[inline(always)]
            pub fn ncf(&mut self) -> NCF_W {
                NCF_W { w: self }
            }
            #[doc = "Bit 1 - Framing error clear flag"]
            #[inline(always)]
            pub fn fecf(&mut self) -> FECF_W {
                FECF_W { w: self }
            }
            #[doc = "Bit 0 - Parity error clear flag"]
            #[inline(always)]
            pub fn pecf(&mut self) -> PECF_W {
                PECF_W { w: self }
            }
        }
    }
    #[doc = "Receive data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rdr](rdr) module"]
    pub type RDR = crate::Reg<u32, _RDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RDR;
    #[doc = "`read()` method returns [rdr::R](rdr::R) reader structure"]
    impl crate::Readable for RDR {}
    #[doc = "Receive data register"]
    pub mod rdr {
        #[doc = "Reader of register RDR"]
        pub type R = crate::R<u32, super::RDR>;
        #[doc = "Reader of field `RDR`"]
        pub type RDR_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:8 - Receive data value"]
            #[inline(always)]
            pub fn rdr(&self) -> RDR_R {
                RDR_R::new((self.bits & 0x01ff) as u16)
            }
        }
    }
    #[doc = "Transmit data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tdr](tdr) module"]
    pub type TDR = crate::Reg<u32, _TDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TDR;
    #[doc = "`read()` method returns [tdr::R](tdr::R) reader structure"]
    impl crate::Readable for TDR {}
    #[doc = "`write(|w| ..)` method takes [tdr::W](tdr::W) writer structure"]
    impl crate::Writable for TDR {}
    #[doc = "Transmit data register"]
    pub mod tdr {
        #[doc = "Reader of register TDR"]
        pub type R = crate::R<u32, super::TDR>;
        #[doc = "Writer for register TDR"]
        pub type W = crate::W<u32, super::TDR>;
        #[doc = "Register TDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TDR`"]
        pub type TDR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `TDR`"]
        pub struct TDR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01ff) | ((value as u32) & 0x01ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:8 - Transmit data value"]
            #[inline(always)]
            pub fn tdr(&self) -> TDR_R {
                TDR_R::new((self.bits & 0x01ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:8 - Transmit data value"]
            #[inline(always)]
            pub fn tdr(&mut self) -> TDR_W {
                TDR_W { w: self }
            }
        }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct USART2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART2 {}
impl USART2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        0x4000_4400 as *const _
    }
}
impl Deref for USART2 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*USART2::ptr() }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct USART3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART3 {}
impl USART3 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        0x4000_4800 as *const _
    }
}
impl Deref for USART3 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*USART3::ptr() }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct USART4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART4 {}
impl USART4 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        0x4000_4c00 as *const _
    }
}
impl Deref for USART4 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*USART4::ptr() }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct USART6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART6 {}
impl USART6 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        0x4001_1400 as *const _
    }
}
impl Deref for USART6 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*USART6::ptr() }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct USART5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART5 {}
impl USART5 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        0x4000_5000 as *const _
    }
}
impl Deref for USART5 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*USART5::ptr() }
    }
}
#[doc = "Real-time clock"]
pub struct RTC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RTC {}
impl RTC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rtc::RegisterBlock {
        0x4000_2800 as *const _
    }
}
impl Deref for RTC {
    type Target = rtc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*RTC::ptr() }
    }
}
#[doc = "Real-time clock"]
pub mod rtc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - time register"]
        pub tr: TR,
        #[doc = "0x04 - date register"]
        pub dr: DR,
        #[doc = "0x08 - control register"]
        pub cr: CR,
        #[doc = "0x0c - initialization and status register"]
        pub isr: ISR,
        #[doc = "0x10 - prescaler register"]
        pub prer: PRER,
        _reserved5: [u8; 8usize],
        #[doc = "0x1c - alarm A register"]
        pub alrmar: ALRMAR,
        _reserved6: [u8; 4usize],
        #[doc = "0x24 - write protection register"]
        pub wpr: WPR,
        #[doc = "0x28 - sub second register"]
        pub ssr: SSR,
        #[doc = "0x2c - shift control register"]
        pub shiftr: SHIFTR,
        #[doc = "0x30 - timestamp time register"]
        pub tstr: TSTR,
        #[doc = "0x34 - timestamp date register"]
        pub tsdr: TSDR,
        #[doc = "0x38 - time-stamp sub second register"]
        pub tsssr: TSSSR,
        #[doc = "0x3c - calibration register"]
        pub calr: CALR,
        #[doc = "0x40 - tamper and alternate function configuration register"]
        pub tafcr: TAFCR,
        #[doc = "0x44 - alarm A sub second register"]
        pub alrmassr: ALRMASSR,
        _reserved15: [u8; 8usize],
        #[doc = "0x50 - backup register"]
        pub bkpr: [BKPR; 5],
    }
    #[doc = "time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tr](tr) module"]
    pub type TR = crate::Reg<u32, _TR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TR;
    #[doc = "`read()` method returns [tr::R](tr::R) reader structure"]
    impl crate::Readable for TR {}
    #[doc = "`write(|w| ..)` method takes [tr::W](tr::W) writer structure"]
    impl crate::Writable for TR {}
    #[doc = "time register"]
    pub mod tr {
        #[doc = "Reader of register TR"]
        pub type R = crate::R<u32, super::TR>;
        #[doc = "Writer for register TR"]
        pub type W = crate::W<u32, super::TR>;
        #[doc = "Register TR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PM`"]
        pub type PM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PM`"]
        pub struct PM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `HT`"]
        pub type HT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HT`"]
        pub struct HT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `HU`"]
        pub type HU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HU`"]
        pub struct HU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MNT`"]
        pub type MNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNT`"]
        pub struct MNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MNU`"]
        pub type MNU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNU`"]
        pub struct MNU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ST`"]
        pub type ST_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ST`"]
        pub struct ST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ST_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SU`"]
        pub type SU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SU`"]
        pub struct SU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&self) -> PM_R {
                PM_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format"]
            #[inline(always)]
            pub fn ht(&self) -> HT_R {
                HT_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 16:19 - Hour units in BCD format"]
            #[inline(always)]
            pub fn hu(&self) -> HU_R {
                HU_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format"]
            #[inline(always)]
            pub fn mnt(&self) -> MNT_R {
                MNT_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 8:11 - Minute units in BCD format"]
            #[inline(always)]
            pub fn mnu(&self) -> MNU_R {
                MNU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:6 - Second tens in BCD format"]
            #[inline(always)]
            pub fn st(&self) -> ST_R {
                ST_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 0:3 - Second units in BCD format"]
            #[inline(always)]
            pub fn su(&self) -> SU_R {
                SU_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&mut self) -> PM_W {
                PM_W { w: self }
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format"]
            #[inline(always)]
            pub fn ht(&mut self) -> HT_W {
                HT_W { w: self }
            }
            #[doc = "Bits 16:19 - Hour units in BCD format"]
            #[inline(always)]
            pub fn hu(&mut self) -> HU_W {
                HU_W { w: self }
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format"]
            #[inline(always)]
            pub fn mnt(&mut self) -> MNT_W {
                MNT_W { w: self }
            }
            #[doc = "Bits 8:11 - Minute units in BCD format"]
            #[inline(always)]
            pub fn mnu(&mut self) -> MNU_W {
                MNU_W { w: self }
            }
            #[doc = "Bits 4:6 - Second tens in BCD format"]
            #[inline(always)]
            pub fn st(&mut self) -> ST_W {
                ST_W { w: self }
            }
            #[doc = "Bits 0:3 - Second units in BCD format"]
            #[inline(always)]
            pub fn su(&mut self) -> SU_W {
                SU_W { w: self }
            }
        }
    }
    #[doc = "date register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "`write(|w| ..)` method takes [dr::W](dr::W) writer structure"]
    impl crate::Writable for DR {}
    #[doc = "date register"]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Writer for register DR"]
        pub type W = crate::W<u32, super::DR>;
        #[doc = "Register DR `reset()`'s with value 0x2101"]
        impl crate::ResetValue for super::DR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x2101
            }
        }
        #[doc = "Reader of field `YT`"]
        pub type YT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `YT`"]
        pub struct YT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> YT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `YU`"]
        pub type YU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `YU`"]
        pub struct YU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> YU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `WDU`"]
        pub type WDU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WDU`"]
        pub struct WDU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `MT`"]
        pub type MT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MT`"]
        pub struct MT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MU`"]
        pub type MU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MU`"]
        pub struct MU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DT`"]
        pub type DT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DT`"]
        pub struct DT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DU`"]
        pub type DU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DU`"]
        pub struct DU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:23 - Year tens in BCD format"]
            #[inline(always)]
            pub fn yt(&self) -> YT_R {
                YT_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Year units in BCD format"]
            #[inline(always)]
            pub fn yu(&self) -> YU_R {
                YU_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 13:15 - Week day units"]
            #[inline(always)]
            pub fn wdu(&self) -> WDU_R {
                WDU_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - Month tens in BCD format"]
            #[inline(always)]
            pub fn mt(&self) -> MT_R {
                MT_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 8:11 - Month units in BCD format"]
            #[inline(always)]
            pub fn mu(&self) -> MU_R {
                MU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&self) -> DT_R {
                DT_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 0:3 - Date units in BCD format"]
            #[inline(always)]
            pub fn du(&self) -> DU_R {
                DU_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 20:23 - Year tens in BCD format"]
            #[inline(always)]
            pub fn yt(&mut self) -> YT_W {
                YT_W { w: self }
            }
            #[doc = "Bits 16:19 - Year units in BCD format"]
            #[inline(always)]
            pub fn yu(&mut self) -> YU_W {
                YU_W { w: self }
            }
            #[doc = "Bits 13:15 - Week day units"]
            #[inline(always)]
            pub fn wdu(&mut self) -> WDU_W {
                WDU_W { w: self }
            }
            #[doc = "Bit 12 - Month tens in BCD format"]
            #[inline(always)]
            pub fn mt(&mut self) -> MT_W {
                MT_W { w: self }
            }
            #[doc = "Bits 8:11 - Month units in BCD format"]
            #[inline(always)]
            pub fn mu(&mut self) -> MU_W {
                MU_W { w: self }
            }
            #[doc = "Bits 4:5 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&mut self) -> DT_W {
                DT_W { w: self }
            }
            #[doc = "Bits 0:3 - Date units in BCD format"]
            #[inline(always)]
            pub fn du(&mut self) -> DU_W {
                DU_W { w: self }
            }
        }
    }
    #[doc = "control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TSEDGE`"]
        pub type TSEDGE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSEDGE`"]
        pub struct TSEDGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSEDGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `REFCKON`"]
        pub type REFCKON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `REFCKON`"]
        pub struct REFCKON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REFCKON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `BYPSHAD`"]
        pub type BYPSHAD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BYPSHAD`"]
        pub struct BYPSHAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BYPSHAD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `FMT`"]
        pub type FMT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FMT`"]
        pub struct FMT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FMT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `ALRAE`"]
        pub type ALRAE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALRAE`"]
        pub struct ALRAE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRAE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TSE`"]
        pub type TSE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSE`"]
        pub struct TSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `ALRAIE`"]
        pub type ALRAIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALRAIE`"]
        pub struct ALRAIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRAIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TSIE`"]
        pub type TSIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSIE`"]
        pub struct TSIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Write proxy for field `ADD1H`"]
        pub struct ADD1H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD1H_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Write proxy for field `SUB1H`"]
        pub struct SUB1H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SUB1H_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `COSEL`"]
        pub type COSEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COSEL`"]
        pub struct COSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `POL`"]
        pub type POL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `POL`"]
        pub struct POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `OSEL`"]
        pub type OSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSEL`"]
        pub struct OSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 21)) | (((value as u32) & 0x03) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `COE`"]
        pub type COE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COE`"]
        pub struct COE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - Time-stamp event active edge"]
            #[inline(always)]
            pub fn tsedge(&self) -> TSEDGE_R {
                TSEDGE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RTC_REFIN reference clock detection enable (50 or 60 Hz)"]
            #[inline(always)]
            pub fn refckon(&self) -> REFCKON_R {
                REFCKON_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Bypass the shadow registers"]
            #[inline(always)]
            pub fn bypshad(&self) -> BYPSHAD_R {
                BYPSHAD_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Hour format"]
            #[inline(always)]
            pub fn fmt(&self) -> FMT_R {
                FMT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Alarm A enable"]
            #[inline(always)]
            pub fn alrae(&self) -> ALRAE_R {
                ALRAE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 11 - timestamp enable"]
            #[inline(always)]
            pub fn tse(&self) -> TSE_R {
                TSE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Alarm A interrupt enable"]
            #[inline(always)]
            pub fn alraie(&self) -> ALRAIE_R {
                ALRAIE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Time-stamp interrupt enable"]
            #[inline(always)]
            pub fn tsie(&self) -> TSIE_R {
                TSIE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Backup"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Calibration output selection"]
            #[inline(always)]
            pub fn cosel(&self) -> COSEL_R {
                COSEL_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Output polarity"]
            #[inline(always)]
            pub fn pol(&self) -> POL_R {
                POL_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bits 21:22 - Output selection"]
            #[inline(always)]
            pub fn osel(&self) -> OSEL_R {
                OSEL_R::new(((self.bits >> 21) & 0x03) as u8)
            }
            #[doc = "Bit 23 - Calibration output enable"]
            #[inline(always)]
            pub fn coe(&self) -> COE_R {
                COE_R::new(((self.bits >> 23) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - Time-stamp event active edge"]
            #[inline(always)]
            pub fn tsedge(&mut self) -> TSEDGE_W {
                TSEDGE_W { w: self }
            }
            #[doc = "Bit 4 - RTC_REFIN reference clock detection enable (50 or 60 Hz)"]
            #[inline(always)]
            pub fn refckon(&mut self) -> REFCKON_W {
                REFCKON_W { w: self }
            }
            #[doc = "Bit 5 - Bypass the shadow registers"]
            #[inline(always)]
            pub fn bypshad(&mut self) -> BYPSHAD_W {
                BYPSHAD_W { w: self }
            }
            #[doc = "Bit 6 - Hour format"]
            #[inline(always)]
            pub fn fmt(&mut self) -> FMT_W {
                FMT_W { w: self }
            }
            #[doc = "Bit 8 - Alarm A enable"]
            #[inline(always)]
            pub fn alrae(&mut self) -> ALRAE_W {
                ALRAE_W { w: self }
            }
            #[doc = "Bit 11 - timestamp enable"]
            #[inline(always)]
            pub fn tse(&mut self) -> TSE_W {
                TSE_W { w: self }
            }
            #[doc = "Bit 12 - Alarm A interrupt enable"]
            #[inline(always)]
            pub fn alraie(&mut self) -> ALRAIE_W {
                ALRAIE_W { w: self }
            }
            #[doc = "Bit 15 - Time-stamp interrupt enable"]
            #[inline(always)]
            pub fn tsie(&mut self) -> TSIE_W {
                TSIE_W { w: self }
            }
            #[doc = "Bit 16 - Add 1 hour (summer time change)"]
            #[inline(always)]
            pub fn add1h(&mut self) -> ADD1H_W {
                ADD1H_W { w: self }
            }
            #[doc = "Bit 17 - Subtract 1 hour (winter time change)"]
            #[inline(always)]
            pub fn sub1h(&mut self) -> SUB1H_W {
                SUB1H_W { w: self }
            }
            #[doc = "Bit 18 - Backup"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
            #[doc = "Bit 19 - Calibration output selection"]
            #[inline(always)]
            pub fn cosel(&mut self) -> COSEL_W {
                COSEL_W { w: self }
            }
            #[doc = "Bit 20 - Output polarity"]
            #[inline(always)]
            pub fn pol(&mut self) -> POL_W {
                POL_W { w: self }
            }
            #[doc = "Bits 21:22 - Output selection"]
            #[inline(always)]
            pub fn osel(&mut self) -> OSEL_W {
                OSEL_W { w: self }
            }
            #[doc = "Bit 23 - Calibration output enable"]
            #[inline(always)]
            pub fn coe(&mut self) -> COE_W {
                COE_W { w: self }
            }
        }
    }
    #[doc = "initialization and status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr](isr) module"]
    pub type ISR = crate::Reg<u32, _ISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISR;
    #[doc = "`read()` method returns [isr::R](isr::R) reader structure"]
    impl crate::Readable for ISR {}
    #[doc = "`write(|w| ..)` method takes [isr::W](isr::W) writer structure"]
    impl crate::Writable for ISR {}
    #[doc = "initialization and status register"]
    pub mod isr {
        #[doc = "Reader of register ISR"]
        pub type R = crate::R<u32, super::ISR>;
        #[doc = "Writer for register ISR"]
        pub type W = crate::W<u32, super::ISR>;
        #[doc = "Register ISR `reset()`'s with value 0x07"]
        impl crate::ResetValue for super::ISR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x07
            }
        }
        #[doc = "Reader of field `ALRAWF`"]
        pub type ALRAWF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SHPF`"]
        pub type SHPF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SHPF`"]
        pub struct SHPF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SHPF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `INITS`"]
        pub type INITS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RSF`"]
        pub type RSF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RSF`"]
        pub struct RSF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `INITF`"]
        pub type INITF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `INIT`"]
        pub type INIT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `INIT`"]
        pub struct INIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `ALRAF`"]
        pub type ALRAF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALRAF`"]
        pub struct ALRAF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRAF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TSF`"]
        pub type TSF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSF`"]
        pub struct TSF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `TSOVF`"]
        pub type TSOVF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSOVF`"]
        pub struct TSOVF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSOVF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP1F`"]
        pub type TAMP1F_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP1F`"]
        pub struct TAMP1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP1F_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP2F`"]
        pub type TAMP2F_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP2F`"]
        pub struct TAMP2F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP2F_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `RECALPF`"]
        pub type RECALPF_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - Alarm A write flag"]
            #[inline(always)]
            pub fn alrawf(&self) -> ALRAWF_R {
                ALRAWF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 3 - Shift operation pending"]
            #[inline(always)]
            pub fn shpf(&self) -> SHPF_R {
                SHPF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Initialization status flag"]
            #[inline(always)]
            pub fn inits(&self) -> INITS_R {
                INITS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Registers synchronization flag"]
            #[inline(always)]
            pub fn rsf(&self) -> RSF_R {
                RSF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Initialization flag"]
            #[inline(always)]
            pub fn initf(&self) -> INITF_R {
                INITF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Initialization mode"]
            #[inline(always)]
            pub fn init(&self) -> INIT_R {
                INIT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Alarm A flag"]
            #[inline(always)]
            pub fn alraf(&self) -> ALRAF_R {
                ALRAF_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Time-stamp flag"]
            #[inline(always)]
            pub fn tsf(&self) -> TSF_R {
                TSF_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Time-stamp overflow flag"]
            #[inline(always)]
            pub fn tsovf(&self) -> TSOVF_R {
                TSOVF_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - RTC_TAMP1 detection flag"]
            #[inline(always)]
            pub fn tamp1f(&self) -> TAMP1F_R {
                TAMP1F_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - RTC_TAMP2 detection flag"]
            #[inline(always)]
            pub fn tamp2f(&self) -> TAMP2F_R {
                TAMP2F_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Recalibration pending Flag"]
            #[inline(always)]
            pub fn recalpf(&self) -> RECALPF_R {
                RECALPF_R::new(((self.bits >> 16) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - Shift operation pending"]
            #[inline(always)]
            pub fn shpf(&mut self) -> SHPF_W {
                SHPF_W { w: self }
            }
            #[doc = "Bit 5 - Registers synchronization flag"]
            #[inline(always)]
            pub fn rsf(&mut self) -> RSF_W {
                RSF_W { w: self }
            }
            #[doc = "Bit 7 - Initialization mode"]
            #[inline(always)]
            pub fn init(&mut self) -> INIT_W {
                INIT_W { w: self }
            }
            #[doc = "Bit 8 - Alarm A flag"]
            #[inline(always)]
            pub fn alraf(&mut self) -> ALRAF_W {
                ALRAF_W { w: self }
            }
            #[doc = "Bit 11 - Time-stamp flag"]
            #[inline(always)]
            pub fn tsf(&mut self) -> TSF_W {
                TSF_W { w: self }
            }
            #[doc = "Bit 12 - Time-stamp overflow flag"]
            #[inline(always)]
            pub fn tsovf(&mut self) -> TSOVF_W {
                TSOVF_W { w: self }
            }
            #[doc = "Bit 13 - RTC_TAMP1 detection flag"]
            #[inline(always)]
            pub fn tamp1f(&mut self) -> TAMP1F_W {
                TAMP1F_W { w: self }
            }
            #[doc = "Bit 14 - RTC_TAMP2 detection flag"]
            #[inline(always)]
            pub fn tamp2f(&mut self) -> TAMP2F_W {
                TAMP2F_W { w: self }
            }
        }
    }
    #[doc = "prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [prer](prer) module"]
    pub type PRER = crate::Reg<u32, _PRER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PRER;
    #[doc = "`read()` method returns [prer::R](prer::R) reader structure"]
    impl crate::Readable for PRER {}
    #[doc = "`write(|w| ..)` method takes [prer::W](prer::W) writer structure"]
    impl crate::Writable for PRER {}
    #[doc = "prescaler register"]
    pub mod prer {
        #[doc = "Reader of register PRER"]
        pub type R = crate::R<u32, super::PRER>;
        #[doc = "Writer for register PRER"]
        pub type W = crate::W<u32, super::PRER>;
        #[doc = "Register PRER `reset()`'s with value 0x007f_00ff"]
        impl crate::ResetValue for super::PRER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x007f_00ff
            }
        }
        #[doc = "Reader of field `PREDIV_A`"]
        pub type PREDIV_A_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PREDIV_A`"]
        pub struct PREDIV_A_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PREDIV_A_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 16)) | (((value as u32) & 0x7f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PREDIV_S`"]
        pub type PREDIV_S_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PREDIV_S`"]
        pub struct PREDIV_S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PREDIV_S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7fff) | ((value as u32) & 0x7fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:22 - Asynchronous prescaler factor"]
            #[inline(always)]
            pub fn prediv_a(&self) -> PREDIV_A_R {
                PREDIV_A_R::new(((self.bits >> 16) & 0x7f) as u8)
            }
            #[doc = "Bits 0:14 - Synchronous prescaler factor"]
            #[inline(always)]
            pub fn prediv_s(&self) -> PREDIV_S_R {
                PREDIV_S_R::new((self.bits & 0x7fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:22 - Asynchronous prescaler factor"]
            #[inline(always)]
            pub fn prediv_a(&mut self) -> PREDIV_A_W {
                PREDIV_A_W { w: self }
            }
            #[doc = "Bits 0:14 - Synchronous prescaler factor"]
            #[inline(always)]
            pub fn prediv_s(&mut self) -> PREDIV_S_W {
                PREDIV_S_W { w: self }
            }
        }
    }
    #[doc = "alarm A register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alrmar](alrmar) module"]
    pub type ALRMAR = crate::Reg<u32, _ALRMAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALRMAR;
    #[doc = "`read()` method returns [alrmar::R](alrmar::R) reader structure"]
    impl crate::Readable for ALRMAR {}
    #[doc = "`write(|w| ..)` method takes [alrmar::W](alrmar::W) writer structure"]
    impl crate::Writable for ALRMAR {}
    #[doc = "alarm A register"]
    pub mod alrmar {
        #[doc = "Reader of register ALRMAR"]
        pub type R = crate::R<u32, super::ALRMAR>;
        #[doc = "Writer for register ALRMAR"]
        pub type W = crate::W<u32, super::ALRMAR>;
        #[doc = "Register ALRMAR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ALRMAR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MSK4`"]
        pub type MSK4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK4`"]
        pub struct MSK4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `WDSEL`"]
        pub type WDSEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WDSEL`"]
        pub struct WDSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `DT`"]
        pub type DT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DT`"]
        pub struct DT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `DU`"]
        pub type DU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DU`"]
        pub struct DU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `MSK3`"]
        pub type MSK3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK3`"]
        pub struct MSK3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `PM`"]
        pub type PM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PM`"]
        pub struct PM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `HT`"]
        pub type HT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HT`"]
        pub struct HT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `HU`"]
        pub type HU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HU`"]
        pub struct HU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MSK2`"]
        pub type MSK2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK2`"]
        pub struct MSK2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `MNT`"]
        pub type MNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNT`"]
        pub struct MNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MNU`"]
        pub type MNU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNU`"]
        pub struct MNU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MSK1`"]
        pub type MSK1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK1`"]
        pub struct MSK1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `ST`"]
        pub type ST_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ST`"]
        pub struct ST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ST_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SU`"]
        pub type SU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SU`"]
        pub struct SU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - Alarm A date mask"]
            #[inline(always)]
            pub fn msk4(&self) -> MSK4_R {
                MSK4_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Week day selection"]
            #[inline(always)]
            pub fn wdsel(&self) -> WDSEL_R {
                WDSEL_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bits 28:29 - Date tens in BCD format."]
            #[inline(always)]
            pub fn dt(&self) -> DT_R {
                DT_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 24:27 - Date units or day in BCD format."]
            #[inline(always)]
            pub fn du(&self) -> DU_R {
                DU_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bit 23 - Alarm A hours mask"]
            #[inline(always)]
            pub fn msk3(&self) -> MSK3_R {
                MSK3_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&self) -> PM_R {
                PM_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format."]
            #[inline(always)]
            pub fn ht(&self) -> HT_R {
                HT_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 16:19 - Hour units in BCD format."]
            #[inline(always)]
            pub fn hu(&self) -> HU_R {
                HU_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bit 15 - Alarm A minutes mask"]
            #[inline(always)]
            pub fn msk2(&self) -> MSK2_R {
                MSK2_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format."]
            #[inline(always)]
            pub fn mnt(&self) -> MNT_R {
                MNT_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 8:11 - Minute units in BCD format."]
            #[inline(always)]
            pub fn mnu(&self) -> MNU_R {
                MNU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 7 - Alarm A seconds mask"]
            #[inline(always)]
            pub fn msk1(&self) -> MSK1_R {
                MSK1_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Second tens in BCD format."]
            #[inline(always)]
            pub fn st(&self) -> ST_R {
                ST_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 0:3 - Second units in BCD format."]
            #[inline(always)]
            pub fn su(&self) -> SU_R {
                SU_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 31 - Alarm A date mask"]
            #[inline(always)]
            pub fn msk4(&mut self) -> MSK4_W {
                MSK4_W { w: self }
            }
            #[doc = "Bit 30 - Week day selection"]
            #[inline(always)]
            pub fn wdsel(&mut self) -> WDSEL_W {
                WDSEL_W { w: self }
            }
            #[doc = "Bits 28:29 - Date tens in BCD format."]
            #[inline(always)]
            pub fn dt(&mut self) -> DT_W {
                DT_W { w: self }
            }
            #[doc = "Bits 24:27 - Date units or day in BCD format."]
            #[inline(always)]
            pub fn du(&mut self) -> DU_W {
                DU_W { w: self }
            }
            #[doc = "Bit 23 - Alarm A hours mask"]
            #[inline(always)]
            pub fn msk3(&mut self) -> MSK3_W {
                MSK3_W { w: self }
            }
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&mut self) -> PM_W {
                PM_W { w: self }
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format."]
            #[inline(always)]
            pub fn ht(&mut self) -> HT_W {
                HT_W { w: self }
            }
            #[doc = "Bits 16:19 - Hour units in BCD format."]
            #[inline(always)]
            pub fn hu(&mut self) -> HU_W {
                HU_W { w: self }
            }
            #[doc = "Bit 15 - Alarm A minutes mask"]
            #[inline(always)]
            pub fn msk2(&mut self) -> MSK2_W {
                MSK2_W { w: self }
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format."]
            #[inline(always)]
            pub fn mnt(&mut self) -> MNT_W {
                MNT_W { w: self }
            }
            #[doc = "Bits 8:11 - Minute units in BCD format."]
            #[inline(always)]
            pub fn mnu(&mut self) -> MNU_W {
                MNU_W { w: self }
            }
            #[doc = "Bit 7 - Alarm A seconds mask"]
            #[inline(always)]
            pub fn msk1(&mut self) -> MSK1_W {
                MSK1_W { w: self }
            }
            #[doc = "Bits 4:6 - Second tens in BCD format."]
            #[inline(always)]
            pub fn st(&mut self) -> ST_W {
                ST_W { w: self }
            }
            #[doc = "Bits 0:3 - Second units in BCD format."]
            #[inline(always)]
            pub fn su(&mut self) -> SU_W {
                SU_W { w: self }
            }
        }
    }
    #[doc = "write protection register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wpr](wpr) module"]
    pub type WPR = crate::Reg<u32, _WPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WPR;
    #[doc = "`write(|w| ..)` method takes [wpr::W](wpr::W) writer structure"]
    impl crate::Writable for WPR {}
    #[doc = "write protection register"]
    pub mod wpr {
        #[doc = "Writer for register WPR"]
        pub type W = crate::W<u32, super::WPR>;
        #[doc = "Register WPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::WPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `KEY`"]
        pub struct KEY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Write protection key"]
            #[inline(always)]
            pub fn key(&mut self) -> KEY_W {
                KEY_W { w: self }
            }
        }
    }
    #[doc = "sub second register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ssr](ssr) module"]
    pub type SSR = crate::Reg<u32, _SSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SSR;
    #[doc = "`read()` method returns [ssr::R](ssr::R) reader structure"]
    impl crate::Readable for SSR {}
    #[doc = "sub second register"]
    pub mod ssr {
        #[doc = "Reader of register SSR"]
        pub type R = crate::R<u32, super::SSR>;
        #[doc = "Reader of field `SS`"]
        pub type SS_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Sub second value"]
            #[inline(always)]
            pub fn ss(&self) -> SS_R {
                SS_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "shift control register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [shiftr](shiftr) module"]
    pub type SHIFTR = crate::Reg<u32, _SHIFTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SHIFTR;
    #[doc = "`write(|w| ..)` method takes [shiftr::W](shiftr::W) writer structure"]
    impl crate::Writable for SHIFTR {}
    #[doc = "shift control register"]
    pub mod shiftr {
        #[doc = "Writer for register SHIFTR"]
        pub type W = crate::W<u32, super::SHIFTR>;
        #[doc = "Register SHIFTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SHIFTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `ADD1S`"]
        pub struct ADD1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD1S_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Write proxy for field `SUBFS`"]
        pub struct SUBFS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SUBFS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7fff) | ((value as u32) & 0x7fff);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 31 - Add one second"]
            #[inline(always)]
            pub fn add1s(&mut self) -> ADD1S_W {
                ADD1S_W { w: self }
            }
            #[doc = "Bits 0:14 - Subtract a fraction of a second"]
            #[inline(always)]
            pub fn subfs(&mut self) -> SUBFS_W {
                SUBFS_W { w: self }
            }
        }
    }
    #[doc = "timestamp time register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tstr](tstr) module"]
    pub type TSTR = crate::Reg<u32, _TSTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TSTR;
    #[doc = "`read()` method returns [tstr::R](tstr::R) reader structure"]
    impl crate::Readable for TSTR {}
    #[doc = "timestamp time register"]
    pub mod tstr {
        #[doc = "Reader of register TSTR"]
        pub type R = crate::R<u32, super::TSTR>;
        #[doc = "Reader of field `PM`"]
        pub type PM_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HT`"]
        pub type HT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HU`"]
        pub type HU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MNT`"]
        pub type MNT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MNU`"]
        pub type MNU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `ST`"]
        pub type ST_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SU`"]
        pub type SU_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&self) -> PM_R {
                PM_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format."]
            #[inline(always)]
            pub fn ht(&self) -> HT_R {
                HT_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 16:19 - Hour units in BCD format."]
            #[inline(always)]
            pub fn hu(&self) -> HU_R {
                HU_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format."]
            #[inline(always)]
            pub fn mnt(&self) -> MNT_R {
                MNT_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 8:11 - Minute units in BCD format."]
            #[inline(always)]
            pub fn mnu(&self) -> MNU_R {
                MNU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:6 - Second tens in BCD format."]
            #[inline(always)]
            pub fn st(&self) -> ST_R {
                ST_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 0:3 - Second units in BCD format."]
            #[inline(always)]
            pub fn su(&self) -> SU_R {
                SU_R::new((self.bits & 0x0f) as u8)
            }
        }
    }
    #[doc = "timestamp date register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tsdr](tsdr) module"]
    pub type TSDR = crate::Reg<u32, _TSDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TSDR;
    #[doc = "`read()` method returns [tsdr::R](tsdr::R) reader structure"]
    impl crate::Readable for TSDR {}
    #[doc = "timestamp date register"]
    pub mod tsdr {
        #[doc = "Reader of register TSDR"]
        pub type R = crate::R<u32, super::TSDR>;
        #[doc = "Reader of field `WDU`"]
        pub type WDU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MT`"]
        pub type MT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `MU`"]
        pub type MU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DT`"]
        pub type DT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DU`"]
        pub type DU_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 13:15 - Week day units"]
            #[inline(always)]
            pub fn wdu(&self) -> WDU_R {
                WDU_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - Month tens in BCD format"]
            #[inline(always)]
            pub fn mt(&self) -> MT_R {
                MT_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 8:11 - Month units in BCD format"]
            #[inline(always)]
            pub fn mu(&self) -> MU_R {
                MU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&self) -> DT_R {
                DT_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 0:3 - Date units in BCD format"]
            #[inline(always)]
            pub fn du(&self) -> DU_R {
                DU_R::new((self.bits & 0x0f) as u8)
            }
        }
    }
    #[doc = "time-stamp sub second register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tsssr](tsssr) module"]
    pub type TSSSR = crate::Reg<u32, _TSSSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TSSSR;
    #[doc = "`read()` method returns [tsssr::R](tsssr::R) reader structure"]
    impl crate::Readable for TSSSR {}
    #[doc = "time-stamp sub second register"]
    pub mod tsssr {
        #[doc = "Reader of register TSSSR"]
        pub type R = crate::R<u32, super::TSSSR>;
        #[doc = "Reader of field `SS`"]
        pub type SS_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Sub second value"]
            #[inline(always)]
            pub fn ss(&self) -> SS_R {
                SS_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "calibration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [calr](calr) module"]
    pub type CALR = crate::Reg<u32, _CALR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CALR;
    #[doc = "`read()` method returns [calr::R](calr::R) reader structure"]
    impl crate::Readable for CALR {}
    #[doc = "`write(|w| ..)` method takes [calr::W](calr::W) writer structure"]
    impl crate::Writable for CALR {}
    #[doc = "calibration register"]
    pub mod calr {
        #[doc = "Reader of register CALR"]
        pub type R = crate::R<u32, super::CALR>;
        #[doc = "Writer for register CALR"]
        pub type W = crate::W<u32, super::CALR>;
        #[doc = "Register CALR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CALR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CALP`"]
        pub type CALP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CALP`"]
        pub struct CALP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `CALW8`"]
        pub type CALW8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CALW8`"]
        pub struct CALW8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALW8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CALW16`"]
        pub type CALW16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CALW16`"]
        pub struct CALW16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALW16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `CALM`"]
        pub type CALM_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CALM`"]
        pub struct CALM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01ff) | ((value as u32) & 0x01ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Use an 8-second calibration cycle period"]
            #[inline(always)]
            pub fn calp(&self) -> CALP_R {
                CALP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Use a 16-second calibration cycle period"]
            #[inline(always)]
            pub fn calw8(&self) -> CALW8_R {
                CALW8_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Use a 16-second calibration cycle period"]
            #[inline(always)]
            pub fn calw16(&self) -> CALW16_R {
                CALW16_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bits 0:8 - Calibration minus"]
            #[inline(always)]
            pub fn calm(&self) -> CALM_R {
                CALM_R::new((self.bits & 0x01ff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 15 - Use an 8-second calibration cycle period"]
            #[inline(always)]
            pub fn calp(&mut self) -> CALP_W {
                CALP_W { w: self }
            }
            #[doc = "Bit 14 - Use a 16-second calibration cycle period"]
            #[inline(always)]
            pub fn calw8(&mut self) -> CALW8_W {
                CALW8_W { w: self }
            }
            #[doc = "Bit 13 - Use a 16-second calibration cycle period"]
            #[inline(always)]
            pub fn calw16(&mut self) -> CALW16_W {
                CALW16_W { w: self }
            }
            #[doc = "Bits 0:8 - Calibration minus"]
            #[inline(always)]
            pub fn calm(&mut self) -> CALM_W {
                CALM_W { w: self }
            }
        }
    }
    #[doc = "tamper and alternate function configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tafcr](tafcr) module"]
    pub type TAFCR = crate::Reg<u32, _TAFCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAFCR;
    #[doc = "`read()` method returns [tafcr::R](tafcr::R) reader structure"]
    impl crate::Readable for TAFCR {}
    #[doc = "`write(|w| ..)` method takes [tafcr::W](tafcr::W) writer structure"]
    impl crate::Writable for TAFCR {}
    #[doc = "tamper and alternate function configuration register"]
    pub mod tafcr {
        #[doc = "Reader of register TAFCR"]
        pub type R = crate::R<u32, super::TAFCR>;
        #[doc = "Writer for register TAFCR"]
        pub type W = crate::W<u32, super::TAFCR>;
        #[doc = "Register TAFCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TAFCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PC15MODE`"]
        pub type PC15MODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PC15MODE`"]
        pub struct PC15MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PC15MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `PC15VALUE`"]
        pub type PC15VALUE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PC15VALUE`"]
        pub struct PC15VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PC15VALUE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `PC14MODE`"]
        pub type PC14MODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PC14MODE`"]
        pub struct PC14MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PC14MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `PC14VALUE`"]
        pub type PC14VALUE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PC14VALUE`"]
        pub struct PC14VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PC14VALUE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `PC13MODE`"]
        pub type PC13MODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PC13MODE`"]
        pub struct PC13MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PC13MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `PC13VALUE`"]
        pub type PC13VALUE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PC13VALUE`"]
        pub struct PC13VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PC13VALUE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP_PUDIS`"]
        pub type TAMP_PUDIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP_PUDIS`"]
        pub struct TAMP_PUDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP_PUDIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP_PRCH`"]
        pub type TAMP_PRCH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAMP_PRCH`"]
        pub struct TAMP_PRCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP_PRCH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPFLT`"]
        pub type TAMPFLT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAMPFLT`"]
        pub struct TAMPFLT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPFLT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 11)) | (((value as u32) & 0x03) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPFREQ`"]
        pub type TAMPFREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAMPFREQ`"]
        pub struct TAMPFREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPFREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 8)) | (((value as u32) & 0x07) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPTS`"]
        pub type TAMPTS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMPTS`"]
        pub struct TAMPTS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPTS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP2_TRG`"]
        pub type TAMP2_TRG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP2_TRG`"]
        pub struct TAMP2_TRG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP2_TRG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP2E`"]
        pub type TAMP2E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP2E`"]
        pub struct TAMP2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPIE`"]
        pub type TAMPIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMPIE`"]
        pub struct TAMPIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP1TRG`"]
        pub type TAMP1TRG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP1TRG`"]
        pub struct TAMP1TRG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP1TRG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP1E`"]
        pub type TAMP1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP1E`"]
        pub struct TAMP1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 23 - PC15 mode"]
            #[inline(always)]
            pub fn pc15mode(&self) -> PC15MODE_R {
                PC15MODE_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - PC15 value"]
            #[inline(always)]
            pub fn pc15value(&self) -> PC15VALUE_R {
                PC15VALUE_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - PC14 mode"]
            #[inline(always)]
            pub fn pc14mode(&self) -> PC14MODE_R {
                PC14MODE_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - PC14 value"]
            #[inline(always)]
            pub fn pc14value(&self) -> PC14VALUE_R {
                PC14VALUE_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - PC13 mode"]
            #[inline(always)]
            pub fn pc13mode(&self) -> PC13MODE_R {
                PC13MODE_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - RTC_ALARM output type/PC13 value"]
            #[inline(always)]
            pub fn pc13value(&self) -> PC13VALUE_R {
                PC13VALUE_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 15 - RTC_TAMPx pull-up disable"]
            #[inline(always)]
            pub fn tamp_pudis(&self) -> TAMP_PUDIS_R {
                TAMP_PUDIS_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 13:14 - RTC_TAMPx precharge duration"]
            #[inline(always)]
            pub fn tamp_prch(&self) -> TAMP_PRCH_R {
                TAMP_PRCH_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bits 11:12 - RTC_TAMPx filter count"]
            #[inline(always)]
            pub fn tampflt(&self) -> TAMPFLT_R {
                TAMPFLT_R::new(((self.bits >> 11) & 0x03) as u8)
            }
            #[doc = "Bits 8:10 - Tamper sampling frequency"]
            #[inline(always)]
            pub fn tampfreq(&self) -> TAMPFREQ_R {
                TAMPFREQ_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bit 7 - Activate timestamp on tamper detection event"]
            #[inline(always)]
            pub fn tampts(&self) -> TAMPTS_R {
                TAMPTS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Active level for RTC_TAMP2 input"]
            #[inline(always)]
            pub fn tamp2_trg(&self) -> TAMP2_TRG_R {
                TAMP2_TRG_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTC_TAMP2 input detection enable"]
            #[inline(always)]
            pub fn tamp2e(&self) -> TAMP2E_R {
                TAMP2E_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Tamper interrupt enable"]
            #[inline(always)]
            pub fn tampie(&self) -> TAMPIE_R {
                TAMPIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Active level for RTC_TAMP1 input"]
            #[inline(always)]
            pub fn tamp1trg(&self) -> TAMP1TRG_R {
                TAMP1TRG_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RTC_TAMP1 input detection enable"]
            #[inline(always)]
            pub fn tamp1e(&self) -> TAMP1E_R {
                TAMP1E_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 23 - PC15 mode"]
            #[inline(always)]
            pub fn pc15mode(&mut self) -> PC15MODE_W {
                PC15MODE_W { w: self }
            }
            #[doc = "Bit 22 - PC15 value"]
            #[inline(always)]
            pub fn pc15value(&mut self) -> PC15VALUE_W {
                PC15VALUE_W { w: self }
            }
            #[doc = "Bit 21 - PC14 mode"]
            #[inline(always)]
            pub fn pc14mode(&mut self) -> PC14MODE_W {
                PC14MODE_W { w: self }
            }
            #[doc = "Bit 20 - PC14 value"]
            #[inline(always)]
            pub fn pc14value(&mut self) -> PC14VALUE_W {
                PC14VALUE_W { w: self }
            }
            #[doc = "Bit 19 - PC13 mode"]
            #[inline(always)]
            pub fn pc13mode(&mut self) -> PC13MODE_W {
                PC13MODE_W { w: self }
            }
            #[doc = "Bit 18 - RTC_ALARM output type/PC13 value"]
            #[inline(always)]
            pub fn pc13value(&mut self) -> PC13VALUE_W {
                PC13VALUE_W { w: self }
            }
            #[doc = "Bit 15 - RTC_TAMPx pull-up disable"]
            #[inline(always)]
            pub fn tamp_pudis(&mut self) -> TAMP_PUDIS_W {
                TAMP_PUDIS_W { w: self }
            }
            #[doc = "Bits 13:14 - RTC_TAMPx precharge duration"]
            #[inline(always)]
            pub fn tamp_prch(&mut self) -> TAMP_PRCH_W {
                TAMP_PRCH_W { w: self }
            }
            #[doc = "Bits 11:12 - RTC_TAMPx filter count"]
            #[inline(always)]
            pub fn tampflt(&mut self) -> TAMPFLT_W {
                TAMPFLT_W { w: self }
            }
            #[doc = "Bits 8:10 - Tamper sampling frequency"]
            #[inline(always)]
            pub fn tampfreq(&mut self) -> TAMPFREQ_W {
                TAMPFREQ_W { w: self }
            }
            #[doc = "Bit 7 - Activate timestamp on tamper detection event"]
            #[inline(always)]
            pub fn tampts(&mut self) -> TAMPTS_W {
                TAMPTS_W { w: self }
            }
            #[doc = "Bit 4 - Active level for RTC_TAMP2 input"]
            #[inline(always)]
            pub fn tamp2_trg(&mut self) -> TAMP2_TRG_W {
                TAMP2_TRG_W { w: self }
            }
            #[doc = "Bit 3 - RTC_TAMP2 input detection enable"]
            #[inline(always)]
            pub fn tamp2e(&mut self) -> TAMP2E_W {
                TAMP2E_W { w: self }
            }
            #[doc = "Bit 2 - Tamper interrupt enable"]
            #[inline(always)]
            pub fn tampie(&mut self) -> TAMPIE_W {
                TAMPIE_W { w: self }
            }
            #[doc = "Bit 1 - Active level for RTC_TAMP1 input"]
            #[inline(always)]
            pub fn tamp1trg(&mut self) -> TAMP1TRG_W {
                TAMP1TRG_W { w: self }
            }
            #[doc = "Bit 0 - RTC_TAMP1 input detection enable"]
            #[inline(always)]
            pub fn tamp1e(&mut self) -> TAMP1E_W {
                TAMP1E_W { w: self }
            }
        }
    }
    #[doc = "alarm A sub second register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alrmassr](alrmassr) module"]
    pub type ALRMASSR = crate::Reg<u32, _ALRMASSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALRMASSR;
    #[doc = "`read()` method returns [alrmassr::R](alrmassr::R) reader structure"]
    impl crate::Readable for ALRMASSR {}
    #[doc = "`write(|w| ..)` method takes [alrmassr::W](alrmassr::W) writer structure"]
    impl crate::Writable for ALRMASSR {}
    #[doc = "alarm A sub second register"]
    pub mod alrmassr {
        #[doc = "Reader of register ALRMASSR"]
        pub type R = crate::R<u32, super::ALRMASSR>;
        #[doc = "Writer for register ALRMASSR"]
        pub type W = crate::W<u32, super::ALRMASSR>;
        #[doc = "Register ALRMASSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ALRMASSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MASKSS`"]
        pub type MASKSS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MASKSS`"]
        pub struct MASKSS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASKSS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `SS`"]
        pub type SS_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `SS`"]
        pub struct SS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7fff) | ((value as u32) & 0x7fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:27 - Mask the most-significant bits starting at this bit"]
            #[inline(always)]
            pub fn maskss(&self) -> MASKSS_R {
                MASKSS_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 0:14 - Sub seconds value"]
            #[inline(always)]
            pub fn ss(&self) -> SS_R {
                SS_R::new((self.bits & 0x7fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 24:27 - Mask the most-significant bits starting at this bit"]
            #[inline(always)]
            pub fn maskss(&mut self) -> MASKSS_W {
                MASKSS_W { w: self }
            }
            #[doc = "Bits 0:14 - Sub seconds value"]
            #[inline(always)]
            pub fn ss(&mut self) -> SS_W {
                SS_W { w: self }
            }
        }
    }
    #[doc = "backup register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bkpr](bkpr) module"]
    pub type BKPR = crate::Reg<u32, _BKPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BKPR;
    #[doc = "`read()` method returns [bkpr::R](bkpr::R) reader structure"]
    impl crate::Readable for BKPR {}
    #[doc = "`write(|w| ..)` method takes [bkpr::W](bkpr::W) writer structure"]
    impl crate::Writable for BKPR {}
    #[doc = "backup register"]
    pub mod bkpr {
        #[doc = "Reader of register BKP%sR"]
        pub type R = crate::R<u32, super::BKPR>;
        #[doc = "Writer for register BKP%sR"]
        pub type W = crate::W<u32, super::BKPR>;
        #[doc = "Register BKP%sR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BKPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - BKP"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - BKP"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose-timers"]
pub struct TIM15 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM15 {}
impl TIM15 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim15::RegisterBlock {
        0x4001_4000 as *const _
    }
}
impl Deref for TIM15 {
    type Target = tim15::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM15::ptr() }
    }
}
#[doc = "General-purpose-timers"]
pub mod tim15 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - slave mode control register"]
        pub smcr: SMCR,
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - status register"]
        pub sr: SR,
        #[doc = "0x14 - event generation register"]
        pub egr: EGR,
        _reserved_6_ccmr1: [u8; 4usize],
        _reserved7: [u8; 4usize],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: CCER,
        #[doc = "0x24 - counter"]
        pub cnt: CNT,
        #[doc = "0x28 - prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - auto-reload register"]
        pub arr: ARR,
        #[doc = "0x30 - repetition counter register"]
        pub rcr: RCR,
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: CCR1,
        #[doc = "0x38 - capture/compare register 2"]
        pub ccr2: CCR2,
        _reserved14: [u8; 8usize],
        #[doc = "0x44 - break and dead-time register"]
        pub bdtr: BDTR,
        #[doc = "0x48 - DMA control register"]
        pub dcr: DCR,
        #[doc = "0x4c - DMA address for full transfer"]
        pub dmar: DMAR,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &CCMR1_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input_mut(&self) -> &mut CCMR1_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &CCMR1_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_OUTPUT) }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output_mut(&self) -> &mut CCMR1_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_OUTPUT) }
        }
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Clock division\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CKD_A {
            #[doc = "0: t_DTS = t_CK_INT"]
            DIV1 = 0,
            #[doc = "1: t_DTS = 2 × t_CK_INT"]
            DIV2 = 1,
            #[doc = "2: t_DTS = 4 × t_CK_INT"]
            DIV4 = 2,
        }
        impl From<CKD_A> for u8 {
            #[inline(always)]
            fn from(variant: CKD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CKD`"]
        pub type CKD_R = crate::R<u8, CKD_A>;
        impl CKD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CKD_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CKD_A::DIV1),
                    1 => Val(CKD_A::DIV2),
                    2 => Val(CKD_A::DIV4),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == CKD_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == CKD_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == CKD_A::DIV4
            }
        }
        #[doc = "Write proxy for field `CKD`"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CKD_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "t_DTS = t_CK_INT"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(CKD_A::DIV1)
            }
            #[doc = "t_DTS = 2 × t_CK_INT"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(CKD_A::DIV2)
            }
            #[doc = "t_DTS = 4 × t_CK_INT"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(CKD_A::DIV4)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Auto-reload preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARPE_A {
            #[doc = "0: TIMx_APRR register is not buffered"]
            DISABLED = 0,
            #[doc = "1: TIMx_APRR register is buffered"]
            ENABLED = 1,
        }
        impl From<ARPE_A> for bool {
            #[inline(always)]
            fn from(variant: ARPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, ARPE_A>;
        impl ARPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ARPE_A {
                match self.bits {
                    false => ARPE_A::DISABLED,
                    true => ARPE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ARPE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ARPE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ARPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIMx_APRR register is not buffered"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ARPE_A::DISABLED)
            }
            #[doc = "TIMx_APRR register is buffered"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ARPE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `OPM`"]
        pub type OPM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPM`"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Update request source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum URS_A {
            #[doc = "0: Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            ANYEVENT = 0,
            #[doc = "1: Only counter overflow/underflow generates an update interrupt or DMA request"]
            COUNTERONLY = 1,
        }
        impl From<URS_A> for bool {
            #[inline(always)]
            fn from(variant: URS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, URS_A>;
        impl URS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> URS_A {
                match self.bits {
                    false => URS_A::ANYEVENT,
                    true => URS_A::COUNTERONLY,
                }
            }
            #[doc = "Checks if the value of the field is `ANYEVENT`"]
            #[inline(always)]
            pub fn is_any_event(&self) -> bool {
                *self == URS_A::ANYEVENT
            }
            #[doc = "Checks if the value of the field is `COUNTERONLY`"]
            #[inline(always)]
            pub fn is_counter_only(&self) -> bool {
                *self == URS_A::COUNTERONLY
            }
        }
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: URS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn any_event(self) -> &'a mut W {
                self.variant(URS_A::ANYEVENT)
            }
            #[doc = "Only counter overflow/underflow generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn counter_only(self) -> &'a mut W {
                self.variant(URS_A::COUNTERONLY)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Update disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDIS_A {
            #[doc = "0: Update event enabled"]
            ENABLED = 0,
            #[doc = "1: Update event disabled"]
            DISABLED = 1,
        }
        impl From<UDIS_A> for bool {
            #[inline(always)]
            fn from(variant: UDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, UDIS_A>;
        impl UDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDIS_A {
                match self.bits {
                    false => UDIS_A::ENABLED,
                    true => UDIS_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDIS_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDIS_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update event enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDIS_A::ENABLED)
            }
            #[doc = "Update event disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDIS_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Counter enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CEN_A {
            #[doc = "0: Counter disabled"]
            DISABLED = 0,
            #[doc = "1: Counter enabled"]
            ENABLED = 1,
        }
        impl From<CEN_A> for bool {
            #[inline(always)]
            fn from(variant: CEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, CEN_A>;
        impl CEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CEN_A {
                match self.bits {
                    false => CEN_A::DISABLED,
                    true => CEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CEN_A::DISABLED)
            }
            #[doc = "Counter enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OIS2`"]
        pub type OIS2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS2`"]
        pub struct OIS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OIS1N`"]
        pub type OIS1N_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS1N`"]
        pub struct OIS1N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS1N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `OIS1`"]
        pub type OIS1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS1`"]
        pub struct OIS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MMS`"]
        pub type MMS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MMS`"]
        pub struct MMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CCDS`"]
        pub type CCDS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCDS`"]
        pub struct CCDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCDS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CCUS`"]
        pub type CCUS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCUS`"]
        pub struct CCUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCUS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CCPC`"]
        pub type CCPC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCPC`"]
        pub struct CCPC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCPC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 10 - Output Idle state 2"]
            #[inline(always)]
            pub fn ois2(&self) -> OIS2_R {
                OIS2_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1n(&self) -> OIS1N_R {
                OIS1N_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1(&self) -> OIS1_R {
                OIS1_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&self) -> MMS_R {
                MMS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&self) -> CCDS_R {
                CCDS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/compare control update selection"]
            #[inline(always)]
            pub fn ccus(&self) -> CCUS_R {
                CCUS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/compare preloaded control"]
            #[inline(always)]
            pub fn ccpc(&self) -> CCPC_R {
                CCPC_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 10 - Output Idle state 2"]
            #[inline(always)]
            pub fn ois2(&mut self) -> OIS2_W {
                OIS2_W { w: self }
            }
            #[doc = "Bit 9 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1n(&mut self) -> OIS1N_W {
                OIS1N_W { w: self }
            }
            #[doc = "Bit 8 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1(&mut self) -> OIS1_W {
                OIS1_W { w: self }
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&mut self) -> MMS_W {
                MMS_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&mut self) -> CCDS_W {
                CCDS_W { w: self }
            }
            #[doc = "Bit 2 - Capture/compare control update selection"]
            #[inline(always)]
            pub fn ccus(&mut self) -> CCUS_W {
                CCUS_W { w: self }
            }
            #[doc = "Bit 0 - Capture/compare preloaded control"]
            #[inline(always)]
            pub fn ccpc(&mut self) -> CCPC_W {
                CCPC_W { w: self }
            }
        }
    }
    #[doc = "slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcr](smcr) module"]
    pub type SMCR = crate::Reg<u32, _SMCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMCR;
    #[doc = "`read()` method returns [smcr::R](smcr::R) reader structure"]
    impl crate::Readable for SMCR {}
    #[doc = "`write(|w| ..)` method takes [smcr::W](smcr::W) writer structure"]
    impl crate::Writable for SMCR {}
    #[doc = "slave mode control register"]
    pub mod smcr {
        #[doc = "Reader of register SMCR"]
        pub type R = crate::R<u32, super::SMCR>;
        #[doc = "Writer for register SMCR"]
        pub type W = crate::W<u32, super::SMCR>;
        #[doc = "Register SMCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MSM`"]
        pub type MSM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSM`"]
        pub struct MSM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TS`"]
        pub type TS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TS`"]
        pub struct TS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SMS`"]
        pub type SMS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SMS`"]
        pub struct SMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&self) -> MSM_R {
                MSM_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&self) -> TS_R {
                TS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&self) -> SMS_R {
                SMS_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&mut self) -> MSM_W {
                MSM_W { w: self }
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&mut self) -> TS_W {
                TS_W { w: self }
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&mut self) -> SMS_W {
                SMS_W { w: self }
            }
        }
    }
    #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TDE`"]
        pub type TDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TDE`"]
        pub struct TDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CC2DE`"]
        pub type CC2DE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2DE`"]
        pub struct CC2DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC1DE`"]
        pub type CC1DE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1DE`"]
        pub struct CC1DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `UDE`"]
        pub type UDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UDE`"]
        pub struct UDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `BIE`"]
        pub type BIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BIE`"]
        pub struct BIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TIE`"]
        pub type TIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIE`"]
        pub struct TIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `COMIE`"]
        pub type COMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMIE`"]
        pub struct COMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `CC2IE`"]
        pub type CC2IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2IE`"]
        pub struct CC2IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IE`"]
        pub type CC1IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IE`"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIE_A {
            #[doc = "0: Update interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Update interrupt enabled"]
            ENABLED = 1,
        }
        impl From<UIE_A> for bool {
            #[inline(always)]
            fn from(variant: UIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, UIE_A>;
        impl UIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIE_A {
                match self.bits {
                    false => UIE_A::DISABLED,
                    true => UIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UIE_A::DISABLED)
            }
            #[doc = "Update interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&self) -> TDE_R {
                TDE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&self) -> CC2DE_R {
                CC2DE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&self) -> CC1DE_R {
                CC1DE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&self) -> UDE_R {
                UDE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Break interrupt enable"]
            #[inline(always)]
            pub fn bie(&self) -> BIE_R {
                BIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&self) -> TIE_R {
                TIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - COM interrupt enable"]
            #[inline(always)]
            pub fn comie(&self) -> COMIE_R {
                COMIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&self) -> CC2IE_R {
                CC2IE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&mut self) -> TDE_W {
                TDE_W { w: self }
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&mut self) -> CC2DE_W {
                CC2DE_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&mut self) -> CC1DE_W {
                CC1DE_W { w: self }
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&mut self) -> UDE_W {
                UDE_W { w: self }
            }
            #[doc = "Bit 7 - Break interrupt enable"]
            #[inline(always)]
            pub fn bie(&mut self) -> BIE_W {
                BIE_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&mut self) -> TIE_W {
                TIE_W { w: self }
            }
            #[doc = "Bit 5 - COM interrupt enable"]
            #[inline(always)]
            pub fn comie(&mut self) -> COMIE_W {
                COMIE_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&mut self) -> CC2IE_W {
                CC2IE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC2OF`"]
        pub type CC2OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2OF`"]
        pub struct CC2OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC1OF`"]
        pub type CC1OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1OF`"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `BIF`"]
        pub type BIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BIF`"]
        pub struct BIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TIF`"]
        pub type TIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIF`"]
        pub struct TIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `COMIF`"]
        pub type COMIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMIF`"]
        pub struct COMIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `CC2IF`"]
        pub type CC2IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2IF`"]
        pub struct CC2IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IF`"]
        pub type CC1IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IF`"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIF_A {
            #[doc = "0: No update occurred"]
            CLEAR = 0,
            #[doc = "1: Update interrupt pending."]
            UPDATEPENDING = 1,
        }
        impl From<UIF_A> for bool {
            #[inline(always)]
            fn from(variant: UIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, UIF_A>;
        impl UIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIF_A {
                match self.bits {
                    false => UIF_A::CLEAR,
                    true => UIF_A::UPDATEPENDING,
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == UIF_A::CLEAR
            }
            #[doc = "Checks if the value of the field is `UPDATEPENDING`"]
            #[inline(always)]
            pub fn is_update_pending(&self) -> bool {
                *self == UIF_A::UPDATEPENDING
            }
        }
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No update occurred"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(UIF_A::CLEAR)
            }
            #[doc = "Update interrupt pending."]
            #[inline(always)]
            pub fn update_pending(self) -> &'a mut W {
                self.variant(UIF_A::UPDATEPENDING)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&self) -> CC2OF_R {
                CC2OF_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Break interrupt flag"]
            #[inline(always)]
            pub fn bif(&self) -> BIF_R {
                BIF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&self) -> TIF_R {
                TIF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - COM interrupt flag"]
            #[inline(always)]
            pub fn comif(&self) -> COMIF_R {
                COMIF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&self) -> CC2IF_R {
                CC2IF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&mut self) -> CC2OF_W {
                CC2OF_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
            #[doc = "Bit 7 - Break interrupt flag"]
            #[inline(always)]
            pub fn bif(&mut self) -> BIF_W {
                BIF_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&mut self) -> TIF_W {
                TIF_W { w: self }
            }
            #[doc = "Bit 5 - COM interrupt flag"]
            #[inline(always)]
            pub fn comif(&mut self) -> COMIF_W {
                COMIF_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&mut self) -> CC2IF_W {
                CC2IF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
        }
    }
    #[doc = "event generation register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `BG`"]
        pub struct BG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `TG`"]
        pub struct TG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `COMG`"]
        pub struct COMG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `CC2G`"]
        pub struct CC2G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `CC1G`"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UG_AW {
            #[doc = "1: Re-initializes the timer counter and generates an update of the registers."]
            UPDATE = 1,
        }
        impl From<UG_AW> for bool {
            #[inline(always)]
            fn from(variant: UG_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UG_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Re-initializes the timer counter and generates an update of the registers."]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(UG_AW::UPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 7 - Break generation"]
            #[inline(always)]
            pub fn bg(&mut self) -> BG_W {
                BG_W { w: self }
            }
            #[doc = "Bit 6 - Trigger generation"]
            #[inline(always)]
            pub fn tg(&mut self) -> TG_W {
                TG_W { w: self }
            }
            #[doc = "Bit 5 - Capture/Compare control update generation"]
            #[inline(always)]
            pub fn comg(&mut self) -> COMG_W {
                COMG_W { w: self }
            }
            #[doc = "Bit 2 - Capture/compare 2 generation"]
            #[inline(always)]
            pub fn cc2g(&mut self) -> CC2G_W {
                CC2G_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](ccmr1_output) module"]
    pub type CCMR1_OUTPUT = crate::Reg<u32, _CCMR1_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_OUTPUT;
    #[doc = "`read()` method returns [ccmr1_output::R](ccmr1_output::R) reader structure"]
    impl crate::Readable for CCMR1_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](ccmr1_output::W) writer structure"]
    impl crate::Writable for CCMR1_OUTPUT {}
    #[doc = "capture/compare mode register (output mode)"]
    pub mod ccmr1_output {
        #[doc = "Reader of register CCMR1_Output"]
        pub type R = crate::R<u32, super::CCMR1_OUTPUT>;
        #[doc = "Writer for register CCMR1_Output"]
        pub type W = crate::W<u32, super::CCMR1_OUTPUT>;
        #[doc = "Register CCMR1_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OC2M`"]
        pub type OC2M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC2M`"]
        pub struct OC2M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OC2PE`"]
        pub type OC2PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2PE`"]
        pub struct OC2PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC2FE`"]
        pub type OC2FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2FE`"]
        pub struct OC2FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC2S`"]
        pub type CC2S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC2S`"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OC1M`"]
        pub type OC1M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC1M`"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OC1PE`"]
        pub type OC1PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1PE`"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC1FE`"]
        pub type OC1FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1FE`"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:14 - Output Compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&self) -> OC2M_R {
                OC2M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 11 - Output Compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&self) -> OC2PE_R {
                OC2PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output Compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&self) -> OC2FE_R {
                OC2FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Output Compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:14 - Output Compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&mut self) -> OC2M_W {
                OC2M_W { w: self }
            }
            #[doc = "Bit 11 - Output Compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&mut self) -> OC2PE_W {
                OC2PE_W { w: self }
            }
            #[doc = "Bit 10 - Output Compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&mut self) -> OC2FE_W {
                OC2FE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bit 2 - Output Compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](ccmr1_input) module"]
    pub type CCMR1_INPUT = crate::Reg<u32, _CCMR1_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_INPUT;
    #[doc = "`read()` method returns [ccmr1_input::R](ccmr1_input::R) reader structure"]
    impl crate::Readable for CCMR1_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](ccmr1_input::W) writer structure"]
    impl crate::Writable for CCMR1_INPUT {}
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Reader of register CCMR1_Input"]
        pub type R = crate::R<u32, super::CCMR1_INPUT>;
        #[doc = "Writer for register CCMR1_Input"]
        pub type W = crate::W<u32, super::CCMR1_INPUT>;
        #[doc = "Register CCMR1_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC2F`"]
        pub type IC2F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC2F`"]
        pub struct IC2F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IC2PSC`"]
        pub type IC2PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC2PSC`"]
        pub struct IC2PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC2S`"]
        pub type CC2S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC2S`"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `IC1F`"]
        pub type IC1F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1F`"]
        pub struct IC1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC1PSC`"]
        pub type IC1PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1PSC`"]
        pub struct IC1PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&self) -> IC2F_R {
                IC2F_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2psc(&self) -> IC2PSC_R {
                IC2PSC_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&self) -> IC1F_R {
                IC1F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&self) -> IC1PSC_R {
                IC1PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&mut self) -> IC2F_W {
                IC2F_W { w: self }
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2psc(&mut self) -> IC2PSC_W {
                IC2PSC_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&mut self) -> IC1F_W {
                IC1F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&mut self) -> IC1PSC_W {
                IC1PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](ccer) module"]
    pub type CCER = crate::Reg<u32, _CCER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCER;
    #[doc = "`read()` method returns [ccer::R](ccer::R) reader structure"]
    impl crate::Readable for CCER {}
    #[doc = "`write(|w| ..)` method takes [ccer::W](ccer::W) writer structure"]
    impl crate::Writable for CCER {}
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Reader of register CCER"]
        pub type R = crate::R<u32, super::CCER>;
        #[doc = "Writer for register CCER"]
        pub type W = crate::W<u32, super::CCER>;
        #[doc = "Register CCER `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC2NP`"]
        pub type CC2NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2NP`"]
        pub struct CC2NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CC2P`"]
        pub type CC2P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2P`"]
        pub struct CC2P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `CC2E`"]
        pub type CC2E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2E`"]
        pub struct CC2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CC1NP`"]
        pub type CC1NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NP`"]
        pub struct CC1NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC1NE`"]
        pub type CC1NE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NE`"]
        pub struct CC1NE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1P`"]
        pub type CC1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1P`"]
        pub struct CC1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC1E`"]
        pub type CC1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1E`"]
        pub struct CC1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2np(&self) -> CC2NP_R {
                CC2NP_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&self) -> CC2P_R {
                CC2P_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&self) -> CC2E_R {
                CC2E_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&self) -> CC1NP_R {
                CC1NP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
            #[inline(always)]
            pub fn cc1ne(&self) -> CC1NE_R {
                CC1NE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&self) -> CC1P_R {
                CC1P_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&self) -> CC1E_R {
                CC1E_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2np(&mut self) -> CC2NP_W {
                CC2NP_W { w: self }
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&mut self) -> CC2P_W {
                CC2P_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&mut self) -> CC2E_W {
                CC2E_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&mut self) -> CC1NP_W {
                CC1NP_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
            #[inline(always)]
            pub fn cc1ne(&mut self) -> CC1NE_W {
                CC1NE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&mut self) -> CC1P_W {
                CC1P_W { w: self }
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&mut self) -> CC1E_W {
                CC1E_W { w: self }
            }
        }
    }
    #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
    #[doc = "repetition counter register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rcr](rcr) module"]
    pub type RCR = crate::Reg<u32, _RCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RCR;
    #[doc = "`read()` method returns [rcr::R](rcr::R) reader structure"]
    impl crate::Readable for RCR {}
    #[doc = "`write(|w| ..)` method takes [rcr::W](rcr::W) writer structure"]
    impl crate::Writable for RCR {}
    #[doc = "repetition counter register"]
    pub mod rcr {
        #[doc = "Reader of register RCR"]
        pub type R = crate::R<u32, super::RCR>;
        #[doc = "Writer for register RCR"]
        pub type W = crate::W<u32, super::RCR>;
        #[doc = "Register RCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `REP`"]
        pub type REP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `REP`"]
        pub struct REP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Repetition counter value"]
            #[inline(always)]
            pub fn rep(&self) -> REP_R {
                REP_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Repetition counter value"]
            #[inline(always)]
            pub fn rep(&mut self) -> REP_W {
                REP_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr1](ccr1) module"]
    pub type CCR1 = crate::Reg<u32, _CCR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR1;
    #[doc = "`read()` method returns [ccr1::R](ccr1::R) reader structure"]
    impl crate::Readable for CCR1 {}
    #[doc = "`write(|w| ..)` method takes [ccr1::W](ccr1::W) writer structure"]
    impl crate::Writable for CCR1 {}
    #[doc = "capture/compare register 1"]
    pub mod ccr1 {
        #[doc = "Reader of register CCR1"]
        pub type R = crate::R<u32, super::CCR1>;
        #[doc = "Writer for register CCR1"]
        pub type W = crate::W<u32, super::CCR1>;
        #[doc = "Register CCR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR1`"]
        pub type CCR1_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR1`"]
        pub struct CCR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr1(&self) -> CCR1_R {
                CCR1_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr1(&mut self) -> CCR1_W {
                CCR1_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr2](ccr2) module"]
    pub type CCR2 = crate::Reg<u32, _CCR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR2;
    #[doc = "`read()` method returns [ccr2::R](ccr2::R) reader structure"]
    impl crate::Readable for CCR2 {}
    #[doc = "`write(|w| ..)` method takes [ccr2::W](ccr2::W) writer structure"]
    impl crate::Writable for CCR2 {}
    #[doc = "capture/compare register 2"]
    pub mod ccr2 {
        #[doc = "Reader of register CCR2"]
        pub type R = crate::R<u32, super::CCR2>;
        #[doc = "Writer for register CCR2"]
        pub type W = crate::W<u32, super::CCR2>;
        #[doc = "Register CCR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR2`"]
        pub type CCR2_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR2`"]
        pub struct CCR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 2 value"]
            #[inline(always)]
            pub fn ccr2(&self) -> CCR2_R {
                CCR2_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 2 value"]
            #[inline(always)]
            pub fn ccr2(&mut self) -> CCR2_W {
                CCR2_W { w: self }
            }
        }
    }
    #[doc = "break and dead-time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdtr](bdtr) module"]
    pub type BDTR = crate::Reg<u32, _BDTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BDTR;
    #[doc = "`read()` method returns [bdtr::R](bdtr::R) reader structure"]
    impl crate::Readable for BDTR {}
    #[doc = "`write(|w| ..)` method takes [bdtr::W](bdtr::W) writer structure"]
    impl crate::Writable for BDTR {}
    #[doc = "break and dead-time register"]
    pub mod bdtr {
        #[doc = "Reader of register BDTR"]
        pub type R = crate::R<u32, super::BDTR>;
        #[doc = "Writer for register BDTR"]
        pub type W = crate::W<u32, super::BDTR>;
        #[doc = "Register BDTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BDTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MOE`"]
        pub type MOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MOE`"]
        pub struct MOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `AOE`"]
        pub type AOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AOE`"]
        pub struct AOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `BKE`"]
        pub type BKE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKE`"]
        pub struct BKE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OSSR`"]
        pub type OSSR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OSSR`"]
        pub struct OSSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSSR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OSSI`"]
        pub type OSSI_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OSSI`"]
        pub struct OSSI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSSI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `LOCK`"]
        pub type LOCK_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LOCK`"]
        pub struct LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOCK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DTG`"]
        pub type DTG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DTG`"]
        pub struct DTG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Main output enable"]
            #[inline(always)]
            pub fn moe(&self) -> MOE_R {
                MOE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Automatic output enable"]
            #[inline(always)]
            pub fn aoe(&self) -> AOE_R {
                AOE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Break polarity"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Break enable"]
            #[inline(always)]
            pub fn bke(&self) -> BKE_R {
                BKE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Off-state selection for Run mode"]
            #[inline(always)]
            pub fn ossr(&self) -> OSSR_R {
                OSSR_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Off-state selection for Idle mode"]
            #[inline(always)]
            pub fn ossi(&self) -> OSSI_R {
                OSSI_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Lock configuration"]
            #[inline(always)]
            pub fn lock(&self) -> LOCK_R {
                LOCK_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:7 - Dead-time generator setup"]
            #[inline(always)]
            pub fn dtg(&self) -> DTG_R {
                DTG_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Main output enable"]
            #[inline(always)]
            pub fn moe(&mut self) -> MOE_W {
                MOE_W { w: self }
            }
            #[doc = "Bit 14 - Automatic output enable"]
            #[inline(always)]
            pub fn aoe(&mut self) -> AOE_W {
                AOE_W { w: self }
            }
            #[doc = "Bit 13 - Break polarity"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
            #[doc = "Bit 12 - Break enable"]
            #[inline(always)]
            pub fn bke(&mut self) -> BKE_W {
                BKE_W { w: self }
            }
            #[doc = "Bit 11 - Off-state selection for Run mode"]
            #[inline(always)]
            pub fn ossr(&mut self) -> OSSR_W {
                OSSR_W { w: self }
            }
            #[doc = "Bit 10 - Off-state selection for Idle mode"]
            #[inline(always)]
            pub fn ossi(&mut self) -> OSSI_W {
                OSSI_W { w: self }
            }
            #[doc = "Bits 8:9 - Lock configuration"]
            #[inline(always)]
            pub fn lock(&mut self) -> LOCK_W {
                LOCK_W { w: self }
            }
            #[doc = "Bits 0:7 - Dead-time generator setup"]
            #[inline(always)]
            pub fn dtg(&mut self) -> DTG_W {
                DTG_W { w: self }
            }
        }
    }
    #[doc = "DMA control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcr](dcr) module"]
    pub type DCR = crate::Reg<u32, _DCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DCR;
    #[doc = "`read()` method returns [dcr::R](dcr::R) reader structure"]
    impl crate::Readable for DCR {}
    #[doc = "`write(|w| ..)` method takes [dcr::W](dcr::W) writer structure"]
    impl crate::Writable for DCR {}
    #[doc = "DMA control register"]
    pub mod dcr {
        #[doc = "Reader of register DCR"]
        pub type R = crate::R<u32, super::DCR>;
        #[doc = "Writer for register DCR"]
        pub type W = crate::W<u32, super::DCR>;
        #[doc = "Register DCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBL`"]
        pub type DBL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBL`"]
        pub struct DBL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DBA`"]
        pub type DBA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBA`"]
        pub struct DBA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&self) -> DBL_R {
                DBL_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&self) -> DBA_R {
                DBA_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&mut self) -> DBL_W {
                DBL_W { w: self }
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&mut self) -> DBA_W {
                DBA_W { w: self }
            }
        }
    }
    #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmar](dmar) module"]
    pub type DMAR = crate::Reg<u32, _DMAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAR;
    #[doc = "`read()` method returns [dmar::R](dmar::R) reader structure"]
    impl crate::Readable for DMAR {}
    #[doc = "`write(|w| ..)` method takes [dmar::W](dmar::W) writer structure"]
    impl crate::Writable for DMAR {}
    #[doc = "DMA address for full transfer"]
    pub mod dmar {
        #[doc = "Reader of register DMAR"]
        pub type R = crate::R<u32, super::DMAR>;
        #[doc = "Writer for register DMAR"]
        pub type W = crate::W<u32, super::DMAR>;
        #[doc = "Register DMAR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMAR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAB`"]
        pub type DMAB_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DMAB`"]
        pub struct DMAB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmab(&self) -> DMAB_R {
                DMAB_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmab(&mut self) -> DMAB_W {
                DMAB_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose-timers"]
pub struct TIM16 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM16 {}
impl TIM16 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim16::RegisterBlock {
        0x4001_4400 as *const _
    }
}
impl Deref for TIM16 {
    type Target = tim16::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM16::ptr() }
    }
}
#[doc = "General-purpose-timers"]
pub mod tim16 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - control register 2"]
        pub cr2: CR2,
        _reserved2: [u8; 4usize],
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - status register"]
        pub sr: SR,
        #[doc = "0x14 - event generation register"]
        pub egr: EGR,
        _reserved_5_ccmr1: [u8; 4usize],
        _reserved6: [u8; 4usize],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: CCER,
        #[doc = "0x24 - counter"]
        pub cnt: CNT,
        #[doc = "0x28 - prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - auto-reload register"]
        pub arr: ARR,
        #[doc = "0x30 - repetition counter register"]
        pub rcr: RCR,
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: CCR1,
        _reserved12: [u8; 12usize],
        #[doc = "0x44 - break and dead-time register"]
        pub bdtr: BDTR,
        #[doc = "0x48 - DMA control register"]
        pub dcr: DCR,
        #[doc = "0x4c - DMA address for full transfer"]
        pub dmar: DMAR,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &CCMR1_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input_mut(&self) -> &mut CCMR1_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &CCMR1_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_OUTPUT) }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output_mut(&self) -> &mut CCMR1_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_OUTPUT) }
        }
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Clock division\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CKD_A {
            #[doc = "0: t_DTS = t_CK_INT"]
            DIV1 = 0,
            #[doc = "1: t_DTS = 2 × t_CK_INT"]
            DIV2 = 1,
            #[doc = "2: t_DTS = 4 × t_CK_INT"]
            DIV4 = 2,
        }
        impl From<CKD_A> for u8 {
            #[inline(always)]
            fn from(variant: CKD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CKD`"]
        pub type CKD_R = crate::R<u8, CKD_A>;
        impl CKD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CKD_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CKD_A::DIV1),
                    1 => Val(CKD_A::DIV2),
                    2 => Val(CKD_A::DIV4),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `DIV1`"]
            #[inline(always)]
            pub fn is_div1(&self) -> bool {
                *self == CKD_A::DIV1
            }
            #[doc = "Checks if the value of the field is `DIV2`"]
            #[inline(always)]
            pub fn is_div2(&self) -> bool {
                *self == CKD_A::DIV2
            }
            #[doc = "Checks if the value of the field is `DIV4`"]
            #[inline(always)]
            pub fn is_div4(&self) -> bool {
                *self == CKD_A::DIV4
            }
        }
        #[doc = "Write proxy for field `CKD`"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CKD_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "t_DTS = t_CK_INT"]
            #[inline(always)]
            pub fn div1(self) -> &'a mut W {
                self.variant(CKD_A::DIV1)
            }
            #[doc = "t_DTS = 2 × t_CK_INT"]
            #[inline(always)]
            pub fn div2(self) -> &'a mut W {
                self.variant(CKD_A::DIV2)
            }
            #[doc = "t_DTS = 4 × t_CK_INT"]
            #[inline(always)]
            pub fn div4(self) -> &'a mut W {
                self.variant(CKD_A::DIV4)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Auto-reload preload enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARPE_A {
            #[doc = "0: TIMx_APRR register is not buffered"]
            DISABLED = 0,
            #[doc = "1: TIMx_APRR register is buffered"]
            ENABLED = 1,
        }
        impl From<ARPE_A> for bool {
            #[inline(always)]
            fn from(variant: ARPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, ARPE_A>;
        impl ARPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ARPE_A {
                match self.bits {
                    false => ARPE_A::DISABLED,
                    true => ARPE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ARPE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ARPE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ARPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIMx_APRR register is not buffered"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ARPE_A::DISABLED)
            }
            #[doc = "TIMx_APRR register is buffered"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ARPE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "One-pulse mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OPM_A {
            #[doc = "0: Not stopped at update event"]
            NOTSTOPPED = 0,
            #[doc = "1: Counter stops counting at next update event"]
            STOPPED = 1,
        }
        impl From<OPM_A> for bool {
            #[inline(always)]
            fn from(variant: OPM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OPM`"]
        pub type OPM_R = crate::R<bool, OPM_A>;
        impl OPM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OPM_A {
                match self.bits {
                    false => OPM_A::NOTSTOPPED,
                    true => OPM_A::STOPPED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTSTOPPED`"]
            #[inline(always)]
            pub fn is_not_stopped(&self) -> bool {
                *self == OPM_A::NOTSTOPPED
            }
            #[doc = "Checks if the value of the field is `STOPPED`"]
            #[inline(always)]
            pub fn is_stopped(&self) -> bool {
                *self == OPM_A::STOPPED
            }
        }
        #[doc = "Write proxy for field `OPM`"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OPM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Not stopped at update event"]
            #[inline(always)]
            pub fn not_stopped(self) -> &'a mut W {
                self.variant(OPM_A::NOTSTOPPED)
            }
            #[doc = "Counter stops counting at next update event"]
            #[inline(always)]
            pub fn stopped(self) -> &'a mut W {
                self.variant(OPM_A::STOPPED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Update request source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum URS_A {
            #[doc = "0: Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            ANYEVENT = 0,
            #[doc = "1: Only counter overflow/underflow generates an update interrupt or DMA request"]
            COUNTERONLY = 1,
        }
        impl From<URS_A> for bool {
            #[inline(always)]
            fn from(variant: URS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, URS_A>;
        impl URS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> URS_A {
                match self.bits {
                    false => URS_A::ANYEVENT,
                    true => URS_A::COUNTERONLY,
                }
            }
            #[doc = "Checks if the value of the field is `ANYEVENT`"]
            #[inline(always)]
            pub fn is_any_event(&self) -> bool {
                *self == URS_A::ANYEVENT
            }
            #[doc = "Checks if the value of the field is `COUNTERONLY`"]
            #[inline(always)]
            pub fn is_counter_only(&self) -> bool {
                *self == URS_A::COUNTERONLY
            }
        }
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: URS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn any_event(self) -> &'a mut W {
                self.variant(URS_A::ANYEVENT)
            }
            #[doc = "Only counter overflow/underflow generates an update interrupt or DMA request"]
            #[inline(always)]
            pub fn counter_only(self) -> &'a mut W {
                self.variant(URS_A::COUNTERONLY)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Update disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UDIS_A {
            #[doc = "0: Update event enabled"]
            ENABLED = 0,
            #[doc = "1: Update event disabled"]
            DISABLED = 1,
        }
        impl From<UDIS_A> for bool {
            #[inline(always)]
            fn from(variant: UDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, UDIS_A>;
        impl UDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UDIS_A {
                match self.bits {
                    false => UDIS_A::ENABLED,
                    true => UDIS_A::DISABLED,
                }
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UDIS_A::ENABLED
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UDIS_A::DISABLED
            }
        }
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update event enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UDIS_A::ENABLED)
            }
            #[doc = "Update event disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UDIS_A::DISABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Counter enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CEN_A {
            #[doc = "0: Counter disabled"]
            DISABLED = 0,
            #[doc = "1: Counter enabled"]
            ENABLED = 1,
        }
        impl From<CEN_A> for bool {
            #[inline(always)]
            fn from(variant: CEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, CEN_A>;
        impl CEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CEN_A {
                match self.bits {
                    false => CEN_A::DISABLED,
                    true => CEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Counter disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CEN_A::DISABLED)
            }
            #[doc = "Counter enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Output Idle state 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OIS1N_A {
            #[doc = "0: OC1N=0 after a dead-time when MOE=0"]
            LOW = 0,
            #[doc = "1: OC1N=1 after a dead-time when MOE=0"]
            HIGH = 1,
        }
        impl From<OIS1N_A> for bool {
            #[inline(always)]
            fn from(variant: OIS1N_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OIS1N`"]
        pub type OIS1N_R = crate::R<bool, OIS1N_A>;
        impl OIS1N_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OIS1N_A {
                match self.bits {
                    false => OIS1N_A::LOW,
                    true => OIS1N_A::HIGH,
                }
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == OIS1N_A::LOW
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == OIS1N_A::HIGH
            }
        }
        #[doc = "Write proxy for field `OIS1N`"]
        pub struct OIS1N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS1N_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OIS1N_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "OC1N=0 after a dead-time when MOE=0"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(OIS1N_A::LOW)
            }
            #[doc = "OC1N=1 after a dead-time when MOE=0"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(OIS1N_A::HIGH)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Output Idle state 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OIS1_A {
            #[doc = "0: OC1=0 (after a dead-time if OC1N is implemented) when MOE=0"]
            LOW = 0,
            #[doc = "1: OC1=1 (after a dead-time if OC1N is implemented) when MOE=0"]
            HIGH = 1,
        }
        impl From<OIS1_A> for bool {
            #[inline(always)]
            fn from(variant: OIS1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OIS1`"]
        pub type OIS1_R = crate::R<bool, OIS1_A>;
        impl OIS1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OIS1_A {
                match self.bits {
                    false => OIS1_A::LOW,
                    true => OIS1_A::HIGH,
                }
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                *self == OIS1_A::LOW
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                *self == OIS1_A::HIGH
            }
        }
        #[doc = "Write proxy for field `OIS1`"]
        pub struct OIS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OIS1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "OC1=0 (after a dead-time if OC1N is implemented) when MOE=0"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(OIS1_A::LOW)
            }
            #[doc = "OC1=1 (after a dead-time if OC1N is implemented) when MOE=0"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(OIS1_A::HIGH)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Capture/compare DMA selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CCDS_A {
            #[doc = "0: CCx DMA request sent when CCx event occurs"]
            ONCOMPARE = 0,
            #[doc = "1: CCx DMA request sent when update event occurs"]
            ONUPDATE = 1,
        }
        impl From<CCDS_A> for bool {
            #[inline(always)]
            fn from(variant: CCDS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CCDS`"]
        pub type CCDS_R = crate::R<bool, CCDS_A>;
        impl CCDS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CCDS_A {
                match self.bits {
                    false => CCDS_A::ONCOMPARE,
                    true => CCDS_A::ONUPDATE,
                }
            }
            #[doc = "Checks if the value of the field is `ONCOMPARE`"]
            #[inline(always)]
            pub fn is_on_compare(&self) -> bool {
                *self == CCDS_A::ONCOMPARE
            }
            #[doc = "Checks if the value of the field is `ONUPDATE`"]
            #[inline(always)]
            pub fn is_on_update(&self) -> bool {
                *self == CCDS_A::ONUPDATE
            }
        }
        #[doc = "Write proxy for field `CCDS`"]
        pub struct CCDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCDS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CCDS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCx DMA request sent when CCx event occurs"]
            #[inline(always)]
            pub fn on_compare(self) -> &'a mut W {
                self.variant(CCDS_A::ONCOMPARE)
            }
            #[doc = "CCx DMA request sent when update event occurs"]
            #[inline(always)]
            pub fn on_update(self) -> &'a mut W {
                self.variant(CCDS_A::ONUPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Capture/compare control update selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CCUS_A {
            #[doc = "0: Capture/compare are updated only by setting the COMG bit"]
            DEFAULT = 0,
            #[doc = "1: Capture/compare are updated by setting the COMG bit or when an rising edge occurs on TRGI"]
            WITHRISINGEDGE = 1,
        }
        impl From<CCUS_A> for bool {
            #[inline(always)]
            fn from(variant: CCUS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CCUS`"]
        pub type CCUS_R = crate::R<bool, CCUS_A>;
        impl CCUS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CCUS_A {
                match self.bits {
                    false => CCUS_A::DEFAULT,
                    true => CCUS_A::WITHRISINGEDGE,
                }
            }
            #[doc = "Checks if the value of the field is `DEFAULT`"]
            #[inline(always)]
            pub fn is_default(&self) -> bool {
                *self == CCUS_A::DEFAULT
            }
            #[doc = "Checks if the value of the field is `WITHRISINGEDGE`"]
            #[inline(always)]
            pub fn is_with_rising_edge(&self) -> bool {
                *self == CCUS_A::WITHRISINGEDGE
            }
        }
        #[doc = "Write proxy for field `CCUS`"]
        pub struct CCUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCUS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CCUS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Capture/compare are updated only by setting the COMG bit"]
            #[inline(always)]
            pub fn default(self) -> &'a mut W {
                self.variant(CCUS_A::DEFAULT)
            }
            #[doc = "Capture/compare are updated by setting the COMG bit or when an rising edge occurs on TRGI"]
            #[inline(always)]
            pub fn with_rising_edge(self) -> &'a mut W {
                self.variant(CCUS_A::WITHRISINGEDGE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Capture/compare preloaded control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CCPC_A {
            #[doc = "0: CCxE, CCxNE and OCxM bits are not preloaded"]
            NOTPRELOADED = 0,
            #[doc = "1: CCxE, CCxNE and OCxM bits are preloaded"]
            PRELOADED = 1,
        }
        impl From<CCPC_A> for bool {
            #[inline(always)]
            fn from(variant: CCPC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CCPC`"]
        pub type CCPC_R = crate::R<bool, CCPC_A>;
        impl CCPC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CCPC_A {
                match self.bits {
                    false => CCPC_A::NOTPRELOADED,
                    true => CCPC_A::PRELOADED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTPRELOADED`"]
            #[inline(always)]
            pub fn is_not_preloaded(&self) -> bool {
                *self == CCPC_A::NOTPRELOADED
            }
            #[doc = "Checks if the value of the field is `PRELOADED`"]
            #[inline(always)]
            pub fn is_preloaded(&self) -> bool {
                *self == CCPC_A::PRELOADED
            }
        }
        #[doc = "Write proxy for field `CCPC`"]
        pub struct CCPC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCPC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CCPC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CCxE, CCxNE and OCxM bits are not preloaded"]
            #[inline(always)]
            pub fn not_preloaded(self) -> &'a mut W {
                self.variant(CCPC_A::NOTPRELOADED)
            }
            #[doc = "CCxE, CCxNE and OCxM bits are preloaded"]
            #[inline(always)]
            pub fn preloaded(self) -> &'a mut W {
                self.variant(CCPC_A::PRELOADED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 9 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1n(&self) -> OIS1N_R {
                OIS1N_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1(&self) -> OIS1_R {
                OIS1_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&self) -> CCDS_R {
                CCDS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/compare control update selection"]
            #[inline(always)]
            pub fn ccus(&self) -> CCUS_R {
                CCUS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/compare preloaded control"]
            #[inline(always)]
            pub fn ccpc(&self) -> CCPC_R {
                CCPC_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 9 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1n(&mut self) -> OIS1N_W {
                OIS1N_W { w: self }
            }
            #[doc = "Bit 8 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1(&mut self) -> OIS1_W {
                OIS1_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&mut self) -> CCDS_W {
                CCDS_W { w: self }
            }
            #[doc = "Bit 2 - Capture/compare control update selection"]
            #[inline(always)]
            pub fn ccus(&mut self) -> CCUS_W {
                CCUS_W { w: self }
            }
            #[doc = "Bit 0 - Capture/compare preloaded control"]
            #[inline(always)]
            pub fn ccpc(&mut self) -> CCPC_W {
                CCPC_W { w: self }
            }
        }
    }
    #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TDE`"]
        pub type TDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TDE`"]
        pub struct TDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 DMA request enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC1DE_A {
            #[doc = "0: CC1 DMA request disabled"]
            DISABLED = 0,
            #[doc = "1: CC1 DMA request enabled"]
            ENABLED = 1,
        }
        impl From<CC1DE_A> for bool {
            #[inline(always)]
            fn from(variant: CC1DE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC1DE`"]
        pub type CC1DE_R = crate::R<bool, CC1DE_A>;
        impl CC1DE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CC1DE_A {
                match self.bits {
                    false => CC1DE_A::DISABLED,
                    true => CC1DE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CC1DE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CC1DE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CC1DE`"]
        pub struct CC1DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1DE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1DE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CC1 DMA request disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC1DE_A::DISABLED)
            }
            #[doc = "CC1 DMA request enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC1DE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `UDE`"]
        pub type UDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UDE`"]
        pub struct UDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Break interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BIE_A {
            #[doc = "0: Break interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Break interrupt enabled"]
            ENABLED = 1,
        }
        impl From<BIE_A> for bool {
            #[inline(always)]
            fn from(variant: BIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BIE`"]
        pub type BIE_R = crate::R<bool, BIE_A>;
        impl BIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BIE_A {
                match self.bits {
                    false => BIE_A::DISABLED,
                    true => BIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == BIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == BIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `BIE`"]
        pub struct BIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Break interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(BIE_A::DISABLED)
            }
            #[doc = "Break interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(BIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TIE`"]
        pub type TIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIE`"]
        pub struct TIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "COM interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMIE_A {
            #[doc = "0: COM interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: COM interrupt enabled"]
            ENABLED = 1,
        }
        impl From<COMIE_A> for bool {
            #[inline(always)]
            fn from(variant: COMIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMIE`"]
        pub type COMIE_R = crate::R<bool, COMIE_A>;
        impl COMIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMIE_A {
                match self.bits {
                    false => COMIE_A::DISABLED,
                    true => COMIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == COMIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == COMIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `COMIE`"]
        pub struct COMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "COM interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(COMIE_A::DISABLED)
            }
            #[doc = "COM interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(COMIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Capture/Compare 1 interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CC1IE_A {
            #[doc = "0: CC1 interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: CC1 interrupt enabled"]
            ENABLED = 1,
        }
        impl From<CC1IE_A> for bool {
            #[inline(always)]
            fn from(variant: CC1IE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CC1IE`"]
        pub type CC1IE_R = crate::R<bool, CC1IE_A>;
        impl CC1IE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CC1IE_A {
                match self.bits {
                    false => CC1IE_A::DISABLED,
                    true => CC1IE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CC1IE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CC1IE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CC1IE`"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CC1IE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CC1 interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CC1IE_A::DISABLED)
            }
            #[doc = "CC1 interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CC1IE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIE_A {
            #[doc = "0: Update interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: Update interrupt enabled"]
            ENABLED = 1,
        }
        impl From<UIE_A> for bool {
            #[inline(always)]
            fn from(variant: UIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, UIE_A>;
        impl UIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIE_A {
                match self.bits {
                    false => UIE_A::DISABLED,
                    true => UIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == UIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == UIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Update interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(UIE_A::DISABLED)
            }
            #[doc = "Update interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(UIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&self) -> TDE_R {
                TDE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&self) -> CC1DE_R {
                CC1DE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&self) -> UDE_R {
                UDE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Break interrupt enable"]
            #[inline(always)]
            pub fn bie(&self) -> BIE_R {
                BIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&self) -> TIE_R {
                TIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - COM interrupt enable"]
            #[inline(always)]
            pub fn comie(&self) -> COMIE_R {
                COMIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&mut self) -> TDE_W {
                TDE_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&mut self) -> CC1DE_W {
                CC1DE_W { w: self }
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&mut self) -> UDE_W {
                UDE_W { w: self }
            }
            #[doc = "Bit 7 - Break interrupt enable"]
            #[inline(always)]
            pub fn bie(&mut self) -> BIE_W {
                BIE_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&mut self) -> TIE_W {
                TIE_W { w: self }
            }
            #[doc = "Bit 5 - COM interrupt enable"]
            #[inline(always)]
            pub fn comie(&mut self) -> COMIE_W {
                COMIE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1OF`"]
        pub type CC1OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1OF`"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `BIF`"]
        pub type BIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BIF`"]
        pub struct BIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TIF`"]
        pub type TIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIF`"]
        pub struct TIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `COMIF`"]
        pub type COMIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMIF`"]
        pub struct COMIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IF`"]
        pub type CC1IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IF`"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update interrupt flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UIF_A {
            #[doc = "0: No update occurred"]
            CLEAR = 0,
            #[doc = "1: Update interrupt pending."]
            UPDATEPENDING = 1,
        }
        impl From<UIF_A> for bool {
            #[inline(always)]
            fn from(variant: UIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, UIF_A>;
        impl UIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UIF_A {
                match self.bits {
                    false => UIF_A::CLEAR,
                    true => UIF_A::UPDATEPENDING,
                }
            }
            #[doc = "Checks if the value of the field is `CLEAR`"]
            #[inline(always)]
            pub fn is_clear(&self) -> bool {
                *self == UIF_A::CLEAR
            }
            #[doc = "Checks if the value of the field is `UPDATEPENDING`"]
            #[inline(always)]
            pub fn is_update_pending(&self) -> bool {
                *self == UIF_A::UPDATEPENDING
            }
        }
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No update occurred"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(UIF_A::CLEAR)
            }
            #[doc = "Update interrupt pending."]
            #[inline(always)]
            pub fn update_pending(self) -> &'a mut W {
                self.variant(UIF_A::UPDATEPENDING)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Break interrupt flag"]
            #[inline(always)]
            pub fn bif(&self) -> BIF_R {
                BIF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&self) -> TIF_R {
                TIF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - COM interrupt flag"]
            #[inline(always)]
            pub fn comif(&self) -> COMIF_R {
                COMIF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
            #[doc = "Bit 7 - Break interrupt flag"]
            #[inline(always)]
            pub fn bif(&mut self) -> BIF_W {
                BIF_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&mut self) -> TIF_W {
                TIF_W { w: self }
            }
            #[doc = "Bit 5 - COM interrupt flag"]
            #[inline(always)]
            pub fn comif(&mut self) -> COMIF_W {
                COMIF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
        }
    }
    #[doc = "event generation register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `BG`"]
        pub struct BG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `TG`"]
        pub struct TG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `COMG`"]
        pub struct COMG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `CC1G`"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Update generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UG_AW {
            #[doc = "1: Re-initializes the timer counter and generates an update of the registers."]
            UPDATE = 1,
        }
        impl From<UG_AW> for bool {
            #[inline(always)]
            fn from(variant: UG_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UG_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Re-initializes the timer counter and generates an update of the registers."]
            #[inline(always)]
            pub fn update(self) -> &'a mut W {
                self.variant(UG_AW::UPDATE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 7 - Break generation"]
            #[inline(always)]
            pub fn bg(&mut self) -> BG_W {
                BG_W { w: self }
            }
            #[doc = "Bit 6 - Trigger generation"]
            #[inline(always)]
            pub fn tg(&mut self) -> TG_W {
                TG_W { w: self }
            }
            #[doc = "Bit 5 - Capture/Compare control update generation"]
            #[inline(always)]
            pub fn comg(&mut self) -> COMG_W {
                COMG_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](ccmr1_output) module"]
    pub type CCMR1_OUTPUT = crate::Reg<u32, _CCMR1_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_OUTPUT;
    #[doc = "`read()` method returns [ccmr1_output::R](ccmr1_output::R) reader structure"]
    impl crate::Readable for CCMR1_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](ccmr1_output::W) writer structure"]
    impl crate::Writable for CCMR1_OUTPUT {}
    #[doc = "capture/compare mode register (output mode)"]
    pub mod ccmr1_output {
        #[doc = "Reader of register CCMR1_Output"]
        pub type R = crate::R<u32, super::CCMR1_OUTPUT>;
        #[doc = "Writer for register CCMR1_Output"]
        pub type W = crate::W<u32, super::CCMR1_OUTPUT>;
        #[doc = "Register CCMR1_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OC1M`"]
        pub type OC1M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC1M`"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OC1PE`"]
        pub type OC1PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1PE`"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC1FE`"]
        pub type OC1FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1FE`"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Output Compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bit 2 - Output Compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](ccmr1_input) module"]
    pub type CCMR1_INPUT = crate::Reg<u32, _CCMR1_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_INPUT;
    #[doc = "`read()` method returns [ccmr1_input::R](ccmr1_input::R) reader structure"]
    impl crate::Readable for CCMR1_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](ccmr1_input::W) writer structure"]
    impl crate::Writable for CCMR1_INPUT {}
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Reader of register CCMR1_Input"]
        pub type R = crate::R<u32, super::CCMR1_INPUT>;
        #[doc = "Writer for register CCMR1_Input"]
        pub type W = crate::W<u32, super::CCMR1_INPUT>;
        #[doc = "Register CCMR1_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC1F`"]
        pub type IC1F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1F`"]
        pub struct IC1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC1PSC`"]
        pub type IC1PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1PSC`"]
        pub struct IC1PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&self) -> IC1F_R {
                IC1F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&self) -> IC1PSC_R {
                IC1PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&mut self) -> IC1F_W {
                IC1F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&mut self) -> IC1PSC_W {
                IC1PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](ccer) module"]
    pub type CCER = crate::Reg<u32, _CCER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCER;
    #[doc = "`read()` method returns [ccer::R](ccer::R) reader structure"]
    impl crate::Readable for CCER {}
    #[doc = "`write(|w| ..)` method takes [ccer::W](ccer::W) writer structure"]
    impl crate::Writable for CCER {}
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Reader of register CCER"]
        pub type R = crate::R<u32, super::CCER>;
        #[doc = "Writer for register CCER"]
        pub type W = crate::W<u32, super::CCER>;
        #[doc = "Register CCER `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1NP`"]
        pub type CC1NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NP`"]
        pub struct CC1NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC1NE`"]
        pub type CC1NE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NE`"]
        pub struct CC1NE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1P`"]
        pub type CC1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1P`"]
        pub struct CC1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC1E`"]
        pub type CC1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1E`"]
        pub struct CC1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&self) -> CC1NP_R {
                CC1NP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
            #[inline(always)]
            pub fn cc1ne(&self) -> CC1NE_R {
                CC1NE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&self) -> CC1P_R {
                CC1P_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&self) -> CC1E_R {
                CC1E_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&mut self) -> CC1NP_W {
                CC1NP_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
            #[inline(always)]
            pub fn cc1ne(&mut self) -> CC1NE_W {
                CC1NE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&mut self) -> CC1P_W {
                CC1P_W { w: self }
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&mut self) -> CC1E_W {
                CC1E_W { w: self }
            }
        }
    }
    #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
    #[doc = "repetition counter register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rcr](rcr) module"]
    pub type RCR = crate::Reg<u32, _RCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RCR;
    #[doc = "`read()` method returns [rcr::R](rcr::R) reader structure"]
    impl crate::Readable for RCR {}
    #[doc = "`write(|w| ..)` method takes [rcr::W](rcr::W) writer structure"]
    impl crate::Writable for RCR {}
    #[doc = "repetition counter register"]
    pub mod rcr {
        #[doc = "Reader of register RCR"]
        pub type R = crate::R<u32, super::RCR>;
        #[doc = "Writer for register RCR"]
        pub type W = crate::W<u32, super::RCR>;
        #[doc = "Register RCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `REP`"]
        pub type REP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `REP`"]
        pub struct REP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Repetition counter value"]
            #[inline(always)]
            pub fn rep(&self) -> REP_R {
                REP_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Repetition counter value"]
            #[inline(always)]
            pub fn rep(&mut self) -> REP_W {
                REP_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr1](ccr1) module"]
    pub type CCR1 = crate::Reg<u32, _CCR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR1;
    #[doc = "`read()` method returns [ccr1::R](ccr1::R) reader structure"]
    impl crate::Readable for CCR1 {}
    #[doc = "`write(|w| ..)` method takes [ccr1::W](ccr1::W) writer structure"]
    impl crate::Writable for CCR1 {}
    #[doc = "capture/compare register 1"]
    pub mod ccr1 {
        #[doc = "Reader of register CCR1"]
        pub type R = crate::R<u32, super::CCR1>;
        #[doc = "Writer for register CCR1"]
        pub type W = crate::W<u32, super::CCR1>;
        #[doc = "Register CCR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR1`"]
        pub type CCR1_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR1`"]
        pub struct CCR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr1(&self) -> CCR1_R {
                CCR1_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr1(&mut self) -> CCR1_W {
                CCR1_W { w: self }
            }
        }
    }
    #[doc = "break and dead-time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdtr](bdtr) module"]
    pub type BDTR = crate::Reg<u32, _BDTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BDTR;
    #[doc = "`read()` method returns [bdtr::R](bdtr::R) reader structure"]
    impl crate::Readable for BDTR {}
    #[doc = "`write(|w| ..)` method takes [bdtr::W](bdtr::W) writer structure"]
    impl crate::Writable for BDTR {}
    #[doc = "break and dead-time register"]
    pub mod bdtr {
        #[doc = "Reader of register BDTR"]
        pub type R = crate::R<u32, super::BDTR>;
        #[doc = "Writer for register BDTR"]
        pub type W = crate::W<u32, super::BDTR>;
        #[doc = "Register BDTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BDTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MOE`"]
        pub type MOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MOE`"]
        pub struct MOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `AOE`"]
        pub type AOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AOE`"]
        pub struct AOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `BKE`"]
        pub type BKE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKE`"]
        pub struct BKE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OSSR`"]
        pub type OSSR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OSSR`"]
        pub struct OSSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSSR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OSSI`"]
        pub type OSSI_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OSSI`"]
        pub struct OSSI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSSI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `LOCK`"]
        pub type LOCK_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LOCK`"]
        pub struct LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOCK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DTG`"]
        pub type DTG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DTG`"]
        pub struct DTG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Main output enable"]
            #[inline(always)]
            pub fn moe(&self) -> MOE_R {
                MOE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Automatic output enable"]
            #[inline(always)]
            pub fn aoe(&self) -> AOE_R {
                AOE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Break polarity"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Break enable"]
            #[inline(always)]
            pub fn bke(&self) -> BKE_R {
                BKE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Off-state selection for Run mode"]
            #[inline(always)]
            pub fn ossr(&self) -> OSSR_R {
                OSSR_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Off-state selection for Idle mode"]
            #[inline(always)]
            pub fn ossi(&self) -> OSSI_R {
                OSSI_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Lock configuration"]
            #[inline(always)]
            pub fn lock(&self) -> LOCK_R {
                LOCK_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:7 - Dead-time generator setup"]
            #[inline(always)]
            pub fn dtg(&self) -> DTG_R {
                DTG_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 15 - Main output enable"]
            #[inline(always)]
            pub fn moe(&mut self) -> MOE_W {
                MOE_W { w: self }
            }
            #[doc = "Bit 14 - Automatic output enable"]
            #[inline(always)]
            pub fn aoe(&mut self) -> AOE_W {
                AOE_W { w: self }
            }
            #[doc = "Bit 13 - Break polarity"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
            #[doc = "Bit 12 - Break enable"]
            #[inline(always)]
            pub fn bke(&mut self) -> BKE_W {
                BKE_W { w: self }
            }
            #[doc = "Bit 11 - Off-state selection for Run mode"]
            #[inline(always)]
            pub fn ossr(&mut self) -> OSSR_W {
                OSSR_W { w: self }
            }
            #[doc = "Bit 10 - Off-state selection for Idle mode"]
            #[inline(always)]
            pub fn ossi(&mut self) -> OSSI_W {
                OSSI_W { w: self }
            }
            #[doc = "Bits 8:9 - Lock configuration"]
            #[inline(always)]
            pub fn lock(&mut self) -> LOCK_W {
                LOCK_W { w: self }
            }
            #[doc = "Bits 0:7 - Dead-time generator setup"]
            #[inline(always)]
            pub fn dtg(&mut self) -> DTG_W {
                DTG_W { w: self }
            }
        }
    }
    #[doc = "DMA control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcr](dcr) module"]
    pub type DCR = crate::Reg<u32, _DCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DCR;
    #[doc = "`read()` method returns [dcr::R](dcr::R) reader structure"]
    impl crate::Readable for DCR {}
    #[doc = "`write(|w| ..)` method takes [dcr::W](dcr::W) writer structure"]
    impl crate::Writable for DCR {}
    #[doc = "DMA control register"]
    pub mod dcr {
        #[doc = "Reader of register DCR"]
        pub type R = crate::R<u32, super::DCR>;
        #[doc = "Writer for register DCR"]
        pub type W = crate::W<u32, super::DCR>;
        #[doc = "Register DCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBL`"]
        pub type DBL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBL`"]
        pub struct DBL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DBA`"]
        pub type DBA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBA`"]
        pub struct DBA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&self) -> DBL_R {
                DBL_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&self) -> DBA_R {
                DBA_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&mut self) -> DBL_W {
                DBL_W { w: self }
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&mut self) -> DBA_W {
                DBA_W { w: self }
            }
        }
    }
    #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmar](dmar) module"]
    pub type DMAR = crate::Reg<u32, _DMAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAR;
    #[doc = "`read()` method returns [dmar::R](dmar::R) reader structure"]
    impl crate::Readable for DMAR {}
    #[doc = "`write(|w| ..)` method takes [dmar::W](dmar::W) writer structure"]
    impl crate::Writable for DMAR {}
    #[doc = "DMA address for full transfer"]
    pub mod dmar {
        #[doc = "Reader of register DMAR"]
        pub type R = crate::R<u32, super::DMAR>;
        #[doc = "Writer for register DMAR"]
        pub type W = crate::W<u32, super::DMAR>;
        #[doc = "Register DMAR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMAR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAB`"]
        pub type DMAB_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DMAB`"]
        pub struct DMAB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmab(&self) -> DMAB_R {
                DMAB_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmab(&mut self) -> DMAB_W {
                DMAB_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose-timers"]
pub struct TIM17 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM17 {}
impl TIM17 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim16::RegisterBlock {
        0x4001_4800 as *const _
    }
}
impl Deref for TIM17 {
    type Target = tim16::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM17::ptr() }
    }
}
#[doc = "Flash"]
pub struct FLASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FLASH {}
impl FLASH {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const flash::RegisterBlock {
        0x4002_2000 as *const _
    }
}
impl Deref for FLASH {
    type Target = flash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*FLASH::ptr() }
    }
}
#[doc = "Flash"]
pub mod flash {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Flash access control register"]
        pub acr: ACR,
        #[doc = "0x04 - Flash key register"]
        pub keyr: KEYR,
        #[doc = "0x08 - Flash option key register"]
        pub optkeyr: OPTKEYR,
        #[doc = "0x0c - Flash status register"]
        pub sr: SR,
        #[doc = "0x10 - Flash control register"]
        pub cr: CR,
        #[doc = "0x14 - Flash address register"]
        pub ar: AR,
        _reserved6: [u8; 4usize],
        #[doc = "0x1c - Option byte register"]
        pub obr: OBR,
        #[doc = "0x20 - Write protection register"]
        pub wrpr: WRPR,
    }
    #[doc = "Flash access control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [acr](acr) module"]
    pub type ACR = crate::Reg<u32, _ACR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ACR;
    #[doc = "`read()` method returns [acr::R](acr::R) reader structure"]
    impl crate::Readable for ACR {}
    #[doc = "`write(|w| ..)` method takes [acr::W](acr::W) writer structure"]
    impl crate::Writable for ACR {}
    #[doc = "Flash access control register"]
    pub mod acr {
        #[doc = "Reader of register ACR"]
        pub type R = crate::R<u32, super::ACR>;
        #[doc = "Writer for register ACR"]
        pub type W = crate::W<u32, super::ACR>;
        #[doc = "Register ACR `reset()`'s with value 0x30"]
        impl crate::ResetValue for super::ACR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x30
            }
        }
        #[doc = "LATENCY\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum LATENCY_A {
            #[doc = "0: 0 wait states"]
            WS0 = 0,
            #[doc = "1: 1 wait state"]
            WS1 = 1,
        }
        impl From<LATENCY_A> for u8 {
            #[inline(always)]
            fn from(variant: LATENCY_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `LATENCY`"]
        pub type LATENCY_R = crate::R<u8, LATENCY_A>;
        impl LATENCY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, LATENCY_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(LATENCY_A::WS0),
                    1 => Val(LATENCY_A::WS1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `WS0`"]
            #[inline(always)]
            pub fn is_ws0(&self) -> bool {
                *self == LATENCY_A::WS0
            }
            #[doc = "Checks if the value of the field is `WS1`"]
            #[inline(always)]
            pub fn is_ws1(&self) -> bool {
                *self == LATENCY_A::WS1
            }
        }
        #[doc = "Write proxy for field `LATENCY`"]
        pub struct LATENCY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LATENCY_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LATENCY_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "0 wait states"]
            #[inline(always)]
            pub fn ws0(self) -> &'a mut W {
                self.variant(LATENCY_A::WS0)
            }
            #[doc = "1 wait state"]
            #[inline(always)]
            pub fn ws1(self) -> &'a mut W {
                self.variant(LATENCY_A::WS1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        #[doc = "PRFTBE\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PRFTBE_A {
            #[doc = "0: Prefetch is disabled"]
            DISABLED = 0,
            #[doc = "1: Prefetch is enabled"]
            ENABLED = 1,
        }
        impl From<PRFTBE_A> for bool {
            #[inline(always)]
            fn from(variant: PRFTBE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PRFTBE`"]
        pub type PRFTBE_R = crate::R<bool, PRFTBE_A>;
        impl PRFTBE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PRFTBE_A {
                match self.bits {
                    false => PRFTBE_A::DISABLED,
                    true => PRFTBE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == PRFTBE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == PRFTBE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `PRFTBE`"]
        pub struct PRFTBE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRFTBE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PRFTBE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Prefetch is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(PRFTBE_A::DISABLED)
            }
            #[doc = "Prefetch is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(PRFTBE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "PRFTBS\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PRFTBS_A {
            #[doc = "0: Prefetch buffer is disabled"]
            DISABLED = 0,
            #[doc = "1: Prefetch buffer is enabled"]
            ENABLED = 1,
        }
        impl From<PRFTBS_A> for bool {
            #[inline(always)]
            fn from(variant: PRFTBS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PRFTBS`"]
        pub type PRFTBS_R = crate::R<bool, PRFTBS_A>;
        impl PRFTBS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PRFTBS_A {
                match self.bits {
                    false => PRFTBS_A::DISABLED,
                    true => PRFTBS_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == PRFTBS_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == PRFTBS_A::ENABLED
            }
        }
        impl R {
            #[doc = "Bits 0:2 - LATENCY"]
            #[inline(always)]
            pub fn latency(&self) -> LATENCY_R {
                LATENCY_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bit 4 - PRFTBE"]
            #[inline(always)]
            pub fn prftbe(&self) -> PRFTBE_R {
                PRFTBE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - PRFTBS"]
            #[inline(always)]
            pub fn prftbs(&self) -> PRFTBS_R {
                PRFTBS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - LATENCY"]
            #[inline(always)]
            pub fn latency(&mut self) -> LATENCY_W {
                LATENCY_W { w: self }
            }
            #[doc = "Bit 4 - PRFTBE"]
            #[inline(always)]
            pub fn prftbe(&mut self) -> PRFTBE_W {
                PRFTBE_W { w: self }
            }
        }
    }
    #[doc = "Flash key register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [keyr](keyr) module"]
    pub type KEYR = crate::Reg<u32, _KEYR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _KEYR;
    #[doc = "`write(|w| ..)` method takes [keyr::W](keyr::W) writer structure"]
    impl crate::Writable for KEYR {}
    #[doc = "Flash key register"]
    pub mod keyr {
        #[doc = "Writer for register KEYR"]
        pub type W = crate::W<u32, super::KEYR>;
        #[doc = "Register KEYR `reset()`'s with value 0"]
        impl crate::ResetValue for super::KEYR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `FKEYR`"]
        pub struct FKEYR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FKEYR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Flash Key"]
            #[inline(always)]
            pub fn fkeyr(&mut self) -> FKEYR_W {
                FKEYR_W { w: self }
            }
        }
    }
    #[doc = "Flash option key register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [optkeyr](optkeyr) module"]
    pub type OPTKEYR = crate::Reg<u32, _OPTKEYR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OPTKEYR;
    #[doc = "`write(|w| ..)` method takes [optkeyr::W](optkeyr::W) writer structure"]
    impl crate::Writable for OPTKEYR {}
    #[doc = "Flash option key register"]
    pub mod optkeyr {
        #[doc = "Writer for register OPTKEYR"]
        pub type W = crate::W<u32, super::OPTKEYR>;
        #[doc = "Register OPTKEYR `reset()`'s with value 0"]
        impl crate::ResetValue for super::OPTKEYR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `OPTKEYR`"]
        pub struct OPTKEYR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPTKEYR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Option byte key"]
            #[inline(always)]
            pub fn optkeyr(&mut self) -> OPTKEYR_W {
                OPTKEYR_W { w: self }
            }
        }
    }
    #[doc = "Flash status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "Flash status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "End of operation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EOP_A {
            #[doc = "0: No EOP operation occurred"]
            NOEVENT = 0,
            #[doc = "1: An EOP event occurred"]
            EVENT = 1,
        }
        impl From<EOP_A> for bool {
            #[inline(always)]
            fn from(variant: EOP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EOP`"]
        pub type EOP_R = crate::R<bool, EOP_A>;
        impl EOP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EOP_A {
                match self.bits {
                    false => EOP_A::NOEVENT,
                    true => EOP_A::EVENT,
                }
            }
            #[doc = "Checks if the value of the field is `NOEVENT`"]
            #[inline(always)]
            pub fn is_no_event(&self) -> bool {
                *self == EOP_A::NOEVENT
            }
            #[doc = "Checks if the value of the field is `EVENT`"]
            #[inline(always)]
            pub fn is_event(&self) -> bool {
                *self == EOP_A::EVENT
            }
        }
        #[doc = "Write proxy for field `EOP`"]
        pub struct EOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EOP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No EOP operation occurred"]
            #[inline(always)]
            pub fn no_event(self) -> &'a mut W {
                self.variant(EOP_A::NOEVENT)
            }
            #[doc = "An EOP event occurred"]
            #[inline(always)]
            pub fn event(self) -> &'a mut W {
                self.variant(EOP_A::EVENT)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write protection error\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WRPRT_A {
            #[doc = "0: No write protection error occurred"]
            NOERROR = 0,
            #[doc = "1: A write protection error occurred"]
            ERROR = 1,
        }
        impl From<WRPRT_A> for bool {
            #[inline(always)]
            fn from(variant: WRPRT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WRPRT`"]
        pub type WRPRT_R = crate::R<bool, WRPRT_A>;
        impl WRPRT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WRPRT_A {
                match self.bits {
                    false => WRPRT_A::NOERROR,
                    true => WRPRT_A::ERROR,
                }
            }
            #[doc = "Checks if the value of the field is `NOERROR`"]
            #[inline(always)]
            pub fn is_no_error(&self) -> bool {
                *self == WRPRT_A::NOERROR
            }
            #[doc = "Checks if the value of the field is `ERROR`"]
            #[inline(always)]
            pub fn is_error(&self) -> bool {
                *self == WRPRT_A::ERROR
            }
        }
        #[doc = "Write proxy for field `WRPRT`"]
        pub struct WRPRT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRPRT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WRPRT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No write protection error occurred"]
            #[inline(always)]
            pub fn no_error(self) -> &'a mut W {
                self.variant(WRPRT_A::NOERROR)
            }
            #[doc = "A write protection error occurred"]
            #[inline(always)]
            pub fn error(self) -> &'a mut W {
                self.variant(WRPRT_A::ERROR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Programming error\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PGERR_A {
            #[doc = "0: No programming error occurred"]
            NOERROR = 0,
            #[doc = "1: A programming error occurred"]
            ERROR = 1,
        }
        impl From<PGERR_A> for bool {
            #[inline(always)]
            fn from(variant: PGERR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PGERR`"]
        pub type PGERR_R = crate::R<bool, PGERR_A>;
        impl PGERR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PGERR_A {
                match self.bits {
                    false => PGERR_A::NOERROR,
                    true => PGERR_A::ERROR,
                }
            }
            #[doc = "Checks if the value of the field is `NOERROR`"]
            #[inline(always)]
            pub fn is_no_error(&self) -> bool {
                *self == PGERR_A::NOERROR
            }
            #[doc = "Checks if the value of the field is `ERROR`"]
            #[inline(always)]
            pub fn is_error(&self) -> bool {
                *self == PGERR_A::ERROR
            }
        }
        #[doc = "Write proxy for field `PGERR`"]
        pub struct PGERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PGERR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PGERR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No programming error occurred"]
            #[inline(always)]
            pub fn no_error(self) -> &'a mut W {
                self.variant(PGERR_A::NOERROR)
            }
            #[doc = "A programming error occurred"]
            #[inline(always)]
            pub fn error(self) -> &'a mut W {
                self.variant(PGERR_A::ERROR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Busy\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BSY_A {
            #[doc = "0: No write/erase operation is in progress"]
            INACTIVE = 0,
            #[doc = "1: No write/erase operation is in progress"]
            ACTIVE = 1,
        }
        impl From<BSY_A> for bool {
            #[inline(always)]
            fn from(variant: BSY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BSY`"]
        pub type BSY_R = crate::R<bool, BSY_A>;
        impl BSY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BSY_A {
                match self.bits {
                    false => BSY_A::INACTIVE,
                    true => BSY_A::ACTIVE,
                }
            }
            #[doc = "Checks if the value of the field is `INACTIVE`"]
            #[inline(always)]
            pub fn is_inactive(&self) -> bool {
                *self == BSY_A::INACTIVE
            }
            #[doc = "Checks if the value of the field is `ACTIVE`"]
            #[inline(always)]
            pub fn is_active(&self) -> bool {
                *self == BSY_A::ACTIVE
            }
        }
        impl R {
            #[doc = "Bit 5 - End of operation"]
            #[inline(always)]
            pub fn eop(&self) -> EOP_R {
                EOP_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Write protection error"]
            #[inline(always)]
            pub fn wrprt(&self) -> WRPRT_R {
                WRPRT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Programming error"]
            #[inline(always)]
            pub fn pgerr(&self) -> PGERR_R {
                PGERR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Busy"]
            #[inline(always)]
            pub fn bsy(&self) -> BSY_R {
                BSY_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 5 - End of operation"]
            #[inline(always)]
            pub fn eop(&mut self) -> EOP_W {
                EOP_W { w: self }
            }
            #[doc = "Bit 4 - Write protection error"]
            #[inline(always)]
            pub fn wrprt(&mut self) -> WRPRT_W {
                WRPRT_W { w: self }
            }
            #[doc = "Bit 2 - Programming error"]
            #[inline(always)]
            pub fn pgerr(&mut self) -> PGERR_W {
                PGERR_W { w: self }
            }
        }
    }
    #[doc = "Flash control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Flash control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0x80"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x80
            }
        }
        #[doc = "Force option byte loading\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FORCE_OPTLOAD_A {
            #[doc = "0: Force option byte loading inactive"]
            INACTIVE = 0,
            #[doc = "1: Force option byte loading active"]
            ACTIVE = 1,
        }
        impl From<FORCE_OPTLOAD_A> for bool {
            #[inline(always)]
            fn from(variant: FORCE_OPTLOAD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FORCE_OPTLOAD`"]
        pub type FORCE_OPTLOAD_R = crate::R<bool, FORCE_OPTLOAD_A>;
        impl FORCE_OPTLOAD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FORCE_OPTLOAD_A {
                match self.bits {
                    false => FORCE_OPTLOAD_A::INACTIVE,
                    true => FORCE_OPTLOAD_A::ACTIVE,
                }
            }
            #[doc = "Checks if the value of the field is `INACTIVE`"]
            #[inline(always)]
            pub fn is_inactive(&self) -> bool {
                *self == FORCE_OPTLOAD_A::INACTIVE
            }
            #[doc = "Checks if the value of the field is `ACTIVE`"]
            #[inline(always)]
            pub fn is_active(&self) -> bool {
                *self == FORCE_OPTLOAD_A::ACTIVE
            }
        }
        #[doc = "Write proxy for field `FORCE_OPTLOAD`"]
        pub struct FORCE_OPTLOAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FORCE_OPTLOAD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FORCE_OPTLOAD_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Force option byte loading inactive"]
            #[inline(always)]
            pub fn inactive(self) -> &'a mut W {
                self.variant(FORCE_OPTLOAD_A::INACTIVE)
            }
            #[doc = "Force option byte loading active"]
            #[inline(always)]
            pub fn active(self) -> &'a mut W {
                self.variant(FORCE_OPTLOAD_A::ACTIVE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "End of operation interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EOPIE_A {
            #[doc = "0: End of operation interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: End of operation interrupt enabled"]
            ENABLED = 1,
        }
        impl From<EOPIE_A> for bool {
            #[inline(always)]
            fn from(variant: EOPIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EOPIE`"]
        pub type EOPIE_R = crate::R<bool, EOPIE_A>;
        impl EOPIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EOPIE_A {
                match self.bits {
                    false => EOPIE_A::DISABLED,
                    true => EOPIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == EOPIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == EOPIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `EOPIE`"]
        pub struct EOPIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOPIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EOPIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "End of operation interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(EOPIE_A::DISABLED)
            }
            #[doc = "End of operation interrupt enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(EOPIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Error interrupt enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ERRIE_A {
            #[doc = "0: Error interrupt generation disabled"]
            DISABLED = 0,
            #[doc = "1: Error interrupt generation enabled"]
            ENABLED = 1,
        }
        impl From<ERRIE_A> for bool {
            #[inline(always)]
            fn from(variant: ERRIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ERRIE`"]
        pub type ERRIE_R = crate::R<bool, ERRIE_A>;
        impl ERRIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ERRIE_A {
                match self.bits {
                    false => ERRIE_A::DISABLED,
                    true => ERRIE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ERRIE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ERRIE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ERRIE`"]
        pub struct ERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERRIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ERRIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Error interrupt generation disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ERRIE_A::DISABLED)
            }
            #[doc = "Error interrupt generation enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ERRIE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Option bytes write enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OPTWRE_A {
            #[doc = "0: Option byte write enabled"]
            DISABLED = 0,
            #[doc = "1: Option byte write disabled"]
            ENABLED = 1,
        }
        impl From<OPTWRE_A> for bool {
            #[inline(always)]
            fn from(variant: OPTWRE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OPTWRE`"]
        pub type OPTWRE_R = crate::R<bool, OPTWRE_A>;
        impl OPTWRE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OPTWRE_A {
                match self.bits {
                    false => OPTWRE_A::DISABLED,
                    true => OPTWRE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == OPTWRE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == OPTWRE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `OPTWRE`"]
        pub struct OPTWRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPTWRE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OPTWRE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Option byte write enabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(OPTWRE_A::DISABLED)
            }
            #[doc = "Option byte write disabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(OPTWRE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Lock\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LOCK_A {
            #[doc = "0: FLASH_CR register is unlocked"]
            UNLOCKED = 0,
            #[doc = "1: FLASH_CR register is locked"]
            LOCKED = 1,
        }
        impl From<LOCK_A> for bool {
            #[inline(always)]
            fn from(variant: LOCK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LOCK`"]
        pub type LOCK_R = crate::R<bool, LOCK_A>;
        impl LOCK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LOCK_A {
                match self.bits {
                    false => LOCK_A::UNLOCKED,
                    true => LOCK_A::LOCKED,
                }
            }
            #[doc = "Checks if the value of the field is `UNLOCKED`"]
            #[inline(always)]
            pub fn is_unlocked(&self) -> bool {
                *self == LOCK_A::UNLOCKED
            }
            #[doc = "Checks if the value of the field is `LOCKED`"]
            #[inline(always)]
            pub fn is_locked(&self) -> bool {
                *self == LOCK_A::LOCKED
            }
        }
        #[doc = "Write proxy for field `LOCK`"]
        pub struct LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOCK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LOCK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FLASH_CR register is unlocked"]
            #[inline(always)]
            pub fn unlocked(self) -> &'a mut W {
                self.variant(LOCK_A::UNLOCKED)
            }
            #[doc = "FLASH_CR register is locked"]
            #[inline(always)]
            pub fn locked(self) -> &'a mut W {
                self.variant(LOCK_A::LOCKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Start\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum STRT_A {
            #[doc = "1: Trigger an erase operation"]
            START = 1,
        }
        impl From<STRT_A> for bool {
            #[inline(always)]
            fn from(variant: STRT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `STRT`"]
        pub type STRT_R = crate::R<bool, STRT_A>;
        impl STRT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, STRT_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(STRT_A::START),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `START`"]
            #[inline(always)]
            pub fn is_start(&self) -> bool {
                *self == STRT_A::START
            }
        }
        #[doc = "Write proxy for field `STRT`"]
        pub struct STRT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STRT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STRT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Trigger an erase operation"]
            #[inline(always)]
            pub fn start(self) -> &'a mut W {
                self.variant(STRT_A::START)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Option byte erase\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OPTER_A {
            #[doc = "1: Erase option byte activated"]
            OPTIONBYTEERASE = 1,
        }
        impl From<OPTER_A> for bool {
            #[inline(always)]
            fn from(variant: OPTER_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OPTER`"]
        pub type OPTER_R = crate::R<bool, OPTER_A>;
        impl OPTER_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, OPTER_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(OPTER_A::OPTIONBYTEERASE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OPTIONBYTEERASE`"]
            #[inline(always)]
            pub fn is_option_byte_erase(&self) -> bool {
                *self == OPTER_A::OPTIONBYTEERASE
            }
        }
        #[doc = "Write proxy for field `OPTER`"]
        pub struct OPTER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPTER_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OPTER_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Erase option byte activated"]
            #[inline(always)]
            pub fn option_byte_erase(self) -> &'a mut W {
                self.variant(OPTER_A::OPTIONBYTEERASE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Option byte programming\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OPTPG_A {
            #[doc = "1: Program option byte activated"]
            OPTIONBYTEPROGRAMMING = 1,
        }
        impl From<OPTPG_A> for bool {
            #[inline(always)]
            fn from(variant: OPTPG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OPTPG`"]
        pub type OPTPG_R = crate::R<bool, OPTPG_A>;
        impl OPTPG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, OPTPG_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(OPTPG_A::OPTIONBYTEPROGRAMMING),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OPTIONBYTEPROGRAMMING`"]
            #[inline(always)]
            pub fn is_option_byte_programming(&self) -> bool {
                *self == OPTPG_A::OPTIONBYTEPROGRAMMING
            }
        }
        #[doc = "Write proxy for field `OPTPG`"]
        pub struct OPTPG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPTPG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OPTPG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Program option byte activated"]
            #[inline(always)]
            pub fn option_byte_programming(self) -> &'a mut W {
                self.variant(OPTPG_A::OPTIONBYTEPROGRAMMING)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Mass erase\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MER_A {
            #[doc = "1: Erase activated for all user sectors"]
            MASSERASE = 1,
        }
        impl From<MER_A> for bool {
            #[inline(always)]
            fn from(variant: MER_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MER`"]
        pub type MER_R = crate::R<bool, MER_A>;
        impl MER_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, MER_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(MER_A::MASSERASE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `MASSERASE`"]
            #[inline(always)]
            pub fn is_mass_erase(&self) -> bool {
                *self == MER_A::MASSERASE
            }
        }
        #[doc = "Write proxy for field `MER`"]
        pub struct MER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MER_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MER_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Erase activated for all user sectors"]
            #[inline(always)]
            pub fn mass_erase(self) -> &'a mut W {
                self.variant(MER_A::MASSERASE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Page erase\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PER_A {
            #[doc = "1: Erase activated for selected page"]
            PAGEERASE = 1,
        }
        impl From<PER_A> for bool {
            #[inline(always)]
            fn from(variant: PER_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PER`"]
        pub type PER_R = crate::R<bool, PER_A>;
        impl PER_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, PER_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(PER_A::PAGEERASE),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PAGEERASE`"]
            #[inline(always)]
            pub fn is_page_erase(&self) -> bool {
                *self == PER_A::PAGEERASE
            }
        }
        #[doc = "Write proxy for field `PER`"]
        pub struct PER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PER_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PER_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Erase activated for selected page"]
            #[inline(always)]
            pub fn page_erase(self) -> &'a mut W {
                self.variant(PER_A::PAGEERASE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Programming\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PG_A {
            #[doc = "1: Flash programming activated"]
            PROGRAM = 1,
        }
        impl From<PG_A> for bool {
            #[inline(always)]
            fn from(variant: PG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PG`"]
        pub type PG_R = crate::R<bool, PG_A>;
        impl PG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, PG_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(PG_A::PROGRAM),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PROGRAM`"]
            #[inline(always)]
            pub fn is_program(&self) -> bool {
                *self == PG_A::PROGRAM
            }
        }
        #[doc = "Write proxy for field `PG`"]
        pub struct PG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Flash programming activated"]
            #[inline(always)]
            pub fn program(self) -> &'a mut W {
                self.variant(PG_A::PROGRAM)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 13 - Force option byte loading"]
            #[inline(always)]
            pub fn force_optload(&self) -> FORCE_OPTLOAD_R {
                FORCE_OPTLOAD_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - End of operation interrupt enable"]
            #[inline(always)]
            pub fn eopie(&self) -> EOPIE_R {
                EOPIE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&self) -> ERRIE_R {
                ERRIE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Option bytes write enable"]
            #[inline(always)]
            pub fn optwre(&self) -> OPTWRE_R {
                OPTWRE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Lock"]
            #[inline(always)]
            pub fn lock(&self) -> LOCK_R {
                LOCK_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Start"]
            #[inline(always)]
            pub fn strt(&self) -> STRT_R {
                STRT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Option byte erase"]
            #[inline(always)]
            pub fn opter(&self) -> OPTER_R {
                OPTER_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Option byte programming"]
            #[inline(always)]
            pub fn optpg(&self) -> OPTPG_R {
                OPTPG_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Mass erase"]
            #[inline(always)]
            pub fn mer(&self) -> MER_R {
                MER_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Page erase"]
            #[inline(always)]
            pub fn per(&self) -> PER_R {
                PER_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Programming"]
            #[inline(always)]
            pub fn pg(&self) -> PG_R {
                PG_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 13 - Force option byte loading"]
            #[inline(always)]
            pub fn force_optload(&mut self) -> FORCE_OPTLOAD_W {
                FORCE_OPTLOAD_W { w: self }
            }
            #[doc = "Bit 12 - End of operation interrupt enable"]
            #[inline(always)]
            pub fn eopie(&mut self) -> EOPIE_W {
                EOPIE_W { w: self }
            }
            #[doc = "Bit 10 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&mut self) -> ERRIE_W {
                ERRIE_W { w: self }
            }
            #[doc = "Bit 9 - Option bytes write enable"]
            #[inline(always)]
            pub fn optwre(&mut self) -> OPTWRE_W {
                OPTWRE_W { w: self }
            }
            #[doc = "Bit 7 - Lock"]
            #[inline(always)]
            pub fn lock(&mut self) -> LOCK_W {
                LOCK_W { w: self }
            }
            #[doc = "Bit 6 - Start"]
            #[inline(always)]
            pub fn strt(&mut self) -> STRT_W {
                STRT_W { w: self }
            }
            #[doc = "Bit 5 - Option byte erase"]
            #[inline(always)]
            pub fn opter(&mut self) -> OPTER_W {
                OPTER_W { w: self }
            }
            #[doc = "Bit 4 - Option byte programming"]
            #[inline(always)]
            pub fn optpg(&mut self) -> OPTPG_W {
                OPTPG_W { w: self }
            }
            #[doc = "Bit 2 - Mass erase"]
            #[inline(always)]
            pub fn mer(&mut self) -> MER_W {
                MER_W { w: self }
            }
            #[doc = "Bit 1 - Page erase"]
            #[inline(always)]
            pub fn per(&mut self) -> PER_W {
                PER_W { w: self }
            }
            #[doc = "Bit 0 - Programming"]
            #[inline(always)]
            pub fn pg(&mut self) -> PG_W {
                PG_W { w: self }
            }
        }
    }
    #[doc = "Flash address register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ar](ar) module"]
    pub type AR = crate::Reg<u32, _AR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AR;
    #[doc = "`write(|w| ..)` method takes [ar::W](ar::W) writer structure"]
    impl crate::Writable for AR {}
    #[doc = "Flash address register"]
    pub mod ar {
        #[doc = "Writer for register AR"]
        pub type W = crate::W<u32, super::AR>;
        #[doc = "Register AR `reset()`'s with value 0"]
        impl crate::ResetValue for super::AR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `FAR`"]
        pub struct FAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Flash address"]
            #[inline(always)]
            pub fn far(&mut self) -> FAR_W {
                FAR_W { w: self }
            }
        }
    }
    #[doc = "Option byte register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [obr](obr) module"]
    pub type OBR = crate::Reg<u32, _OBR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OBR;
    #[doc = "`read()` method returns [obr::R](obr::R) reader structure"]
    impl crate::Readable for OBR {}
    #[doc = "Option byte register"]
    pub mod obr {
        #[doc = "Reader of register OBR"]
        pub type R = crate::R<u32, super::OBR>;
        #[doc = "Option byte error\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OPTERR_A {
            #[doc = "1: The loaded option byte and its complement do not match"]
            OPTIONBYTEERROR = 1,
        }
        impl From<OPTERR_A> for bool {
            #[inline(always)]
            fn from(variant: OPTERR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OPTERR`"]
        pub type OPTERR_R = crate::R<bool, OPTERR_A>;
        impl OPTERR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, OPTERR_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(OPTERR_A::OPTIONBYTEERROR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OPTIONBYTEERROR`"]
            #[inline(always)]
            pub fn is_option_byte_error(&self) -> bool {
                *self == OPTERR_A::OPTIONBYTEERROR
            }
        }
        #[doc = "Read protection level status\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum RDPRT_A {
            #[doc = "0: Level 0"]
            LEVEL0 = 0,
            #[doc = "1: Level 1"]
            LEVEL1 = 1,
            #[doc = "3: Level 2"]
            LEVEL2 = 3,
        }
        impl From<RDPRT_A> for u8 {
            #[inline(always)]
            fn from(variant: RDPRT_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `RDPRT`"]
        pub type RDPRT_R = crate::R<u8, RDPRT_A>;
        impl RDPRT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, RDPRT_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(RDPRT_A::LEVEL0),
                    1 => Val(RDPRT_A::LEVEL1),
                    3 => Val(RDPRT_A::LEVEL2),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `LEVEL0`"]
            #[inline(always)]
            pub fn is_level0(&self) -> bool {
                *self == RDPRT_A::LEVEL0
            }
            #[doc = "Checks if the value of the field is `LEVEL1`"]
            #[inline(always)]
            pub fn is_level1(&self) -> bool {
                *self == RDPRT_A::LEVEL1
            }
            #[doc = "Checks if the value of the field is `LEVEL2`"]
            #[inline(always)]
            pub fn is_level2(&self) -> bool {
                *self == RDPRT_A::LEVEL2
            }
        }
        #[doc = "WDG_SW\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WDG_SW_A {
            #[doc = "0: Hardware watchdog"]
            HARDWARE = 0,
            #[doc = "1: Software watchdog"]
            SOFTWARE = 1,
        }
        impl From<WDG_SW_A> for bool {
            #[inline(always)]
            fn from(variant: WDG_SW_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WDG_SW`"]
        pub type WDG_SW_R = crate::R<bool, WDG_SW_A>;
        impl WDG_SW_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WDG_SW_A {
                match self.bits {
                    false => WDG_SW_A::HARDWARE,
                    true => WDG_SW_A::SOFTWARE,
                }
            }
            #[doc = "Checks if the value of the field is `HARDWARE`"]
            #[inline(always)]
            pub fn is_hardware(&self) -> bool {
                *self == WDG_SW_A::HARDWARE
            }
            #[doc = "Checks if the value of the field is `SOFTWARE`"]
            #[inline(always)]
            pub fn is_software(&self) -> bool {
                *self == WDG_SW_A::SOFTWARE
            }
        }
        #[doc = "nRST_STOP\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NRST_STOP_A {
            #[doc = "0: Reset generated when entering Stop mode"]
            RESET = 0,
            #[doc = "1: No reset generated"]
            NORESET = 1,
        }
        impl From<NRST_STOP_A> for bool {
            #[inline(always)]
            fn from(variant: NRST_STOP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `nRST_STOP`"]
        pub type NRST_STOP_R = crate::R<bool, NRST_STOP_A>;
        impl NRST_STOP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> NRST_STOP_A {
                match self.bits {
                    false => NRST_STOP_A::RESET,
                    true => NRST_STOP_A::NORESET,
                }
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == NRST_STOP_A::RESET
            }
            #[doc = "Checks if the value of the field is `NORESET`"]
            #[inline(always)]
            pub fn is_no_reset(&self) -> bool {
                *self == NRST_STOP_A::NORESET
            }
        }
        #[doc = "nRST_STDBY\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NRST_STDBY_A {
            #[doc = "0: Reset generated when entering Standby mode"]
            RESET = 0,
            #[doc = "1: No reset generated"]
            NORESET = 1,
        }
        impl From<NRST_STDBY_A> for bool {
            #[inline(always)]
            fn from(variant: NRST_STDBY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `nRST_STDBY`"]
        pub type NRST_STDBY_R = crate::R<bool, NRST_STDBY_A>;
        impl NRST_STDBY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> NRST_STDBY_A {
                match self.bits {
                    false => NRST_STDBY_A::RESET,
                    true => NRST_STDBY_A::NORESET,
                }
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == NRST_STDBY_A::RESET
            }
            #[doc = "Checks if the value of the field is `NORESET`"]
            #[inline(always)]
            pub fn is_no_reset(&self) -> bool {
                *self == NRST_STDBY_A::NORESET
            }
        }
        #[doc = "BOOT1\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NBOOT1_A {
            #[doc = "0: Together with BOOT0, select the device boot mode"]
            DISABLED = 0,
            #[doc = "1: Together with BOOT0, select the device boot mode"]
            ENABLED = 1,
        }
        impl From<NBOOT1_A> for bool {
            #[inline(always)]
            fn from(variant: NBOOT1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `nBOOT1`"]
        pub type NBOOT1_R = crate::R<bool, NBOOT1_A>;
        impl NBOOT1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> NBOOT1_A {
                match self.bits {
                    false => NBOOT1_A::DISABLED,
                    true => NBOOT1_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == NBOOT1_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == NBOOT1_A::ENABLED
            }
        }
        #[doc = "VDDA_MONITOR\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum VDDA_MONITOR_A {
            #[doc = "0: VDDA power supply supervisor disabled"]
            DISABLED = 0,
            #[doc = "1: VDDA power supply supervisor enabled"]
            ENABLED = 1,
        }
        impl From<VDDA_MONITOR_A> for bool {
            #[inline(always)]
            fn from(variant: VDDA_MONITOR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `VDDA_MONITOR`"]
        pub type VDDA_MONITOR_R = crate::R<bool, VDDA_MONITOR_A>;
        impl VDDA_MONITOR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> VDDA_MONITOR_A {
                match self.bits {
                    false => VDDA_MONITOR_A::DISABLED,
                    true => VDDA_MONITOR_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == VDDA_MONITOR_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == VDDA_MONITOR_A::ENABLED
            }
        }
        #[doc = "RAM_PARITY_CHECK\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RAM_PARITY_CHECK_A {
            #[doc = "1: RAM parity check disabled"]
            DISABLED = 1,
            #[doc = "0: RAM parity check enabled"]
            ENABLED = 0,
        }
        impl From<RAM_PARITY_CHECK_A> for bool {
            #[inline(always)]
            fn from(variant: RAM_PARITY_CHECK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RAM_PARITY_CHECK`"]
        pub type RAM_PARITY_CHECK_R = crate::R<bool, RAM_PARITY_CHECK_A>;
        impl RAM_PARITY_CHECK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RAM_PARITY_CHECK_A {
                match self.bits {
                    true => RAM_PARITY_CHECK_A::DISABLED,
                    false => RAM_PARITY_CHECK_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == RAM_PARITY_CHECK_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == RAM_PARITY_CHECK_A::ENABLED
            }
        }
        #[doc = "Reader of field `Data0`"]
        pub type DATA0_R = crate::R<u8, u8>;
        #[doc = "Reader of field `Data1`"]
        pub type DATA1_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bit 0 - Option byte error"]
            #[inline(always)]
            pub fn opterr(&self) -> OPTERR_R {
                OPTERR_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bits 1:2 - Read protection level status"]
            #[inline(always)]
            pub fn rdprt(&self) -> RDPRT_R {
                RDPRT_R::new(((self.bits >> 1) & 0x03) as u8)
            }
            #[doc = "Bit 8 - WDG_SW"]
            #[inline(always)]
            pub fn wdg_sw(&self) -> WDG_SW_R {
                WDG_SW_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - nRST_STOP"]
            #[inline(always)]
            pub fn n_rst_stop(&self) -> NRST_STOP_R {
                NRST_STOP_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - nRST_STDBY"]
            #[inline(always)]
            pub fn n_rst_stdby(&self) -> NRST_STDBY_R {
                NRST_STDBY_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 12 - BOOT1"]
            #[inline(always)]
            pub fn n_boot1(&self) -> NBOOT1_R {
                NBOOT1_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - VDDA_MONITOR"]
            #[inline(always)]
            pub fn vdda_monitor(&self) -> VDDA_MONITOR_R {
                VDDA_MONITOR_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - RAM_PARITY_CHECK"]
            #[inline(always)]
            pub fn ram_parity_check(&self) -> RAM_PARITY_CHECK_R {
                RAM_PARITY_CHECK_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 16:23 - Data0"]
            #[inline(always)]
            pub fn data0(&self) -> DATA0_R {
                DATA0_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Data1"]
            #[inline(always)]
            pub fn data1(&self) -> DATA1_R {
                DATA1_R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
    }
    #[doc = "Write protection register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wrpr](wrpr) module"]
    pub type WRPR = crate::Reg<u32, _WRPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WRPR;
    #[doc = "`read()` method returns [wrpr::R](wrpr::R) reader structure"]
    impl crate::Readable for WRPR {}
    #[doc = "Write protection register"]
    pub mod wrpr {
        #[doc = "Reader of register WRPR"]
        pub type R = crate::R<u32, super::WRPR>;
        #[doc = "Reader of field `WRP`"]
        pub type WRP_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Write protect"]
            #[inline(always)]
            pub fn wrp(&self) -> WRP_R {
                WRP_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
}
#[doc = "Debug support"]
pub struct DBGMCU {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DBGMCU {}
impl DBGMCU {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dbgmcu::RegisterBlock {
        0x4001_5800 as *const _
    }
}
impl Deref for DBGMCU {
    type Target = dbgmcu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*DBGMCU::ptr() }
    }
}
#[doc = "Debug support"]
pub mod dbgmcu {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - MCU Device ID Code Register"]
        pub idcode: IDCODE,
        #[doc = "0x04 - Debug MCU Configuration Register"]
        pub cr: CR,
        #[doc = "0x08 - Debug MCU APB1 freeze register"]
        pub apb1_fz: APB1_FZ,
        #[doc = "0x0c - Debug MCU APB2 freeze register"]
        pub apb2_fz: APB2_FZ,
    }
    #[doc = "MCU Device ID Code Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idcode](idcode) module"]
    pub type IDCODE = crate::Reg<u32, _IDCODE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IDCODE;
    #[doc = "`read()` method returns [idcode::R](idcode::R) reader structure"]
    impl crate::Readable for IDCODE {}
    #[doc = "MCU Device ID Code Register"]
    pub mod idcode {
        #[doc = "Reader of register IDCODE"]
        pub type R = crate::R<u32, super::IDCODE>;
        #[doc = "Reader of field `DEV_ID`"]
        pub type DEV_ID_R = crate::R<u16, u16>;
        #[doc = "Reader of field `DIV_ID`"]
        pub type DIV_ID_R = crate::R<u8, u8>;
        #[doc = "Reader of field `REV_ID`"]
        pub type REV_ID_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:11 - Device Identifier"]
            #[inline(always)]
            pub fn dev_id(&self) -> DEV_ID_R {
                DEV_ID_R::new((self.bits & 0x0fff) as u16)
            }
            #[doc = "Bits 12:15 - Division Identifier"]
            #[inline(always)]
            pub fn div_id(&self) -> DIV_ID_R {
                DIV_ID_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 16:31 - Revision Identifier"]
            #[inline(always)]
            pub fn rev_id(&self) -> REV_ID_R {
                REV_ID_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
    }
    #[doc = "Debug MCU Configuration Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Debug MCU Configuration Register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBG_STOP`"]
        pub type DBG_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_STOP`"]
        pub struct DBG_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_STANDBY`"]
        pub type DBG_STANDBY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_STANDBY`"]
        pub struct DBG_STANDBY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_STANDBY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - Debug Stop Mode"]
            #[inline(always)]
            pub fn dbg_stop(&self) -> DBG_STOP_R {
                DBG_STOP_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Debug Standby Mode"]
            #[inline(always)]
            pub fn dbg_standby(&self) -> DBG_STANDBY_R {
                DBG_STANDBY_R::new(((self.bits >> 2) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Debug Stop Mode"]
            #[inline(always)]
            pub fn dbg_stop(&mut self) -> DBG_STOP_W {
                DBG_STOP_W { w: self }
            }
            #[doc = "Bit 2 - Debug Standby Mode"]
            #[inline(always)]
            pub fn dbg_standby(&mut self) -> DBG_STANDBY_W {
                DBG_STANDBY_W { w: self }
            }
        }
    }
    #[doc = "Debug MCU APB1 freeze register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb1_fz](apb1_fz) module"]
    pub type APB1_FZ = crate::Reg<u32, _APB1_FZ>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB1_FZ;
    #[doc = "`read()` method returns [apb1_fz::R](apb1_fz::R) reader structure"]
    impl crate::Readable for APB1_FZ {}
    #[doc = "`write(|w| ..)` method takes [apb1_fz::W](apb1_fz::W) writer structure"]
    impl crate::Writable for APB1_FZ {}
    #[doc = "Debug MCU APB1 freeze register"]
    pub mod apb1_fz {
        #[doc = "Reader of register APB1_FZ"]
        pub type R = crate::R<u32, super::APB1_FZ>;
        #[doc = "Writer for register APB1_FZ"]
        pub type W = crate::W<u32, super::APB1_FZ>;
        #[doc = "Register APB1_FZ `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB1_FZ {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBG_TIM3_STOP`"]
        pub type DBG_TIM3_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM3_STOP`"]
        pub struct DBG_TIM3_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM3_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM6_STOP`"]
        pub type DBG_TIM6_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM6_STOP`"]
        pub struct DBG_TIM6_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM6_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM7_STOP`"]
        pub type DBG_TIM7_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM7_STOP`"]
        pub struct DBG_TIM7_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM7_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM14_STOP`"]
        pub type DBG_TIM14_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM14_STOP`"]
        pub struct DBG_TIM14_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM14_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_WWDG_STOP`"]
        pub type DBG_WWDG_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_WWDG_STOP`"]
        pub struct DBG_WWDG_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_WWDG_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_IWDG_STOP`"]
        pub type DBG_IWDG_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_IWDG_STOP`"]
        pub struct DBG_IWDG_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_IWDG_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_I2C1_SMBUS_TIMEOUT`"]
        pub type DBG_I2C1_SMBUS_TIMEOUT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_I2C1_SMBUS_TIMEOUT`"]
        pub struct DBG_I2C1_SMBUS_TIMEOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_I2C1_SMBUS_TIMEOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - TIM3 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim3_stop(&self) -> DBG_TIM3_STOP_R {
                DBG_TIM3_STOP_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TIM6 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim6_stop(&self) -> DBG_TIM6_STOP_R {
                DBG_TIM6_STOP_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TIM7 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim7_stop(&self) -> DBG_TIM7_STOP_R {
                DBG_TIM7_STOP_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TIM14 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim14_stop(&self) -> DBG_TIM14_STOP_R {
                DBG_TIM14_STOP_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Debug window watchdog stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_wwdg_stop(&self) -> DBG_WWDG_STOP_R {
                DBG_WWDG_STOP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Debug independent watchdog stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_iwdg_stop(&self) -> DBG_IWDG_STOP_R {
                DBG_IWDG_STOP_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 21 - SMBUS timeout mode stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_i2c1_smbus_timeout(&self) -> DBG_I2C1_SMBUS_TIMEOUT_R {
                DBG_I2C1_SMBUS_TIMEOUT_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - TIM3 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim3_stop(&mut self) -> DBG_TIM3_STOP_W {
                DBG_TIM3_STOP_W { w: self }
            }
            #[doc = "Bit 4 - TIM6 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim6_stop(&mut self) -> DBG_TIM6_STOP_W {
                DBG_TIM6_STOP_W { w: self }
            }
            #[doc = "Bit 5 - TIM7 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim7_stop(&mut self) -> DBG_TIM7_STOP_W {
                DBG_TIM7_STOP_W { w: self }
            }
            #[doc = "Bit 8 - TIM14 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim14_stop(&mut self) -> DBG_TIM14_STOP_W {
                DBG_TIM14_STOP_W { w: self }
            }
            #[doc = "Bit 11 - Debug window watchdog stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_wwdg_stop(&mut self) -> DBG_WWDG_STOP_W {
                DBG_WWDG_STOP_W { w: self }
            }
            #[doc = "Bit 12 - Debug independent watchdog stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_iwdg_stop(&mut self) -> DBG_IWDG_STOP_W {
                DBG_IWDG_STOP_W { w: self }
            }
            #[doc = "Bit 21 - SMBUS timeout mode stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_i2c1_smbus_timeout(&mut self) -> DBG_I2C1_SMBUS_TIMEOUT_W {
                DBG_I2C1_SMBUS_TIMEOUT_W { w: self }
            }
        }
    }
    #[doc = "Debug MCU APB2 freeze register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb2_fz](apb2_fz) module"]
    pub type APB2_FZ = crate::Reg<u32, _APB2_FZ>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB2_FZ;
    #[doc = "`read()` method returns [apb2_fz::R](apb2_fz::R) reader structure"]
    impl crate::Readable for APB2_FZ {}
    #[doc = "`write(|w| ..)` method takes [apb2_fz::W](apb2_fz::W) writer structure"]
    impl crate::Writable for APB2_FZ {}
    #[doc = "Debug MCU APB2 freeze register"]
    pub mod apb2_fz {
        #[doc = "Reader of register APB2_FZ"]
        pub type R = crate::R<u32, super::APB2_FZ>;
        #[doc = "Writer for register APB2_FZ"]
        pub type W = crate::W<u32, super::APB2_FZ>;
        #[doc = "Register APB2_FZ `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB2_FZ {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBG_TIM1_STOP`"]
        pub type DBG_TIM1_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM1_STOP`"]
        pub struct DBG_TIM1_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM1_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM15_STOP`"]
        pub type DBG_TIM15_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM15_STOP`"]
        pub struct DBG_TIM15_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM15_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM16_STOP`"]
        pub type DBG_TIM16_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM16_STOP`"]
        pub struct DBG_TIM16_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM16_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM17_STOP`"]
        pub type DBG_TIM17_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM17_STOP`"]
        pub struct DBG_TIM17_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM17_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 11 - TIM1 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim1_stop(&self) -> DBG_TIM1_STOP_R {
                DBG_TIM1_STOP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 16 - TIM15 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim15_stop(&self) -> DBG_TIM15_STOP_R {
                DBG_TIM15_STOP_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - TIM16 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim16_stop(&self) -> DBG_TIM16_STOP_R {
                DBG_TIM16_STOP_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - TIM17 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim17_stop(&self) -> DBG_TIM17_STOP_R {
                DBG_TIM17_STOP_R::new(((self.bits >> 18) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 11 - TIM1 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim1_stop(&mut self) -> DBG_TIM1_STOP_W {
                DBG_TIM1_STOP_W { w: self }
            }
            #[doc = "Bit 16 - TIM15 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim15_stop(&mut self) -> DBG_TIM15_STOP_W {
                DBG_TIM15_STOP_W { w: self }
            }
            #[doc = "Bit 17 - TIM16 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim16_stop(&mut self) -> DBG_TIM16_STOP_W {
                DBG_TIM16_STOP_W { w: self }
            }
            #[doc = "Bit 18 - TIM17 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim17_stop(&mut self) -> DBG_TIM17_STOP_W {
                DBG_TIM17_STOP_W { w: self }
            }
        }
    }
}
#[doc = "Universal serial bus full-speed device interface"]
pub struct USB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USB {}
impl USB {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usb::RegisterBlock {
        0x4000_5c00 as *const _
    }
}
impl Deref for USB {
    type Target = usb::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*USB::ptr() }
    }
}
#[doc = "Universal serial bus full-speed device interface"]
pub mod usb {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - endpoint 0 register"]
        pub ep0r: EP0R,
        #[doc = "0x04 - endpoint 1 register"]
        pub ep1r: EP1R,
        #[doc = "0x08 - endpoint 2 register"]
        pub ep2r: EP2R,
        #[doc = "0x0c - endpoint 3 register"]
        pub ep3r: EP3R,
        #[doc = "0x10 - endpoint 4 register"]
        pub ep4r: EP4R,
        #[doc = "0x14 - endpoint 5 register"]
        pub ep5r: EP5R,
        #[doc = "0x18 - endpoint 6 register"]
        pub ep6r: EP6R,
        #[doc = "0x1c - endpoint 7 register"]
        pub ep7r: EP7R,
        _reserved8: [u8; 32usize],
        #[doc = "0x40 - control register"]
        pub cntr: CNTR,
        #[doc = "0x44 - interrupt status register"]
        pub istr: ISTR,
        #[doc = "0x48 - frame number register"]
        pub fnr: FNR,
        #[doc = "0x4c - device address"]
        pub daddr: DADDR,
        #[doc = "0x50 - Buffer table address"]
        pub btable: BTABLE,
        #[doc = "0x54 - LPM control and status register"]
        pub lpmcsr: LPMCSR,
        #[doc = "0x58 - Battery charging detector"]
        pub bcdr: BCDR,
    }
    #[doc = "endpoint 0 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep0r](ep0r) module"]
    pub type EP0R = crate::Reg<u32, _EP0R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP0R;
    #[doc = "`read()` method returns [ep0r::R](ep0r::R) reader structure"]
    impl crate::Readable for EP0R {}
    #[doc = "`write(|w| ..)` method takes [ep0r::W](ep0r::W) writer structure"]
    impl crate::Writable for EP0R {}
    #[doc = "endpoint 0 register"]
    pub mod ep0r {
        #[doc = "Reader of register EP0R"]
        pub type R = crate::R<u32, super::EP0R>;
        #[doc = "Writer for register EP0R"]
        pub type W = crate::W<u32, super::EP0R>;
        #[doc = "Register EP0R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP0R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "endpoint 1 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep1r](ep1r) module"]
    pub type EP1R = crate::Reg<u32, _EP1R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP1R;
    #[doc = "`read()` method returns [ep1r::R](ep1r::R) reader structure"]
    impl crate::Readable for EP1R {}
    #[doc = "`write(|w| ..)` method takes [ep1r::W](ep1r::W) writer structure"]
    impl crate::Writable for EP1R {}
    #[doc = "endpoint 1 register"]
    pub mod ep1r {
        #[doc = "Reader of register EP1R"]
        pub type R = crate::R<u32, super::EP1R>;
        #[doc = "Writer for register EP1R"]
        pub type W = crate::W<u32, super::EP1R>;
        #[doc = "Register EP1R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP1R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "endpoint 2 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep2r](ep2r) module"]
    pub type EP2R = crate::Reg<u32, _EP2R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP2R;
    #[doc = "`read()` method returns [ep2r::R](ep2r::R) reader structure"]
    impl crate::Readable for EP2R {}
    #[doc = "`write(|w| ..)` method takes [ep2r::W](ep2r::W) writer structure"]
    impl crate::Writable for EP2R {}
    #[doc = "endpoint 2 register"]
    pub mod ep2r {
        #[doc = "Reader of register EP2R"]
        pub type R = crate::R<u32, super::EP2R>;
        #[doc = "Writer for register EP2R"]
        pub type W = crate::W<u32, super::EP2R>;
        #[doc = "Register EP2R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP2R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "endpoint 3 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep3r](ep3r) module"]
    pub type EP3R = crate::Reg<u32, _EP3R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP3R;
    #[doc = "`read()` method returns [ep3r::R](ep3r::R) reader structure"]
    impl crate::Readable for EP3R {}
    #[doc = "`write(|w| ..)` method takes [ep3r::W](ep3r::W) writer structure"]
    impl crate::Writable for EP3R {}
    #[doc = "endpoint 3 register"]
    pub mod ep3r {
        #[doc = "Reader of register EP3R"]
        pub type R = crate::R<u32, super::EP3R>;
        #[doc = "Writer for register EP3R"]
        pub type W = crate::W<u32, super::EP3R>;
        #[doc = "Register EP3R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP3R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "endpoint 4 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep4r](ep4r) module"]
    pub type EP4R = crate::Reg<u32, _EP4R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP4R;
    #[doc = "`read()` method returns [ep4r::R](ep4r::R) reader structure"]
    impl crate::Readable for EP4R {}
    #[doc = "`write(|w| ..)` method takes [ep4r::W](ep4r::W) writer structure"]
    impl crate::Writable for EP4R {}
    #[doc = "endpoint 4 register"]
    pub mod ep4r {
        #[doc = "Reader of register EP4R"]
        pub type R = crate::R<u32, super::EP4R>;
        #[doc = "Writer for register EP4R"]
        pub type W = crate::W<u32, super::EP4R>;
        #[doc = "Register EP4R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP4R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "endpoint 5 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep5r](ep5r) module"]
    pub type EP5R = crate::Reg<u32, _EP5R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP5R;
    #[doc = "`read()` method returns [ep5r::R](ep5r::R) reader structure"]
    impl crate::Readable for EP5R {}
    #[doc = "`write(|w| ..)` method takes [ep5r::W](ep5r::W) writer structure"]
    impl crate::Writable for EP5R {}
    #[doc = "endpoint 5 register"]
    pub mod ep5r {
        #[doc = "Reader of register EP5R"]
        pub type R = crate::R<u32, super::EP5R>;
        #[doc = "Writer for register EP5R"]
        pub type W = crate::W<u32, super::EP5R>;
        #[doc = "Register EP5R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP5R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "endpoint 6 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep6r](ep6r) module"]
    pub type EP6R = crate::Reg<u32, _EP6R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP6R;
    #[doc = "`read()` method returns [ep6r::R](ep6r::R) reader structure"]
    impl crate::Readable for EP6R {}
    #[doc = "`write(|w| ..)` method takes [ep6r::W](ep6r::W) writer structure"]
    impl crate::Writable for EP6R {}
    #[doc = "endpoint 6 register"]
    pub mod ep6r {
        #[doc = "Reader of register EP6R"]
        pub type R = crate::R<u32, super::EP6R>;
        #[doc = "Writer for register EP6R"]
        pub type W = crate::W<u32, super::EP6R>;
        #[doc = "Register EP6R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP6R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "endpoint 7 register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ep7r](ep7r) module"]
    pub type EP7R = crate::Reg<u32, _EP7R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EP7R;
    #[doc = "`read()` method returns [ep7r::R](ep7r::R) reader structure"]
    impl crate::Readable for EP7R {}
    #[doc = "`write(|w| ..)` method takes [ep7r::W](ep7r::W) writer structure"]
    impl crate::Writable for EP7R {}
    #[doc = "endpoint 7 register"]
    pub mod ep7r {
        #[doc = "Reader of register EP7R"]
        pub type R = crate::R<u32, super::EP7R>;
        #[doc = "Writer for register EP7R"]
        pub type W = crate::W<u32, super::EP7R>;
        #[doc = "Register EP7R `reset()`'s with value 0"]
        impl crate::ResetValue for super::EP7R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EA`"]
        pub type EA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EA`"]
        pub struct EA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Status bits, for transmission transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_TX_A {
            #[doc = "0: all transmission requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all transmission requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all transmission requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for transmission"]
            VALID = 3,
        }
        impl From<STAT_TX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_TX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_TX`"]
        pub type STAT_TX_R = crate::R<u8, STAT_TX_A>;
        impl STAT_TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_TX_A {
                match self.bits {
                    0 => STAT_TX_A::DISABLED,
                    1 => STAT_TX_A::STALL,
                    2 => STAT_TX_A::NAK,
                    3 => STAT_TX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_TX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_TX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_TX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_TX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_TX`"]
        pub struct STAT_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_TX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all transmission requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_TX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all transmission requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_TX_A::STALL)
            }
            #[doc = "the endpoint is naked and all transmission requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_TX_A::NAK)
            }
            #[doc = "this endpoint is enabled for transmission"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_TX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_TX`"]
        pub type DTOG_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_TX`"]
        pub struct DTOG_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_TX`"]
        pub type CTR_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_TX`"]
        pub struct CTR_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `EP_KIND`"]
        pub type EP_KIND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EP_KIND`"]
        pub struct EP_KIND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_KIND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Endpoint type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EP_TYPE_A {
            #[doc = "0: Bulk endpoint"]
            BULK = 0,
            #[doc = "1: Control endpoint"]
            CONTROL = 1,
            #[doc = "2: Iso endpoint"]
            ISO = 2,
            #[doc = "3: Interrupt endpoint"]
            INTERRUPT = 3,
        }
        impl From<EP_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: EP_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EP_TYPE`"]
        pub type EP_TYPE_R = crate::R<u8, EP_TYPE_A>;
        impl EP_TYPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EP_TYPE_A {
                match self.bits {
                    0 => EP_TYPE_A::BULK,
                    1 => EP_TYPE_A::CONTROL,
                    2 => EP_TYPE_A::ISO,
                    3 => EP_TYPE_A::INTERRUPT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `BULK`"]
            #[inline(always)]
            pub fn is_bulk(&self) -> bool {
                *self == EP_TYPE_A::BULK
            }
            #[doc = "Checks if the value of the field is `CONTROL`"]
            #[inline(always)]
            pub fn is_control(&self) -> bool {
                *self == EP_TYPE_A::CONTROL
            }
            #[doc = "Checks if the value of the field is `ISO`"]
            #[inline(always)]
            pub fn is_iso(&self) -> bool {
                *self == EP_TYPE_A::ISO
            }
            #[doc = "Checks if the value of the field is `INTERRUPT`"]
            #[inline(always)]
            pub fn is_interrupt(&self) -> bool {
                *self == EP_TYPE_A::INTERRUPT
            }
        }
        #[doc = "Write proxy for field `EP_TYPE`"]
        pub struct EP_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EP_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EP_TYPE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bulk endpoint"]
            #[inline(always)]
            pub fn bulk(self) -> &'a mut W {
                self.variant(EP_TYPE_A::BULK)
            }
            #[doc = "Control endpoint"]
            #[inline(always)]
            pub fn control(self) -> &'a mut W {
                self.variant(EP_TYPE_A::CONTROL)
            }
            #[doc = "Iso endpoint"]
            #[inline(always)]
            pub fn iso(self) -> &'a mut W {
                self.variant(EP_TYPE_A::ISO)
            }
            #[doc = "Interrupt endpoint"]
            #[inline(always)]
            pub fn interrupt(self) -> &'a mut W {
                self.variant(EP_TYPE_A::INTERRUPT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SETUP`"]
        pub type SETUP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SETUP`"]
        pub struct SETUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SETUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Status bits, for reception transfers\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum STAT_RX_A {
            #[doc = "0: all reception requests addressed to this endpoint are ignored"]
            DISABLED = 0,
            #[doc = "1: the endpoint is stalled and all reception requests result in a STALL handshake"]
            STALL = 1,
            #[doc = "2: the endpoint is naked and all reception requests result in a NAK handshake"]
            NAK = 2,
            #[doc = "3: this endpoint is enabled for reception"]
            VALID = 3,
        }
        impl From<STAT_RX_A> for u8 {
            #[inline(always)]
            fn from(variant: STAT_RX_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `STAT_RX`"]
        pub type STAT_RX_R = crate::R<u8, STAT_RX_A>;
        impl STAT_RX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STAT_RX_A {
                match self.bits {
                    0 => STAT_RX_A::DISABLED,
                    1 => STAT_RX_A::STALL,
                    2 => STAT_RX_A::NAK,
                    3 => STAT_RX_A::VALID,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == STAT_RX_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `STALL`"]
            #[inline(always)]
            pub fn is_stall(&self) -> bool {
                *self == STAT_RX_A::STALL
            }
            #[doc = "Checks if the value of the field is `NAK`"]
            #[inline(always)]
            pub fn is_nak(&self) -> bool {
                *self == STAT_RX_A::NAK
            }
            #[doc = "Checks if the value of the field is `VALID`"]
            #[inline(always)]
            pub fn is_valid(&self) -> bool {
                *self == STAT_RX_A::VALID
            }
        }
        #[doc = "Write proxy for field `STAT_RX`"]
        pub struct STAT_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_RX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STAT_RX_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "all reception requests addressed to this endpoint are ignored"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(STAT_RX_A::DISABLED)
            }
            #[doc = "the endpoint is stalled and all reception requests result in a STALL handshake"]
            #[inline(always)]
            pub fn stall(self) -> &'a mut W {
                self.variant(STAT_RX_A::STALL)
            }
            #[doc = "the endpoint is naked and all reception requests result in a NAK handshake"]
            #[inline(always)]
            pub fn nak(self) -> &'a mut W {
                self.variant(STAT_RX_A::NAK)
            }
            #[doc = "this endpoint is enabled for reception"]
            #[inline(always)]
            pub fn valid(self) -> &'a mut W {
                self.variant(STAT_RX_A::VALID)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DTOG_RX`"]
        pub type DTOG_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DTOG_RX`"]
        pub struct DTOG_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTOG_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_RX`"]
        pub type CTR_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR_RX`"]
        pub struct CTR_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&self) -> EA_R {
                EA_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&self) -> STAT_TX_R {
                STAT_TX_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&self) -> DTOG_TX_R {
                DTOG_TX_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&self) -> CTR_TX_R {
                CTR_TX_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&self) -> EP_KIND_R {
                EP_KIND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&self) -> EP_TYPE_R {
                EP_TYPE_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SETUP_R {
                SETUP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&self) -> STAT_RX_R {
                STAT_RX_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&self) -> DTOG_RX_R {
                DTOG_RX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&self) -> CTR_RX_R {
                CTR_RX_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ea(&mut self) -> EA_W {
                EA_W { w: self }
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn stat_tx(&mut self) -> STAT_TX_W {
                STAT_TX_W { w: self }
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn dtog_tx(&mut self) -> DTOG_TX_W {
                DTOG_TX_W { w: self }
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn ctr_tx(&mut self) -> CTR_TX_W {
                CTR_TX_W { w: self }
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kind(&mut self) -> EP_KIND_W {
                EP_KIND_W { w: self }
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_type(&mut self) -> EP_TYPE_W {
                EP_TYPE_W { w: self }
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&mut self) -> SETUP_W {
                SETUP_W { w: self }
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn stat_rx(&mut self) -> STAT_RX_W {
                STAT_RX_W { w: self }
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn dtog_rx(&mut self) -> DTOG_RX_W {
                DTOG_RX_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn ctr_rx(&mut self) -> CTR_RX_W {
                CTR_RX_W { w: self }
            }
        }
    }
    #[doc = "control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntr](cntr) module"]
    pub type CNTR = crate::Reg<u32, _CNTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNTR;
    #[doc = "`read()` method returns [cntr::R](cntr::R) reader structure"]
    impl crate::Readable for CNTR {}
    #[doc = "`write(|w| ..)` method takes [cntr::W](cntr::W) writer structure"]
    impl crate::Writable for CNTR {}
    #[doc = "control register"]
    pub mod cntr {
        #[doc = "Reader of register CNTR"]
        pub type R = crate::R<u32, super::CNTR>;
        #[doc = "Writer for register CNTR"]
        pub type W = crate::W<u32, super::CNTR>;
        #[doc = "Register CNTR `reset()`'s with value 0x03"]
        impl crate::ResetValue for super::CNTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x03
            }
        }
        #[doc = "Force USB Reset\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FRES_A {
            #[doc = "0: Clear USB reset"]
            NORESET = 0,
            #[doc = "1: Force a reset of the USB peripheral, exactly like a RESET signaling on the USB"]
            RESET = 1,
        }
        impl From<FRES_A> for bool {
            #[inline(always)]
            fn from(variant: FRES_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FRES`"]
        pub type FRES_R = crate::R<bool, FRES_A>;
        impl FRES_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FRES_A {
                match self.bits {
                    false => FRES_A::NORESET,
                    true => FRES_A::RESET,
                }
            }
            #[doc = "Checks if the value of the field is `NORESET`"]
            #[inline(always)]
            pub fn is_no_reset(&self) -> bool {
                *self == FRES_A::NORESET
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == FRES_A::RESET
            }
        }
        #[doc = "Write proxy for field `FRES`"]
        pub struct FRES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRES_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FRES_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clear USB reset"]
            #[inline(always)]
            pub fn no_reset(self) -> &'a mut W {
                self.variant(FRES_A::NORESET)
            }
            #[doc = "Force a reset of the USB peripheral, exactly like a RESET signaling on the USB"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(FRES_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Power down\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDWN_A {
            #[doc = "0: No power down"]
            DISABLED = 0,
            #[doc = "1: Enter power down mode"]
            ENABLED = 1,
        }
        impl From<PDWN_A> for bool {
            #[inline(always)]
            fn from(variant: PDWN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDWN`"]
        pub type PDWN_R = crate::R<bool, PDWN_A>;
        impl PDWN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDWN_A {
                match self.bits {
                    false => PDWN_A::DISABLED,
                    true => PDWN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == PDWN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == PDWN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `PDWN`"]
        pub struct PDWN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDWN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDWN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No power down"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(PDWN_A::DISABLED)
            }
            #[doc = "Enter power down mode"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(PDWN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Low-power mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LPMODE_A {
            #[doc = "0: No low-power mode"]
            DISABLED = 0,
            #[doc = "1: Enter low-power mode"]
            ENABLED = 1,
        }
        impl From<LPMODE_A> for bool {
            #[inline(always)]
            fn from(variant: LPMODE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LPMODE`"]
        pub type LPMODE_R = crate::R<bool, LPMODE_A>;
        impl LPMODE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LPMODE_A {
                match self.bits {
                    false => LPMODE_A::DISABLED,
                    true => LPMODE_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == LPMODE_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == LPMODE_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `LPMODE`"]
        pub struct LPMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPMODE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LPMODE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No low-power mode"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(LPMODE_A::DISABLED)
            }
            #[doc = "Enter low-power mode"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(LPMODE_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Force suspend\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FSUSP_A {
            #[doc = "0: No effect"]
            NOEFFECT = 0,
            #[doc = "1: Enter suspend mode. Clocks and static power dissipation in the analog transceiver are left unaffected"]
            SUSPEND = 1,
        }
        impl From<FSUSP_A> for bool {
            #[inline(always)]
            fn from(variant: FSUSP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FSUSP`"]
        pub type FSUSP_R = crate::R<bool, FSUSP_A>;
        impl FSUSP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSUSP_A {
                match self.bits {
                    false => FSUSP_A::NOEFFECT,
                    true => FSUSP_A::SUSPEND,
                }
            }
            #[doc = "Checks if the value of the field is `NOEFFECT`"]
            #[inline(always)]
            pub fn is_no_effect(&self) -> bool {
                *self == FSUSP_A::NOEFFECT
            }
            #[doc = "Checks if the value of the field is `SUSPEND`"]
            #[inline(always)]
            pub fn is_suspend(&self) -> bool {
                *self == FSUSP_A::SUSPEND
            }
        }
        #[doc = "Write proxy for field `FSUSP`"]
        pub struct FSUSP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSUSP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSUSP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No effect"]
            #[inline(always)]
            pub fn no_effect(self) -> &'a mut W {
                self.variant(FSUSP_A::NOEFFECT)
            }
            #[doc = "Enter suspend mode. Clocks and static power dissipation in the analog transceiver are left unaffected"]
            #[inline(always)]
            pub fn suspend(self) -> &'a mut W {
                self.variant(FSUSP_A::SUSPEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Resume request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RESUME_A {
            #[doc = "1: Resume requested"]
            REQUESTED = 1,
        }
        impl From<RESUME_A> for bool {
            #[inline(always)]
            fn from(variant: RESUME_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RESUME`"]
        pub type RESUME_R = crate::R<bool, RESUME_A>;
        impl RESUME_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, RESUME_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(RESUME_A::REQUESTED),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `REQUESTED`"]
            #[inline(always)]
            pub fn is_requested(&self) -> bool {
                *self == RESUME_A::REQUESTED
            }
        }
        #[doc = "Write proxy for field `RESUME`"]
        pub struct RESUME_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESUME_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RESUME_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Resume requested"]
            #[inline(always)]
            pub fn requested(self) -> &'a mut W {
                self.variant(RESUME_A::REQUESTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "LPM L1 Resume request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum L1RESUME_A {
            #[doc = "1: LPM L1 request requested"]
            REQUESTED = 1,
        }
        impl From<L1RESUME_A> for bool {
            #[inline(always)]
            fn from(variant: L1RESUME_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `L1RESUME`"]
        pub type L1RESUME_R = crate::R<bool, L1RESUME_A>;
        impl L1RESUME_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, L1RESUME_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(L1RESUME_A::REQUESTED),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `REQUESTED`"]
            #[inline(always)]
            pub fn is_requested(&self) -> bool {
                *self == L1RESUME_A::REQUESTED
            }
        }
        #[doc = "Write proxy for field `L1RESUME`"]
        pub struct L1RESUME_W<'a> {
            w: &'a mut W,
        }
        impl<'a> L1RESUME_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: L1RESUME_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "LPM L1 request requested"]
            #[inline(always)]
            pub fn requested(self) -> &'a mut W {
                self.variant(L1RESUME_A::REQUESTED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "LPM L1 state request interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum L1REQM_A {
            #[doc = "0: L1REQ Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: L1REQ Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<L1REQM_A> for bool {
            #[inline(always)]
            fn from(variant: L1REQM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `L1REQM`"]
        pub type L1REQM_R = crate::R<bool, L1REQM_A>;
        impl L1REQM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> L1REQM_A {
                match self.bits {
                    false => L1REQM_A::DISABLED,
                    true => L1REQM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == L1REQM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == L1REQM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `L1REQM`"]
        pub struct L1REQM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> L1REQM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: L1REQM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "L1REQ Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(L1REQM_A::DISABLED)
            }
            #[doc = "L1REQ Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(L1REQM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Expected start of frame interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ESOFM_A {
            #[doc = "0: ESOF Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: ESOF Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<ESOFM_A> for bool {
            #[inline(always)]
            fn from(variant: ESOFM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ESOFM`"]
        pub type ESOFM_R = crate::R<bool, ESOFM_A>;
        impl ESOFM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ESOFM_A {
                match self.bits {
                    false => ESOFM_A::DISABLED,
                    true => ESOFM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ESOFM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ESOFM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ESOFM`"]
        pub struct ESOFM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ESOFM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ESOFM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ESOF Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ESOFM_A::DISABLED)
            }
            #[doc = "ESOF Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ESOFM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Start of frame interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SOFM_A {
            #[doc = "0: SOF Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: SOF Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<SOFM_A> for bool {
            #[inline(always)]
            fn from(variant: SOFM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SOFM`"]
        pub type SOFM_R = crate::R<bool, SOFM_A>;
        impl SOFM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SOFM_A {
                match self.bits {
                    false => SOFM_A::DISABLED,
                    true => SOFM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SOFM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == SOFM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `SOFM`"]
        pub struct SOFM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOFM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SOFM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SOF Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SOFM_A::DISABLED)
            }
            #[doc = "SOF Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SOFM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "USB reset interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RESETM_A {
            #[doc = "0: RESET Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: RESET Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<RESETM_A> for bool {
            #[inline(always)]
            fn from(variant: RESETM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RESETM`"]
        pub type RESETM_R = crate::R<bool, RESETM_A>;
        impl RESETM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RESETM_A {
                match self.bits {
                    false => RESETM_A::DISABLED,
                    true => RESETM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == RESETM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == RESETM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `RESETM`"]
        pub struct RESETM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESETM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RESETM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "RESET Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(RESETM_A::DISABLED)
            }
            #[doc = "RESET Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(RESETM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Suspend mode interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SUSPM_A {
            #[doc = "0: Suspend Mode Request SUSP Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: SUSP Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<SUSPM_A> for bool {
            #[inline(always)]
            fn from(variant: SUSPM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SUSPM`"]
        pub type SUSPM_R = crate::R<bool, SUSPM_A>;
        impl SUSPM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SUSPM_A {
                match self.bits {
                    false => SUSPM_A::DISABLED,
                    true => SUSPM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SUSPM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == SUSPM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `SUSPM`"]
        pub struct SUSPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SUSPM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SUSPM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Suspend Mode Request SUSP Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SUSPM_A::DISABLED)
            }
            #[doc = "SUSP Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SUSPM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Wakeup interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WKUPM_A {
            #[doc = "0: WKUP Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: WKUP Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<WKUPM_A> for bool {
            #[inline(always)]
            fn from(variant: WKUPM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WKUPM`"]
        pub type WKUPM_R = crate::R<bool, WKUPM_A>;
        impl WKUPM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WKUPM_A {
                match self.bits {
                    false => WKUPM_A::DISABLED,
                    true => WKUPM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == WKUPM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == WKUPM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `WKUPM`"]
        pub struct WKUPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WKUPM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WKUPM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "WKUP Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(WKUPM_A::DISABLED)
            }
            #[doc = "WKUP Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(WKUPM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Error interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ERRM_A {
            #[doc = "0: ERR Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: ERR Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<ERRM_A> for bool {
            #[inline(always)]
            fn from(variant: ERRM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ERRM`"]
        pub type ERRM_R = crate::R<bool, ERRM_A>;
        impl ERRM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ERRM_A {
                match self.bits {
                    false => ERRM_A::DISABLED,
                    true => ERRM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == ERRM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == ERRM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `ERRM`"]
        pub struct ERRM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERRM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ERRM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ERR Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(ERRM_A::DISABLED)
            }
            #[doc = "ERR Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(ERRM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Packet memory area over / underrun interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PMAOVRM_A {
            #[doc = "0: PMAOVR Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: PMAOVR Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<PMAOVRM_A> for bool {
            #[inline(always)]
            fn from(variant: PMAOVRM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PMAOVRM`"]
        pub type PMAOVRM_R = crate::R<bool, PMAOVRM_A>;
        impl PMAOVRM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PMAOVRM_A {
                match self.bits {
                    false => PMAOVRM_A::DISABLED,
                    true => PMAOVRM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == PMAOVRM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == PMAOVRM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `PMAOVRM`"]
        pub struct PMAOVRM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PMAOVRM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PMAOVRM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PMAOVR Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(PMAOVRM_A::DISABLED)
            }
            #[doc = "PMAOVR Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(PMAOVRM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Correct transfer interrupt mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CTRM_A {
            #[doc = "0: Correct Transfer (CTR) Interrupt disabled"]
            DISABLED = 0,
            #[doc = "1: CTR Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            ENABLED = 1,
        }
        impl From<CTRM_A> for bool {
            #[inline(always)]
            fn from(variant: CTRM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CTRM`"]
        pub type CTRM_R = crate::R<bool, CTRM_A>;
        impl CTRM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CTRM_A {
                match self.bits {
                    false => CTRM_A::DISABLED,
                    true => CTRM_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == CTRM_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == CTRM_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `CTRM`"]
        pub struct CTRM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTRM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTRM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Correct Transfer (CTR) Interrupt disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(CTRM_A::DISABLED)
            }
            #[doc = "CTR Interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(CTRM_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Force USB Reset"]
            #[inline(always)]
            pub fn fres(&self) -> FRES_R {
                FRES_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Power down"]
            #[inline(always)]
            pub fn pdwn(&self) -> PDWN_R {
                PDWN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Low-power mode"]
            #[inline(always)]
            pub fn lpmode(&self) -> LPMODE_R {
                LPMODE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Force suspend"]
            #[inline(always)]
            pub fn fsusp(&self) -> FSUSP_R {
                FSUSP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Resume request"]
            #[inline(always)]
            pub fn resume(&self) -> RESUME_R {
                RESUME_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - LPM L1 Resume request"]
            #[inline(always)]
            pub fn l1resume(&self) -> L1RESUME_R {
                L1RESUME_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 7 - LPM L1 state request interrupt mask"]
            #[inline(always)]
            pub fn l1reqm(&self) -> L1REQM_R {
                L1REQM_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Expected start of frame interrupt mask"]
            #[inline(always)]
            pub fn esofm(&self) -> ESOFM_R {
                ESOFM_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Start of frame interrupt mask"]
            #[inline(always)]
            pub fn sofm(&self) -> SOFM_R {
                SOFM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - USB reset interrupt mask"]
            #[inline(always)]
            pub fn resetm(&self) -> RESETM_R {
                RESETM_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Suspend mode interrupt mask"]
            #[inline(always)]
            pub fn suspm(&self) -> SUSPM_R {
                SUSPM_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Wakeup interrupt mask"]
            #[inline(always)]
            pub fn wkupm(&self) -> WKUPM_R {
                WKUPM_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Error interrupt mask"]
            #[inline(always)]
            pub fn errm(&self) -> ERRM_R {
                ERRM_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Packet memory area over / underrun interrupt mask"]
            #[inline(always)]
            pub fn pmaovrm(&self) -> PMAOVRM_R {
                PMAOVRM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer interrupt mask"]
            #[inline(always)]
            pub fn ctrm(&self) -> CTRM_R {
                CTRM_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Force USB Reset"]
            #[inline(always)]
            pub fn fres(&mut self) -> FRES_W {
                FRES_W { w: self }
            }
            #[doc = "Bit 1 - Power down"]
            #[inline(always)]
            pub fn pdwn(&mut self) -> PDWN_W {
                PDWN_W { w: self }
            }
            #[doc = "Bit 2 - Low-power mode"]
            #[inline(always)]
            pub fn lpmode(&mut self) -> LPMODE_W {
                LPMODE_W { w: self }
            }
            #[doc = "Bit 3 - Force suspend"]
            #[inline(always)]
            pub fn fsusp(&mut self) -> FSUSP_W {
                FSUSP_W { w: self }
            }
            #[doc = "Bit 4 - Resume request"]
            #[inline(always)]
            pub fn resume(&mut self) -> RESUME_W {
                RESUME_W { w: self }
            }
            #[doc = "Bit 5 - LPM L1 Resume request"]
            #[inline(always)]
            pub fn l1resume(&mut self) -> L1RESUME_W {
                L1RESUME_W { w: self }
            }
            #[doc = "Bit 7 - LPM L1 state request interrupt mask"]
            #[inline(always)]
            pub fn l1reqm(&mut self) -> L1REQM_W {
                L1REQM_W { w: self }
            }
            #[doc = "Bit 8 - Expected start of frame interrupt mask"]
            #[inline(always)]
            pub fn esofm(&mut self) -> ESOFM_W {
                ESOFM_W { w: self }
            }
            #[doc = "Bit 9 - Start of frame interrupt mask"]
            #[inline(always)]
            pub fn sofm(&mut self) -> SOFM_W {
                SOFM_W { w: self }
            }
            #[doc = "Bit 10 - USB reset interrupt mask"]
            #[inline(always)]
            pub fn resetm(&mut self) -> RESETM_W {
                RESETM_W { w: self }
            }
            #[doc = "Bit 11 - Suspend mode interrupt mask"]
            #[inline(always)]
            pub fn suspm(&mut self) -> SUSPM_W {
                SUSPM_W { w: self }
            }
            #[doc = "Bit 12 - Wakeup interrupt mask"]
            #[inline(always)]
            pub fn wkupm(&mut self) -> WKUPM_W {
                WKUPM_W { w: self }
            }
            #[doc = "Bit 13 - Error interrupt mask"]
            #[inline(always)]
            pub fn errm(&mut self) -> ERRM_W {
                ERRM_W { w: self }
            }
            #[doc = "Bit 14 - Packet memory area over / underrun interrupt mask"]
            #[inline(always)]
            pub fn pmaovrm(&mut self) -> PMAOVRM_W {
                PMAOVRM_W { w: self }
            }
            #[doc = "Bit 15 - Correct transfer interrupt mask"]
            #[inline(always)]
            pub fn ctrm(&mut self) -> CTRM_W {
                CTRM_W { w: self }
            }
        }
    }
    #[doc = "interrupt status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [istr](istr) module"]
    pub type ISTR = crate::Reg<u32, _ISTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISTR;
    #[doc = "`read()` method returns [istr::R](istr::R) reader structure"]
    impl crate::Readable for ISTR {}
    #[doc = "`write(|w| ..)` method takes [istr::W](istr::W) writer structure"]
    impl crate::Writable for ISTR {}
    #[doc = "interrupt status register"]
    pub mod istr {
        #[doc = "Reader of register ISTR"]
        pub type R = crate::R<u32, super::ISTR>;
        #[doc = "Writer for register ISTR"]
        pub type W = crate::W<u32, super::ISTR>;
        #[doc = "Register ISTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ISTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EP_ID`"]
        pub type EP_ID_R = crate::R<u8, u8>;
        #[doc = "Direction of transaction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DIR_A {
            #[doc = "0: data transmitted by the USB peripheral to the host PC"]
            TO = 0,
            #[doc = "1: data received by the USB peripheral from the host PC"]
            FROM = 1,
        }
        impl From<DIR_A> for bool {
            #[inline(always)]
            fn from(variant: DIR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, DIR_A>;
        impl DIR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DIR_A {
                match self.bits {
                    false => DIR_A::TO,
                    true => DIR_A::FROM,
                }
            }
            #[doc = "Checks if the value of the field is `TO`"]
            #[inline(always)]
            pub fn is_to(&self) -> bool {
                *self == DIR_A::TO
            }
            #[doc = "Checks if the value of the field is `FROM`"]
            #[inline(always)]
            pub fn is_from(&self) -> bool {
                *self == DIR_A::FROM
            }
        }
        #[doc = "LPM L1 state request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum L1REQ_A {
            #[doc = "1: LPM command to enter the L1 state is successfully received and acknowledged"]
            RECEIVED = 1,
        }
        impl From<L1REQ_A> for bool {
            #[inline(always)]
            fn from(variant: L1REQ_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `L1REQ`"]
        pub type L1REQ_R = crate::R<bool, L1REQ_A>;
        impl L1REQ_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, L1REQ_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(L1REQ_A::RECEIVED),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `RECEIVED`"]
            #[inline(always)]
            pub fn is_received(&self) -> bool {
                *self == L1REQ_A::RECEIVED
            }
        }
        #[doc = "Write proxy for field `L1REQ`"]
        pub struct L1REQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> L1REQ_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: L1REQ_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "LPM command to enter the L1 state is successfully received and acknowledged"]
            #[inline(always)]
            pub fn received(self) -> &'a mut W {
                self.variant(L1REQ_A::RECEIVED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Expected start frame\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ESOF_A {
            #[doc = "1: an SOF packet is expected but not received"]
            EXPECTEDSTARTOFFRAME = 1,
        }
        impl From<ESOF_A> for bool {
            #[inline(always)]
            fn from(variant: ESOF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ESOF`"]
        pub type ESOF_R = crate::R<bool, ESOF_A>;
        impl ESOF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, ESOF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(ESOF_A::EXPECTEDSTARTOFFRAME),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `EXPECTEDSTARTOFFRAME`"]
            #[inline(always)]
            pub fn is_expected_start_of_frame(&self) -> bool {
                *self == ESOF_A::EXPECTEDSTARTOFFRAME
            }
        }
        #[doc = "Write proxy for field `ESOF`"]
        pub struct ESOF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ESOF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ESOF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "an SOF packet is expected but not received"]
            #[inline(always)]
            pub fn expected_start_of_frame(self) -> &'a mut W {
                self.variant(ESOF_A::EXPECTEDSTARTOFFRAME)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "start of frame\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SOF_A {
            #[doc = "1: beginning of a new USB frame and it is set when a SOF packet arrives through the USB bus"]
            STARTOFFRAME = 1,
        }
        impl From<SOF_A> for bool {
            #[inline(always)]
            fn from(variant: SOF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SOF`"]
        pub type SOF_R = crate::R<bool, SOF_A>;
        impl SOF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, SOF_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(SOF_A::STARTOFFRAME),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `STARTOFFRAME`"]
            #[inline(always)]
            pub fn is_start_of_frame(&self) -> bool {
                *self == SOF_A::STARTOFFRAME
            }
        }
        #[doc = "Write proxy for field `SOF`"]
        pub struct SOF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SOF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "beginning of a new USB frame and it is set when a SOF packet arrives through the USB bus"]
            #[inline(always)]
            pub fn start_of_frame(self) -> &'a mut W {
                self.variant(SOF_A::STARTOFFRAME)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "reset request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RESET_A {
            #[doc = "1: peripheral detects an active USB RESET signal at its inputs"]
            RESET = 1,
        }
        impl From<RESET_A> for bool {
            #[inline(always)]
            fn from(variant: RESET_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RESET`"]
        pub type RESET_R = crate::R<bool, RESET_A>;
        impl RESET_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, RESET_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(RESET_A::RESET),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `RESET`"]
            #[inline(always)]
            pub fn is_reset(&self) -> bool {
                *self == RESET_A::RESET
            }
        }
        #[doc = "Write proxy for field `RESET`"]
        pub struct RESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RESET_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "peripheral detects an active USB RESET signal at its inputs"]
            #[inline(always)]
            pub fn reset(self) -> &'a mut W {
                self.variant(RESET_A::RESET)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Suspend mode request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SUSP_A {
            #[doc = "1: no traffic has been received for 3 ms, indicating a suspend mode request from the USB bus"]
            SUSPEND = 1,
        }
        impl From<SUSP_A> for bool {
            #[inline(always)]
            fn from(variant: SUSP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SUSP`"]
        pub type SUSP_R = crate::R<bool, SUSP_A>;
        impl SUSP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, SUSP_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(SUSP_A::SUSPEND),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `SUSPEND`"]
            #[inline(always)]
            pub fn is_suspend(&self) -> bool {
                *self == SUSP_A::SUSPEND
            }
        }
        #[doc = "Write proxy for field `SUSP`"]
        pub struct SUSP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SUSP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SUSP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "no traffic has been received for 3 ms, indicating a suspend mode request from the USB bus"]
            #[inline(always)]
            pub fn suspend(self) -> &'a mut W {
                self.variant(SUSP_A::SUSPEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Wakeup\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WKUP_A {
            #[doc = "1: activity is detected that wakes up the USB peripheral"]
            WAKEUP = 1,
        }
        impl From<WKUP_A> for bool {
            #[inline(always)]
            fn from(variant: WKUP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WKUP`"]
        pub type WKUP_R = crate::R<bool, WKUP_A>;
        impl WKUP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, WKUP_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(WKUP_A::WAKEUP),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `WAKEUP`"]
            #[inline(always)]
            pub fn is_wakeup(&self) -> bool {
                *self == WKUP_A::WAKEUP
            }
        }
        #[doc = "Write proxy for field `WKUP`"]
        pub struct WKUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WKUP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WKUP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "activity is detected that wakes up the USB peripheral"]
            #[inline(always)]
            pub fn wakeup(self) -> &'a mut W {
                self.variant(WKUP_A::WAKEUP)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Error\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ERR_A {
            #[doc = "1: One of No ANSwer, Cyclic Redundancy Check, Bit Stuffing or Framing format Violation error occurred"]
            ERROR = 1,
        }
        impl From<ERR_A> for bool {
            #[inline(always)]
            fn from(variant: ERR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ERR`"]
        pub type ERR_R = crate::R<bool, ERR_A>;
        impl ERR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, ERR_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(ERR_A::ERROR),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `ERROR`"]
            #[inline(always)]
            pub fn is_error(&self) -> bool {
                *self == ERR_A::ERROR
            }
        }
        #[doc = "Write proxy for field `ERR`"]
        pub struct ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ERR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "One of No ANSwer, Cyclic Redundancy Check, Bit Stuffing or Framing format Violation error occurred"]
            #[inline(always)]
            pub fn error(self) -> &'a mut W {
                self.variant(ERR_A::ERROR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Packet memory area over / underrun\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PMAOVR_A {
            #[doc = "1: microcontroller has not been able to respond in time to an USB memory request"]
            OVERRUN = 1,
        }
        impl From<PMAOVR_A> for bool {
            #[inline(always)]
            fn from(variant: PMAOVR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PMAOVR`"]
        pub type PMAOVR_R = crate::R<bool, PMAOVR_A>;
        impl PMAOVR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, PMAOVR_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(PMAOVR_A::OVERRUN),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `OVERRUN`"]
            #[inline(always)]
            pub fn is_overrun(&self) -> bool {
                *self == PMAOVR_A::OVERRUN
            }
        }
        #[doc = "Write proxy for field `PMAOVR`"]
        pub struct PMAOVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PMAOVR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PMAOVR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "microcontroller has not been able to respond in time to an USB memory request"]
            #[inline(always)]
            pub fn overrun(self) -> &'a mut W {
                self.variant(PMAOVR_A::OVERRUN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Correct transfer\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CTR_A {
            #[doc = "1: endpoint has successfully completed a transaction"]
            COMPLETED = 1,
        }
        impl From<CTR_A> for bool {
            #[inline(always)]
            fn from(variant: CTR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CTR`"]
        pub type CTR_R = crate::R<bool, CTR_A>;
        impl CTR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, CTR_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(CTR_A::COMPLETED),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `COMPLETED`"]
            #[inline(always)]
            pub fn is_completed(&self) -> bool {
                *self == CTR_A::COMPLETED
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint Identifier"]
            #[inline(always)]
            pub fn ep_id(&self) -> EP_ID_R {
                EP_ID_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bit 4 - Direction of transaction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 7 - LPM L1 state request"]
            #[inline(always)]
            pub fn l1req(&self) -> L1REQ_R {
                L1REQ_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Expected start frame"]
            #[inline(always)]
            pub fn esof(&self) -> ESOF_R {
                ESOF_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - start of frame"]
            #[inline(always)]
            pub fn sof(&self) -> SOF_R {
                SOF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - reset request"]
            #[inline(always)]
            pub fn reset(&self) -> RESET_R {
                RESET_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Suspend mode request"]
            #[inline(always)]
            pub fn susp(&self) -> SUSP_R {
                SUSP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Wakeup"]
            #[inline(always)]
            pub fn wkup(&self) -> WKUP_R {
                WKUP_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Error"]
            #[inline(always)]
            pub fn err(&self) -> ERR_R {
                ERR_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Packet memory area over / underrun"]
            #[inline(always)]
            pub fn pmaovr(&self) -> PMAOVR_R {
                PMAOVR_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Correct transfer"]
            #[inline(always)]
            pub fn ctr(&self) -> CTR_R {
                CTR_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - LPM L1 state request"]
            #[inline(always)]
            pub fn l1req(&mut self) -> L1REQ_W {
                L1REQ_W { w: self }
            }
            #[doc = "Bit 8 - Expected start frame"]
            #[inline(always)]
            pub fn esof(&mut self) -> ESOF_W {
                ESOF_W { w: self }
            }
            #[doc = "Bit 9 - start of frame"]
            #[inline(always)]
            pub fn sof(&mut self) -> SOF_W {
                SOF_W { w: self }
            }
            #[doc = "Bit 10 - reset request"]
            #[inline(always)]
            pub fn reset(&mut self) -> RESET_W {
                RESET_W { w: self }
            }
            #[doc = "Bit 11 - Suspend mode request"]
            #[inline(always)]
            pub fn susp(&mut self) -> SUSP_W {
                SUSP_W { w: self }
            }
            #[doc = "Bit 12 - Wakeup"]
            #[inline(always)]
            pub fn wkup(&mut self) -> WKUP_W {
                WKUP_W { w: self }
            }
            #[doc = "Bit 13 - Error"]
            #[inline(always)]
            pub fn err(&mut self) -> ERR_W {
                ERR_W { w: self }
            }
            #[doc = "Bit 14 - Packet memory area over / underrun"]
            #[inline(always)]
            pub fn pmaovr(&mut self) -> PMAOVR_W {
                PMAOVR_W { w: self }
            }
        }
    }
    #[doc = "frame number register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fnr](fnr) module"]
    pub type FNR = crate::Reg<u32, _FNR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FNR;
    #[doc = "`read()` method returns [fnr::R](fnr::R) reader structure"]
    impl crate::Readable for FNR {}
    #[doc = "frame number register"]
    pub mod fnr {
        #[doc = "Reader of register FNR"]
        pub type R = crate::R<u32, super::FNR>;
        #[doc = "Reader of field `FN`"]
        pub type FN_R = crate::R<u16, u16>;
        #[doc = "Reader of field `LSOF`"]
        pub type LSOF_R = crate::R<u8, u8>;
        #[doc = "Locked\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LCK_A {
            #[doc = "1: the frame timer remains in this state until an USB reset or USB suspend event occurs"]
            LOCKED = 1,
        }
        impl From<LCK_A> for bool {
            #[inline(always)]
            fn from(variant: LCK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LCK`"]
        pub type LCK_R = crate::R<bool, LCK_A>;
        impl LCK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, LCK_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(LCK_A::LOCKED),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `LOCKED`"]
            #[inline(always)]
            pub fn is_locked(&self) -> bool {
                *self == LCK_A::LOCKED
            }
        }
        #[doc = "Receive data - line status\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXDM_A {
            #[doc = "1: received data minus upstream port data line"]
            RECEIVED = 1,
        }
        impl From<RXDM_A> for bool {
            #[inline(always)]
            fn from(variant: RXDM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXDM`"]
        pub type RXDM_R = crate::R<bool, RXDM_A>;
        impl RXDM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, RXDM_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(RXDM_A::RECEIVED),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `RECEIVED`"]
            #[inline(always)]
            pub fn is_received(&self) -> bool {
                *self == RXDM_A::RECEIVED
            }
        }
        #[doc = "Receive data + line status\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXDP_A {
            #[doc = "1: received data plus upstream port data line"]
            RECEIVED = 1,
        }
        impl From<RXDP_A> for bool {
            #[inline(always)]
            fn from(variant: RXDP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXDP`"]
        pub type RXDP_R = crate::R<bool, RXDP_A>;
        impl RXDP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, RXDP_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(RXDP_A::RECEIVED),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `RECEIVED`"]
            #[inline(always)]
            pub fn is_received(&self) -> bool {
                *self == RXDP_A::RECEIVED
            }
        }
        impl R {
            #[doc = "Bits 0:10 - Frame number"]
            #[inline(always)]
            pub fn fn_(&self) -> FN_R {
                FN_R::new((self.bits & 0x07ff) as u16)
            }
            #[doc = "Bits 11:12 - Lost SOF"]
            #[inline(always)]
            pub fn lsof(&self) -> LSOF_R {
                LSOF_R::new(((self.bits >> 11) & 0x03) as u8)
            }
            #[doc = "Bit 13 - Locked"]
            #[inline(always)]
            pub fn lck(&self) -> LCK_R {
                LCK_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Receive data - line status"]
            #[inline(always)]
            pub fn rxdm(&self) -> RXDM_R {
                RXDM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Receive data + line status"]
            #[inline(always)]
            pub fn rxdp(&self) -> RXDP_R {
                RXDP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
    }
    #[doc = "device address\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [daddr](daddr) module"]
    pub type DADDR = crate::Reg<u32, _DADDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DADDR;
    #[doc = "`read()` method returns [daddr::R](daddr::R) reader structure"]
    impl crate::Readable for DADDR {}
    #[doc = "`write(|w| ..)` method takes [daddr::W](daddr::W) writer structure"]
    impl crate::Writable for DADDR {}
    #[doc = "device address"]
    pub mod daddr {
        #[doc = "Reader of register DADDR"]
        pub type R = crate::R<u32, super::DADDR>;
        #[doc = "Writer for register DADDR"]
        pub type W = crate::W<u32, super::DADDR>;
        #[doc = "Register DADDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DADDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADD`"]
        pub type ADD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADD`"]
        pub struct ADD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        #[doc = "Enable function\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EF_A {
            #[doc = "0: USB device disabled"]
            DISABLED = 0,
            #[doc = "1: USB device enabled"]
            ENABLED = 1,
        }
        impl From<EF_A> for bool {
            #[inline(always)]
            fn from(variant: EF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EF`"]
        pub type EF_R = crate::R<bool, EF_A>;
        impl EF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EF_A {
                match self.bits {
                    false => EF_A::DISABLED,
                    true => EF_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == EF_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == EF_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `EF`"]
        pub struct EF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "USB device disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(EF_A::DISABLED)
            }
            #[doc = "USB device enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(EF_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - Device address"]
            #[inline(always)]
            pub fn add(&self) -> ADD_R {
                ADD_R::new((self.bits & 0x7f) as u8)
            }
            #[doc = "Bit 7 - Enable function"]
            #[inline(always)]
            pub fn ef(&self) -> EF_R {
                EF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - Device address"]
            #[inline(always)]
            pub fn add(&mut self) -> ADD_W {
                ADD_W { w: self }
            }
            #[doc = "Bit 7 - Enable function"]
            #[inline(always)]
            pub fn ef(&mut self) -> EF_W {
                EF_W { w: self }
            }
        }
    }
    #[doc = "Buffer table address\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [btable](btable) module"]
    pub type BTABLE = crate::Reg<u32, _BTABLE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BTABLE;
    #[doc = "`read()` method returns [btable::R](btable::R) reader structure"]
    impl crate::Readable for BTABLE {}
    #[doc = "`write(|w| ..)` method takes [btable::W](btable::W) writer structure"]
    impl crate::Writable for BTABLE {}
    #[doc = "Buffer table address"]
    pub mod btable {
        #[doc = "Reader of register BTABLE"]
        pub type R = crate::R<u32, super::BTABLE>;
        #[doc = "Writer for register BTABLE"]
        pub type W = crate::W<u32, super::BTABLE>;
        #[doc = "Register BTABLE `reset()`'s with value 0"]
        impl crate::ResetValue for super::BTABLE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BTABLE`"]
        pub type BTABLE_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `BTABLE`"]
        pub struct BTABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BTABLE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1fff << 3)) | (((value as u32) & 0x1fff) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 3:15 - Buffer table"]
            #[inline(always)]
            pub fn btable(&self) -> BTABLE_R {
                BTABLE_R::new(((self.bits >> 3) & 0x1fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 3:15 - Buffer table"]
            #[inline(always)]
            pub fn btable(&mut self) -> BTABLE_W {
                BTABLE_W { w: self }
            }
        }
    }
    #[doc = "LPM control and status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lpmcsr](lpmcsr) module"]
    pub type LPMCSR = crate::Reg<u32, _LPMCSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LPMCSR;
    #[doc = "`read()` method returns [lpmcsr::R](lpmcsr::R) reader structure"]
    impl crate::Readable for LPMCSR {}
    #[doc = "`write(|w| ..)` method takes [lpmcsr::W](lpmcsr::W) writer structure"]
    impl crate::Writable for LPMCSR {}
    #[doc = "LPM control and status register"]
    pub mod lpmcsr {
        #[doc = "Reader of register LPMCSR"]
        pub type R = crate::R<u32, super::LPMCSR>;
        #[doc = "Writer for register LPMCSR"]
        pub type W = crate::W<u32, super::LPMCSR>;
        #[doc = "Register LPMCSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::LPMCSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "LPM support enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LPMEN_A {
            #[doc = "0: enable the LPM support within the USB device"]
            DISABLED = 0,
            #[doc = "1: no LPM transactions are handled"]
            ENABLED = 1,
        }
        impl From<LPMEN_A> for bool {
            #[inline(always)]
            fn from(variant: LPMEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LPMEN`"]
        pub type LPMEN_R = crate::R<bool, LPMEN_A>;
        impl LPMEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LPMEN_A {
                match self.bits {
                    false => LPMEN_A::DISABLED,
                    true => LPMEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == LPMEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == LPMEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `LPMEN`"]
        pub struct LPMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPMEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LPMEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "enable the LPM support within the USB device"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(LPMEN_A::DISABLED)
            }
            #[doc = "no LPM transactions are handled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(LPMEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "LPM Token acknowledge enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LPMACK_A {
            #[doc = "0: the valid LPM Token will be NYET"]
            NYET = 0,
            #[doc = "1: the valid LPM Token will be ACK"]
            ACK = 1,
        }
        impl From<LPMACK_A> for bool {
            #[inline(always)]
            fn from(variant: LPMACK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LPMACK`"]
        pub type LPMACK_R = crate::R<bool, LPMACK_A>;
        impl LPMACK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LPMACK_A {
                match self.bits {
                    false => LPMACK_A::NYET,
                    true => LPMACK_A::ACK,
                }
            }
            #[doc = "Checks if the value of the field is `NYET`"]
            #[inline(always)]
            pub fn is_nyet(&self) -> bool {
                *self == LPMACK_A::NYET
            }
            #[doc = "Checks if the value of the field is `ACK`"]
            #[inline(always)]
            pub fn is_ack(&self) -> bool {
                *self == LPMACK_A::ACK
            }
        }
        #[doc = "Write proxy for field `LPMACK`"]
        pub struct LPMACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPMACK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LPMACK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "the valid LPM Token will be NYET"]
            #[inline(always)]
            pub fn nyet(self) -> &'a mut W {
                self.variant(LPMACK_A::NYET)
            }
            #[doc = "the valid LPM Token will be ACK"]
            #[inline(always)]
            pub fn ack(self) -> &'a mut W {
                self.variant(LPMACK_A::ACK)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `REMWAKE`"]
        pub type REMWAKE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BESL`"]
        pub type BESL_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bit 0 - LPM support enable"]
            #[inline(always)]
            pub fn lpmen(&self) -> LPMEN_R {
                LPMEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - LPM Token acknowledge enable"]
            #[inline(always)]
            pub fn lpmack(&self) -> LPMACK_R {
                LPMACK_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - bRemoteWake value"]
            #[inline(always)]
            pub fn remwake(&self) -> REMWAKE_R {
                REMWAKE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 4:7 - BESL value"]
            #[inline(always)]
            pub fn besl(&self) -> BESL_R {
                BESL_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - LPM support enable"]
            #[inline(always)]
            pub fn lpmen(&mut self) -> LPMEN_W {
                LPMEN_W { w: self }
            }
            #[doc = "Bit 1 - LPM Token acknowledge enable"]
            #[inline(always)]
            pub fn lpmack(&mut self) -> LPMACK_W {
                LPMACK_W { w: self }
            }
        }
    }
    #[doc = "Battery charging detector\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bcdr](bcdr) module"]
    pub type BCDR = crate::Reg<u32, _BCDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BCDR;
    #[doc = "`read()` method returns [bcdr::R](bcdr::R) reader structure"]
    impl crate::Readable for BCDR {}
    #[doc = "`write(|w| ..)` method takes [bcdr::W](bcdr::W) writer structure"]
    impl crate::Writable for BCDR {}
    #[doc = "Battery charging detector"]
    pub mod bcdr {
        #[doc = "Reader of register BCDR"]
        pub type R = crate::R<u32, super::BCDR>;
        #[doc = "Writer for register BCDR"]
        pub type W = crate::W<u32, super::BCDR>;
        #[doc = "Register BCDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BCDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Battery charging detector (BCD) enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BCDEN_A {
            #[doc = "0: disable the BCD support"]
            DISABLED = 0,
            #[doc = "1: enable the BCD support within the USB device"]
            ENABLED = 1,
        }
        impl From<BCDEN_A> for bool {
            #[inline(always)]
            fn from(variant: BCDEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BCDEN`"]
        pub type BCDEN_R = crate::R<bool, BCDEN_A>;
        impl BCDEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BCDEN_A {
                match self.bits {
                    false => BCDEN_A::DISABLED,
                    true => BCDEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == BCDEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == BCDEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `BCDEN`"]
        pub struct BCDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BCDEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BCDEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "disable the BCD support"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(BCDEN_A::DISABLED)
            }
            #[doc = "enable the BCD support within the USB device"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(BCDEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Data contact detection (DCD) mode enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DCDEN_A {
            #[doc = "0: Data contact detection (DCD) mode disabled"]
            DISABLED = 0,
            #[doc = "1: Data contact detection (DCD) mode enabled"]
            ENABLED = 1,
        }
        impl From<DCDEN_A> for bool {
            #[inline(always)]
            fn from(variant: DCDEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DCDEN`"]
        pub type DCDEN_R = crate::R<bool, DCDEN_A>;
        impl DCDEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DCDEN_A {
                match self.bits {
                    false => DCDEN_A::DISABLED,
                    true => DCDEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == DCDEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == DCDEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `DCDEN`"]
        pub struct DCDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCDEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DCDEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Data contact detection (DCD) mode disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DCDEN_A::DISABLED)
            }
            #[doc = "Data contact detection (DCD) mode enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DCDEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Primary detection (PD) mode enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDEN_A {
            #[doc = "0: Primary detection (PD) mode disabled"]
            DISABLED = 0,
            #[doc = "1: Primary detection (PD) mode enabled"]
            ENABLED = 1,
        }
        impl From<PDEN_A> for bool {
            #[inline(always)]
            fn from(variant: PDEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDEN`"]
        pub type PDEN_R = crate::R<bool, PDEN_A>;
        impl PDEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDEN_A {
                match self.bits {
                    false => PDEN_A::DISABLED,
                    true => PDEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == PDEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == PDEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `PDEN`"]
        pub struct PDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Primary detection (PD) mode disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(PDEN_A::DISABLED)
            }
            #[doc = "Primary detection (PD) mode enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(PDEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Secondary detection (SD) mode enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SDEN_A {
            #[doc = "0: Secondary detection (SD) mode disabled"]
            DISABLED = 0,
            #[doc = "1: Secondary detection (SD) mode enabled"]
            ENABLED = 1,
        }
        impl From<SDEN_A> for bool {
            #[inline(always)]
            fn from(variant: SDEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SDEN`"]
        pub type SDEN_R = crate::R<bool, SDEN_A>;
        impl SDEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SDEN_A {
                match self.bits {
                    false => SDEN_A::DISABLED,
                    true => SDEN_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == SDEN_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == SDEN_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `SDEN`"]
        pub struct SDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SDEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Secondary detection (SD) mode disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(SDEN_A::DISABLED)
            }
            #[doc = "Secondary detection (SD) mode enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(SDEN_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Data contact detection (DCD) status\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DCDET_A {
            #[doc = "0: data lines contact not detected"]
            NOTDETECTED = 0,
            #[doc = "1: data lines contact detected"]
            DETECTED = 1,
        }
        impl From<DCDET_A> for bool {
            #[inline(always)]
            fn from(variant: DCDET_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DCDET`"]
        pub type DCDET_R = crate::R<bool, DCDET_A>;
        impl DCDET_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DCDET_A {
                match self.bits {
                    false => DCDET_A::NOTDETECTED,
                    true => DCDET_A::DETECTED,
                }
            }
            #[doc = "Checks if the value of the field is `NOTDETECTED`"]
            #[inline(always)]
            pub fn is_not_detected(&self) -> bool {
                *self == DCDET_A::NOTDETECTED
            }
            #[doc = "Checks if the value of the field is `DETECTED`"]
            #[inline(always)]
            pub fn is_detected(&self) -> bool {
                *self == DCDET_A::DETECTED
            }
        }
        #[doc = "Primary detection (PD) status\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDET_A {
            #[doc = "0: no BCD support detected"]
            NOBCD = 0,
            #[doc = "1: BCD support detected"]
            BCD = 1,
        }
        impl From<PDET_A> for bool {
            #[inline(always)]
            fn from(variant: PDET_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDET`"]
        pub type PDET_R = crate::R<bool, PDET_A>;
        impl PDET_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDET_A {
                match self.bits {
                    false => PDET_A::NOBCD,
                    true => PDET_A::BCD,
                }
            }
            #[doc = "Checks if the value of the field is `NOBCD`"]
            #[inline(always)]
            pub fn is_no_bcd(&self) -> bool {
                *self == PDET_A::NOBCD
            }
            #[doc = "Checks if the value of the field is `BCD`"]
            #[inline(always)]
            pub fn is_bcd(&self) -> bool {
                *self == PDET_A::BCD
            }
        }
        #[doc = "Secondary detection (SD) status\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SDET_A {
            #[doc = "0: CDP detected"]
            CDP = 0,
            #[doc = "1: DCP detected"]
            DCP = 1,
        }
        impl From<SDET_A> for bool {
            #[inline(always)]
            fn from(variant: SDET_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SDET`"]
        pub type SDET_R = crate::R<bool, SDET_A>;
        impl SDET_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SDET_A {
                match self.bits {
                    false => SDET_A::CDP,
                    true => SDET_A::DCP,
                }
            }
            #[doc = "Checks if the value of the field is `CDP`"]
            #[inline(always)]
            pub fn is_cdp(&self) -> bool {
                *self == SDET_A::CDP
            }
            #[doc = "Checks if the value of the field is `DCP`"]
            #[inline(always)]
            pub fn is_dcp(&self) -> bool {
                *self == SDET_A::DCP
            }
        }
        #[doc = "DM pull-up detection status\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PS2DET_A {
            #[doc = "0: Normal port detected"]
            NORMAL = 0,
            #[doc = "1: PS2 port or proprietary charger detected"]
            PS2 = 1,
        }
        impl From<PS2DET_A> for bool {
            #[inline(always)]
            fn from(variant: PS2DET_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PS2DET`"]
        pub type PS2DET_R = crate::R<bool, PS2DET_A>;
        impl PS2DET_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PS2DET_A {
                match self.bits {
                    false => PS2DET_A::NORMAL,
                    true => PS2DET_A::PS2,
                }
            }
            #[doc = "Checks if the value of the field is `NORMAL`"]
            #[inline(always)]
            pub fn is_normal(&self) -> bool {
                *self == PS2DET_A::NORMAL
            }
            #[doc = "Checks if the value of the field is `PS2`"]
            #[inline(always)]
            pub fn is_ps2(&self) -> bool {
                *self == PS2DET_A::PS2
            }
        }
        #[doc = "DP pull-up control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DPPU_A {
            #[doc = "0: signalize disconnect to the host when needed by the user software"]
            DISABLED = 0,
            #[doc = "1: enable the embedded pull-up on the DP line"]
            ENABLED = 1,
        }
        impl From<DPPU_A> for bool {
            #[inline(always)]
            fn from(variant: DPPU_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DPPU`"]
        pub type DPPU_R = crate::R<bool, DPPU_A>;
        impl DPPU_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DPPU_A {
                match self.bits {
                    false => DPPU_A::DISABLED,
                    true => DPPU_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == DPPU_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == DPPU_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `DPPU`"]
        pub struct DPPU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DPPU_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DPPU_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "signalize disconnect to the host when needed by the user software"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(DPPU_A::DISABLED)
            }
            #[doc = "enable the embedded pull-up on the DP line"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(DPPU_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Battery charging detector (BCD) enable"]
            #[inline(always)]
            pub fn bcden(&self) -> BCDEN_R {
                BCDEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Data contact detection (DCD) mode enable"]
            #[inline(always)]
            pub fn dcden(&self) -> DCDEN_R {
                DCDEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Primary detection (PD) mode enable"]
            #[inline(always)]
            pub fn pden(&self) -> PDEN_R {
                PDEN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Secondary detection (SD) mode enable"]
            #[inline(always)]
            pub fn sden(&self) -> SDEN_R {
                SDEN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Data contact detection (DCD) status"]
            #[inline(always)]
            pub fn dcdet(&self) -> DCDET_R {
                DCDET_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Primary detection (PD) status"]
            #[inline(always)]
            pub fn pdet(&self) -> PDET_R {
                PDET_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Secondary detection (SD) status"]
            #[inline(always)]
            pub fn sdet(&self) -> SDET_R {
                SDET_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - DM pull-up detection status"]
            #[inline(always)]
            pub fn ps2det(&self) -> PS2DET_R {
                PS2DET_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 15 - DP pull-up control"]
            #[inline(always)]
            pub fn dppu(&self) -> DPPU_R {
                DPPU_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Battery charging detector (BCD) enable"]
            #[inline(always)]
            pub fn bcden(&mut self) -> BCDEN_W {
                BCDEN_W { w: self }
            }
            #[doc = "Bit 1 - Data contact detection (DCD) mode enable"]
            #[inline(always)]
            pub fn dcden(&mut self) -> DCDEN_W {
                DCDEN_W { w: self }
            }
            #[doc = "Bit 2 - Primary detection (PD) mode enable"]
            #[inline(always)]
            pub fn pden(&mut self) -> PDEN_W {
                PDEN_W { w: self }
            }
            #[doc = "Bit 3 - Secondary detection (SD) mode enable"]
            #[inline(always)]
            pub fn sden(&mut self) -> SDEN_W {
                SDEN_W { w: self }
            }
            #[doc = "Bit 15 - DP pull-up control"]
            #[inline(always)]
            pub fn dppu(&mut self) -> DPPU_W {
                DPPU_W { w: self }
            }
        }
    }
}
#[doc = "SysTick timer"]
pub struct STK {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for STK {}
impl STK {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const stk::RegisterBlock {
        0xe000_e010 as *const _
    }
}
impl Deref for STK {
    type Target = stk::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*STK::ptr() }
    }
}
#[doc = "SysTick timer"]
pub mod stk {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - SysTick control and status register"]
        pub csr: CSR,
        #[doc = "0x04 - SysTick reload value register"]
        pub rvr: RVR,
        #[doc = "0x08 - SysTick current value register"]
        pub cvr: CVR,
        #[doc = "0x0c - SysTick calibration value register"]
        pub calib: CALIB,
    }
    #[doc = "SysTick control and status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr](csr) module"]
    pub type CSR = crate::Reg<u32, _CSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CSR;
    #[doc = "`read()` method returns [csr::R](csr::R) reader structure"]
    impl crate::Readable for CSR {}
    #[doc = "`write(|w| ..)` method takes [csr::W](csr::W) writer structure"]
    impl crate::Writable for CSR {}
    #[doc = "SysTick control and status register"]
    pub mod csr {
        #[doc = "Reader of register CSR"]
        pub type R = crate::R<u32, super::CSR>;
        #[doc = "Writer for register CSR"]
        pub type W = crate::W<u32, super::CSR>;
        #[doc = "Register CSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ENABLE`"]
        pub type ENABLE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ENABLE`"]
        pub struct ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `TICKINT`"]
        pub type TICKINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TICKINT`"]
        pub struct TICKINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TICKINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CLKSOURCE`"]
        pub type CLKSOURCE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLKSOURCE`"]
        pub struct CLKSOURCE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKSOURCE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `COUNTFLAG`"]
        pub type COUNTFLAG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COUNTFLAG`"]
        pub struct COUNTFLAG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COUNTFLAG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn enable(&self) -> ENABLE_R {
                ENABLE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - SysTick exception request enable"]
            #[inline(always)]
            pub fn tickint(&self) -> TICKINT_R {
                TICKINT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Clock source selection"]
            #[inline(always)]
            pub fn clksource(&self) -> CLKSOURCE_R {
                CLKSOURCE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 16 - COUNTFLAG"]
            #[inline(always)]
            pub fn countflag(&self) -> COUNTFLAG_R {
                COUNTFLAG_R::new(((self.bits >> 16) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn enable(&mut self) -> ENABLE_W {
                ENABLE_W { w: self }
            }
            #[doc = "Bit 1 - SysTick exception request enable"]
            #[inline(always)]
            pub fn tickint(&mut self) -> TICKINT_W {
                TICKINT_W { w: self }
            }
            #[doc = "Bit 2 - Clock source selection"]
            #[inline(always)]
            pub fn clksource(&mut self) -> CLKSOURCE_W {
                CLKSOURCE_W { w: self }
            }
            #[doc = "Bit 16 - COUNTFLAG"]
            #[inline(always)]
            pub fn countflag(&mut self) -> COUNTFLAG_W {
                COUNTFLAG_W { w: self }
            }
        }
    }
    #[doc = "SysTick reload value register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rvr](rvr) module"]
    pub type RVR = crate::Reg<u32, _RVR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RVR;
    #[doc = "`read()` method returns [rvr::R](rvr::R) reader structure"]
    impl crate::Readable for RVR {}
    #[doc = "`write(|w| ..)` method takes [rvr::W](rvr::W) writer structure"]
    impl crate::Writable for RVR {}
    #[doc = "SysTick reload value register"]
    pub mod rvr {
        #[doc = "Reader of register RVR"]
        pub type R = crate::R<u32, super::RVR>;
        #[doc = "Writer for register RVR"]
        pub type W = crate::W<u32, super::RVR>;
        #[doc = "Register RVR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RVR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RELOAD`"]
        pub type RELOAD_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `RELOAD`"]
        pub struct RELOAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RELOAD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - RELOAD value"]
            #[inline(always)]
            pub fn reload(&self) -> RELOAD_R {
                RELOAD_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - RELOAD value"]
            #[inline(always)]
            pub fn reload(&mut self) -> RELOAD_W {
                RELOAD_W { w: self }
            }
        }
    }
    #[doc = "SysTick current value register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cvr](cvr) module"]
    pub type CVR = crate::Reg<u32, _CVR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CVR;
    #[doc = "`read()` method returns [cvr::R](cvr::R) reader structure"]
    impl crate::Readable for CVR {}
    #[doc = "`write(|w| ..)` method takes [cvr::W](cvr::W) writer structure"]
    impl crate::Writable for CVR {}
    #[doc = "SysTick current value register"]
    pub mod cvr {
        #[doc = "Reader of register CVR"]
        pub type R = crate::R<u32, super::CVR>;
        #[doc = "Writer for register CVR"]
        pub type W = crate::W<u32, super::CVR>;
        #[doc = "Register CVR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CVR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CURRENT`"]
        pub type CURRENT_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CURRENT`"]
        pub struct CURRENT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CURRENT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - Current counter value"]
            #[inline(always)]
            pub fn current(&self) -> CURRENT_R {
                CURRENT_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - Current counter value"]
            #[inline(always)]
            pub fn current(&mut self) -> CURRENT_W {
                CURRENT_W { w: self }
            }
        }
    }
    #[doc = "SysTick calibration value register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [calib](calib) module"]
    pub type CALIB = crate::Reg<u32, _CALIB>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CALIB;
    #[doc = "`read()` method returns [calib::R](calib::R) reader structure"]
    impl crate::Readable for CALIB {}
    #[doc = "`write(|w| ..)` method takes [calib::W](calib::W) writer structure"]
    impl crate::Writable for CALIB {}
    #[doc = "SysTick calibration value register"]
    pub mod calib {
        #[doc = "Reader of register CALIB"]
        pub type R = crate::R<u32, super::CALIB>;
        #[doc = "Writer for register CALIB"]
        pub type W = crate::W<u32, super::CALIB>;
        #[doc = "Register CALIB `reset()`'s with value 0"]
        impl crate::ResetValue for super::CALIB {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TENMS`"]
        pub type TENMS_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TENMS`"]
        pub struct TENMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TENMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        #[doc = "Reader of field `SKEW`"]
        pub type SKEW_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SKEW`"]
        pub struct SKEW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SKEW_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `NOREF`"]
        pub type NOREF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `NOREF`"]
        pub struct NOREF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NOREF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - Calibration value"]
            #[inline(always)]
            pub fn tenms(&self) -> TENMS_R {
                TENMS_R::new((self.bits & 0x00ff_ffff) as u32)
            }
            #[doc = "Bit 30 - SKEW flag: Indicates whether the TENMS value is exact"]
            #[inline(always)]
            pub fn skew(&self) -> SKEW_R {
                SKEW_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - NOREF flag. Reads as zero"]
            #[inline(always)]
            pub fn noref(&self) -> NOREF_R {
                NOREF_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - Calibration value"]
            #[inline(always)]
            pub fn tenms(&mut self) -> TENMS_W {
                TENMS_W { w: self }
            }
            #[doc = "Bit 30 - SKEW flag: Indicates whether the TENMS value is exact"]
            #[inline(always)]
            pub fn skew(&mut self) -> SKEW_W {
                SKEW_W { w: self }
            }
            #[doc = "Bit 31 - NOREF flag. Reads as zero"]
            #[inline(always)]
            pub fn noref(&mut self) -> NOREF_W {
                NOREF_W { w: self }
            }
        }
    }
}
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r"All the peripherals"]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "CRC"]
    pub CRC: CRC,
    #[doc = "GPIOF"]
    pub GPIOF: GPIOF,
    #[doc = "GPIOD"]
    pub GPIOD: GPIOD,
    #[doc = "GPIOC"]
    pub GPIOC: GPIOC,
    #[doc = "GPIOB"]
    pub GPIOB: GPIOB,
    #[doc = "GPIOA"]
    pub GPIOA: GPIOA,
    #[doc = "SPI1"]
    pub SPI1: SPI1,
    #[doc = "SPI2"]
    pub SPI2: SPI2,
    #[doc = "PWR"]
    pub PWR: PWR,
    #[doc = "I2C1"]
    pub I2C1: I2C1,
    #[doc = "I2C2"]
    pub I2C2: I2C2,
    #[doc = "IWDG"]
    pub IWDG: IWDG,
    #[doc = "WWDG"]
    pub WWDG: WWDG,
    #[doc = "TIM1"]
    pub TIM1: TIM1,
    #[doc = "TIM3"]
    pub TIM3: TIM3,
    #[doc = "TIM14"]
    pub TIM14: TIM14,
    #[doc = "TIM6"]
    pub TIM6: TIM6,
    #[doc = "TIM7"]
    pub TIM7: TIM7,
    #[doc = "EXTI"]
    pub EXTI: EXTI,
    #[doc = "DMA1"]
    pub DMA1: DMA1,
    #[doc = "RCC"]
    pub RCC: RCC,
    #[doc = "SYSCFG"]
    pub SYSCFG: SYSCFG,
    #[doc = "ADC"]
    pub ADC: ADC,
    #[doc = "USART1"]
    pub USART1: USART1,
    #[doc = "USART2"]
    pub USART2: USART2,
    #[doc = "USART3"]
    pub USART3: USART3,
    #[doc = "USART4"]
    pub USART4: USART4,
    #[doc = "USART6"]
    pub USART6: USART6,
    #[doc = "USART5"]
    pub USART5: USART5,
    #[doc = "RTC"]
    pub RTC: RTC,
    #[doc = "TIM15"]
    pub TIM15: TIM15,
    #[doc = "TIM16"]
    pub TIM16: TIM16,
    #[doc = "TIM17"]
    pub TIM17: TIM17,
    #[doc = "FLASH"]
    pub FLASH: FLASH,
    #[doc = "DBGMCU"]
    pub DBGMCU: DBGMCU,
    #[doc = "USB"]
    pub USB: USB,
    #[doc = "STK"]
    pub STK: STK,
}
impl Peripherals {
    #[doc = r"Returns all the peripherals *once*"]
    #[inline]
    pub fn take() -> Option<Self> {
        cortex_m::interrupt::free(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                None
            } else {
                Some(unsafe { Peripherals::steal() })
            }
        })
    }
    #[doc = r"Unchecked version of `Peripherals::take`"]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            CRC: CRC {
                _marker: PhantomData,
            },
            GPIOF: GPIOF {
                _marker: PhantomData,
            },
            GPIOD: GPIOD {
                _marker: PhantomData,
            },
            GPIOC: GPIOC {
                _marker: PhantomData,
            },
            GPIOB: GPIOB {
                _marker: PhantomData,
            },
            GPIOA: GPIOA {
                _marker: PhantomData,
            },
            SPI1: SPI1 {
                _marker: PhantomData,
            },
            SPI2: SPI2 {
                _marker: PhantomData,
            },
            PWR: PWR {
                _marker: PhantomData,
            },
            I2C1: I2C1 {
                _marker: PhantomData,
            },
            I2C2: I2C2 {
                _marker: PhantomData,
            },
            IWDG: IWDG {
                _marker: PhantomData,
            },
            WWDG: WWDG {
                _marker: PhantomData,
            },
            TIM1: TIM1 {
                _marker: PhantomData,
            },
            TIM3: TIM3 {
                _marker: PhantomData,
            },
            TIM14: TIM14 {
                _marker: PhantomData,
            },
            TIM6: TIM6 {
                _marker: PhantomData,
            },
            TIM7: TIM7 {
                _marker: PhantomData,
            },
            EXTI: EXTI {
                _marker: PhantomData,
            },
            DMA1: DMA1 {
                _marker: PhantomData,
            },
            RCC: RCC {
                _marker: PhantomData,
            },
            SYSCFG: SYSCFG {
                _marker: PhantomData,
            },
            ADC: ADC {
                _marker: PhantomData,
            },
            USART1: USART1 {
                _marker: PhantomData,
            },
            USART2: USART2 {
                _marker: PhantomData,
            },
            USART3: USART3 {
                _marker: PhantomData,
            },
            USART4: USART4 {
                _marker: PhantomData,
            },
            USART6: USART6 {
                _marker: PhantomData,
            },
            USART5: USART5 {
                _marker: PhantomData,
            },
            RTC: RTC {
                _marker: PhantomData,
            },
            TIM15: TIM15 {
                _marker: PhantomData,
            },
            TIM16: TIM16 {
                _marker: PhantomData,
            },
            TIM17: TIM17 {
                _marker: PhantomData,
            },
            FLASH: FLASH {
                _marker: PhantomData,
            },
            DBGMCU: DBGMCU {
                _marker: PhantomData,
            },
            USB: USB {
                _marker: PhantomData,
            },
            STK: STK {
                _marker: PhantomData,
            },
        }
    }
}
